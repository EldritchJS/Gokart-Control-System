
Nucleo-L432KC-BBW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b420  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800b5b0  0800b5b0  0001b5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bacc  0800bacc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bacc  0800bacc  0001bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bad4  0800bad4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bad4  0800bad4  0001bad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800badc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e0  0800bcbc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800bcbc  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015545  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002792  00000000  00000000  00035755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00037ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  000391f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cbc  00000000  00000000  0003a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014532  00000000  00000000  0005e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfbd5  00000000  00000000  000725ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001521c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006790  00000000  00000000  00152214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b598 	.word	0x0800b598

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b598 	.word	0x0800b598

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_write>:

int powerStop = 0;
int powerStopCount = 0;


int _write(int file, char *ptr, int len){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	b29a      	uxth	r2, r3
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <_write+0x28>)
 8001010:	f005 f996 	bl	8006340 <HAL_UART_Transmit>
	return len;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000320 	.word	0x20000320

08001024 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800102e:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001030:	2100      	movs	r1, #0
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f002 f955 	bl	80032e2 <HAL_CAN_GetRxMessage>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 800103e:	f000 fb77 	bl	8001730 <Error_Handler>
  }

  if ((RxHeader.StdId == 0x104))
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800104a:	d104      	bne.n	8001056 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
  {
	  brake_command = RxData[1] - 1;
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001054:	6013      	str	r3, [r2, #0]
  }
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200003d8 	.word	0x200003d8
 8001064:	200003bc 	.word	0x200003bc
 8001068:	200003e4 	.word	0x200003e4

0800106c <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt every 20ms (frequency = 50Hz)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
//	printf("timer interrupt \r\n");
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fe39 	bl	8001cfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f8ee 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 faf0 	bl	8001670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001090:	f000 fabe 	bl	8001610 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001094:	f000 f9a2 	bl	80013dc <MX_CAN1_Init>
  MX_TIM6_Init();
 8001098:	f000 fa84 	bl	80015a4 <MX_TIM6_Init>
  MX_TIM1_Init();
 800109c:	f000 f9f2 	bl	8001484 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010a0:	f000 f938 	bl	8001314 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80010a4:	4862      	ldr	r0, [pc, #392]	; (8001230 <main+0x1b0>)
 80010a6:	f002 f8d8 	bl	800325a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80010aa:	2102      	movs	r1, #2
 80010ac:	4860      	ldr	r0, [pc, #384]	; (8001230 <main+0x1b0>)
 80010ae:	f002 fa2a 	bl	8003506 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1;
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <main+0x1b4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80010b8:	4b5e      	ldr	r3, [pc, #376]	; (8001234 <main+0x1b4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <main+0x1b4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80010c4:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <main+0x1b4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;
 80010ca:	4b5a      	ldr	r3, [pc, #360]	; (8001234 <main+0x1b4>)
 80010cc:	f240 1203 	movw	r2, #259	; 0x103
 80010d0:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 80010d2:	4b58      	ldr	r3, [pc, #352]	; (8001234 <main+0x1b4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	751a      	strb	r2, [r3, #20]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	4857      	ldr	r0, [pc, #348]	; (8001238 <main+0x1b8>)
 80010dc:	f004 f9a4 	bl	8005428 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 80010e0:	4856      	ldr	r0, [pc, #344]	; (800123c <main+0x1bc>)
 80010e2:	f004 f8f5 	bl	80052d0 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 80010e6:	4856      	ldr	r0, [pc, #344]	; (8001240 <main+0x1c0>)
 80010e8:	f001 f98c 	bl	8002404 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM1->CCR1 = 400;
 80010ec:	4b55      	ldr	r3, [pc, #340]	; (8001244 <main+0x1c4>)
 80010ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010f4:	2100      	movs	r1, #0
 80010f6:	4850      	ldr	r0, [pc, #320]	; (8001238 <main+0x1b8>)
 80010f8:	f004 f996 	bl	8005428 <HAL_TIM_PWM_Start>

	  HAL_ADC_Start(&hadc1);
 80010fc:	4850      	ldr	r0, [pc, #320]	; (8001240 <main+0x1c0>)
 80010fe:	f001 f981 	bl	8002404 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001102:	f04f 31ff 	mov.w	r1, #4294967295
 8001106:	484e      	ldr	r0, [pc, #312]	; (8001240 <main+0x1c0>)
 8001108:	f001 f9df 	bl	80024ca <HAL_ADC_PollForConversion>
	  brake = HAL_ADC_GetValue(&hadc1);
 800110c:	484c      	ldr	r0, [pc, #304]	; (8001240 <main+0x1c0>)
 800110e:	f001 fa6b 	bl	80025e8 <HAL_ADC_GetValue>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <main+0x1c8>)
 8001118:	601a      	str	r2, [r3, #0]

	  printf("brake value %d \r\n", brake);
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <main+0x1c8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	484a      	ldr	r0, [pc, #296]	; (800124c <main+0x1cc>)
 8001122:	f006 fc29 	bl	8007978 <iprintf>
	  printf("brake command %d \r\n", brake_command);
 8001126:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <main+0x1d0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	4849      	ldr	r0, [pc, #292]	; (8001254 <main+0x1d4>)
 800112e:	f006 fc23 	bl	8007978 <iprintf>

	  if (brake_command == -1){
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <main+0x1d0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113a:	d133      	bne.n	80011a4 <main+0x124>
		  if (powerOff){
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <main+0x1d8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00c      	beq.n	800115e <main+0xde>
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_1_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2140      	movs	r1, #64	; 0x40
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f002 feac 	bl	8003ea8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_2_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f002 fea6 	bl	8003ea8 <HAL_GPIO_WritePin>
 800115c:	e00b      	b.n	8001176 <main+0xf6>
		  } else{
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_1_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f002 fe9f 	bl	8003ea8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_2_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f002 fe99 	bl	8003ea8 <HAL_GPIO_WritePin>
		  }

		  if (brake < 150){
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <main+0x1c8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b95      	cmp	r3, #149	; 0x95
 800117c:	dc0b      	bgt.n	8001196 <main+0x116>
			  powerOffCount += 1;
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <main+0x1dc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a35      	ldr	r2, [pc, #212]	; (800125c <main+0x1dc>)
 8001186:	6013      	str	r3, [r2, #0]

			  if (powerOffCount > 10){
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <main+0x1dc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b0a      	cmp	r3, #10
 800118e:	dd02      	ble.n	8001196 <main+0x116>
				  powerOff = 1;
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <main+0x1d8>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
			  }
		  }

		  powerStop = 0;
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <main+0x1e0>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		  powerStopCount = 0;
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <main+0x1e4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e7a3      	b.n	80010ec <main+0x6c>

	  } else if (brake_command == 0){
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <main+0x1d0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10c      	bne.n	80011c6 <main+0x146>
		  HAL_GPIO_WritePin(GPIOA, LA_Direction_1_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f002 fe78 	bl	8003ea8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LA_Direction_2_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f002 fe72 	bl	8003ea8 <HAL_GPIO_WritePin>
 80011c4:	e792      	b.n	80010ec <main+0x6c>
	  }
	  else{
		  if (powerStop){
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <main+0x1e0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00c      	beq.n	80011e8 <main+0x168>
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_1_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f002 fe67 	bl	8003ea8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f002 fe61 	bl	8003ea8 <HAL_GPIO_WritePin>
 80011e6:	e00b      	b.n	8001200 <main+0x180>
		  } else{
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_1_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f002 fe5a 	bl	8003ea8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, LA_Direction_2_Pin, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f002 fe54 	bl	8003ea8 <HAL_GPIO_WritePin>
		  }

		  if (brake > 600){
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <main+0x1c8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001208:	dd0b      	ble.n	8001222 <main+0x1a2>
			  powerStopCount += 1;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <main+0x1e4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <main+0x1e4>)
 8001212:	6013      	str	r3, [r2, #0]

			  if (powerStopCount > 10){
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <main+0x1e4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b0a      	cmp	r3, #10
 800121a:	dd02      	ble.n	8001222 <main+0x1a2>
				  powerStop = 1;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <main+0x1e0>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
			  }
		  }

		  powerOff = 0;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <main+0x1d8>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
		  powerOffCount = 0;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <main+0x1dc>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	  TIM1->CCR1 = 400;
 800122e:	e75d      	b.n	80010ec <main+0x6c>
 8001230:	20000260 	.word	0x20000260
 8001234:	200003a4 	.word	0x200003a4
 8001238:	20000288 	.word	0x20000288
 800123c:	200002d4 	.word	0x200002d4
 8001240:	200001fc 	.word	0x200001fc
 8001244:	40012c00 	.word	0x40012c00
 8001248:	200003e0 	.word	0x200003e0
 800124c:	0800b5b0 	.word	0x0800b5b0
 8001250:	200003e4 	.word	0x200003e4
 8001254:	0800b5c4 	.word	0x0800b5c4
 8001258:	200003e8 	.word	0x200003e8
 800125c:	200003ec 	.word	0x200003ec
 8001260:	200003f0 	.word	0x200003f0
 8001264:	200003f4 	.word	0x200003f4

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b096      	sub	sp, #88	; 0x58
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	2244      	movs	r2, #68	; 0x44
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f005 fcfc 	bl	8006c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800128a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800128e:	f002 fe41 	bl	8003f14 <HAL_PWREx_ControlVoltageScaling>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001298:	f000 fa4a 	bl	8001730 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800129c:	f002 fe1c 	bl	8003ed8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <SystemClock_Config+0xa8>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <SystemClock_Config+0xa8>)
 80012a8:	f023 0318 	bic.w	r3, r3, #24
 80012ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012b0:	2314      	movs	r3, #20
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fe77 	bl	8003fc0 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012d8:	f000 fa2a 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fa77 	bl	80047e8 <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001300:	f000 fa16 	bl	8001730 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001304:	f003 fe8a 	bl	800501c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001308:	bf00      	nop
 800130a:	3758      	adds	r7, #88	; 0x58
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_ADC1_Init+0xbc>)
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <MX_ADC1_Init+0xc0>)
 800132e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_ADC1_Init+0xbc>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_ADC1_Init+0xbc>)
 800134a:	2204      	movs	r2, #4
 800134c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001356:	2200      	movs	r2, #0
 8001358:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_ADC1_Init+0xbc>)
 800135c:	2201      	movs	r2, #1
 800135e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_ADC1_Init+0xbc>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_ADC1_Init+0xbc>)
 800137e:	2200      	movs	r2, #0
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_ADC1_Init+0xbc>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_ADC1_Init+0xbc>)
 800138c:	f000 fef2 	bl	8002174 <HAL_ADC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001396:	f000 f9cb 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_ADC1_Init+0xc4>)
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139e:	2306      	movs	r3, #6
 80013a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a6:	237f      	movs	r3, #127	; 0x7f
 80013a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013aa:	2304      	movs	r3, #4
 80013ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <MX_ADC1_Init+0xbc>)
 80013b8:	f001 f924 	bl	8002604 <HAL_ADC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013c2:	f000 f9b5 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001fc 	.word	0x200001fc
 80013d4:	50040000 	.word	0x50040000
 80013d8:	2a000400 	.word	0x2a000400

080013dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <MX_CAN1_Init+0xa0>)
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <MX_CAN1_Init+0xa4>)
 80013e6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <MX_CAN1_Init+0xa0>)
 80013ea:	2210      	movs	r2, #16
 80013ec:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_CAN1_Init+0xa0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <MX_CAN1_Init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_CAN1_Init+0xa0>)
 80013fc:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8001400:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_CAN1_Init+0xa0>)
 8001404:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001408:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_CAN1_Init+0xa0>)
 800140c:	2200      	movs	r2, #0
 800140e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_CAN1_Init+0xa0>)
 8001412:	2201      	movs	r2, #1
 8001414:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_CAN1_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_CAN1_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_CAN1_Init+0xa0>)
 8001424:	2200      	movs	r2, #0
 8001426:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_CAN1_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_CAN1_Init+0xa0>)
 8001430:	f001 fd4e 	bl	8002ed0 <HAL_CAN_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800143a:	f000 f979 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800143e:	2301      	movs	r3, #1
 8001440:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001442:	230a      	movs	r3, #10
 8001444:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x104<<5;
 800144a:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800144e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x104<<5;
 8001454:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001458:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001466:	2314      	movs	r3, #20
 8001468:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_CAN1_Init+0xa0>)
 8001470:	f001 fe29 	bl	80030c6 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000260 	.word	0x20000260
 8001480:	40006400 	.word	0x40006400

08001484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b096      	sub	sp, #88	; 0x58
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	222c      	movs	r2, #44	; 0x2c
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fbdf 	bl	8006c74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b6:	4b39      	ldr	r3, [pc, #228]	; (800159c <MX_TIM1_Init+0x118>)
 80014b8:	4a39      	ldr	r2, [pc, #228]	; (80015a0 <MX_TIM1_Init+0x11c>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <MX_TIM1_Init+0x118>)
 80014be:	229f      	movs	r2, #159	; 0x9f
 80014c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <MX_TIM1_Init+0x118>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <MX_TIM1_Init+0x118>)
 80014ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <MX_TIM1_Init+0x118>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <MX_TIM1_Init+0x118>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <MX_TIM1_Init+0x118>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014e2:	482e      	ldr	r0, [pc, #184]	; (800159c <MX_TIM1_Init+0x118>)
 80014e4:	f003 ff48 	bl	8005378 <HAL_TIM_PWM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f000 f91f 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001502:	4619      	mov	r1, r3
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <MX_TIM1_Init+0x118>)
 8001506:	f004 fdd1 	bl	80060ac <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001510:	f000 f90e 	bl	8001730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001514:	2360      	movs	r3, #96	; 0x60
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001530:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	4818      	ldr	r0, [pc, #96]	; (800159c <MX_TIM1_Init+0x118>)
 800153a:	f004 f973 	bl	8005824 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001544:	f000 f8f4 	bl	8001730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800156a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <MX_TIM1_Init+0x118>)
 800157e:	f004 fdfb 	bl	8006178 <HAL_TIMEx_ConfigBreakDeadTime>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001588:	f000 f8d2 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <MX_TIM1_Init+0x118>)
 800158e:	f000 f9f7 	bl	8001980 <HAL_TIM_MspPostInit>

}
 8001592:	bf00      	nop
 8001594:	3758      	adds	r7, #88	; 0x58
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000288 	.word	0x20000288
 80015a0:	40012c00 	.word	0x40012c00

080015a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_TIM6_Init+0x64>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <MX_TIM6_Init+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_TIM6_Init+0x64>)
 80015bc:	220f      	movs	r2, #15
 80015be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_TIM6_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_TIM6_Init+0x64>)
 80015c8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_TIM6_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_TIM6_Init+0x64>)
 80015d6:	f003 fe23 	bl	8005220 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015e0:	f000 f8a6 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_TIM6_Init+0x64>)
 80015f2:	f004 fd5b 	bl	80060ac <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 f898 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200002d4 	.word	0x200002d4
 800160c:	40001000 	.word	0x40001000

08001610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001616:	4a15      	ldr	r2, [pc, #84]	; (800166c <MX_USART2_UART_Init+0x5c>)
 8001618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001654:	f004 fe26 	bl	80062a4 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800165e:	f000 f867 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000320 	.word	0x20000320
 800166c:	40004400 	.word	0x40004400

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_GPIO_Init+0xb8>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a27      	ldr	r2, [pc, #156]	; (8001728 <MX_GPIO_Init+0xb8>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <MX_GPIO_Init+0xb8>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <MX_GPIO_Init+0xb8>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a21      	ldr	r2, [pc, #132]	; (8001728 <MX_GPIO_Init+0xb8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_GPIO_Init+0xb8>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_GPIO_Init+0xb8>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <MX_GPIO_Init+0xb8>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_GPIO_Init+0xb8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LA_Direction_1_Pin|LA_Direction_2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	21c0      	movs	r1, #192	; 0xc0
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f002 fbe7 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2108      	movs	r1, #8
 80016de:	4813      	ldr	r0, [pc, #76]	; (800172c <MX_GPIO_Init+0xbc>)
 80016e0:	f002 fbe2 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LA_Direction_1_Pin LA_Direction_2_Pin */
  GPIO_InitStruct.Pin = LA_Direction_1_Pin|LA_Direction_2_Pin;
 80016e4:	23c0      	movs	r3, #192	; 0xc0
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fe:	f002 fa69 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001702:	2308      	movs	r3, #8
 8001704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4619      	mov	r1, r3
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_GPIO_Init+0xbc>)
 800171a:	f002 fa5b 	bl	8003bd4 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x44>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_MspInit+0x44>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x44>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x44>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09e      	sub	sp, #120	; 0x78
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2254      	movs	r2, #84	; 0x54
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 fa65 	bl	8006c74 <memset>
  if(hadc->Instance==ADC1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a25      	ldr	r2, [pc, #148]	; (8001844 <HAL_ADC_MspInit+0xc0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d143      	bne.n	800183c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017be:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017c0:	2301      	movs	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80017c8:	2308      	movs	r3, #8
 80017ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017cc:	2307      	movs	r3, #7
 80017ce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fa24 	bl	8004c30 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80017ee:	f7ff ff9f 	bl	8001730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_ADC_MspInit+0xc4>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_ADC_MspInit+0xc4>)
 80017f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_ADC_MspInit+0xc4>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_ADC_MspInit+0xc4>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_ADC_MspInit+0xc4>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_ADC_MspInit+0xc4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001822:	2320      	movs	r3, #32
 8001824:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001826:	230b      	movs	r3, #11
 8001828:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001838:	f002 f9cc 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	3778      	adds	r7, #120	; 0x78
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	50040000 	.word	0x50040000
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <HAL_CAN_MspInit+0xa0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d139      	bne.n	80018e2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_CAN_MspInit+0xa4>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_CAN_MspInit+0xa4>)
 8001874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_CAN_MspInit+0xa4>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_CAN_MspInit+0xa4>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <HAL_CAN_MspInit+0xa4>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_CAN_MspInit+0xa4>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800189e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018b0:	2309      	movs	r3, #9
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f002 f989 	bl	8003bd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2014      	movs	r0, #20
 80018c8:	f002 f94d 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018cc:	2014      	movs	r0, #20
 80018ce:	f002 f966 	bl	8003b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2015      	movs	r0, #21
 80018d8:	f002 f945 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80018dc:	2015      	movs	r0, #21
 80018de:	f002 f95e 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40006400 	.word	0x40006400
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_TIM_PWM_MspInit+0x38>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10b      	bne.n	800191e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_TIM_PWM_MspInit+0x3c>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_TIM_PWM_MspInit+0x3c>)
 800190c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_TIM_PWM_MspInit+0x3c>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HAL_TIM_Base_MspInit+0x44>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d113      	bne.n	800196e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_TIM_Base_MspInit+0x48>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	4a0c      	ldr	r2, [pc, #48]	; (800197c <HAL_TIM_Base_MspInit+0x48>)
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	6593      	str	r3, [r2, #88]	; 0x58
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_TIM_Base_MspInit+0x48>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2036      	movs	r0, #54	; 0x36
 8001964:	f002 f8ff 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001968:	2036      	movs	r0, #54	; 0x36
 800196a:	f002 f918 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40001000 	.word	0x40001000
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_TIM_MspPostInit+0x68>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11d      	bne.n	80019de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_TIM_MspPostInit+0x6c>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_TIM_MspPostInit+0x6c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_TIM_MspPostInit+0x6c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f002 f8fb 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b09e      	sub	sp, #120	; 0x78
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	2254      	movs	r2, #84	; 0x54
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f005 f92f 	bl	8006c74 <memset>
  if(huart->Instance==USART2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_UART_MspInit+0xa8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d136      	bne.n	8001a8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 f8ff 	bl	8004c30 <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a38:	f7ff fe7a 	bl	8001730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_UART_MspInit+0xac>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_UART_MspInit+0xac>)
 8001a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a46:	6593      	str	r3, [r2, #88]	; 0x58
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_UART_MspInit+0xac>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_UART_MspInit+0xac>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_UART_MspInit+0xac>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_UART_MspInit+0xac>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f002 f8a3 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3778      	adds	r7, #120	; 0x78
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 f95a 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <CAN1_RX0_IRQHandler+0x10>)
 8001afa:	f001 fd2a 	bl	8003552 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000260 	.word	0x20000260

08001b08 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <CAN1_RX1_IRQHandler+0x10>)
 8001b0e:	f001 fd20 	bl	8003552 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000260 	.word	0x20000260

08001b1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <TIM6_DAC_IRQHandler+0x10>)
 8001b22:	f003 fd5f 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200002d4 	.word	0x200002d4

08001b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_kill>:

int _kill(int pid, int sig)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4a:	f005 f869 	bl	8006c20 <__errno>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2216      	movs	r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
	return -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_exit>:

void _exit (int status)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffe7 	bl	8001b40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b72:	e7fe      	b.n	8001b72 <_exit+0x12>

08001b74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e00a      	b.n	8001b9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b86:	f3af 8000 	nop.w
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	60ba      	str	r2, [r7, #8]
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbf0      	blt.n	8001b86 <_read+0x12>
	}

return len;
 8001ba4:	687b      	ldr	r3, [r7, #4]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_isatty>:

int _isatty(int file)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	return 1;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
	return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f004 ffea 	bl	8006c20 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20010000 	.word	0x20010000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	200003f8 	.word	0x200003f8
 8001c80:	20000410 	.word	0x20000410

08001c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <SystemInit+0x20>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <SystemInit+0x20>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cac:	f7ff ffea 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	; (8001ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <LoopForever+0xe>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <LoopForever+0x16>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f004 ffa9 	bl	8006c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cda:	f7ff f9d1 	bl	8001080 <main>

08001cde <LoopForever>:

LoopForever:
    b LoopForever
 8001cde:	e7fe      	b.n	8001cde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cec:	0800badc 	.word	0x0800badc
  ldr r2, =_sbss
 8001cf0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cf4:	20000410 	.word	0x20000410

08001cf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC1_IRQHandler>

08001cfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f001 ff23 	bl	8003b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f80e 	bl	8001d2c <HAL_InitTick>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	e001      	b.n	8001d20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d1c:	f7ff fd0e 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d20:	79fb      	ldrb	r3, [r7, #7]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_InitTick+0x6c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d023      	beq.n	8001d88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_InitTick+0x70>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_InitTick+0x6c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 ff2f 	bl	8003bba <HAL_SYSTICK_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d809      	bhi.n	8001d7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f001 fef9 	bl	8003b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_InitTick+0x74>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e007      	b.n	8001d8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e004      	b.n	8001d8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e001      	b.n	8001d8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	200003fc 	.word	0x200003fc

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	200003fc 	.word	0x200003fc

08001de4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3360      	adds	r3, #96	; 0x60
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <LL_ADC_SetOffset+0x44>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e84:	bf00      	nop
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	03fff000 	.word	0x03fff000

08001e94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3360      	adds	r3, #96	; 0x60
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3360      	adds	r3, #96	; 0x60
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3330      	adds	r3, #48	; 0x30
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	211f      	movs	r1, #31
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	f003 011f 	and.w	r1, r3, #31
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	431a      	orrs	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3314      	adds	r3, #20
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	0e5b      	lsrs	r3, r3, #25
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	0d1b      	lsrs	r3, r3, #20
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2107      	movs	r1, #7
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	401a      	ands	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	0d1b      	lsrs	r3, r3, #20
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0318 	and.w	r3, r3, #24
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ff0:	40d9      	lsrs	r1, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	0007ffff 	.word	0x0007ffff

08002014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6093      	str	r3, [r2, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800209c:	d101      	bne.n	80020a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800210e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002112:	f043 0204 	orr.w	r2, r3, #4
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d101      	bne.n	800213e <LL_ADC_REG_IsConversionOngoing+0x18>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d101      	bne.n	8002164 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e12c      	b.n	80023e8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff faf1 	bl	8001784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff3f 	bl	8002038 <LL_ADC_IsDeepPowerDownEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff25 	bl	8002014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff5a 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d115      	bne.n	8002206 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff3e 	bl	8002060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e4:	4b82      	ldr	r3, [pc, #520]	; (80023f0 <HAL_ADC_Init+0x27c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	4a82      	ldr	r2, [pc, #520]	; (80023f4 <HAL_ADC_Init+0x280>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff3c 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	f043 0210 	orr.w	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff75 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 800223c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 80c5 	bne.w	80023d6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80c1 	bne.w	80023d6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800225c:	f043 0202 	orr.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff35 	bl	80020d8 <LL_ADC_IsEnabled>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002274:	4860      	ldr	r0, [pc, #384]	; (80023f8 <HAL_ADC_Init+0x284>)
 8002276:	f7ff ff2f 	bl	80020d8 <LL_ADC_IsEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4619      	mov	r1, r3
 8002286:	485d      	ldr	r0, [pc, #372]	; (80023fc <HAL_ADC_Init+0x288>)
 8002288:	f7ff fdac 	bl	8001de4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e5b      	ldrb	r3, [r3, #25]
 8002290:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002296:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800229c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	3b01      	subs	r3, #1
 80022c0:	045b      	lsls	r3, r3, #17
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <HAL_ADC_Init+0x28c>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff12 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 8002302:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff1f 	bl	800214c <LL_ADC_INJ_IsConversionOngoing>
 800230e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d13d      	bne.n	8002392 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d13a      	bne.n	8002392 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002320:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002328:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002338:	f023 0302 	bic.w	r3, r3, #2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	69b9      	ldr	r1, [r7, #24]
 8002342:	430b      	orrs	r3, r1
 8002344:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800234c:	2b01      	cmp	r3, #1
 800234e:	d118      	bne.n	8002382 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002366:	4311      	orrs	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002372:	430a      	orrs	r2, r1
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	611a      	str	r2, [r3, #16]
 8002380:	e007      	b.n	8002392 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10c      	bne.n	80023b4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f023 010f 	bic.w	r1, r3, #15
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
 80023b2:	e007      	b.n	80023c4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 020f 	bic.w	r2, r2, #15
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f023 0303 	bic.w	r3, r3, #3
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
 80023d4:	e007      	b.n	80023e6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000000 	.word	0x20000000
 80023f4:	053e2d63 	.word	0x053e2d63
 80023f8:	50040000 	.word	0x50040000
 80023fc:	50040300 	.word	0x50040300
 8002400:	fff0c007 	.word	0xfff0c007

08002404 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe88 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d14f      	bne.n	80024bc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADC_Start+0x26>
 8002426:	2302      	movs	r3, #2
 8002428:	e04b      	b.n	80024c2 <HAL_ADC_Start+0xbe>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fcc6 	bl	8002dc4 <ADC_Enable>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d137      	bne.n	80024b2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002462:	d106      	bne.n	8002472 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f023 0206 	bic.w	r2, r3, #6
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	659a      	str	r2, [r3, #88]	; 0x58
 8002470:	e002      	b.n	8002478 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	221c      	movs	r2, #28
 800247e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fe27 	bl	80020fe <LL_ADC_REG_StartConversion>
 80024b0:	e006      	b.n	80024c0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80024ba:	e001      	b.n	80024c0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
 80024be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d102      	bne.n	80024e2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024dc:	2308      	movs	r3, #8
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e010      	b.n	8002504 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e06f      	b.n	80025e0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002500:	2304      	movs	r3, #4
 8002502:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002504:	f7ff fc62 	bl	8001dcc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800250a:	e021      	b.n	8002550 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d01d      	beq.n	8002550 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002514:	f7ff fc5a 	bl	8001dcc <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d302      	bcc.n	800252a <HAL_ADC_PollForConversion+0x60>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d112      	bne.n	8002550 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e047      	b.n	80025e0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0d6      	beq.n	800250c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fcc1 	bl	8001ef6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01c      	beq.n	80025b4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e5b      	ldrb	r3, [r3, #25]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b08      	cmp	r3, #8
 800258e:	d111      	bne.n	80025b4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d104      	bne.n	80025cc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2208      	movs	r2, #8
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e008      	b.n	80025de <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d103      	bne.n	80025de <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	220c      	movs	r2, #12
 80025dc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0b6      	sub	sp, #216	; 0xd8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x22>
 8002622:	2302      	movs	r3, #2
 8002624:	e3b9      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x796>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fd77 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 839e 	bne.w	8002d7c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d824      	bhi.n	8002692 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	3b02      	subs	r3, #2
 800264e:	2b03      	cmp	r3, #3
 8002650:	d81b      	bhi.n	800268a <HAL_ADC_ConfigChannel+0x86>
 8002652:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <HAL_ADC_ConfigChannel+0x54>)
 8002654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002658:	08002669 	.word	0x08002669
 800265c:	08002671 	.word	0x08002671
 8002660:	08002679 	.word	0x08002679
 8002664:	08002681 	.word	0x08002681
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	220c      	movs	r2, #12
 800266c:	605a      	str	r2, [r3, #4]
          break;
 800266e:	e011      	b.n	8002694 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2212      	movs	r2, #18
 8002674:	605a      	str	r2, [r3, #4]
          break;
 8002676:	e00d      	b.n	8002694 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2218      	movs	r2, #24
 800267c:	605a      	str	r2, [r3, #4]
          break;
 800267e:	e009      	b.n	8002694 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002686:	605a      	str	r2, [r3, #4]
          break;
 8002688:	e004      	b.n	8002694 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2206      	movs	r2, #6
 800268e:	605a      	str	r2, [r3, #4]
          break;
 8002690:	e000      	b.n	8002694 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002692:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f7ff fc3b 	bl	8001f1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fd3b 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 80026b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fd47 	bl	800214c <LL_ADC_INJ_IsConversionOngoing>
 80026be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 81a6 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 81a1 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6819      	ldr	r1, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7ff fc46 	bl	8001f74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	08db      	lsrs	r3, r3, #3
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b04      	cmp	r3, #4
 8002708:	d00a      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800271a:	f7ff fb97 	bl	8001e4c <LL_ADC_SetOffset>
 800271e:	e17b      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fbb4 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <HAL_ADC_ConfigChannel+0x148>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fba9 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	f003 021f 	and.w	r2, r3, #31
 800274a:	e01e      	b.n	800278a <HAL_ADC_ConfigChannel+0x186>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fb9e 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800276a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800276e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800277a:	2320      	movs	r3, #32
 800277c:	e004      	b.n	8002788 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800277e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x19e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	e018      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x1d0>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e004      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80027ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fb6d 	bl	8001ec0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fb51 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x20e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb46 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	e01e      	b.n	8002850 <HAL_ADC_ConfigChannel+0x24c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fb3b 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002830:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002840:	2320      	movs	r3, #32
 8002842:	e004      	b.n	800284e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x264>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	e018      	b.n	800289a <HAL_ADC_ConfigChannel+0x296>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800287c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e004      	b.n	800289a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800289a:	429a      	cmp	r2, r3
 800289c:	d106      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2101      	movs	r1, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fb0a 	bl	8001ec0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2102      	movs	r1, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff faee 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x2d4>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2102      	movs	r1, #2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fae3 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	f003 021f 	and.w	r2, r3, #31
 80028d6:	e01e      	b.n	8002916 <HAL_ADC_ConfigChannel+0x312>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fad8 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e004      	b.n	8002914 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800290a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <HAL_ADC_ConfigChannel+0x32a>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	e016      	b.n	800295c <HAL_ADC_ConfigChannel+0x358>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002940:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e004      	b.n	800295c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800295c:	429a      	cmp	r2, r3
 800295e:	d106      	bne.n	800296e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	2102      	movs	r1, #2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff faa9 	bl	8001ec0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2103      	movs	r1, #3
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fa8d 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_ADC_ConfigChannel+0x396>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2103      	movs	r1, #3
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fa82 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	e017      	b.n	80029ca <HAL_ADC_ConfigChannel+0x3c6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2103      	movs	r1, #3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fa77 	bl	8001e94 <LL_ADC_GetOffsetChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80029c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x3de>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	e011      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x402>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e003      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80029fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d106      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2103      	movs	r1, #3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fa54 	bl	8001ec0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fb5b 	bl	80020d8 <LL_ADC_IsEnabled>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 813f 	bne.w	8002ca8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f7ff fac8 	bl	8001fcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a8e      	ldr	r2, [pc, #568]	; (8002c7c <HAL_ADC_ConfigChannel+0x678>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	f040 8130 	bne.w	8002ca8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x46c>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2b09      	cmp	r3, #9
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e019      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x4a0>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a80:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2b09      	cmp	r3, #9
 8002a9c:	bf94      	ite	ls
 8002a9e:	2301      	movls	r3, #1
 8002aa0:	2300      	movhi	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d079      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x4c0>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac2:	e015      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x4ec>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e003      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	069b      	lsls	r3, r3, #26
 8002aec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x50c>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	e017      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x53c>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e003      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	ea42 0103 	orr.w	r1, r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x562>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	3301      	adds	r3, #1
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	051b      	lsls	r3, r3, #20
 8002b64:	e018      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x594>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e003      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	e080      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x5b4>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	3301      	adds	r3, #1
 8002bb0:	069b      	lsls	r3, r3, #26
 8002bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb6:	e015      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x5e0>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e003      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	069b      	lsls	r3, r3, #26
 8002be0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x600>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	e017      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x630>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	61fb      	str	r3, [r7, #28]
  return result;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	e003      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	ea42 0103 	orr.w	r1, r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x65c>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	3b1e      	subs	r3, #30
 8002c58:	051b      	lsls	r3, r3, #20
 8002c5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	e01d      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x698>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	613b      	str	r3, [r7, #16]
  return result;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e005      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x684>
 8002c7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f003 021f 	and.w	r2, r3, #31
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	3b1e      	subs	r3, #30
 8002c96:	051b      	lsls	r3, r3, #20
 8002c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	6892      	ldr	r2, [r2, #8]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f7ff f966 	bl	8001f74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_ADC_ConfigChannel+0x7a0>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d06c      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cb4:	483c      	ldr	r0, [pc, #240]	; (8002da8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002cb6:	f7ff f8bb 	bl	8001e30 <LL_ADC_GetCommonPathInternalCh>
 8002cba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <HAL_ADC_ConfigChannel+0x7a8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d127      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d121      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a35      	ldr	r2, [pc, #212]	; (8002db0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d157      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	482f      	ldr	r0, [pc, #188]	; (8002da8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002cea:	f7ff f88e 	bl	8001e0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cee:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	4a30      	ldr	r2, [pc, #192]	; (8002db8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d08:	e002      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f9      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d16:	e03a      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_ADC_ConfigChannel+0x7b8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d113      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x746>
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d12a      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d40:	4619      	mov	r1, r3
 8002d42:	4819      	ldr	r0, [pc, #100]	; (8002da8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d44:	f7ff f861 	bl	8001e0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d48:	e021      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d11c      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d111      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d72:	4619      	mov	r1, r3
 8002d74:	480c      	ldr	r0, [pc, #48]	; (8002da8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d76:	f7ff f848 	bl	8001e0a <LL_ADC_SetCommonPathInternalCh>
 8002d7a:	e008      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	37d8      	adds	r7, #216	; 0xd8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	80080000 	.word	0x80080000
 8002da8:	50040300 	.word	0x50040300
 8002dac:	c7520000 	.word	0xc7520000
 8002db0:	50040000 	.word	0x50040000
 8002db4:	20000000 	.word	0x20000000
 8002db8:	053e2d63 	.word	0x053e2d63
 8002dbc:	cb840000 	.word	0xcb840000
 8002dc0:	80000001 	.word	0x80000001

08002dc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f97f 	bl	80020d8 <LL_ADC_IsEnabled>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d169      	bne.n	8002eb4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <ADC_Enable+0xfc>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e055      	b.n	8002eb6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f94e 	bl	80020b0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e14:	482b      	ldr	r0, [pc, #172]	; (8002ec4 <ADC_Enable+0x100>)
 8002e16:	f7ff f80b 	bl	8001e30 <LL_ADC_GetCommonPathInternalCh>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <ADC_Enable+0x104>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	4a28      	ldr	r2, [pc, #160]	; (8002ecc <ADC_Enable+0x108>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002e3e:	e002      	b.n	8002e46 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f9      	bne.n	8002e40 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe ffbe 	bl	8001dcc <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e52:	e028      	b.n	8002ea6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f93d 	bl	80020d8 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f921 	bl	80020b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e6e:	f7fe ffad 	bl	8001dcc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d914      	bls.n	8002ea6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d00d      	beq.n	8002ea6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d1cf      	bne.n	8002e54 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	8000003f 	.word	0x8000003f
 8002ec4:	50040300 	.word	0x50040300
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	053e2d63 	.word	0x053e2d63

08002ed0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0ed      	b.n	80030be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fcac 	bl	800184c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f04:	f7fe ff62 	bl	8001dcc <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f0a:	e012      	b.n	8002f32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f0c:	f7fe ff5e 	bl	8001dcc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b0a      	cmp	r3, #10
 8002f18:	d90b      	bls.n	8002f32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2205      	movs	r2, #5
 8002f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0c5      	b.n	80030be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0e5      	beq.n	8002f0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0202 	bic.w	r2, r2, #2
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f50:	f7fe ff3c 	bl	8001dcc <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f56:	e012      	b.n	8002f7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f58:	f7fe ff38 	bl	8001dcc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b0a      	cmp	r3, #10
 8002f64:	d90b      	bls.n	8002f7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2205      	movs	r2, #5
 8002f76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e09f      	b.n	80030be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e5      	bne.n	8002f58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e1b      	ldrb	r3, [r3, #24]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d108      	bne.n	8002fa6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7e5b      	ldrb	r3, [r3, #25]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e007      	b.n	8002fe0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7e9b      	ldrb	r3, [r3, #26]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d108      	bne.n	8002ffa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0220 	orr.w	r2, r2, #32
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e007      	b.n	800300a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0220 	bic.w	r2, r2, #32
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7edb      	ldrb	r3, [r3, #27]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0210 	bic.w	r2, r2, #16
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e007      	b.n	8003034 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0210 	orr.w	r2, r2, #16
 8003032:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7f1b      	ldrb	r3, [r3, #28]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d108      	bne.n	800304e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e007      	b.n	800305e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0208 	bic.w	r2, r2, #8
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7f5b      	ldrb	r3, [r3, #29]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d108      	bne.n	8003078 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0204 	orr.w	r2, r2, #4
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e007      	b.n	8003088 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0204 	bic.w	r2, r2, #4
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	ea42 0103 	orr.w	r1, r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	1e5a      	subs	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b087      	sub	sp, #28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030dc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d003      	beq.n	80030ec <HAL_CAN_ConfigFilter+0x26>
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f040 80aa 	bne.w	8003240 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2201      	movs	r2, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d123      	bne.n	800316e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43db      	mvns	r3, r3
 8003130:	401a      	ands	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003148:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3248      	adds	r2, #72	; 0x48
 800314e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003162:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003164:	6979      	ldr	r1, [r7, #20]
 8003166:	3348      	adds	r3, #72	; 0x48
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d122      	bne.n	80031bc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	431a      	orrs	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003196:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3248      	adds	r2, #72	; 0x48
 800319c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	3348      	adds	r3, #72	; 0x48
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031d6:	e007      	b.n	80031e8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003202:	e007      	b.n	8003214 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	431a      	orrs	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003232:	f023 0201 	bic.w	r2, r3, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e006      	b.n	800324e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d12e      	bne.n	80032cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003286:	f7fe fda1 	bl	8001dcc <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800328c:	e012      	b.n	80032b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800328e:	f7fe fd9d 	bl	8001dcc <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b0a      	cmp	r3, #10
 800329a:	d90b      	bls.n	80032b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2205      	movs	r2, #5
 80032ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e012      	b.n	80032da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e5      	bne.n	800328e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e006      	b.n	80032da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80032e2:	b480      	push	{r7}
 80032e4:	b087      	sub	sp, #28
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d003      	beq.n	8003306 <HAL_CAN_GetRxMessage+0x24>
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b02      	cmp	r3, #2
 8003302:	f040 80f3 	bne.w	80034ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10e      	bne.n	800332a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0e7      	b.n	80034fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0d8      	b.n	80034fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	331b      	adds	r3, #27
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0204 	and.w	r2, r3, #4
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	331b      	adds	r3, #27
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0d5b      	lsrs	r3, r3, #21
 8003376:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e00b      	b.n	8003398 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	331b      	adds	r3, #27
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	4413      	add	r3, r2
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	08db      	lsrs	r3, r3, #3
 8003390:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	331b      	adds	r3, #27
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	4413      	add	r3, r2
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0202 	and.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	331b      	adds	r3, #27
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 020f 	and.w	r2, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	331b      	adds	r3, #27
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	331b      	adds	r3, #27
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0a1a      	lsrs	r2, r3, #8
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	4413      	add	r3, r2
 8003430:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0c1a      	lsrs	r2, r3, #16
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	3302      	adds	r3, #2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4413      	add	r3, r2
 800344a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e1a      	lsrs	r2, r3, #24
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	3303      	adds	r3, #3
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4413      	add	r3, r2
 8003464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3304      	adds	r3, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	0a1a      	lsrs	r2, r3, #8
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	3305      	adds	r3, #5
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	4413      	add	r3, r2
 8003496:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0c1a      	lsrs	r2, r3, #16
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	3306      	adds	r3, #6
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	0e1a      	lsrs	r2, r3, #24
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	3307      	adds	r3, #7
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d108      	bne.n	80034d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0220 	orr.w	r2, r2, #32
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e007      	b.n	80034e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0220 	orr.w	r2, r2, #32
 80034e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e006      	b.n	80034fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003516:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d002      	beq.n	8003524 <HAL_CAN_ActivateNotification+0x1e>
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d109      	bne.n	8003538 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6959      	ldr	r1, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e006      	b.n	8003546 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b08a      	sub	sp, #40	; 0x28
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d07c      	beq.n	8003692 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d023      	beq.n	80035ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f983 	bl	80038c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80035ba:	e016      	b.n	80035ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e00c      	b.n	80035ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	e002      	b.n	80035ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f989 	bl	80038fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d024      	beq.n	800363e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f963 	bl	80038d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800360e:	e016      	b.n	800363e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	e00c      	b.n	800363e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362a:	2b00      	cmp	r3, #0
 800362c:	d004      	beq.n	8003638 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	e002      	b.n	800363e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f969 	bl	8003910 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d024      	beq.n	8003692 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003650:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f943 	bl	80038e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003662:	e016      	b.n	8003692 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	e00c      	b.n	8003692 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e002      	b.n	8003692 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f949 	bl	8003924 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00c      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2210      	movs	r2, #16
 80036b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2208      	movs	r2, #8
 80036d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f930 	bl	8003938 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7fd fc97 	bl	8001024 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00c      	beq.n	800371a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003710:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2210      	movs	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2208      	movs	r2, #8
 8003734:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f912 	bl	8003960 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8f9 	bl	800394c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8fc 	bl	8003974 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2208      	movs	r2, #8
 8003796:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8f5 	bl	8003988 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d07b      	beq.n	80038a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d072      	beq.n	8003898 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380c:	2b00      	cmp	r3, #0
 800380e:	d043      	beq.n	8003898 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d03e      	beq.n	8003898 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003820:	2b60      	cmp	r3, #96	; 0x60
 8003822:	d02b      	beq.n	800387c <HAL_CAN_IRQHandler+0x32a>
 8003824:	2b60      	cmp	r3, #96	; 0x60
 8003826:	d82e      	bhi.n	8003886 <HAL_CAN_IRQHandler+0x334>
 8003828:	2b50      	cmp	r3, #80	; 0x50
 800382a:	d022      	beq.n	8003872 <HAL_CAN_IRQHandler+0x320>
 800382c:	2b50      	cmp	r3, #80	; 0x50
 800382e:	d82a      	bhi.n	8003886 <HAL_CAN_IRQHandler+0x334>
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d019      	beq.n	8003868 <HAL_CAN_IRQHandler+0x316>
 8003834:	2b40      	cmp	r3, #64	; 0x40
 8003836:	d826      	bhi.n	8003886 <HAL_CAN_IRQHandler+0x334>
 8003838:	2b30      	cmp	r3, #48	; 0x30
 800383a:	d010      	beq.n	800385e <HAL_CAN_IRQHandler+0x30c>
 800383c:	2b30      	cmp	r3, #48	; 0x30
 800383e:	d822      	bhi.n	8003886 <HAL_CAN_IRQHandler+0x334>
 8003840:	2b10      	cmp	r3, #16
 8003842:	d002      	beq.n	800384a <HAL_CAN_IRQHandler+0x2f8>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d005      	beq.n	8003854 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003848:	e01d      	b.n	8003886 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003852:	e019      	b.n	8003888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	f043 0310 	orr.w	r3, r3, #16
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800385c:	e014      	b.n	8003888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f043 0320 	orr.w	r3, r3, #32
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003866:	e00f      	b.n	8003888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003870:	e00a      	b.n	8003888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800387a:	e005      	b.n	8003888 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003884:	e000      	b.n	8003888 <HAL_CAN_IRQHandler+0x336>
            break;
 8003886:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003896:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2204      	movs	r2, #4
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f872 	bl	800399c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038b8:	bf00      	nop
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db0b      	blt.n	8003a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 021f 	and.w	r2, r3, #31
 8003a2c:	4907      	ldr	r1, [pc, #28]	; (8003a4c <__NVIC_EnableIRQ+0x38>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	; (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b1c:	d301      	bcc.n	8003b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00f      	b.n	8003b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <SysTick_Config+0x40>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	f7ff ff8e 	bl	8003a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <SysTick_Config+0x40>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <SysTick_Config+0x40>)
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000e010 	.word	0xe000e010

08003b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff29 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b78:	f7ff ff3e 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ff8e 	bl	8003aa4 <NVIC_EncodePriority>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff5d 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff31 	bl	8003a14 <__NVIC_EnableIRQ>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ffa2 	bl	8003b0c <SysTick_Config>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be2:	e148      	b.n	8003e76 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 813a 	beq.w	8003e70 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d005      	beq.n	8003c14 <HAL_GPIO_Init+0x40>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d130      	bne.n	8003c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 0201 	and.w	r2, r3, #1
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d017      	beq.n	8003cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d123      	bne.n	8003d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	6939      	ldr	r1, [r7, #16]
 8003d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0203 	and.w	r2, r3, #3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8094 	beq.w	8003e70 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d48:	4b52      	ldr	r3, [pc, #328]	; (8003e94 <HAL_GPIO_Init+0x2c0>)
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	4a51      	ldr	r2, [pc, #324]	; (8003e94 <HAL_GPIO_Init+0x2c0>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6613      	str	r3, [r2, #96]	; 0x60
 8003d54:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <HAL_GPIO_Init+0x2c0>)
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d60:	4a4d      	ldr	r2, [pc, #308]	; (8003e98 <HAL_GPIO_Init+0x2c4>)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d8a:	d00d      	beq.n	8003da8 <HAL_GPIO_Init+0x1d4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a43      	ldr	r2, [pc, #268]	; (8003e9c <HAL_GPIO_Init+0x2c8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <HAL_GPIO_Init+0x1d0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a42      	ldr	r2, [pc, #264]	; (8003ea0 <HAL_GPIO_Init+0x2cc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e004      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003da0:	2307      	movs	r3, #7
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_GPIO_Init+0x1d6>
 8003da8:	2300      	movs	r3, #0
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4093      	lsls	r3, r2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dba:	4937      	ldr	r1, [pc, #220]	; (8003e98 <HAL_GPIO_Init+0x2c4>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e16:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e1c:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e40:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e46:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <HAL_GPIO_Init+0x2d0>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f aeaf 	bne.w	8003be4 <HAL_GPIO_Init+0x10>
  }
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	48000400 	.word	0x48000400
 8003ea0:	48000800 	.word	0x48000800
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb8:	787b      	ldrb	r3, [r7, #1]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec4:	e002      	b.n	8003ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40007000 	.word	0x40007000

08003ef8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <HAL_PWREx_GetVoltageRange+0x18>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40007000 	.word	0x40007000

08003f14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f22:	d130      	bne.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f30:	d038      	beq.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f42:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2232      	movs	r2, #50	; 0x32
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0c9b      	lsrs	r3, r3, #18
 8003f54:	3301      	adds	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f58:	e002      	b.n	8003f60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d102      	bne.n	8003f74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f2      	bne.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	d110      	bne.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e00f      	b.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f92:	d007      	beq.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f9c:	4a05      	ldr	r2, [pc, #20]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	431bde83 	.word	0x431bde83

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f000 bc02 	b.w	80047d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd4:	4b96      	ldr	r3, [pc, #600]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fde:	4b94      	ldr	r3, [pc, #592]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80e4 	beq.w	80041be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_RCC_OscConfig+0x4c>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	f040 808b 	bne.w	800411a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b01      	cmp	r3, #1
 8004008:	f040 8087 	bne.w	800411a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800400c:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_OscConfig+0x64>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e3d9      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_RCC_OscConfig+0x7e>
 8004034:	4b7e      	ldr	r3, [pc, #504]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403c:	e005      	b.n	800404a <HAL_RCC_OscConfig+0x8a>
 800403e:	4b7c      	ldr	r3, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404a:	4293      	cmp	r3, r2
 800404c:	d223      	bcs.n	8004096 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fd8c 	bl	8004b70 <RCC_SetFlashLatencyFromMSIRange>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e3ba      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004062:	4b73      	ldr	r3, [pc, #460]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a72      	ldr	r2, [pc, #456]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b70      	ldr	r3, [pc, #448]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	496d      	ldr	r1, [pc, #436]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004080:	4b6b      	ldr	r3, [pc, #428]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	4968      	ldr	r1, [pc, #416]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
 8004094:	e025      	b.n	80040e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004096:	4b66      	ldr	r3, [pc, #408]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a65      	ldr	r2, [pc, #404]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4960      	ldr	r1, [pc, #384]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b4:	4b5e      	ldr	r3, [pc, #376]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	495b      	ldr	r1, [pc, #364]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fd4c 	bl	8004b70 <RCC_SetFlashLatencyFromMSIRange>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e37a      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040e2:	f000 fc81 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 80040e6:	4602      	mov	r2, r0
 80040e8:	4b51      	ldr	r3, [pc, #324]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	4950      	ldr	r1, [pc, #320]	; (8004234 <HAL_RCC_OscConfig+0x274>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	4a4e      	ldr	r2, [pc, #312]	; (8004238 <HAL_RCC_OscConfig+0x278>)
 8004100:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004102:	4b4e      	ldr	r3, [pc, #312]	; (800423c <HAL_RCC_OscConfig+0x27c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fe10 	bl	8001d2c <HAL_InitTick>
 800410c:	4603      	mov	r3, r0
 800410e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d052      	beq.n	80041bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	e35e      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d032      	beq.n	8004188 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004122:	4b43      	ldr	r3, [pc, #268]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a42      	ldr	r2, [pc, #264]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800412e:	f7fd fe4d 	bl	8001dcc <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004136:	f7fd fe49 	bl	8001dcc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e347      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a35      	ldr	r2, [pc, #212]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800415a:	f043 0308 	orr.w	r3, r3, #8
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	4b33      	ldr	r3, [pc, #204]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4930      	ldr	r1, [pc, #192]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004172:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	492b      	ldr	r1, [pc, #172]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
 8004186:	e01a      	b.n	80041be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004188:	4b29      	ldr	r3, [pc, #164]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a28      	ldr	r2, [pc, #160]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004194:	f7fd fe1a 	bl	8001dcc <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800419c:	f7fd fe16 	bl	8001dcc <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e314      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x1dc>
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d073      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_OscConfig+0x21c>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d10e      	bne.n	80041f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d10b      	bne.n	80041f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d063      	beq.n	80042b0 <HAL_RCC_OscConfig+0x2f0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d15f      	bne.n	80042b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e2f1      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fc:	d106      	bne.n	800420c <HAL_RCC_OscConfig+0x24c>
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e025      	b.n	8004258 <HAL_RCC_OscConfig+0x298>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004214:	d114      	bne.n	8004240 <HAL_RCC_OscConfig+0x280>
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a05      	ldr	r2, [pc, #20]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 800421c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a02      	ldr	r2, [pc, #8]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e013      	b.n	8004258 <HAL_RCC_OscConfig+0x298>
 8004230:	40021000 	.word	0x40021000
 8004234:	0800b5d8 	.word	0x0800b5d8
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004
 8004240:	4ba0      	ldr	r3, [pc, #640]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a9f      	ldr	r2, [pc, #636]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b9d      	ldr	r3, [pc, #628]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a9c      	ldr	r2, [pc, #624]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd fdb4 	bl	8001dcc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd fdb0 	bl	8001dcc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e2ae      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427a:	4b92      	ldr	r3, [pc, #584]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x2a8>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd fda0 	bl	8001dcc <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd fd9c 	bl	8001dcc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e29a      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a2:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x2d0>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d060      	beq.n	8004380 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_OscConfig+0x310>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d119      	bne.n	80042fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d116      	bne.n	80042fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d0:	4b7c      	ldr	r3, [pc, #496]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_OscConfig+0x328>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e277      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	4973      	ldr	r1, [pc, #460]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fc:	e040      	b.n	8004380 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d023      	beq.n	800434e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004306:	4b6f      	ldr	r3, [pc, #444]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6e      	ldr	r2, [pc, #440]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800430c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd fd5b 	bl	8001dcc <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431a:	f7fd fd57 	bl	8001dcc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e255      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432c:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b62      	ldr	r3, [pc, #392]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	495f      	ldr	r1, [pc, #380]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
 800434c:	e018      	b.n	8004380 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b5d      	ldr	r3, [pc, #372]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5c      	ldr	r2, [pc, #368]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fd fd37 	bl	8001dcc <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004362:	f7fd fd33 	bl	8001dcc <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e231      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d03c      	beq.n	8004406 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01c      	beq.n	80043ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004394:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439a:	4a4a      	ldr	r2, [pc, #296]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fd fd12 	bl	8001dcc <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ac:	f7fd fd0e 	bl	8001dcc <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e20c      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <HAL_RCC_OscConfig+0x3ec>
 80043cc:	e01b      	b.n	8004406 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ce:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80043d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d4:	4a3b      	ldr	r2, [pc, #236]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fd fcf5 	bl	8001dcc <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e6:	f7fd fcf1 	bl	8001dcc <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1ef      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f8:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80043fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ef      	bne.n	80043e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80a6 	beq.w	8004560 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004414:	2300      	movs	r3, #0
 8004416:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004418:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6593      	str	r3, [r2, #88]	; 0x58
 8004430:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443c:	2301      	movs	r3, #1
 800443e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004440:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_RCC_OscConfig+0x508>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d118      	bne.n	800447e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_OscConfig+0x508>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <HAL_RCC_OscConfig+0x508>)
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004458:	f7fd fcb8 	bl	8001dcc <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004460:	f7fd fcb4 	bl	8001dcc <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1b2      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <HAL_RCC_OscConfig+0x508>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d108      	bne.n	8004498 <HAL_RCC_OscConfig+0x4d8>
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	4a0d      	ldr	r2, [pc, #52]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004496:	e029      	b.n	80044ec <HAL_RCC_OscConfig+0x52c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d115      	bne.n	80044cc <HAL_RCC_OscConfig+0x50c>
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b0:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <HAL_RCC_OscConfig+0x504>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044c0:	e014      	b.n	80044ec <HAL_RCC_OscConfig+0x52c>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40007000 	.word	0x40007000
 80044cc:	4b9a      	ldr	r3, [pc, #616]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	4a99      	ldr	r2, [pc, #612]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044dc:	4b96      	ldr	r3, [pc, #600]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	4a95      	ldr	r2, [pc, #596]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d016      	beq.n	8004522 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd fc6a 	bl	8001dcc <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7fd fc66 	bl	8001dcc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e162      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004512:	4b89      	ldr	r3, [pc, #548]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0ed      	beq.n	80044fc <HAL_RCC_OscConfig+0x53c>
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd fc53 	bl	8001dcc <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd fc4f 	bl	8001dcc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e14b      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004540:	4b7d      	ldr	r3, [pc, #500]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ed      	bne.n	800452a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454e:	7ffb      	ldrb	r3, [r7, #31]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b78      	ldr	r3, [pc, #480]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	4a77      	ldr	r2, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d03c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01c      	beq.n	80045ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004574:	4b70      	ldr	r3, [pc, #448]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457a:	4a6f      	ldr	r2, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004584:	f7fd fc22 	bl	8001dcc <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800458c:	f7fd fc1e 	bl	8001dcc <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e11c      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800459e:	4b66      	ldr	r3, [pc, #408]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80045a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ef      	beq.n	800458c <HAL_RCC_OscConfig+0x5cc>
 80045ac:	e01b      	b.n	80045e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ae:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80045b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b4:	4a60      	ldr	r2, [pc, #384]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fd fc05 	bl	8001dcc <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c6:	f7fd fc01 	bl	8001dcc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0ff      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045d8:	4b57      	ldr	r3, [pc, #348]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80045da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1ef      	bne.n	80045c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80f3 	beq.w	80047d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f040 80c9 	bne.w	800478c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045fa:	4b4f      	ldr	r3, [pc, #316]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0203 	and.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	429a      	cmp	r2, r3
 800460c:	d12c      	bne.n	8004668 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	3b01      	subs	r3, #1
 800461a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d123      	bne.n	8004668 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d11b      	bne.n	8004668 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d113      	bne.n	8004668 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	3b01      	subs	r3, #1
 800464e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d109      	bne.n	8004668 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	3b01      	subs	r3, #1
 8004662:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d06b      	beq.n	8004740 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d062      	beq.n	8004734 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800466e:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0ac      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800467e:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004688:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800468a:	f7fd fb9f 	bl	8001dcc <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004692:	f7fd fb9b 	bl	8001dcc <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e099      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f0      	bne.n	8004692 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_RCC_OscConfig+0x77c>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0112      	lsls	r2, r2, #4
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046ca:	0212      	lsls	r2, r2, #8
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d2:	0852      	lsrs	r2, r2, #1
 80046d4:	3a01      	subs	r2, #1
 80046d6:	0552      	lsls	r2, r2, #21
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046de:	0852      	lsrs	r2, r2, #1
 80046e0:	3a01      	subs	r2, #1
 80046e2:	0652      	lsls	r2, r2, #25
 80046e4:	4311      	orrs	r1, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ea:	06d2      	lsls	r2, r2, #27
 80046ec:	430a      	orrs	r2, r1
 80046ee:	4912      	ldr	r1, [pc, #72]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0f      	ldr	r2, [pc, #60]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 80046fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800470c:	f7fd fb5e 	bl	8001dcc <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fd fb5a 	bl	8001dcc <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e058      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCC_OscConfig+0x778>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004732:	e050      	b.n	80047d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e04f      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
 8004738:	40021000 	.word	0x40021000
 800473c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d144      	bne.n	80047d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800474c:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 8004752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004756:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a20      	ldr	r2, [pc, #128]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004762:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004764:	f7fd fb32 	bl	8001dcc <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd fb2e 	bl	8001dcc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e02c      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	4b18      	ldr	r3, [pc, #96]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x7ac>
 800478a:	e024      	b.n	80047d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d01f      	beq.n	80047d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 8004798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fd fb15 	bl	8001dcc <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a6:	f7fd fb11 	bl	8001dcc <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e00f      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4905      	ldr	r1, [pc, #20]	; (80047e0 <HAL_RCC_OscConfig+0x820>)
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_OscConfig+0x824>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60cb      	str	r3, [r1, #12]
 80047d0:	e001      	b.n	80047d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	feeefffc 	.word	0xfeeefffc

080047e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0e7      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b75      	ldr	r3, [pc, #468]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d910      	bls.n	800482c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b72      	ldr	r3, [pc, #456]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 0207 	bic.w	r2, r3, #7
 8004812:	4970      	ldr	r1, [pc, #448]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b6e      	ldr	r3, [pc, #440]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0cf      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d010      	beq.n	800485a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004844:	429a      	cmp	r2, r3
 8004846:	d908      	bls.n	800485a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4960      	ldr	r1, [pc, #384]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d04c      	beq.n	8004900 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486e:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d121      	bne.n	80048be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e0a6      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004886:	4b54      	ldr	r3, [pc, #336]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d115      	bne.n	80048be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e09a      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800489e:	4b4e      	ldr	r3, [pc, #312]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e08e      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ae:	4b4a      	ldr	r3, [pc, #296]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e086      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048be:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4943      	ldr	r1, [pc, #268]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d0:	f7fd fa7c 	bl	8001dcc <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d8:	f7fd fa78 	bl	8001dcc <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e06e      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 020c 	and.w	r2, r3, #12
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d1eb      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d010      	beq.n	800492e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	4b31      	ldr	r3, [pc, #196]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004918:	429a      	cmp	r2, r3
 800491a:	d208      	bcs.n	800492e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800491c:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	492b      	ldr	r1, [pc, #172]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492e:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d210      	bcs.n	800495e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493c:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 0207 	bic.w	r2, r3, #7
 8004944:	4923      	ldr	r1, [pc, #140]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494c:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <HAL_RCC_ClockConfig+0x1ec>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e036      	b.n	80049cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4918      	ldr	r1, [pc, #96]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4910      	ldr	r1, [pc, #64]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800499c:	f000 f824 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	490b      	ldr	r1, [pc, #44]	; (80049dc <HAL_RCC_ClockConfig+0x1f4>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <HAL_RCC_ClockConfig+0x1f8>)
 80049ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCC_ClockConfig+0x1fc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fd f9b3 	bl	8001d2c <HAL_InitTick>
 80049c6:	4603      	mov	r3, r0
 80049c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80049ca:	7afb      	ldrb	r3, [r7, #11]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40022000 	.word	0x40022000
 80049d8:	40021000 	.word	0x40021000
 80049dc:	0800b5d8 	.word	0x0800b5d8
 80049e0:	20000000 	.word	0x20000000
 80049e4:	20000004 	.word	0x20000004

080049e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b089      	sub	sp, #36	; 0x24
 80049ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f6:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x34>
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d121      	bne.n	8004a5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d11e      	bne.n	8004a5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a1c:	4b34      	ldr	r3, [pc, #208]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a28:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e005      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a38:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a44:	4a2b      	ldr	r2, [pc, #172]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10d      	bne.n	8004a70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a58:	e00a      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e004      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a6c:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_RCC_GetSysClockFreq+0x114>)
 8004a6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d134      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a76:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0xa6>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d003      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0xac>
 8004a8c:	e005      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a8e:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a90:	617b      	str	r3, [r7, #20]
      break;
 8004a92:	e005      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_RCC_GetSysClockFreq+0x114>)
 8004a96:	617b      	str	r3, [r7, #20]
      break;
 8004a98:	e002      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	617b      	str	r3, [r7, #20]
      break;
 8004a9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa0:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	3301      	adds	r3, #1
 8004aac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004aae:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	fb03 f202 	mul.w	r2, r3, r2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	0e5b      	lsrs	r3, r3, #25
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3724      	adds	r7, #36	; 0x24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
 8004af4:	0800b5f0 	.word	0x0800b5f0
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	007a1200 	.word	0x007a1200

08004b00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000000 	.word	0x20000000

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4904      	ldr	r1, [pc, #16]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	0800b5e8 	.word	0x0800b5e8

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b48:	f7ff ffda 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0adb      	lsrs	r3, r3, #11
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4904      	ldr	r1, [pc, #16]	; (8004b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	0800b5e8 	.word	0x0800b5e8

08004b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b88:	f7ff f9b6 	bl	8003ef8 <HAL_PWREx_GetVoltageRange>
 8004b8c:	6178      	str	r0, [r7, #20]
 8004b8e:	e014      	b.n	8004bba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	4a24      	ldr	r2, [pc, #144]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9c:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ba8:	f7ff f9a6 	bl	8003ef8 <HAL_PWREx_GetVoltageRange>
 8004bac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc0:	d10b      	bne.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d919      	bls.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2ba0      	cmp	r3, #160	; 0xa0
 8004bcc:	d902      	bls.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bce:	2302      	movs	r3, #2
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e013      	b.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	e010      	b.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d902      	bls.n	8004be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004be0:	2303      	movs	r3, #3
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	e00a      	b.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d102      	bne.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bec:	2302      	movs	r3, #2
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	e004      	b.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b70      	cmp	r3, #112	; 0x70
 8004bf6:	d101      	bne.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 0207 	bic.w	r2, r3, #7
 8004c04:	4909      	ldr	r1, [pc, #36]	; (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d001      	beq.n	8004c1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40022000 	.word	0x40022000

08004c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c38:	2300      	movs	r3, #0
 8004c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d031      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c54:	d01a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c5a:	d814      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c64:	d10f      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c66:	4b5d      	ldr	r3, [pc, #372]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	4a5c      	ldr	r2, [pc, #368]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c72:	e00c      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f9de 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c84:	e003      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	74fb      	strb	r3, [r7, #19]
      break;
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8e:	7cfb      	ldrb	r3, [r7, #19]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c94:	4b51      	ldr	r3, [pc, #324]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	494e      	ldr	r1, [pc, #312]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004caa:	e001      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 809e 	beq.w	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cc2:	4b46      	ldr	r3, [pc, #280]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cdc:	4a3f      	ldr	r2, [pc, #252]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce4:	4b3d      	ldr	r3, [pc, #244]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf4:	4b3a      	ldr	r3, [pc, #232]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a39      	ldr	r2, [pc, #228]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d00:	f7fd f864 	bl	8001dcc <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d06:	e009      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fd f860 	bl	8001dcc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d902      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	74fb      	strb	r3, [r7, #19]
        break;
 8004d1a:	e005      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d1c:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ef      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d15a      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d2e:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01e      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d019      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d56:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	4a1f      	ldr	r2, [pc, #124]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d76:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d016      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fd f820 	bl	8001dcc <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8e:	e00b      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d90:	f7fd f81c 	bl	8001dcc <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d902      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	74fb      	strb	r3, [r7, #19]
            break;
 8004da6:	e006      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ec      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dca:	4904      	ldr	r1, [pc, #16]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dd2:	e009      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	74bb      	strb	r3, [r7, #18]
 8004dd8:	e006      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004dda:	bf00      	nop
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de8:	7c7b      	ldrb	r3, [r7, #17]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d105      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dee:	4b8a      	ldr	r3, [pc, #552]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	4a89      	ldr	r2, [pc, #548]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e06:	4b84      	ldr	r3, [pc, #528]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f023 0203 	bic.w	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	4980      	ldr	r1, [pc, #512]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e28:	4b7b      	ldr	r3, [pc, #492]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f023 020c 	bic.w	r2, r3, #12
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	4978      	ldr	r1, [pc, #480]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e4a:	4b73      	ldr	r3, [pc, #460]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	496f      	ldr	r1, [pc, #444]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6c:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	4967      	ldr	r1, [pc, #412]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e8e:	4b62      	ldr	r3, [pc, #392]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	495e      	ldr	r1, [pc, #376]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb0:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	4956      	ldr	r1, [pc, #344]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed2:	4b51      	ldr	r3, [pc, #324]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	494d      	ldr	r1, [pc, #308]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d028      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef4:	4b48      	ldr	r3, [pc, #288]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	4945      	ldr	r1, [pc, #276]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f12:	d106      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f14:	4b40      	ldr	r3, [pc, #256]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1e:	60d3      	str	r3, [r2, #12]
 8004f20:	e011      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f2a:	d10c      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	2101      	movs	r1, #1
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f882 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d028      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	492d      	ldr	r1, [pc, #180]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f70:	d106      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f72:	4b29      	ldr	r3, [pc, #164]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4a28      	ldr	r2, [pc, #160]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7c:	60d3      	str	r3, [r2, #12]
 8004f7e:	e011      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f853 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01c      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	4916      	ldr	r1, [pc, #88]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fce:	d10c      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f830 	bl	800503c <RCCEx_PLLSAI1_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005004:	4904      	ldr	r1, [pc, #16]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800500c:	7cbb      	ldrb	r3, [r7, #18]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000

0800501c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a04      	ldr	r2, [pc, #16]	; (8005038 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005026:	f043 0304 	orr.w	r3, r3, #4
 800502a:	6013      	str	r3, [r2, #0]
}
 800502c:	bf00      	nop
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000

0800503c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800504a:	4b74      	ldr	r3, [pc, #464]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005056:	4b71      	ldr	r3, [pc, #452]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d10d      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
       ||
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800506e:	4b6b      	ldr	r3, [pc, #428]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
       ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d047      	beq.n	8005112 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e044      	b.n	8005112 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d018      	beq.n	80050c2 <RCCEx_PLLSAI1_Config+0x86>
 8005090:	2b03      	cmp	r3, #3
 8005092:	d825      	bhi.n	80050e0 <RCCEx_PLLSAI1_Config+0xa4>
 8005094:	2b01      	cmp	r3, #1
 8005096:	d002      	beq.n	800509e <RCCEx_PLLSAI1_Config+0x62>
 8005098:	2b02      	cmp	r3, #2
 800509a:	d009      	beq.n	80050b0 <RCCEx_PLLSAI1_Config+0x74>
 800509c:	e020      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800509e:	4b5f      	ldr	r3, [pc, #380]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d11d      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ae:	e01a      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050b0:	4b5a      	ldr	r3, [pc, #360]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d116      	bne.n	80050ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c0:	e013      	b.n	80050ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050c2:	4b56      	ldr	r3, [pc, #344]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10f      	bne.n	80050ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050ce:	4b53      	ldr	r3, [pc, #332]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050de:	e006      	b.n	80050ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e004      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10d      	bne.n	8005112 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050f6:	4b49      	ldr	r3, [pc, #292]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6819      	ldr	r1, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	3b01      	subs	r3, #1
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	430b      	orrs	r3, r1
 800510c:	4943      	ldr	r1, [pc, #268]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 800510e:	4313      	orrs	r3, r2
 8005110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d17c      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005118:	4b40      	ldr	r3, [pc, #256]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a3f      	ldr	r2, [pc, #252]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 800511e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005124:	f7fc fe52 	bl	8001dcc <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800512a:	e009      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800512c:	f7fc fe4e 	bl	8001dcc <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d902      	bls.n	8005140 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	73fb      	strb	r3, [r7, #15]
        break;
 800513e:	e005      	b.n	800514c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005140:	4b36      	ldr	r3, [pc, #216]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ef      	bne.n	800512c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d15f      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d110      	bne.n	800517a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005158:	4b30      	ldr	r3, [pc, #192]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005160:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6892      	ldr	r2, [r2, #8]
 8005168:	0211      	lsls	r1, r2, #8
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68d2      	ldr	r2, [r2, #12]
 800516e:	06d2      	lsls	r2, r2, #27
 8005170:	430a      	orrs	r2, r1
 8005172:	492a      	ldr	r1, [pc, #168]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005174:	4313      	orrs	r3, r2
 8005176:	610b      	str	r3, [r1, #16]
 8005178:	e027      	b.n	80051ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d112      	bne.n	80051a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005180:	4b26      	ldr	r3, [pc, #152]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005188:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6892      	ldr	r2, [r2, #8]
 8005190:	0211      	lsls	r1, r2, #8
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6912      	ldr	r2, [r2, #16]
 8005196:	0852      	lsrs	r2, r2, #1
 8005198:	3a01      	subs	r2, #1
 800519a:	0552      	lsls	r2, r2, #21
 800519c:	430a      	orrs	r2, r1
 800519e:	491f      	ldr	r1, [pc, #124]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	610b      	str	r3, [r1, #16]
 80051a4:	e011      	b.n	80051ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6892      	ldr	r2, [r2, #8]
 80051b6:	0211      	lsls	r1, r2, #8
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6952      	ldr	r2, [r2, #20]
 80051bc:	0852      	lsrs	r2, r2, #1
 80051be:	3a01      	subs	r2, #1
 80051c0:	0652      	lsls	r2, r2, #25
 80051c2:	430a      	orrs	r2, r1
 80051c4:	4915      	ldr	r1, [pc, #84]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051ca:	4b14      	ldr	r3, [pc, #80]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7fc fdf9 	bl	8001dcc <HAL_GetTick>
 80051da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051dc:	e009      	b.n	80051f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051de:	f7fc fdf5 	bl	8001dcc <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d902      	bls.n	80051f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	73fb      	strb	r3, [r7, #15]
          break;
 80051f0:	e005      	b.n	80051fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ef      	beq.n	80051de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <RCCEx_PLLSAI1_Config+0x1e0>)
 800520e:	4313      	orrs	r3, r2
 8005210:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e049      	b.n	80052c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fb74 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 fc1c 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d001      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e03b      	b.n	8005360 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_TIM_Base_Start_IT+0x9c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_TIM_Base_Start_IT+0x4e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d004      	beq.n	800531e <HAL_TIM_Base_Start_IT+0x4e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a15      	ldr	r2, [pc, #84]	; (8005370 <HAL_TIM_Base_Start_IT+0xa0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d115      	bne.n	800534a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_TIM_Base_Start_IT+0xa4>)
 8005326:	4013      	ands	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b06      	cmp	r3, #6
 800532e:	d015      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x8c>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005336:	d011      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	e008      	b.n	800535c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e000      	b.n	800535e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40014000 	.word	0x40014000
 8005374:	00010007 	.word	0x00010007

08005378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e049      	b.n	800541e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc faa8 	bl	80018f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 fb70 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <HAL_TIM_PWM_Start+0x24>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	bf14      	ite	ne
 8005444:	2301      	movne	r3, #1
 8005446:	2300      	moveq	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e03c      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d109      	bne.n	8005466 <HAL_TIM_PWM_Start+0x3e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e02f      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d109      	bne.n	8005480 <HAL_TIM_PWM_Start+0x58>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e022      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d109      	bne.n	800549a <HAL_TIM_PWM_Start+0x72>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	e015      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b10      	cmp	r3, #16
 800549e:	d109      	bne.n	80054b4 <HAL_TIM_PWM_Start+0x8c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e07e      	b.n	80055cc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start+0xb6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054dc:	e023      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start+0xc6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ec:	e01b      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start+0xd6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054fc:	e013      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Start+0xe6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800550c:	e00b      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start+0xf6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800551c:	e003      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2201      	movs	r2, #1
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fd96 	bl	8006060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <HAL_TIM_PWM_Start+0x1ac>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_TIM_PWM_Start+0x12a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <HAL_TIM_PWM_Start+0x1b0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_TIM_PWM_Start+0x12a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a23      	ldr	r2, [pc, #140]	; (80055dc <HAL_TIM_PWM_Start+0x1b4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_TIM_PWM_Start+0x12e>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <HAL_TIM_PWM_Start+0x130>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800556a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_TIM_PWM_Start+0x1ac>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d009      	beq.n	800558a <HAL_TIM_PWM_Start+0x162>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d004      	beq.n	800558a <HAL_TIM_PWM_Start+0x162>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <HAL_TIM_PWM_Start+0x1b0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d115      	bne.n	80055b6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <HAL_TIM_PWM_Start+0x1b8>)
 8005592:	4013      	ands	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b06      	cmp	r3, #6
 800559a:	d015      	beq.n	80055c8 <HAL_TIM_PWM_Start+0x1a0>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a2:	d011      	beq.n	80055c8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b4:	e008      	b.n	80055c8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e000      	b.n	80055ca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40014400 	.word	0x40014400
 80055e0:	00010007 	.word	0x00010007

080055e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0202 	mvn.w	r2, #2
 8005610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa1a 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa0c 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fa1d 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0204 	mvn.w	r2, #4
 8005664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f9f0 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f9e2 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9f3 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0208 	mvn.w	r2, #8
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9c6 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f9b8 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f9c9 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d122      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0210 	mvn.w	r2, #16
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2208      	movs	r2, #8
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f99c 	bl	8005a60 <HAL_TIM_IC_CaptureCallback>
 8005728:	e005      	b.n	8005736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f98e 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f99f 	bl	8005a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0201 	mvn.w	r2, #1
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fb fc82 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b80      	cmp	r3, #128	; 0x80
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b80      	cmp	r3, #128	; 0x80
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fd74 	bl	800627c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d10e      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fd67 	bl	8006290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d10e      	bne.n	80057ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d107      	bne.n	80057ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f94d 	bl	8005a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d10e      	bne.n	800581a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b20      	cmp	r3, #32
 8005808:	d107      	bne.n	800581a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0220 	mvn.w	r2, #32
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fd27 	bl	8006268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800583e:	2302      	movs	r3, #2
 8005840:	e0ff      	b.n	8005a42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b14      	cmp	r3, #20
 800584e:	f200 80f0 	bhi.w	8005a32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	080058ad 	.word	0x080058ad
 800585c:	08005a33 	.word	0x08005a33
 8005860:	08005a33 	.word	0x08005a33
 8005864:	08005a33 	.word	0x08005a33
 8005868:	080058ed 	.word	0x080058ed
 800586c:	08005a33 	.word	0x08005a33
 8005870:	08005a33 	.word	0x08005a33
 8005874:	08005a33 	.word	0x08005a33
 8005878:	0800592f 	.word	0x0800592f
 800587c:	08005a33 	.word	0x08005a33
 8005880:	08005a33 	.word	0x08005a33
 8005884:	08005a33 	.word	0x08005a33
 8005888:	0800596f 	.word	0x0800596f
 800588c:	08005a33 	.word	0x08005a33
 8005890:	08005a33 	.word	0x08005a33
 8005894:	08005a33 	.word	0x08005a33
 8005898:	080059b1 	.word	0x080059b1
 800589c:	08005a33 	.word	0x08005a33
 80058a0:	08005a33 	.word	0x08005a33
 80058a4:	08005a33 	.word	0x08005a33
 80058a8:	080059f1 	.word	0x080059f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f956 	bl	8005b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0208 	orr.w	r2, r2, #8
 80058c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0204 	bic.w	r2, r2, #4
 80058d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6999      	ldr	r1, [r3, #24]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	619a      	str	r2, [r3, #24]
      break;
 80058ea:	e0a5      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f9b2 	bl	8005c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6999      	ldr	r1, [r3, #24]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	021a      	lsls	r2, r3, #8
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	619a      	str	r2, [r3, #24]
      break;
 800592c:	e084      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fa0b 	bl	8005d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0208 	orr.w	r2, r2, #8
 8005948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0204 	bic.w	r2, r2, #4
 8005958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69d9      	ldr	r1, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	61da      	str	r2, [r3, #28]
      break;
 800596c:	e064      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fa63 	bl	8005e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69d9      	ldr	r1, [r3, #28]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	021a      	lsls	r2, r3, #8
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	61da      	str	r2, [r3, #28]
      break;
 80059ae:	e043      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 faa0 	bl	8005efc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0204 	bic.w	r2, r2, #4
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059ee:	e023      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fad8 	bl	8005fac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a30:	e002      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
      break;
 8005a36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop

08005a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2a      	ldr	r2, [pc, #168]	; (8005b58 <TIM_Base_SetConfig+0xbc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0x20>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aba:	d108      	bne.n	8005ace <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a21      	ldr	r2, [pc, #132]	; (8005b58 <TIM_Base_SetConfig+0xbc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_Base_SetConfig+0x52>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d007      	beq.n	8005aee <TIM_Base_SetConfig+0x52>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <TIM_Base_SetConfig+0xc0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_Base_SetConfig+0x52>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1d      	ldr	r2, [pc, #116]	; (8005b60 <TIM_Base_SetConfig+0xc4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <TIM_Base_SetConfig+0xbc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0xa0>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <TIM_Base_SetConfig+0xc0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0xa0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <TIM_Base_SetConfig+0xc4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d103      	bne.n	8005b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	615a      	str	r2, [r3, #20]
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400

08005b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0201 	bic.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f023 0302 	bic.w	r3, r3, #2
 8005bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a24      	ldr	r2, [pc, #144]	; (8005c50 <TIM_OC1_SetConfig+0xec>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_OC1_SetConfig+0x70>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a23      	ldr	r2, [pc, #140]	; (8005c54 <TIM_OC1_SetConfig+0xf0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC1_SetConfig+0x70>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <TIM_OC1_SetConfig+0xf4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10c      	bne.n	8005bee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0308 	bic.w	r3, r3, #8
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 0304 	bic.w	r3, r3, #4
 8005bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <TIM_OC1_SetConfig+0xec>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_OC1_SetConfig+0xa2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <TIM_OC1_SetConfig+0xf0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC1_SetConfig+0xa2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <TIM_OC1_SetConfig+0xf4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d111      	bne.n	8005c2a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400

08005c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0210 	bic.w	r2, r3, #16
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0320 	bic.w	r3, r3, #32
 8005caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a22      	ldr	r2, [pc, #136]	; (8005d44 <TIM_OC2_SetConfig+0xe8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10d      	bne.n	8005cdc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <TIM_OC2_SetConfig+0xe8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC2_SetConfig+0x98>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <TIM_OC2_SetConfig+0xec>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC2_SetConfig+0x98>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <TIM_OC2_SetConfig+0xf0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d113      	bne.n	8005d1c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400

08005d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10d      	bne.n	8005dce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a18      	ldr	r2, [pc, #96]	; (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_OC3_SetConfig+0x96>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a17      	ldr	r2, [pc, #92]	; (8005e38 <TIM_OC3_SetConfig+0xe8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC3_SetConfig+0x96>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <TIM_OC3_SetConfig+0xec>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d113      	bne.n	8005e0e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400

08005e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <TIM_OC4_SetConfig+0xb0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_OC4_SetConfig+0x74>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <TIM_OC4_SetConfig+0xb4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC4_SetConfig+0x74>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a12      	ldr	r2, [pc, #72]	; (8005ef8 <TIM_OC4_SetConfig+0xb8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d109      	bne.n	8005ec8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	019b      	lsls	r3, r3, #6
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400

08005efc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	041b      	lsls	r3, r3, #16
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <TIM_OC5_SetConfig+0xa4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC5_SetConfig+0x6a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <TIM_OC5_SetConfig+0xa8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC5_SetConfig+0x6a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a11      	ldr	r2, [pc, #68]	; (8005fa8 <TIM_OC5_SetConfig+0xac>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d109      	bne.n	8005f7a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	621a      	str	r2, [r3, #32]
}
 8005f94:	bf00      	nop
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400

08005fac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	051b      	lsls	r3, r3, #20
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a14      	ldr	r2, [pc, #80]	; (8006054 <TIM_OC6_SetConfig+0xa8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <TIM_OC6_SetConfig+0x6c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a13      	ldr	r2, [pc, #76]	; (8006058 <TIM_OC6_SetConfig+0xac>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_OC6_SetConfig+0x6c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a12      	ldr	r2, [pc, #72]	; (800605c <TIM_OC6_SetConfig+0xb0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d109      	bne.n	800602c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	029b      	lsls	r3, r3, #10
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400

08006060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2201      	movs	r2, #1
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1a      	ldr	r2, [r3, #32]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	43db      	mvns	r3, r3
 8006082:	401a      	ands	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	431a      	orrs	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e04f      	b.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a14      	ldr	r2, [pc, #80]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612c:	d004      	beq.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a10      	ldr	r2, [pc, #64]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d10c      	bne.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800613e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	4313      	orrs	r3, r2
 8006148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40014000 	.word	0x40014000

08006178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006190:	2302      	movs	r3, #2
 8006192:	e060      	b.n	8006256 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a14      	ldr	r2, [pc, #80]	; (8006264 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d115      	bne.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	051b      	lsls	r3, r3, #20
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40012c00 	.word	0x40012c00

08006268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e040      	b.n	8006338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb fb92 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2224      	movs	r2, #36	; 0x24
 80062d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8c0 	bl	8006468 <UART_SetConfig>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e022      	b.n	8006338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fae0 	bl	80068c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800630e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800631e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fb67 	bl	8006a04 <UART_CheckIdleState>
 8006336:	4603      	mov	r3, r0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006354:	2b20      	cmp	r3, #32
 8006356:	f040 8082 	bne.w	800645e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_Transmit+0x26>
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e07a      	b.n	8006460 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UART_Transmit+0x38>
 8006374:	2302      	movs	r3, #2
 8006376:	e073      	b.n	8006460 <HAL_UART_Transmit+0x120>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2221      	movs	r2, #33	; 0x21
 800638c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800638e:	f7fb fd1d 	bl	8001dcc <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d108      	bne.n	80063c0 <HAL_UART_Transmit+0x80>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	e003      	b.n	80063c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063d0:	e02d      	b.n	800642e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2200      	movs	r2, #0
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fb5a 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e039      	b.n	8006460 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	881a      	ldrh	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063fe:	b292      	uxth	r2, r2
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3302      	adds	r3, #2
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e008      	b.n	800641c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	b292      	uxth	r2, r2
 8006414:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	3301      	adds	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1cb      	bne.n	80063d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2200      	movs	r2, #0
 8006442:	2140      	movs	r1, #64	; 0x40
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fb26 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e005      	b.n	8006460 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e000      	b.n	8006460 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800645e:	2302      	movs	r3, #2
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800646c:	b08a      	sub	sp, #40	; 0x28
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	431a      	orrs	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	4313      	orrs	r3, r2
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4bb4      	ldr	r3, [pc, #720]	; (8006768 <UART_SetConfig+0x300>)
 8006498:	4013      	ands	r3, r2
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4aa9      	ldr	r2, [pc, #676]	; (800676c <UART_SetConfig+0x304>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d004      	beq.n	80064d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d0:	4313      	orrs	r3, r2
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e4:	430a      	orrs	r2, r1
 80064e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4aa0      	ldr	r2, [pc, #640]	; (8006770 <UART_SetConfig+0x308>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d126      	bne.n	8006540 <UART_SetConfig+0xd8>
 80064f2:	4ba0      	ldr	r3, [pc, #640]	; (8006774 <UART_SetConfig+0x30c>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d81b      	bhi.n	8006538 <UART_SetConfig+0xd0>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0xa0>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006519 	.word	0x08006519
 800650c:	08006529 	.word	0x08006529
 8006510:	08006521 	.word	0x08006521
 8006514:	08006531 	.word	0x08006531
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651e:	e080      	b.n	8006622 <UART_SetConfig+0x1ba>
 8006520:	2302      	movs	r3, #2
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006526:	e07c      	b.n	8006622 <UART_SetConfig+0x1ba>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e078      	b.n	8006622 <UART_SetConfig+0x1ba>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006536:	e074      	b.n	8006622 <UART_SetConfig+0x1ba>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653e:	e070      	b.n	8006622 <UART_SetConfig+0x1ba>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a8c      	ldr	r2, [pc, #560]	; (8006778 <UART_SetConfig+0x310>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d138      	bne.n	80065bc <UART_SetConfig+0x154>
 800654a:	4b8a      	ldr	r3, [pc, #552]	; (8006774 <UART_SetConfig+0x30c>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f003 030c 	and.w	r3, r3, #12
 8006554:	2b0c      	cmp	r3, #12
 8006556:	d82d      	bhi.n	80065b4 <UART_SetConfig+0x14c>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0xf8>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006595 	.word	0x08006595
 8006564:	080065b5 	.word	0x080065b5
 8006568:	080065b5 	.word	0x080065b5
 800656c:	080065b5 	.word	0x080065b5
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065b5 	.word	0x080065b5
 800657c:	080065b5 	.word	0x080065b5
 8006580:	0800659d 	.word	0x0800659d
 8006584:	080065b5 	.word	0x080065b5
 8006588:	080065b5 	.word	0x080065b5
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	2300      	movs	r3, #0
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659a:	e042      	b.n	8006622 <UART_SetConfig+0x1ba>
 800659c:	2302      	movs	r3, #2
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a2:	e03e      	b.n	8006622 <UART_SetConfig+0x1ba>
 80065a4:	2304      	movs	r3, #4
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065aa:	e03a      	b.n	8006622 <UART_SetConfig+0x1ba>
 80065ac:	2308      	movs	r3, #8
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b2:	e036      	b.n	8006622 <UART_SetConfig+0x1ba>
 80065b4:	2310      	movs	r3, #16
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ba:	e032      	b.n	8006622 <UART_SetConfig+0x1ba>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a6a      	ldr	r2, [pc, #424]	; (800676c <UART_SetConfig+0x304>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d12a      	bne.n	800661c <UART_SetConfig+0x1b4>
 80065c6:	4b6b      	ldr	r3, [pc, #428]	; (8006774 <UART_SetConfig+0x30c>)
 80065c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d4:	d01a      	beq.n	800660c <UART_SetConfig+0x1a4>
 80065d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065da:	d81b      	bhi.n	8006614 <UART_SetConfig+0x1ac>
 80065dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e0:	d00c      	beq.n	80065fc <UART_SetConfig+0x194>
 80065e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e6:	d815      	bhi.n	8006614 <UART_SetConfig+0x1ac>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <UART_SetConfig+0x18c>
 80065ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f0:	d008      	beq.n	8006604 <UART_SetConfig+0x19c>
 80065f2:	e00f      	b.n	8006614 <UART_SetConfig+0x1ac>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065fa:	e012      	b.n	8006622 <UART_SetConfig+0x1ba>
 80065fc:	2302      	movs	r3, #2
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006602:	e00e      	b.n	8006622 <UART_SetConfig+0x1ba>
 8006604:	2304      	movs	r3, #4
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660a:	e00a      	b.n	8006622 <UART_SetConfig+0x1ba>
 800660c:	2308      	movs	r3, #8
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006612:	e006      	b.n	8006622 <UART_SetConfig+0x1ba>
 8006614:	2310      	movs	r3, #16
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661a:	e002      	b.n	8006622 <UART_SetConfig+0x1ba>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a51      	ldr	r2, [pc, #324]	; (800676c <UART_SetConfig+0x304>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d17a      	bne.n	8006722 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800662c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006630:	2b08      	cmp	r3, #8
 8006632:	d824      	bhi.n	800667e <UART_SetConfig+0x216>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0x1d4>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006661 	.word	0x08006661
 8006640:	0800667f 	.word	0x0800667f
 8006644:	08006669 	.word	0x08006669
 8006648:	0800667f 	.word	0x0800667f
 800664c:	0800666f 	.word	0x0800666f
 8006650:	0800667f 	.word	0x0800667f
 8006654:	0800667f 	.word	0x0800667f
 8006658:	0800667f 	.word	0x0800667f
 800665c:	08006677 	.word	0x08006677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006660:	f7fe fa5a 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8006664:	61f8      	str	r0, [r7, #28]
        break;
 8006666:	e010      	b.n	800668a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006668:	4b44      	ldr	r3, [pc, #272]	; (800677c <UART_SetConfig+0x314>)
 800666a:	61fb      	str	r3, [r7, #28]
        break;
 800666c:	e00d      	b.n	800668a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666e:	f7fe f9bb 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 8006672:	61f8      	str	r0, [r7, #28]
        break;
 8006674:	e009      	b.n	800668a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667a:	61fb      	str	r3, [r7, #28]
        break;
 800667c:	e005      	b.n	800668a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006688:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8107 	beq.w	80068a0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	4413      	add	r3, r2
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d305      	bcc.n	80066ae <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d903      	bls.n	80066b6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066b4:	e0f4      	b.n	80068a0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2200      	movs	r2, #0
 80066ba:	461c      	mov	r4, r3
 80066bc:	4615      	mov	r5, r2
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	022b      	lsls	r3, r5, #8
 80066c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066cc:	0222      	lsls	r2, r4, #8
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	6849      	ldr	r1, [r1, #4]
 80066d2:	0849      	lsrs	r1, r1, #1
 80066d4:	2000      	movs	r0, #0
 80066d6:	4688      	mov	r8, r1
 80066d8:	4681      	mov	r9, r0
 80066da:	eb12 0a08 	adds.w	sl, r2, r8
 80066de:	eb43 0b09 	adc.w	fp, r3, r9
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f0:	4650      	mov	r0, sl
 80066f2:	4659      	mov	r1, fp
 80066f4:	f7fa fac8 	bl	8000c88 <__aeabi_uldivmod>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4613      	mov	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006706:	d308      	bcc.n	800671a <UART_SetConfig+0x2b2>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670e:	d204      	bcs.n	800671a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	e0c2      	b.n	80068a0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006720:	e0be      	b.n	80068a0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672a:	d16a      	bne.n	8006802 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800672c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006730:	2b08      	cmp	r3, #8
 8006732:	d834      	bhi.n	800679e <UART_SetConfig+0x336>
 8006734:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0x2d4>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006761 	.word	0x08006761
 8006740:	08006781 	.word	0x08006781
 8006744:	08006789 	.word	0x08006789
 8006748:	0800679f 	.word	0x0800679f
 800674c:	0800678f 	.word	0x0800678f
 8006750:	0800679f 	.word	0x0800679f
 8006754:	0800679f 	.word	0x0800679f
 8006758:	0800679f 	.word	0x0800679f
 800675c:	08006797 	.word	0x08006797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006760:	f7fe f9da 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8006764:	61f8      	str	r0, [r7, #28]
        break;
 8006766:	e020      	b.n	80067aa <UART_SetConfig+0x342>
 8006768:	efff69f3 	.word	0xefff69f3
 800676c:	40008000 	.word	0x40008000
 8006770:	40013800 	.word	0x40013800
 8006774:	40021000 	.word	0x40021000
 8006778:	40004400 	.word	0x40004400
 800677c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7fe f9e0 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8006784:	61f8      	str	r0, [r7, #28]
        break;
 8006786:	e010      	b.n	80067aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006788:	4b4c      	ldr	r3, [pc, #304]	; (80068bc <UART_SetConfig+0x454>)
 800678a:	61fb      	str	r3, [r7, #28]
        break;
 800678c:	e00d      	b.n	80067aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678e:	f7fe f92b 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 8006792:	61f8      	str	r0, [r7, #28]
        break;
 8006794:	e009      	b.n	80067aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679a:	61fb      	str	r3, [r7, #28]
        break;
 800679c:	e005      	b.n	80067aa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d077      	beq.n	80068a0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	005a      	lsls	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	441a      	add	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b0f      	cmp	r3, #15
 80067ca:	d916      	bls.n	80067fa <UART_SetConfig+0x392>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d2:	d212      	bcs.n	80067fa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f023 030f 	bic.w	r3, r3, #15
 80067dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	8afb      	ldrh	r3, [r7, #22]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	8afa      	ldrh	r2, [r7, #22]
 80067f6:	60da      	str	r2, [r3, #12]
 80067f8:	e052      	b.n	80068a0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006800:	e04e      	b.n	80068a0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006806:	2b08      	cmp	r3, #8
 8006808:	d827      	bhi.n	800685a <UART_SetConfig+0x3f2>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x3a8>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006835 	.word	0x08006835
 8006814:	0800683d 	.word	0x0800683d
 8006818:	08006845 	.word	0x08006845
 800681c:	0800685b 	.word	0x0800685b
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800685b 	.word	0x0800685b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fe f970 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8006838:	61f8      	str	r0, [r7, #28]
        break;
 800683a:	e014      	b.n	8006866 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fe f982 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8006840:	61f8      	str	r0, [r7, #28]
        break;
 8006842:	e010      	b.n	8006866 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b1d      	ldr	r3, [pc, #116]	; (80068bc <UART_SetConfig+0x454>)
 8006846:	61fb      	str	r3, [r7, #28]
        break;
 8006848:	e00d      	b.n	8006866 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fe f8cd 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 800684e:	61f8      	str	r0, [r7, #28]
        break;
 8006850:	e009      	b.n	8006866 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	61fb      	str	r3, [r7, #28]
        break;
 8006858:	e005      	b.n	8006866 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006864:	bf00      	nop
    }

    if (pclk != 0U)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d019      	beq.n	80068a0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	085a      	lsrs	r2, r3, #1
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b0f      	cmp	r3, #15
 8006884:	d909      	bls.n	800689a <UART_SetConfig+0x432>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688c:	d205      	bcs.n	800689a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60da      	str	r2, [r3, #12]
 8006898:	e002      	b.n	80068a0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3728      	adds	r7, #40	; 0x28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ba:	bf00      	nop
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01a      	beq.n	80069d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069be:	d10a      	bne.n	80069d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a14:	f7fb f9da 	bl	8001dcc <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d10e      	bne.n	8006a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f82d 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e023      	b.n	8006a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d10e      	bne.n	8006a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f817 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e00d      	b.n	8006a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b09c      	sub	sp, #112	; 0x70
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa6:	e0a5      	b.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	f000 80a1 	beq.w	8006bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab2:	f7fb f98b 	bl	8001dcc <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d302      	bcc.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d13e      	bne.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006adc:	667b      	str	r3, [r7, #100]	; 0x64
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006aec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e6      	bne.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	663b      	str	r3, [r7, #96]	; 0x60
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3308      	adds	r3, #8
 8006b18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e5      	bne.n	8006afa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e067      	b.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d04f      	beq.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b62:	d147      	bne.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bc0:	623a      	str	r2, [r7, #32]
 8006bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e5      	bne.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e010      	b.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69da      	ldr	r2, [r3, #28]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	bf0c      	ite	eq
 8006c04:	2301      	moveq	r3, #1
 8006c06:	2300      	movne	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	f43f af4a 	beq.w	8006aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3770      	adds	r7, #112	; 0x70
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <__errno>:
 8006c20:	4b01      	ldr	r3, [pc, #4]	; (8006c28 <__errno+0x8>)
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	2000000c 	.word	0x2000000c

08006c2c <__libc_init_array>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4d0d      	ldr	r5, [pc, #52]	; (8006c64 <__libc_init_array+0x38>)
 8006c30:	4c0d      	ldr	r4, [pc, #52]	; (8006c68 <__libc_init_array+0x3c>)
 8006c32:	1b64      	subs	r4, r4, r5
 8006c34:	10a4      	asrs	r4, r4, #2
 8006c36:	2600      	movs	r6, #0
 8006c38:	42a6      	cmp	r6, r4
 8006c3a:	d109      	bne.n	8006c50 <__libc_init_array+0x24>
 8006c3c:	4d0b      	ldr	r5, [pc, #44]	; (8006c6c <__libc_init_array+0x40>)
 8006c3e:	4c0c      	ldr	r4, [pc, #48]	; (8006c70 <__libc_init_array+0x44>)
 8006c40:	f004 fcaa 	bl	800b598 <_init>
 8006c44:	1b64      	subs	r4, r4, r5
 8006c46:	10a4      	asrs	r4, r4, #2
 8006c48:	2600      	movs	r6, #0
 8006c4a:	42a6      	cmp	r6, r4
 8006c4c:	d105      	bne.n	8006c5a <__libc_init_array+0x2e>
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c54:	4798      	blx	r3
 8006c56:	3601      	adds	r6, #1
 8006c58:	e7ee      	b.n	8006c38 <__libc_init_array+0xc>
 8006c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5e:	4798      	blx	r3
 8006c60:	3601      	adds	r6, #1
 8006c62:	e7f2      	b.n	8006c4a <__libc_init_array+0x1e>
 8006c64:	0800bad4 	.word	0x0800bad4
 8006c68:	0800bad4 	.word	0x0800bad4
 8006c6c:	0800bad4 	.word	0x0800bad4
 8006c70:	0800bad8 	.word	0x0800bad8

08006c74 <memset>:
 8006c74:	4402      	add	r2, r0
 8006c76:	4603      	mov	r3, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <__cvt>:
 8006c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	ec55 4b10 	vmov	r4, r5, d0
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	460e      	mov	r6, r1
 8006c90:	4619      	mov	r1, r3
 8006c92:	462b      	mov	r3, r5
 8006c94:	bfbb      	ittet	lt
 8006c96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c9a:	461d      	movlt	r5, r3
 8006c9c:	2300      	movge	r3, #0
 8006c9e:	232d      	movlt	r3, #45	; 0x2d
 8006ca0:	700b      	strb	r3, [r1, #0]
 8006ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ca8:	4691      	mov	r9, r2
 8006caa:	f023 0820 	bic.w	r8, r3, #32
 8006cae:	bfbc      	itt	lt
 8006cb0:	4622      	movlt	r2, r4
 8006cb2:	4614      	movlt	r4, r2
 8006cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cb8:	d005      	beq.n	8006cc6 <__cvt+0x42>
 8006cba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cbe:	d100      	bne.n	8006cc2 <__cvt+0x3e>
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	2102      	movs	r1, #2
 8006cc4:	e000      	b.n	8006cc8 <__cvt+0x44>
 8006cc6:	2103      	movs	r1, #3
 8006cc8:	ab03      	add	r3, sp, #12
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	ab02      	add	r3, sp, #8
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	ec45 4b10 	vmov	d0, r4, r5
 8006cd4:	4653      	mov	r3, sl
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	f001 fdc6 	bl	8008868 <_dtoa_r>
 8006cdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	d102      	bne.n	8006cea <__cvt+0x66>
 8006ce4:	f019 0f01 	tst.w	r9, #1
 8006ce8:	d022      	beq.n	8006d30 <__cvt+0xac>
 8006cea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cee:	eb07 0906 	add.w	r9, r7, r6
 8006cf2:	d110      	bne.n	8006d16 <__cvt+0x92>
 8006cf4:	783b      	ldrb	r3, [r7, #0]
 8006cf6:	2b30      	cmp	r3, #48	; 0x30
 8006cf8:	d10a      	bne.n	8006d10 <__cvt+0x8c>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d06:	b918      	cbnz	r0, 8006d10 <__cvt+0x8c>
 8006d08:	f1c6 0601 	rsb	r6, r6, #1
 8006d0c:	f8ca 6000 	str.w	r6, [sl]
 8006d10:	f8da 3000 	ldr.w	r3, [sl]
 8006d14:	4499      	add	r9, r3
 8006d16:	2200      	movs	r2, #0
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d22:	b108      	cbz	r0, 8006d28 <__cvt+0xa4>
 8006d24:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d28:	2230      	movs	r2, #48	; 0x30
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	454b      	cmp	r3, r9
 8006d2e:	d307      	bcc.n	8006d40 <__cvt+0xbc>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d34:	1bdb      	subs	r3, r3, r7
 8006d36:	4638      	mov	r0, r7
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	b004      	add	sp, #16
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d40:	1c59      	adds	r1, r3, #1
 8006d42:	9103      	str	r1, [sp, #12]
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e7f0      	b.n	8006d2a <__cvt+0xa6>

08006d48 <__exponent>:
 8006d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	bfb8      	it	lt
 8006d50:	4249      	neglt	r1, r1
 8006d52:	f803 2b02 	strb.w	r2, [r3], #2
 8006d56:	bfb4      	ite	lt
 8006d58:	222d      	movlt	r2, #45	; 0x2d
 8006d5a:	222b      	movge	r2, #43	; 0x2b
 8006d5c:	2909      	cmp	r1, #9
 8006d5e:	7042      	strb	r2, [r0, #1]
 8006d60:	dd2a      	ble.n	8006db8 <__exponent+0x70>
 8006d62:	f10d 0407 	add.w	r4, sp, #7
 8006d66:	46a4      	mov	ip, r4
 8006d68:	270a      	movs	r7, #10
 8006d6a:	46a6      	mov	lr, r4
 8006d6c:	460a      	mov	r2, r1
 8006d6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d72:	fb07 1516 	mls	r5, r7, r6, r1
 8006d76:	3530      	adds	r5, #48	; 0x30
 8006d78:	2a63      	cmp	r2, #99	; 0x63
 8006d7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d82:	4631      	mov	r1, r6
 8006d84:	dcf1      	bgt.n	8006d6a <__exponent+0x22>
 8006d86:	3130      	adds	r1, #48	; 0x30
 8006d88:	f1ae 0502 	sub.w	r5, lr, #2
 8006d8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d90:	1c44      	adds	r4, r0, #1
 8006d92:	4629      	mov	r1, r5
 8006d94:	4561      	cmp	r1, ip
 8006d96:	d30a      	bcc.n	8006dae <__exponent+0x66>
 8006d98:	f10d 0209 	add.w	r2, sp, #9
 8006d9c:	eba2 020e 	sub.w	r2, r2, lr
 8006da0:	4565      	cmp	r5, ip
 8006da2:	bf88      	it	hi
 8006da4:	2200      	movhi	r2, #0
 8006da6:	4413      	add	r3, r2
 8006da8:	1a18      	subs	r0, r3, r0
 8006daa:	b003      	add	sp, #12
 8006dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006db6:	e7ed      	b.n	8006d94 <__exponent+0x4c>
 8006db8:	2330      	movs	r3, #48	; 0x30
 8006dba:	3130      	adds	r1, #48	; 0x30
 8006dbc:	7083      	strb	r3, [r0, #2]
 8006dbe:	70c1      	strb	r1, [r0, #3]
 8006dc0:	1d03      	adds	r3, r0, #4
 8006dc2:	e7f1      	b.n	8006da8 <__exponent+0x60>

08006dc4 <_printf_float>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	ed2d 8b02 	vpush	{d8}
 8006dcc:	b08d      	sub	sp, #52	; 0x34
 8006dce:	460c      	mov	r4, r1
 8006dd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	461f      	mov	r7, r3
 8006dd8:	4605      	mov	r5, r0
 8006dda:	f002 ff97 	bl	8009d0c <_localeconv_r>
 8006dde:	f8d0 a000 	ldr.w	sl, [r0]
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7f9 f9f4 	bl	80001d0 <strlen>
 8006de8:	2300      	movs	r3, #0
 8006dea:	930a      	str	r3, [sp, #40]	; 0x28
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	f8d8 3000 	ldr.w	r3, [r8]
 8006df4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006df8:	3307      	adds	r3, #7
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	f103 0208 	add.w	r2, r3, #8
 8006e02:	f8c8 2000 	str.w	r2, [r8]
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e1c:	ee08 0a10 	vmov	s16, r0
 8006e20:	4b9f      	ldr	r3, [pc, #636]	; (80070a0 <_printf_float+0x2dc>)
 8006e22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	f7f9 fe7f 	bl	8000b2c <__aeabi_dcmpun>
 8006e2e:	bb88      	cbnz	r0, 8006e94 <_printf_float+0xd0>
 8006e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e34:	4b9a      	ldr	r3, [pc, #616]	; (80070a0 <_printf_float+0x2dc>)
 8006e36:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3a:	f7f9 fe59 	bl	8000af0 <__aeabi_dcmple>
 8006e3e:	bb48      	cbnz	r0, 8006e94 <_printf_float+0xd0>
 8006e40:	2200      	movs	r2, #0
 8006e42:	2300      	movs	r3, #0
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 fe48 	bl	8000adc <__aeabi_dcmplt>
 8006e4c:	b110      	cbz	r0, 8006e54 <_printf_float+0x90>
 8006e4e:	232d      	movs	r3, #45	; 0x2d
 8006e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e54:	4b93      	ldr	r3, [pc, #588]	; (80070a4 <_printf_float+0x2e0>)
 8006e56:	4894      	ldr	r0, [pc, #592]	; (80070a8 <_printf_float+0x2e4>)
 8006e58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e5c:	bf94      	ite	ls
 8006e5e:	4698      	movls	r8, r3
 8006e60:	4680      	movhi	r8, r0
 8006e62:	2303      	movs	r3, #3
 8006e64:	6123      	str	r3, [r4, #16]
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	f023 0204 	bic.w	r2, r3, #4
 8006e6c:	6022      	str	r2, [r4, #0]
 8006e6e:	f04f 0900 	mov.w	r9, #0
 8006e72:	9700      	str	r7, [sp, #0]
 8006e74:	4633      	mov	r3, r6
 8006e76:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 f9d8 	bl	8007230 <_printf_common>
 8006e80:	3001      	adds	r0, #1
 8006e82:	f040 8090 	bne.w	8006fa6 <_printf_float+0x1e2>
 8006e86:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8a:	b00d      	add	sp, #52	; 0x34
 8006e8c:	ecbd 8b02 	vpop	{d8}
 8006e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e94:	4642      	mov	r2, r8
 8006e96:	464b      	mov	r3, r9
 8006e98:	4640      	mov	r0, r8
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	f7f9 fe46 	bl	8000b2c <__aeabi_dcmpun>
 8006ea0:	b140      	cbz	r0, 8006eb4 <_printf_float+0xf0>
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bfbc      	itt	lt
 8006ea8:	232d      	movlt	r3, #45	; 0x2d
 8006eaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eae:	487f      	ldr	r0, [pc, #508]	; (80070ac <_printf_float+0x2e8>)
 8006eb0:	4b7f      	ldr	r3, [pc, #508]	; (80070b0 <_printf_float+0x2ec>)
 8006eb2:	e7d1      	b.n	8006e58 <_printf_float+0x94>
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eba:	9206      	str	r2, [sp, #24]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	d13f      	bne.n	8006f40 <_printf_float+0x17c>
 8006ec0:	2306      	movs	r3, #6
 8006ec2:	6063      	str	r3, [r4, #4]
 8006ec4:	9b05      	ldr	r3, [sp, #20]
 8006ec6:	6861      	ldr	r1, [r4, #4]
 8006ec8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9303      	str	r3, [sp, #12]
 8006ed0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ed2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ed6:	ab09      	add	r3, sp, #36	; 0x24
 8006ed8:	ec49 8b10 	vmov	d0, r8, r9
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	6022      	str	r2, [r4, #0]
 8006ee0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f7ff fecd 	bl	8006c84 <__cvt>
 8006eea:	9b06      	ldr	r3, [sp, #24]
 8006eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eee:	2b47      	cmp	r3, #71	; 0x47
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	d108      	bne.n	8006f06 <_printf_float+0x142>
 8006ef4:	1cc8      	adds	r0, r1, #3
 8006ef6:	db02      	blt.n	8006efe <_printf_float+0x13a>
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	4299      	cmp	r1, r3
 8006efc:	dd41      	ble.n	8006f82 <_printf_float+0x1be>
 8006efe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f02:	fa5f fb8b 	uxtb.w	fp, fp
 8006f06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f0a:	d820      	bhi.n	8006f4e <_printf_float+0x18a>
 8006f0c:	3901      	subs	r1, #1
 8006f0e:	465a      	mov	r2, fp
 8006f10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f14:	9109      	str	r1, [sp, #36]	; 0x24
 8006f16:	f7ff ff17 	bl	8006d48 <__exponent>
 8006f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f1c:	1813      	adds	r3, r2, r0
 8006f1e:	2a01      	cmp	r2, #1
 8006f20:	4681      	mov	r9, r0
 8006f22:	6123      	str	r3, [r4, #16]
 8006f24:	dc02      	bgt.n	8006f2c <_printf_float+0x168>
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	07d2      	lsls	r2, r2, #31
 8006f2a:	d501      	bpl.n	8006f30 <_printf_float+0x16c>
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	6123      	str	r3, [r4, #16]
 8006f30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d09c      	beq.n	8006e72 <_printf_float+0xae>
 8006f38:	232d      	movs	r3, #45	; 0x2d
 8006f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3e:	e798      	b.n	8006e72 <_printf_float+0xae>
 8006f40:	9a06      	ldr	r2, [sp, #24]
 8006f42:	2a47      	cmp	r2, #71	; 0x47
 8006f44:	d1be      	bne.n	8006ec4 <_printf_float+0x100>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1bc      	bne.n	8006ec4 <_printf_float+0x100>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e7b9      	b.n	8006ec2 <_printf_float+0xfe>
 8006f4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f52:	d118      	bne.n	8006f86 <_printf_float+0x1c2>
 8006f54:	2900      	cmp	r1, #0
 8006f56:	6863      	ldr	r3, [r4, #4]
 8006f58:	dd0b      	ble.n	8006f72 <_printf_float+0x1ae>
 8006f5a:	6121      	str	r1, [r4, #16]
 8006f5c:	b913      	cbnz	r3, 8006f64 <_printf_float+0x1a0>
 8006f5e:	6822      	ldr	r2, [r4, #0]
 8006f60:	07d0      	lsls	r0, r2, #31
 8006f62:	d502      	bpl.n	8006f6a <_printf_float+0x1a6>
 8006f64:	3301      	adds	r3, #1
 8006f66:	440b      	add	r3, r1
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f6c:	f04f 0900 	mov.w	r9, #0
 8006f70:	e7de      	b.n	8006f30 <_printf_float+0x16c>
 8006f72:	b913      	cbnz	r3, 8006f7a <_printf_float+0x1b6>
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	07d2      	lsls	r2, r2, #31
 8006f78:	d501      	bpl.n	8006f7e <_printf_float+0x1ba>
 8006f7a:	3302      	adds	r3, #2
 8006f7c:	e7f4      	b.n	8006f68 <_printf_float+0x1a4>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e7f2      	b.n	8006f68 <_printf_float+0x1a4>
 8006f82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	4299      	cmp	r1, r3
 8006f8a:	db05      	blt.n	8006f98 <_printf_float+0x1d4>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	6121      	str	r1, [r4, #16]
 8006f90:	07d8      	lsls	r0, r3, #31
 8006f92:	d5ea      	bpl.n	8006f6a <_printf_float+0x1a6>
 8006f94:	1c4b      	adds	r3, r1, #1
 8006f96:	e7e7      	b.n	8006f68 <_printf_float+0x1a4>
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	bfd4      	ite	le
 8006f9c:	f1c1 0202 	rsble	r2, r1, #2
 8006fa0:	2201      	movgt	r2, #1
 8006fa2:	4413      	add	r3, r2
 8006fa4:	e7e0      	b.n	8006f68 <_printf_float+0x1a4>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	055a      	lsls	r2, r3, #21
 8006faa:	d407      	bmi.n	8006fbc <_printf_float+0x1f8>
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	4642      	mov	r2, r8
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d12c      	bne.n	8007014 <_printf_float+0x250>
 8006fba:	e764      	b.n	8006e86 <_printf_float+0xc2>
 8006fbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fc0:	f240 80e0 	bls.w	8007184 <_printf_float+0x3c0>
 8006fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f7f9 fd7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d034      	beq.n	800703e <_printf_float+0x27a>
 8006fd4:	4a37      	ldr	r2, [pc, #220]	; (80070b4 <_printf_float+0x2f0>)
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f43f af51 	beq.w	8006e86 <_printf_float+0xc2>
 8006fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	db02      	blt.n	8006ff2 <_printf_float+0x22e>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	07d8      	lsls	r0, r3, #31
 8006ff0:	d510      	bpl.n	8007014 <_printf_float+0x250>
 8006ff2:	ee18 3a10 	vmov	r3, s16
 8006ff6:	4652      	mov	r2, sl
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b8      	blx	r7
 8006ffe:	3001      	adds	r0, #1
 8007000:	f43f af41 	beq.w	8006e86 <_printf_float+0xc2>
 8007004:	f04f 0800 	mov.w	r8, #0
 8007008:	f104 091a 	add.w	r9, r4, #26
 800700c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700e:	3b01      	subs	r3, #1
 8007010:	4543      	cmp	r3, r8
 8007012:	dc09      	bgt.n	8007028 <_printf_float+0x264>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	079b      	lsls	r3, r3, #30
 8007018:	f100 8105 	bmi.w	8007226 <_printf_float+0x462>
 800701c:	68e0      	ldr	r0, [r4, #12]
 800701e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007020:	4298      	cmp	r0, r3
 8007022:	bfb8      	it	lt
 8007024:	4618      	movlt	r0, r3
 8007026:	e730      	b.n	8006e8a <_printf_float+0xc6>
 8007028:	2301      	movs	r3, #1
 800702a:	464a      	mov	r2, r9
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	f43f af27 	beq.w	8006e86 <_printf_float+0xc2>
 8007038:	f108 0801 	add.w	r8, r8, #1
 800703c:	e7e6      	b.n	800700c <_printf_float+0x248>
 800703e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	dc39      	bgt.n	80070b8 <_printf_float+0x2f4>
 8007044:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <_printf_float+0x2f0>)
 8007046:	2301      	movs	r3, #1
 8007048:	4631      	mov	r1, r6
 800704a:	4628      	mov	r0, r5
 800704c:	47b8      	blx	r7
 800704e:	3001      	adds	r0, #1
 8007050:	f43f af19 	beq.w	8006e86 <_printf_float+0xc2>
 8007054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007058:	4313      	orrs	r3, r2
 800705a:	d102      	bne.n	8007062 <_printf_float+0x29e>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	07d9      	lsls	r1, r3, #31
 8007060:	d5d8      	bpl.n	8007014 <_printf_float+0x250>
 8007062:	ee18 3a10 	vmov	r3, s16
 8007066:	4652      	mov	r2, sl
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af09 	beq.w	8006e86 <_printf_float+0xc2>
 8007074:	f04f 0900 	mov.w	r9, #0
 8007078:	f104 0a1a 	add.w	sl, r4, #26
 800707c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707e:	425b      	negs	r3, r3
 8007080:	454b      	cmp	r3, r9
 8007082:	dc01      	bgt.n	8007088 <_printf_float+0x2c4>
 8007084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007086:	e792      	b.n	8006fae <_printf_float+0x1ea>
 8007088:	2301      	movs	r3, #1
 800708a:	4652      	mov	r2, sl
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f aef7 	beq.w	8006e86 <_printf_float+0xc2>
 8007098:	f109 0901 	add.w	r9, r9, #1
 800709c:	e7ee      	b.n	800707c <_printf_float+0x2b8>
 800709e:	bf00      	nop
 80070a0:	7fefffff 	.word	0x7fefffff
 80070a4:	0800b624 	.word	0x0800b624
 80070a8:	0800b628 	.word	0x0800b628
 80070ac:	0800b630 	.word	0x0800b630
 80070b0:	0800b62c 	.word	0x0800b62c
 80070b4:	0800b634 	.word	0x0800b634
 80070b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070bc:	429a      	cmp	r2, r3
 80070be:	bfa8      	it	ge
 80070c0:	461a      	movge	r2, r3
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	4691      	mov	r9, r2
 80070c6:	dc37      	bgt.n	8007138 <_printf_float+0x374>
 80070c8:	f04f 0b00 	mov.w	fp, #0
 80070cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070d0:	f104 021a 	add.w	r2, r4, #26
 80070d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070d6:	9305      	str	r3, [sp, #20]
 80070d8:	eba3 0309 	sub.w	r3, r3, r9
 80070dc:	455b      	cmp	r3, fp
 80070de:	dc33      	bgt.n	8007148 <_printf_float+0x384>
 80070e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e4:	429a      	cmp	r2, r3
 80070e6:	db3b      	blt.n	8007160 <_printf_float+0x39c>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	07da      	lsls	r2, r3, #31
 80070ec:	d438      	bmi.n	8007160 <_printf_float+0x39c>
 80070ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f0:	9a05      	ldr	r2, [sp, #20]
 80070f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070f4:	1a9a      	subs	r2, r3, r2
 80070f6:	eba3 0901 	sub.w	r9, r3, r1
 80070fa:	4591      	cmp	r9, r2
 80070fc:	bfa8      	it	ge
 80070fe:	4691      	movge	r9, r2
 8007100:	f1b9 0f00 	cmp.w	r9, #0
 8007104:	dc35      	bgt.n	8007172 <_printf_float+0x3ae>
 8007106:	f04f 0800 	mov.w	r8, #0
 800710a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800710e:	f104 0a1a 	add.w	sl, r4, #26
 8007112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007116:	1a9b      	subs	r3, r3, r2
 8007118:	eba3 0309 	sub.w	r3, r3, r9
 800711c:	4543      	cmp	r3, r8
 800711e:	f77f af79 	ble.w	8007014 <_printf_float+0x250>
 8007122:	2301      	movs	r3, #1
 8007124:	4652      	mov	r2, sl
 8007126:	4631      	mov	r1, r6
 8007128:	4628      	mov	r0, r5
 800712a:	47b8      	blx	r7
 800712c:	3001      	adds	r0, #1
 800712e:	f43f aeaa 	beq.w	8006e86 <_printf_float+0xc2>
 8007132:	f108 0801 	add.w	r8, r8, #1
 8007136:	e7ec      	b.n	8007112 <_printf_float+0x34e>
 8007138:	4613      	mov	r3, r2
 800713a:	4631      	mov	r1, r6
 800713c:	4642      	mov	r2, r8
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	d1c0      	bne.n	80070c8 <_printf_float+0x304>
 8007146:	e69e      	b.n	8006e86 <_printf_float+0xc2>
 8007148:	2301      	movs	r3, #1
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	9205      	str	r2, [sp, #20]
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	f43f ae97 	beq.w	8006e86 <_printf_float+0xc2>
 8007158:	9a05      	ldr	r2, [sp, #20]
 800715a:	f10b 0b01 	add.w	fp, fp, #1
 800715e:	e7b9      	b.n	80070d4 <_printf_float+0x310>
 8007160:	ee18 3a10 	vmov	r3, s16
 8007164:	4652      	mov	r2, sl
 8007166:	4631      	mov	r1, r6
 8007168:	4628      	mov	r0, r5
 800716a:	47b8      	blx	r7
 800716c:	3001      	adds	r0, #1
 800716e:	d1be      	bne.n	80070ee <_printf_float+0x32a>
 8007170:	e689      	b.n	8006e86 <_printf_float+0xc2>
 8007172:	9a05      	ldr	r2, [sp, #20]
 8007174:	464b      	mov	r3, r9
 8007176:	4442      	add	r2, r8
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	d1c1      	bne.n	8007106 <_printf_float+0x342>
 8007182:	e680      	b.n	8006e86 <_printf_float+0xc2>
 8007184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007186:	2a01      	cmp	r2, #1
 8007188:	dc01      	bgt.n	800718e <_printf_float+0x3ca>
 800718a:	07db      	lsls	r3, r3, #31
 800718c:	d538      	bpl.n	8007200 <_printf_float+0x43c>
 800718e:	2301      	movs	r3, #1
 8007190:	4642      	mov	r2, r8
 8007192:	4631      	mov	r1, r6
 8007194:	4628      	mov	r0, r5
 8007196:	47b8      	blx	r7
 8007198:	3001      	adds	r0, #1
 800719a:	f43f ae74 	beq.w	8006e86 <_printf_float+0xc2>
 800719e:	ee18 3a10 	vmov	r3, s16
 80071a2:	4652      	mov	r2, sl
 80071a4:	4631      	mov	r1, r6
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f ae6b 	beq.w	8006e86 <_printf_float+0xc2>
 80071b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071b4:	2200      	movs	r2, #0
 80071b6:	2300      	movs	r3, #0
 80071b8:	f7f9 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80071bc:	b9d8      	cbnz	r0, 80071f6 <_printf_float+0x432>
 80071be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c0:	f108 0201 	add.w	r2, r8, #1
 80071c4:	3b01      	subs	r3, #1
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	d10e      	bne.n	80071ee <_printf_float+0x42a>
 80071d0:	e659      	b.n	8006e86 <_printf_float+0xc2>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4652      	mov	r2, sl
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f ae52 	beq.w	8006e86 <_printf_float+0xc2>
 80071e2:	f108 0801 	add.w	r8, r8, #1
 80071e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4543      	cmp	r3, r8
 80071ec:	dcf1      	bgt.n	80071d2 <_printf_float+0x40e>
 80071ee:	464b      	mov	r3, r9
 80071f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071f4:	e6dc      	b.n	8006fb0 <_printf_float+0x1ec>
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	f104 0a1a 	add.w	sl, r4, #26
 80071fe:	e7f2      	b.n	80071e6 <_printf_float+0x422>
 8007200:	2301      	movs	r3, #1
 8007202:	4642      	mov	r2, r8
 8007204:	e7df      	b.n	80071c6 <_printf_float+0x402>
 8007206:	2301      	movs	r3, #1
 8007208:	464a      	mov	r2, r9
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f ae38 	beq.w	8006e86 <_printf_float+0xc2>
 8007216:	f108 0801 	add.w	r8, r8, #1
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800721e:	1a5b      	subs	r3, r3, r1
 8007220:	4543      	cmp	r3, r8
 8007222:	dcf0      	bgt.n	8007206 <_printf_float+0x442>
 8007224:	e6fa      	b.n	800701c <_printf_float+0x258>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	f104 0919 	add.w	r9, r4, #25
 800722e:	e7f4      	b.n	800721a <_printf_float+0x456>

08007230 <_printf_common>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	4616      	mov	r6, r2
 8007236:	4699      	mov	r9, r3
 8007238:	688a      	ldr	r2, [r1, #8]
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007240:	4293      	cmp	r3, r2
 8007242:	bfb8      	it	lt
 8007244:	4613      	movlt	r3, r2
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800724c:	4607      	mov	r7, r0
 800724e:	460c      	mov	r4, r1
 8007250:	b10a      	cbz	r2, 8007256 <_printf_common+0x26>
 8007252:	3301      	adds	r3, #1
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	0699      	lsls	r1, r3, #26
 800725a:	bf42      	ittt	mi
 800725c:	6833      	ldrmi	r3, [r6, #0]
 800725e:	3302      	addmi	r3, #2
 8007260:	6033      	strmi	r3, [r6, #0]
 8007262:	6825      	ldr	r5, [r4, #0]
 8007264:	f015 0506 	ands.w	r5, r5, #6
 8007268:	d106      	bne.n	8007278 <_printf_common+0x48>
 800726a:	f104 0a19 	add.w	sl, r4, #25
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	6832      	ldr	r2, [r6, #0]
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	42ab      	cmp	r3, r5
 8007276:	dc26      	bgt.n	80072c6 <_printf_common+0x96>
 8007278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800727c:	1e13      	subs	r3, r2, #0
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	bf18      	it	ne
 8007282:	2301      	movne	r3, #1
 8007284:	0692      	lsls	r2, r2, #26
 8007286:	d42b      	bmi.n	80072e0 <_printf_common+0xb0>
 8007288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800728c:	4649      	mov	r1, r9
 800728e:	4638      	mov	r0, r7
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d01e      	beq.n	80072d4 <_printf_common+0xa4>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	68e5      	ldr	r5, [r4, #12]
 800729a:	6832      	ldr	r2, [r6, #0]
 800729c:	f003 0306 	and.w	r3, r3, #6
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	bf08      	it	eq
 80072a4:	1aad      	subeq	r5, r5, r2
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	6922      	ldr	r2, [r4, #16]
 80072aa:	bf0c      	ite	eq
 80072ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b0:	2500      	movne	r5, #0
 80072b2:	4293      	cmp	r3, r2
 80072b4:	bfc4      	itt	gt
 80072b6:	1a9b      	subgt	r3, r3, r2
 80072b8:	18ed      	addgt	r5, r5, r3
 80072ba:	2600      	movs	r6, #0
 80072bc:	341a      	adds	r4, #26
 80072be:	42b5      	cmp	r5, r6
 80072c0:	d11a      	bne.n	80072f8 <_printf_common+0xc8>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e008      	b.n	80072d8 <_printf_common+0xa8>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4652      	mov	r2, sl
 80072ca:	4649      	mov	r1, r9
 80072cc:	4638      	mov	r0, r7
 80072ce:	47c0      	blx	r8
 80072d0:	3001      	adds	r0, #1
 80072d2:	d103      	bne.n	80072dc <_printf_common+0xac>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072dc:	3501      	adds	r5, #1
 80072de:	e7c6      	b.n	800726e <_printf_common+0x3e>
 80072e0:	18e1      	adds	r1, r4, r3
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	2030      	movs	r0, #48	; 0x30
 80072e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ea:	4422      	add	r2, r4
 80072ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f4:	3302      	adds	r3, #2
 80072f6:	e7c7      	b.n	8007288 <_printf_common+0x58>
 80072f8:	2301      	movs	r3, #1
 80072fa:	4622      	mov	r2, r4
 80072fc:	4649      	mov	r1, r9
 80072fe:	4638      	mov	r0, r7
 8007300:	47c0      	blx	r8
 8007302:	3001      	adds	r0, #1
 8007304:	d0e6      	beq.n	80072d4 <_printf_common+0xa4>
 8007306:	3601      	adds	r6, #1
 8007308:	e7d9      	b.n	80072be <_printf_common+0x8e>
	...

0800730c <_printf_i>:
 800730c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	7e0f      	ldrb	r7, [r1, #24]
 8007312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007314:	2f78      	cmp	r7, #120	; 0x78
 8007316:	4691      	mov	r9, r2
 8007318:	4680      	mov	r8, r0
 800731a:	460c      	mov	r4, r1
 800731c:	469a      	mov	sl, r3
 800731e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007322:	d807      	bhi.n	8007334 <_printf_i+0x28>
 8007324:	2f62      	cmp	r7, #98	; 0x62
 8007326:	d80a      	bhi.n	800733e <_printf_i+0x32>
 8007328:	2f00      	cmp	r7, #0
 800732a:	f000 80d8 	beq.w	80074de <_printf_i+0x1d2>
 800732e:	2f58      	cmp	r7, #88	; 0x58
 8007330:	f000 80a3 	beq.w	800747a <_printf_i+0x16e>
 8007334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800733c:	e03a      	b.n	80073b4 <_printf_i+0xa8>
 800733e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007342:	2b15      	cmp	r3, #21
 8007344:	d8f6      	bhi.n	8007334 <_printf_i+0x28>
 8007346:	a101      	add	r1, pc, #4	; (adr r1, 800734c <_printf_i+0x40>)
 8007348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800734c:	080073a5 	.word	0x080073a5
 8007350:	080073b9 	.word	0x080073b9
 8007354:	08007335 	.word	0x08007335
 8007358:	08007335 	.word	0x08007335
 800735c:	08007335 	.word	0x08007335
 8007360:	08007335 	.word	0x08007335
 8007364:	080073b9 	.word	0x080073b9
 8007368:	08007335 	.word	0x08007335
 800736c:	08007335 	.word	0x08007335
 8007370:	08007335 	.word	0x08007335
 8007374:	08007335 	.word	0x08007335
 8007378:	080074c5 	.word	0x080074c5
 800737c:	080073e9 	.word	0x080073e9
 8007380:	080074a7 	.word	0x080074a7
 8007384:	08007335 	.word	0x08007335
 8007388:	08007335 	.word	0x08007335
 800738c:	080074e7 	.word	0x080074e7
 8007390:	08007335 	.word	0x08007335
 8007394:	080073e9 	.word	0x080073e9
 8007398:	08007335 	.word	0x08007335
 800739c:	08007335 	.word	0x08007335
 80073a0:	080074af 	.word	0x080074af
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	1d1a      	adds	r2, r3, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	602a      	str	r2, [r5, #0]
 80073ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0a3      	b.n	8007500 <_printf_i+0x1f4>
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	6829      	ldr	r1, [r5, #0]
 80073bc:	0606      	lsls	r6, r0, #24
 80073be:	f101 0304 	add.w	r3, r1, #4
 80073c2:	d50a      	bpl.n	80073da <_printf_i+0xce>
 80073c4:	680e      	ldr	r6, [r1, #0]
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	2e00      	cmp	r6, #0
 80073ca:	da03      	bge.n	80073d4 <_printf_i+0xc8>
 80073cc:	232d      	movs	r3, #45	; 0x2d
 80073ce:	4276      	negs	r6, r6
 80073d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d4:	485e      	ldr	r0, [pc, #376]	; (8007550 <_printf_i+0x244>)
 80073d6:	230a      	movs	r3, #10
 80073d8:	e019      	b.n	800740e <_printf_i+0x102>
 80073da:	680e      	ldr	r6, [r1, #0]
 80073dc:	602b      	str	r3, [r5, #0]
 80073de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073e2:	bf18      	it	ne
 80073e4:	b236      	sxthne	r6, r6
 80073e6:	e7ef      	b.n	80073c8 <_printf_i+0xbc>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	6820      	ldr	r0, [r4, #0]
 80073ec:	1d19      	adds	r1, r3, #4
 80073ee:	6029      	str	r1, [r5, #0]
 80073f0:	0601      	lsls	r1, r0, #24
 80073f2:	d501      	bpl.n	80073f8 <_printf_i+0xec>
 80073f4:	681e      	ldr	r6, [r3, #0]
 80073f6:	e002      	b.n	80073fe <_printf_i+0xf2>
 80073f8:	0646      	lsls	r6, r0, #25
 80073fa:	d5fb      	bpl.n	80073f4 <_printf_i+0xe8>
 80073fc:	881e      	ldrh	r6, [r3, #0]
 80073fe:	4854      	ldr	r0, [pc, #336]	; (8007550 <_printf_i+0x244>)
 8007400:	2f6f      	cmp	r7, #111	; 0x6f
 8007402:	bf0c      	ite	eq
 8007404:	2308      	moveq	r3, #8
 8007406:	230a      	movne	r3, #10
 8007408:	2100      	movs	r1, #0
 800740a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800740e:	6865      	ldr	r5, [r4, #4]
 8007410:	60a5      	str	r5, [r4, #8]
 8007412:	2d00      	cmp	r5, #0
 8007414:	bfa2      	ittt	ge
 8007416:	6821      	ldrge	r1, [r4, #0]
 8007418:	f021 0104 	bicge.w	r1, r1, #4
 800741c:	6021      	strge	r1, [r4, #0]
 800741e:	b90e      	cbnz	r6, 8007424 <_printf_i+0x118>
 8007420:	2d00      	cmp	r5, #0
 8007422:	d04d      	beq.n	80074c0 <_printf_i+0x1b4>
 8007424:	4615      	mov	r5, r2
 8007426:	fbb6 f1f3 	udiv	r1, r6, r3
 800742a:	fb03 6711 	mls	r7, r3, r1, r6
 800742e:	5dc7      	ldrb	r7, [r0, r7]
 8007430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007434:	4637      	mov	r7, r6
 8007436:	42bb      	cmp	r3, r7
 8007438:	460e      	mov	r6, r1
 800743a:	d9f4      	bls.n	8007426 <_printf_i+0x11a>
 800743c:	2b08      	cmp	r3, #8
 800743e:	d10b      	bne.n	8007458 <_printf_i+0x14c>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	07de      	lsls	r6, r3, #31
 8007444:	d508      	bpl.n	8007458 <_printf_i+0x14c>
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	6861      	ldr	r1, [r4, #4]
 800744a:	4299      	cmp	r1, r3
 800744c:	bfde      	ittt	le
 800744e:	2330      	movle	r3, #48	; 0x30
 8007450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007458:	1b52      	subs	r2, r2, r5
 800745a:	6122      	str	r2, [r4, #16]
 800745c:	f8cd a000 	str.w	sl, [sp]
 8007460:	464b      	mov	r3, r9
 8007462:	aa03      	add	r2, sp, #12
 8007464:	4621      	mov	r1, r4
 8007466:	4640      	mov	r0, r8
 8007468:	f7ff fee2 	bl	8007230 <_printf_common>
 800746c:	3001      	adds	r0, #1
 800746e:	d14c      	bne.n	800750a <_printf_i+0x1fe>
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	b004      	add	sp, #16
 8007476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747a:	4835      	ldr	r0, [pc, #212]	; (8007550 <_printf_i+0x244>)
 800747c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007480:	6829      	ldr	r1, [r5, #0]
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	f851 6b04 	ldr.w	r6, [r1], #4
 8007488:	6029      	str	r1, [r5, #0]
 800748a:	061d      	lsls	r5, r3, #24
 800748c:	d514      	bpl.n	80074b8 <_printf_i+0x1ac>
 800748e:	07df      	lsls	r7, r3, #31
 8007490:	bf44      	itt	mi
 8007492:	f043 0320 	orrmi.w	r3, r3, #32
 8007496:	6023      	strmi	r3, [r4, #0]
 8007498:	b91e      	cbnz	r6, 80074a2 <_printf_i+0x196>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f023 0320 	bic.w	r3, r3, #32
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	2310      	movs	r3, #16
 80074a4:	e7b0      	b.n	8007408 <_printf_i+0xfc>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	f043 0320 	orr.w	r3, r3, #32
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	2378      	movs	r3, #120	; 0x78
 80074b0:	4828      	ldr	r0, [pc, #160]	; (8007554 <_printf_i+0x248>)
 80074b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074b6:	e7e3      	b.n	8007480 <_printf_i+0x174>
 80074b8:	0659      	lsls	r1, r3, #25
 80074ba:	bf48      	it	mi
 80074bc:	b2b6      	uxthmi	r6, r6
 80074be:	e7e6      	b.n	800748e <_printf_i+0x182>
 80074c0:	4615      	mov	r5, r2
 80074c2:	e7bb      	b.n	800743c <_printf_i+0x130>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	6826      	ldr	r6, [r4, #0]
 80074c8:	6961      	ldr	r1, [r4, #20]
 80074ca:	1d18      	adds	r0, r3, #4
 80074cc:	6028      	str	r0, [r5, #0]
 80074ce:	0635      	lsls	r5, r6, #24
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	d501      	bpl.n	80074d8 <_printf_i+0x1cc>
 80074d4:	6019      	str	r1, [r3, #0]
 80074d6:	e002      	b.n	80074de <_printf_i+0x1d2>
 80074d8:	0670      	lsls	r0, r6, #25
 80074da:	d5fb      	bpl.n	80074d4 <_printf_i+0x1c8>
 80074dc:	8019      	strh	r1, [r3, #0]
 80074de:	2300      	movs	r3, #0
 80074e0:	6123      	str	r3, [r4, #16]
 80074e2:	4615      	mov	r5, r2
 80074e4:	e7ba      	b.n	800745c <_printf_i+0x150>
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	1d1a      	adds	r2, r3, #4
 80074ea:	602a      	str	r2, [r5, #0]
 80074ec:	681d      	ldr	r5, [r3, #0]
 80074ee:	6862      	ldr	r2, [r4, #4]
 80074f0:	2100      	movs	r1, #0
 80074f2:	4628      	mov	r0, r5
 80074f4:	f7f8 fe74 	bl	80001e0 <memchr>
 80074f8:	b108      	cbz	r0, 80074fe <_printf_i+0x1f2>
 80074fa:	1b40      	subs	r0, r0, r5
 80074fc:	6060      	str	r0, [r4, #4]
 80074fe:	6863      	ldr	r3, [r4, #4]
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	2300      	movs	r3, #0
 8007504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007508:	e7a8      	b.n	800745c <_printf_i+0x150>
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	462a      	mov	r2, r5
 800750e:	4649      	mov	r1, r9
 8007510:	4640      	mov	r0, r8
 8007512:	47d0      	blx	sl
 8007514:	3001      	adds	r0, #1
 8007516:	d0ab      	beq.n	8007470 <_printf_i+0x164>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	079b      	lsls	r3, r3, #30
 800751c:	d413      	bmi.n	8007546 <_printf_i+0x23a>
 800751e:	68e0      	ldr	r0, [r4, #12]
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	4298      	cmp	r0, r3
 8007524:	bfb8      	it	lt
 8007526:	4618      	movlt	r0, r3
 8007528:	e7a4      	b.n	8007474 <_printf_i+0x168>
 800752a:	2301      	movs	r3, #1
 800752c:	4632      	mov	r2, r6
 800752e:	4649      	mov	r1, r9
 8007530:	4640      	mov	r0, r8
 8007532:	47d0      	blx	sl
 8007534:	3001      	adds	r0, #1
 8007536:	d09b      	beq.n	8007470 <_printf_i+0x164>
 8007538:	3501      	adds	r5, #1
 800753a:	68e3      	ldr	r3, [r4, #12]
 800753c:	9903      	ldr	r1, [sp, #12]
 800753e:	1a5b      	subs	r3, r3, r1
 8007540:	42ab      	cmp	r3, r5
 8007542:	dcf2      	bgt.n	800752a <_printf_i+0x21e>
 8007544:	e7eb      	b.n	800751e <_printf_i+0x212>
 8007546:	2500      	movs	r5, #0
 8007548:	f104 0619 	add.w	r6, r4, #25
 800754c:	e7f5      	b.n	800753a <_printf_i+0x22e>
 800754e:	bf00      	nop
 8007550:	0800b636 	.word	0x0800b636
 8007554:	0800b647 	.word	0x0800b647

08007558 <_scanf_float>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	b087      	sub	sp, #28
 800755e:	4617      	mov	r7, r2
 8007560:	9303      	str	r3, [sp, #12]
 8007562:	688b      	ldr	r3, [r1, #8]
 8007564:	1e5a      	subs	r2, r3, #1
 8007566:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800756a:	bf83      	ittte	hi
 800756c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007570:	195b      	addhi	r3, r3, r5
 8007572:	9302      	strhi	r3, [sp, #8]
 8007574:	2300      	movls	r3, #0
 8007576:	bf86      	itte	hi
 8007578:	f240 135d 	movwhi	r3, #349	; 0x15d
 800757c:	608b      	strhi	r3, [r1, #8]
 800757e:	9302      	strls	r3, [sp, #8]
 8007580:	680b      	ldr	r3, [r1, #0]
 8007582:	468b      	mov	fp, r1
 8007584:	2500      	movs	r5, #0
 8007586:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800758a:	f84b 3b1c 	str.w	r3, [fp], #28
 800758e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007592:	4680      	mov	r8, r0
 8007594:	460c      	mov	r4, r1
 8007596:	465e      	mov	r6, fp
 8007598:	46aa      	mov	sl, r5
 800759a:	46a9      	mov	r9, r5
 800759c:	9501      	str	r5, [sp, #4]
 800759e:	68a2      	ldr	r2, [r4, #8]
 80075a0:	b152      	cbz	r2, 80075b8 <_scanf_float+0x60>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b4e      	cmp	r3, #78	; 0x4e
 80075a8:	d864      	bhi.n	8007674 <_scanf_float+0x11c>
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d83c      	bhi.n	8007628 <_scanf_float+0xd0>
 80075ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075b2:	b2c8      	uxtb	r0, r1
 80075b4:	280e      	cmp	r0, #14
 80075b6:	d93a      	bls.n	800762e <_scanf_float+0xd6>
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	d003      	beq.n	80075c6 <_scanf_float+0x6e>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ca:	f1ba 0f01 	cmp.w	sl, #1
 80075ce:	f200 8113 	bhi.w	80077f8 <_scanf_float+0x2a0>
 80075d2:	455e      	cmp	r6, fp
 80075d4:	f200 8105 	bhi.w	80077e2 <_scanf_float+0x28a>
 80075d8:	2501      	movs	r5, #1
 80075da:	4628      	mov	r0, r5
 80075dc:	b007      	add	sp, #28
 80075de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80075e6:	2a0d      	cmp	r2, #13
 80075e8:	d8e6      	bhi.n	80075b8 <_scanf_float+0x60>
 80075ea:	a101      	add	r1, pc, #4	; (adr r1, 80075f0 <_scanf_float+0x98>)
 80075ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075f0:	0800772f 	.word	0x0800772f
 80075f4:	080075b9 	.word	0x080075b9
 80075f8:	080075b9 	.word	0x080075b9
 80075fc:	080075b9 	.word	0x080075b9
 8007600:	0800778f 	.word	0x0800778f
 8007604:	08007767 	.word	0x08007767
 8007608:	080075b9 	.word	0x080075b9
 800760c:	080075b9 	.word	0x080075b9
 8007610:	0800773d 	.word	0x0800773d
 8007614:	080075b9 	.word	0x080075b9
 8007618:	080075b9 	.word	0x080075b9
 800761c:	080075b9 	.word	0x080075b9
 8007620:	080075b9 	.word	0x080075b9
 8007624:	080076f5 	.word	0x080076f5
 8007628:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800762c:	e7db      	b.n	80075e6 <_scanf_float+0x8e>
 800762e:	290e      	cmp	r1, #14
 8007630:	d8c2      	bhi.n	80075b8 <_scanf_float+0x60>
 8007632:	a001      	add	r0, pc, #4	; (adr r0, 8007638 <_scanf_float+0xe0>)
 8007634:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007638:	080076e7 	.word	0x080076e7
 800763c:	080075b9 	.word	0x080075b9
 8007640:	080076e7 	.word	0x080076e7
 8007644:	0800777b 	.word	0x0800777b
 8007648:	080075b9 	.word	0x080075b9
 800764c:	08007695 	.word	0x08007695
 8007650:	080076d1 	.word	0x080076d1
 8007654:	080076d1 	.word	0x080076d1
 8007658:	080076d1 	.word	0x080076d1
 800765c:	080076d1 	.word	0x080076d1
 8007660:	080076d1 	.word	0x080076d1
 8007664:	080076d1 	.word	0x080076d1
 8007668:	080076d1 	.word	0x080076d1
 800766c:	080076d1 	.word	0x080076d1
 8007670:	080076d1 	.word	0x080076d1
 8007674:	2b6e      	cmp	r3, #110	; 0x6e
 8007676:	d809      	bhi.n	800768c <_scanf_float+0x134>
 8007678:	2b60      	cmp	r3, #96	; 0x60
 800767a:	d8b2      	bhi.n	80075e2 <_scanf_float+0x8a>
 800767c:	2b54      	cmp	r3, #84	; 0x54
 800767e:	d077      	beq.n	8007770 <_scanf_float+0x218>
 8007680:	2b59      	cmp	r3, #89	; 0x59
 8007682:	d199      	bne.n	80075b8 <_scanf_float+0x60>
 8007684:	2d07      	cmp	r5, #7
 8007686:	d197      	bne.n	80075b8 <_scanf_float+0x60>
 8007688:	2508      	movs	r5, #8
 800768a:	e029      	b.n	80076e0 <_scanf_float+0x188>
 800768c:	2b74      	cmp	r3, #116	; 0x74
 800768e:	d06f      	beq.n	8007770 <_scanf_float+0x218>
 8007690:	2b79      	cmp	r3, #121	; 0x79
 8007692:	e7f6      	b.n	8007682 <_scanf_float+0x12a>
 8007694:	6821      	ldr	r1, [r4, #0]
 8007696:	05c8      	lsls	r0, r1, #23
 8007698:	d51a      	bpl.n	80076d0 <_scanf_float+0x178>
 800769a:	9b02      	ldr	r3, [sp, #8]
 800769c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076a0:	6021      	str	r1, [r4, #0]
 80076a2:	f109 0901 	add.w	r9, r9, #1
 80076a6:	b11b      	cbz	r3, 80076b0 <_scanf_float+0x158>
 80076a8:	3b01      	subs	r3, #1
 80076aa:	3201      	adds	r2, #1
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	60a2      	str	r2, [r4, #8]
 80076b0:	68a3      	ldr	r3, [r4, #8]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	3301      	adds	r3, #1
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	f340 8084 	ble.w	80077d0 <_scanf_float+0x278>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	e766      	b.n	800759e <_scanf_float+0x46>
 80076d0:	eb1a 0f05 	cmn.w	sl, r5
 80076d4:	f47f af70 	bne.w	80075b8 <_scanf_float+0x60>
 80076d8:	6822      	ldr	r2, [r4, #0]
 80076da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	f806 3b01 	strb.w	r3, [r6], #1
 80076e4:	e7e4      	b.n	80076b0 <_scanf_float+0x158>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	0610      	lsls	r0, r2, #24
 80076ea:	f57f af65 	bpl.w	80075b8 <_scanf_float+0x60>
 80076ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076f2:	e7f4      	b.n	80076de <_scanf_float+0x186>
 80076f4:	f1ba 0f00 	cmp.w	sl, #0
 80076f8:	d10e      	bne.n	8007718 <_scanf_float+0x1c0>
 80076fa:	f1b9 0f00 	cmp.w	r9, #0
 80076fe:	d10e      	bne.n	800771e <_scanf_float+0x1c6>
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007706:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800770a:	d108      	bne.n	800771e <_scanf_float+0x1c6>
 800770c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007710:	6022      	str	r2, [r4, #0]
 8007712:	f04f 0a01 	mov.w	sl, #1
 8007716:	e7e3      	b.n	80076e0 <_scanf_float+0x188>
 8007718:	f1ba 0f02 	cmp.w	sl, #2
 800771c:	d055      	beq.n	80077ca <_scanf_float+0x272>
 800771e:	2d01      	cmp	r5, #1
 8007720:	d002      	beq.n	8007728 <_scanf_float+0x1d0>
 8007722:	2d04      	cmp	r5, #4
 8007724:	f47f af48 	bne.w	80075b8 <_scanf_float+0x60>
 8007728:	3501      	adds	r5, #1
 800772a:	b2ed      	uxtb	r5, r5
 800772c:	e7d8      	b.n	80076e0 <_scanf_float+0x188>
 800772e:	f1ba 0f01 	cmp.w	sl, #1
 8007732:	f47f af41 	bne.w	80075b8 <_scanf_float+0x60>
 8007736:	f04f 0a02 	mov.w	sl, #2
 800773a:	e7d1      	b.n	80076e0 <_scanf_float+0x188>
 800773c:	b97d      	cbnz	r5, 800775e <_scanf_float+0x206>
 800773e:	f1b9 0f00 	cmp.w	r9, #0
 8007742:	f47f af3c 	bne.w	80075be <_scanf_float+0x66>
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800774c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007750:	f47f af39 	bne.w	80075c6 <_scanf_float+0x6e>
 8007754:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007758:	6022      	str	r2, [r4, #0]
 800775a:	2501      	movs	r5, #1
 800775c:	e7c0      	b.n	80076e0 <_scanf_float+0x188>
 800775e:	2d03      	cmp	r5, #3
 8007760:	d0e2      	beq.n	8007728 <_scanf_float+0x1d0>
 8007762:	2d05      	cmp	r5, #5
 8007764:	e7de      	b.n	8007724 <_scanf_float+0x1cc>
 8007766:	2d02      	cmp	r5, #2
 8007768:	f47f af26 	bne.w	80075b8 <_scanf_float+0x60>
 800776c:	2503      	movs	r5, #3
 800776e:	e7b7      	b.n	80076e0 <_scanf_float+0x188>
 8007770:	2d06      	cmp	r5, #6
 8007772:	f47f af21 	bne.w	80075b8 <_scanf_float+0x60>
 8007776:	2507      	movs	r5, #7
 8007778:	e7b2      	b.n	80076e0 <_scanf_float+0x188>
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	0591      	lsls	r1, r2, #22
 800777e:	f57f af1b 	bpl.w	80075b8 <_scanf_float+0x60>
 8007782:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	f8cd 9004 	str.w	r9, [sp, #4]
 800778c:	e7a8      	b.n	80076e0 <_scanf_float+0x188>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007794:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007798:	d006      	beq.n	80077a8 <_scanf_float+0x250>
 800779a:	0550      	lsls	r0, r2, #21
 800779c:	f57f af0c 	bpl.w	80075b8 <_scanf_float+0x60>
 80077a0:	f1b9 0f00 	cmp.w	r9, #0
 80077a4:	f43f af0f 	beq.w	80075c6 <_scanf_float+0x6e>
 80077a8:	0591      	lsls	r1, r2, #22
 80077aa:	bf58      	it	pl
 80077ac:	9901      	ldrpl	r1, [sp, #4]
 80077ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077b2:	bf58      	it	pl
 80077b4:	eba9 0101 	subpl.w	r1, r9, r1
 80077b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80077bc:	bf58      	it	pl
 80077be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077c2:	6022      	str	r2, [r4, #0]
 80077c4:	f04f 0900 	mov.w	r9, #0
 80077c8:	e78a      	b.n	80076e0 <_scanf_float+0x188>
 80077ca:	f04f 0a03 	mov.w	sl, #3
 80077ce:	e787      	b.n	80076e0 <_scanf_float+0x188>
 80077d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077d4:	4639      	mov	r1, r7
 80077d6:	4640      	mov	r0, r8
 80077d8:	4798      	blx	r3
 80077da:	2800      	cmp	r0, #0
 80077dc:	f43f aedf 	beq.w	800759e <_scanf_float+0x46>
 80077e0:	e6ea      	b.n	80075b8 <_scanf_float+0x60>
 80077e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077ea:	463a      	mov	r2, r7
 80077ec:	4640      	mov	r0, r8
 80077ee:	4798      	blx	r3
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	e6ec      	b.n	80075d2 <_scanf_float+0x7a>
 80077f8:	1e6b      	subs	r3, r5, #1
 80077fa:	2b06      	cmp	r3, #6
 80077fc:	d825      	bhi.n	800784a <_scanf_float+0x2f2>
 80077fe:	2d02      	cmp	r5, #2
 8007800:	d836      	bhi.n	8007870 <_scanf_float+0x318>
 8007802:	455e      	cmp	r6, fp
 8007804:	f67f aee8 	bls.w	80075d8 <_scanf_float+0x80>
 8007808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800780c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007810:	463a      	mov	r2, r7
 8007812:	4640      	mov	r0, r8
 8007814:	4798      	blx	r3
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	3b01      	subs	r3, #1
 800781a:	6123      	str	r3, [r4, #16]
 800781c:	e7f1      	b.n	8007802 <_scanf_float+0x2aa>
 800781e:	9802      	ldr	r0, [sp, #8]
 8007820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007824:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007828:	9002      	str	r0, [sp, #8]
 800782a:	463a      	mov	r2, r7
 800782c:	4640      	mov	r0, r8
 800782e:	4798      	blx	r3
 8007830:	6923      	ldr	r3, [r4, #16]
 8007832:	3b01      	subs	r3, #1
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800783a:	fa5f fa8a 	uxtb.w	sl, sl
 800783e:	f1ba 0f02 	cmp.w	sl, #2
 8007842:	d1ec      	bne.n	800781e <_scanf_float+0x2c6>
 8007844:	3d03      	subs	r5, #3
 8007846:	b2ed      	uxtb	r5, r5
 8007848:	1b76      	subs	r6, r6, r5
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	05da      	lsls	r2, r3, #23
 800784e:	d52f      	bpl.n	80078b0 <_scanf_float+0x358>
 8007850:	055b      	lsls	r3, r3, #21
 8007852:	d510      	bpl.n	8007876 <_scanf_float+0x31e>
 8007854:	455e      	cmp	r6, fp
 8007856:	f67f aebf 	bls.w	80075d8 <_scanf_float+0x80>
 800785a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800785e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007862:	463a      	mov	r2, r7
 8007864:	4640      	mov	r0, r8
 8007866:	4798      	blx	r3
 8007868:	6923      	ldr	r3, [r4, #16]
 800786a:	3b01      	subs	r3, #1
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	e7f1      	b.n	8007854 <_scanf_float+0x2fc>
 8007870:	46aa      	mov	sl, r5
 8007872:	9602      	str	r6, [sp, #8]
 8007874:	e7df      	b.n	8007836 <_scanf_float+0x2de>
 8007876:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	2965      	cmp	r1, #101	; 0x65
 800787e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007882:	f106 35ff 	add.w	r5, r6, #4294967295
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	d00c      	beq.n	80078a4 <_scanf_float+0x34c>
 800788a:	2945      	cmp	r1, #69	; 0x45
 800788c:	d00a      	beq.n	80078a4 <_scanf_float+0x34c>
 800788e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007892:	463a      	mov	r2, r7
 8007894:	4640      	mov	r0, r8
 8007896:	4798      	blx	r3
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800789e:	3b01      	subs	r3, #1
 80078a0:	1eb5      	subs	r5, r6, #2
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078a8:	463a      	mov	r2, r7
 80078aa:	4640      	mov	r0, r8
 80078ac:	4798      	blx	r3
 80078ae:	462e      	mov	r6, r5
 80078b0:	6825      	ldr	r5, [r4, #0]
 80078b2:	f015 0510 	ands.w	r5, r5, #16
 80078b6:	d159      	bne.n	800796c <_scanf_float+0x414>
 80078b8:	7035      	strb	r5, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c4:	d11b      	bne.n	80078fe <_scanf_float+0x3a6>
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	454b      	cmp	r3, r9
 80078ca:	eba3 0209 	sub.w	r2, r3, r9
 80078ce:	d123      	bne.n	8007918 <_scanf_float+0x3c0>
 80078d0:	2200      	movs	r2, #0
 80078d2:	4659      	mov	r1, fp
 80078d4:	4640      	mov	r0, r8
 80078d6:	f000 feb1 	bl	800863c <_strtod_r>
 80078da:	6822      	ldr	r2, [r4, #0]
 80078dc:	9b03      	ldr	r3, [sp, #12]
 80078de:	f012 0f02 	tst.w	r2, #2
 80078e2:	ec57 6b10 	vmov	r6, r7, d0
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	d021      	beq.n	800792e <_scanf_float+0x3d6>
 80078ea:	9903      	ldr	r1, [sp, #12]
 80078ec:	1d1a      	adds	r2, r3, #4
 80078ee:	600a      	str	r2, [r1, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	e9c3 6700 	strd	r6, r7, [r3]
 80078f6:	68e3      	ldr	r3, [r4, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60e3      	str	r3, [r4, #12]
 80078fc:	e66d      	b.n	80075da <_scanf_float+0x82>
 80078fe:	9b04      	ldr	r3, [sp, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0e5      	beq.n	80078d0 <_scanf_float+0x378>
 8007904:	9905      	ldr	r1, [sp, #20]
 8007906:	230a      	movs	r3, #10
 8007908:	462a      	mov	r2, r5
 800790a:	3101      	adds	r1, #1
 800790c:	4640      	mov	r0, r8
 800790e:	f000 ff1d 	bl	800874c <_strtol_r>
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	9e05      	ldr	r6, [sp, #20]
 8007916:	1ac2      	subs	r2, r0, r3
 8007918:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800791c:	429e      	cmp	r6, r3
 800791e:	bf28      	it	cs
 8007920:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007924:	4912      	ldr	r1, [pc, #72]	; (8007970 <_scanf_float+0x418>)
 8007926:	4630      	mov	r0, r6
 8007928:	f000 f844 	bl	80079b4 <siprintf>
 800792c:	e7d0      	b.n	80078d0 <_scanf_float+0x378>
 800792e:	9903      	ldr	r1, [sp, #12]
 8007930:	f012 0f04 	tst.w	r2, #4
 8007934:	f103 0204 	add.w	r2, r3, #4
 8007938:	600a      	str	r2, [r1, #0]
 800793a:	d1d9      	bne.n	80078f0 <_scanf_float+0x398>
 800793c:	f8d3 8000 	ldr.w	r8, [r3]
 8007940:	ee10 2a10 	vmov	r2, s0
 8007944:	ee10 0a10 	vmov	r0, s0
 8007948:	463b      	mov	r3, r7
 800794a:	4639      	mov	r1, r7
 800794c:	f7f9 f8ee 	bl	8000b2c <__aeabi_dcmpun>
 8007950:	b128      	cbz	r0, 800795e <_scanf_float+0x406>
 8007952:	4808      	ldr	r0, [pc, #32]	; (8007974 <_scanf_float+0x41c>)
 8007954:	f000 f828 	bl	80079a8 <nanf>
 8007958:	ed88 0a00 	vstr	s0, [r8]
 800795c:	e7cb      	b.n	80078f6 <_scanf_float+0x39e>
 800795e:	4630      	mov	r0, r6
 8007960:	4639      	mov	r1, r7
 8007962:	f7f9 f941 	bl	8000be8 <__aeabi_d2f>
 8007966:	f8c8 0000 	str.w	r0, [r8]
 800796a:	e7c4      	b.n	80078f6 <_scanf_float+0x39e>
 800796c:	2500      	movs	r5, #0
 800796e:	e634      	b.n	80075da <_scanf_float+0x82>
 8007970:	0800b658 	.word	0x0800b658
 8007974:	0800bac8 	.word	0x0800bac8

08007978 <iprintf>:
 8007978:	b40f      	push	{r0, r1, r2, r3}
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <iprintf+0x2c>)
 800797c:	b513      	push	{r0, r1, r4, lr}
 800797e:	681c      	ldr	r4, [r3, #0]
 8007980:	b124      	cbz	r4, 800798c <iprintf+0x14>
 8007982:	69a3      	ldr	r3, [r4, #24]
 8007984:	b913      	cbnz	r3, 800798c <iprintf+0x14>
 8007986:	4620      	mov	r0, r4
 8007988:	f001 fdb4 	bl	80094f4 <__sinit>
 800798c:	ab05      	add	r3, sp, #20
 800798e:	9a04      	ldr	r2, [sp, #16]
 8007990:	68a1      	ldr	r1, [r4, #8]
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	4620      	mov	r0, r4
 8007996:	f003 f927 	bl	800abe8 <_vfiprintf_r>
 800799a:	b002      	add	sp, #8
 800799c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a0:	b004      	add	sp, #16
 80079a2:	4770      	bx	lr
 80079a4:	2000000c 	.word	0x2000000c

080079a8 <nanf>:
 80079a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079b0 <nanf+0x8>
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	7fc00000 	.word	0x7fc00000

080079b4 <siprintf>:
 80079b4:	b40e      	push	{r1, r2, r3}
 80079b6:	b500      	push	{lr}
 80079b8:	b09c      	sub	sp, #112	; 0x70
 80079ba:	ab1d      	add	r3, sp, #116	; 0x74
 80079bc:	9002      	str	r0, [sp, #8]
 80079be:	9006      	str	r0, [sp, #24]
 80079c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079c4:	4809      	ldr	r0, [pc, #36]	; (80079ec <siprintf+0x38>)
 80079c6:	9107      	str	r1, [sp, #28]
 80079c8:	9104      	str	r1, [sp, #16]
 80079ca:	4909      	ldr	r1, [pc, #36]	; (80079f0 <siprintf+0x3c>)
 80079cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079d0:	9105      	str	r1, [sp, #20]
 80079d2:	6800      	ldr	r0, [r0, #0]
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	a902      	add	r1, sp, #8
 80079d8:	f002 ffdc 	bl	800a994 <_svfiprintf_r>
 80079dc:	9b02      	ldr	r3, [sp, #8]
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	b01c      	add	sp, #112	; 0x70
 80079e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e8:	b003      	add	sp, #12
 80079ea:	4770      	bx	lr
 80079ec:	2000000c 	.word	0x2000000c
 80079f0:	ffff0208 	.word	0xffff0208

080079f4 <sulp>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	ec45 4b10 	vmov	d0, r4, r5
 80079fe:	4616      	mov	r6, r2
 8007a00:	f002 fd26 	bl	800a450 <__ulp>
 8007a04:	ec51 0b10 	vmov	r0, r1, d0
 8007a08:	b17e      	cbz	r6, 8007a2a <sulp+0x36>
 8007a0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dd09      	ble.n	8007a2a <sulp+0x36>
 8007a16:	051b      	lsls	r3, r3, #20
 8007a18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a1c:	2400      	movs	r4, #0
 8007a1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a22:	4622      	mov	r2, r4
 8007a24:	462b      	mov	r3, r5
 8007a26:	f7f8 fde7 	bl	80005f8 <__aeabi_dmul>
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	0000      	movs	r0, r0
	...

08007a30 <_strtod_l>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	ed2d 8b02 	vpush	{d8}
 8007a38:	b09d      	sub	sp, #116	; 0x74
 8007a3a:	461f      	mov	r7, r3
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9318      	str	r3, [sp, #96]	; 0x60
 8007a40:	4ba2      	ldr	r3, [pc, #648]	; (8007ccc <_strtod_l+0x29c>)
 8007a42:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	4604      	mov	r4, r0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	4688      	mov	r8, r1
 8007a4e:	f7f8 fbbf 	bl	80001d0 <strlen>
 8007a52:	f04f 0a00 	mov.w	sl, #0
 8007a56:	4605      	mov	r5, r0
 8007a58:	f04f 0b00 	mov.w	fp, #0
 8007a5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	2a2b      	cmp	r2, #43	; 0x2b
 8007a66:	d04e      	beq.n	8007b06 <_strtod_l+0xd6>
 8007a68:	d83b      	bhi.n	8007ae2 <_strtod_l+0xb2>
 8007a6a:	2a0d      	cmp	r2, #13
 8007a6c:	d834      	bhi.n	8007ad8 <_strtod_l+0xa8>
 8007a6e:	2a08      	cmp	r2, #8
 8007a70:	d834      	bhi.n	8007adc <_strtod_l+0xac>
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d03e      	beq.n	8007af4 <_strtod_l+0xc4>
 8007a76:	2300      	movs	r3, #0
 8007a78:	930a      	str	r3, [sp, #40]	; 0x28
 8007a7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007a7c:	7833      	ldrb	r3, [r6, #0]
 8007a7e:	2b30      	cmp	r3, #48	; 0x30
 8007a80:	f040 80b0 	bne.w	8007be4 <_strtod_l+0x1b4>
 8007a84:	7873      	ldrb	r3, [r6, #1]
 8007a86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a8a:	2b58      	cmp	r3, #88	; 0x58
 8007a8c:	d168      	bne.n	8007b60 <_strtod_l+0x130>
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	ab18      	add	r3, sp, #96	; 0x60
 8007a94:	9702      	str	r7, [sp, #8]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4a8d      	ldr	r2, [pc, #564]	; (8007cd0 <_strtod_l+0x2a0>)
 8007a9a:	ab19      	add	r3, sp, #100	; 0x64
 8007a9c:	a917      	add	r1, sp, #92	; 0x5c
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f001 fe2c 	bl	80096fc <__gethex>
 8007aa4:	f010 0707 	ands.w	r7, r0, #7
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	d005      	beq.n	8007ab8 <_strtod_l+0x88>
 8007aac:	2f06      	cmp	r7, #6
 8007aae:	d12c      	bne.n	8007b0a <_strtod_l+0xda>
 8007ab0:	3601      	adds	r6, #1
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f040 8590 	bne.w	80085e0 <_strtod_l+0xbb0>
 8007ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac2:	b1eb      	cbz	r3, 8007b00 <_strtod_l+0xd0>
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007aca:	ec43 2b10 	vmov	d0, r2, r3
 8007ace:	b01d      	add	sp, #116	; 0x74
 8007ad0:	ecbd 8b02 	vpop	{d8}
 8007ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad8:	2a20      	cmp	r2, #32
 8007ada:	d1cc      	bne.n	8007a76 <_strtod_l+0x46>
 8007adc:	3301      	adds	r3, #1
 8007ade:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ae0:	e7be      	b.n	8007a60 <_strtod_l+0x30>
 8007ae2:	2a2d      	cmp	r2, #45	; 0x2d
 8007ae4:	d1c7      	bne.n	8007a76 <_strtod_l+0x46>
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	9217      	str	r2, [sp, #92]	; 0x5c
 8007aee:	785b      	ldrb	r3, [r3, #1]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1c2      	bne.n	8007a7a <_strtod_l+0x4a>
 8007af4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007af6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f040 856e 	bne.w	80085dc <_strtod_l+0xbac>
 8007b00:	4652      	mov	r2, sl
 8007b02:	465b      	mov	r3, fp
 8007b04:	e7e1      	b.n	8007aca <_strtod_l+0x9a>
 8007b06:	2200      	movs	r2, #0
 8007b08:	e7ee      	b.n	8007ae8 <_strtod_l+0xb8>
 8007b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b0c:	b13a      	cbz	r2, 8007b1e <_strtod_l+0xee>
 8007b0e:	2135      	movs	r1, #53	; 0x35
 8007b10:	a81a      	add	r0, sp, #104	; 0x68
 8007b12:	f002 fda8 	bl	800a666 <__copybits>
 8007b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f002 f967 	bl	8009dec <_Bfree>
 8007b1e:	3f01      	subs	r7, #1
 8007b20:	2f04      	cmp	r7, #4
 8007b22:	d806      	bhi.n	8007b32 <_strtod_l+0x102>
 8007b24:	e8df f007 	tbb	[pc, r7]
 8007b28:	1714030a 	.word	0x1714030a
 8007b2c:	0a          	.byte	0x0a
 8007b2d:	00          	.byte	0x00
 8007b2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b32:	0728      	lsls	r0, r5, #28
 8007b34:	d5c0      	bpl.n	8007ab8 <_strtod_l+0x88>
 8007b36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b3a:	e7bd      	b.n	8007ab8 <_strtod_l+0x88>
 8007b3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b4e:	e7f0      	b.n	8007b32 <_strtod_l+0x102>
 8007b50:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007cd4 <_strtod_l+0x2a4>
 8007b54:	e7ed      	b.n	8007b32 <_strtod_l+0x102>
 8007b56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007b5a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b5e:	e7e8      	b.n	8007b32 <_strtod_l+0x102>
 8007b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b30      	cmp	r3, #48	; 0x30
 8007b6a:	d0f9      	beq.n	8007b60 <_strtod_l+0x130>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0a3      	beq.n	8007ab8 <_strtod_l+0x88>
 8007b70:	2301      	movs	r3, #1
 8007b72:	f04f 0900 	mov.w	r9, #0
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b7a:	9308      	str	r3, [sp, #32]
 8007b7c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b80:	464f      	mov	r7, r9
 8007b82:	220a      	movs	r2, #10
 8007b84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007b86:	7806      	ldrb	r6, [r0, #0]
 8007b88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b8c:	b2d9      	uxtb	r1, r3
 8007b8e:	2909      	cmp	r1, #9
 8007b90:	d92a      	bls.n	8007be8 <_strtod_l+0x1b8>
 8007b92:	9905      	ldr	r1, [sp, #20]
 8007b94:	462a      	mov	r2, r5
 8007b96:	f003 f9b2 	bl	800aefe <strncmp>
 8007b9a:	b398      	cbz	r0, 8007c04 <_strtod_l+0x1d4>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	463d      	mov	r5, r7
 8007ba2:	9005      	str	r0, [sp, #20]
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2a65      	cmp	r2, #101	; 0x65
 8007ba8:	d001      	beq.n	8007bae <_strtod_l+0x17e>
 8007baa:	2a45      	cmp	r2, #69	; 0x45
 8007bac:	d118      	bne.n	8007be0 <_strtod_l+0x1b0>
 8007bae:	b91d      	cbnz	r5, 8007bb8 <_strtod_l+0x188>
 8007bb0:	9a04      	ldr	r2, [sp, #16]
 8007bb2:	4302      	orrs	r2, r0
 8007bb4:	d09e      	beq.n	8007af4 <_strtod_l+0xc4>
 8007bb6:	2500      	movs	r5, #0
 8007bb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007bbc:	f108 0201 	add.w	r2, r8, #1
 8007bc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007bc6:	2a2b      	cmp	r2, #43	; 0x2b
 8007bc8:	d075      	beq.n	8007cb6 <_strtod_l+0x286>
 8007bca:	2a2d      	cmp	r2, #45	; 0x2d
 8007bcc:	d07b      	beq.n	8007cc6 <_strtod_l+0x296>
 8007bce:	f04f 0c00 	mov.w	ip, #0
 8007bd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bd6:	2909      	cmp	r1, #9
 8007bd8:	f240 8082 	bls.w	8007ce0 <_strtod_l+0x2b0>
 8007bdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007be0:	2600      	movs	r6, #0
 8007be2:	e09d      	b.n	8007d20 <_strtod_l+0x2f0>
 8007be4:	2300      	movs	r3, #0
 8007be6:	e7c4      	b.n	8007b72 <_strtod_l+0x142>
 8007be8:	2f08      	cmp	r7, #8
 8007bea:	bfd8      	it	le
 8007bec:	9907      	ldrle	r1, [sp, #28]
 8007bee:	f100 0001 	add.w	r0, r0, #1
 8007bf2:	bfda      	itte	le
 8007bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bf8:	9307      	strle	r3, [sp, #28]
 8007bfa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007bfe:	3701      	adds	r7, #1
 8007c00:	9017      	str	r0, [sp, #92]	; 0x5c
 8007c02:	e7bf      	b.n	8007b84 <_strtod_l+0x154>
 8007c04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c06:	195a      	adds	r2, r3, r5
 8007c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c0a:	5d5a      	ldrb	r2, [r3, r5]
 8007c0c:	2f00      	cmp	r7, #0
 8007c0e:	d037      	beq.n	8007c80 <_strtod_l+0x250>
 8007c10:	9005      	str	r0, [sp, #20]
 8007c12:	463d      	mov	r5, r7
 8007c14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c18:	2b09      	cmp	r3, #9
 8007c1a:	d912      	bls.n	8007c42 <_strtod_l+0x212>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e7c2      	b.n	8007ba6 <_strtod_l+0x176>
 8007c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c26:	785a      	ldrb	r2, [r3, #1]
 8007c28:	3001      	adds	r0, #1
 8007c2a:	2a30      	cmp	r2, #48	; 0x30
 8007c2c:	d0f8      	beq.n	8007c20 <_strtod_l+0x1f0>
 8007c2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	f200 84d9 	bhi.w	80085ea <_strtod_l+0xbba>
 8007c38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c3a:	9005      	str	r0, [sp, #20]
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	9308      	str	r3, [sp, #32]
 8007c40:	4605      	mov	r5, r0
 8007c42:	3a30      	subs	r2, #48	; 0x30
 8007c44:	f100 0301 	add.w	r3, r0, #1
 8007c48:	d014      	beq.n	8007c74 <_strtod_l+0x244>
 8007c4a:	9905      	ldr	r1, [sp, #20]
 8007c4c:	4419      	add	r1, r3
 8007c4e:	9105      	str	r1, [sp, #20]
 8007c50:	462b      	mov	r3, r5
 8007c52:	eb00 0e05 	add.w	lr, r0, r5
 8007c56:	210a      	movs	r1, #10
 8007c58:	4573      	cmp	r3, lr
 8007c5a:	d113      	bne.n	8007c84 <_strtod_l+0x254>
 8007c5c:	182b      	adds	r3, r5, r0
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	f105 0501 	add.w	r5, r5, #1
 8007c64:	4405      	add	r5, r0
 8007c66:	dc1c      	bgt.n	8007ca2 <_strtod_l+0x272>
 8007c68:	9907      	ldr	r1, [sp, #28]
 8007c6a:	230a      	movs	r3, #10
 8007c6c:	fb03 2301 	mla	r3, r3, r1, r2
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c76:	1c51      	adds	r1, r2, #1
 8007c78:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c7a:	7852      	ldrb	r2, [r2, #1]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	e7c9      	b.n	8007c14 <_strtod_l+0x1e4>
 8007c80:	4638      	mov	r0, r7
 8007c82:	e7d2      	b.n	8007c2a <_strtod_l+0x1fa>
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	dc04      	bgt.n	8007c92 <_strtod_l+0x262>
 8007c88:	9e07      	ldr	r6, [sp, #28]
 8007c8a:	434e      	muls	r6, r1
 8007c8c:	9607      	str	r6, [sp, #28]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	e7e2      	b.n	8007c58 <_strtod_l+0x228>
 8007c92:	f103 0c01 	add.w	ip, r3, #1
 8007c96:	f1bc 0f10 	cmp.w	ip, #16
 8007c9a:	bfd8      	it	le
 8007c9c:	fb01 f909 	mulle.w	r9, r1, r9
 8007ca0:	e7f5      	b.n	8007c8e <_strtod_l+0x25e>
 8007ca2:	2d10      	cmp	r5, #16
 8007ca4:	bfdc      	itt	le
 8007ca6:	230a      	movle	r3, #10
 8007ca8:	fb03 2909 	mlale	r9, r3, r9, r2
 8007cac:	e7e1      	b.n	8007c72 <_strtod_l+0x242>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9305      	str	r3, [sp, #20]
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e77c      	b.n	8007bb0 <_strtod_l+0x180>
 8007cb6:	f04f 0c00 	mov.w	ip, #0
 8007cba:	f108 0202 	add.w	r2, r8, #2
 8007cbe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007cc4:	e785      	b.n	8007bd2 <_strtod_l+0x1a2>
 8007cc6:	f04f 0c01 	mov.w	ip, #1
 8007cca:	e7f6      	b.n	8007cba <_strtod_l+0x28a>
 8007ccc:	0800b90c 	.word	0x0800b90c
 8007cd0:	0800b660 	.word	0x0800b660
 8007cd4:	7ff00000 	.word	0x7ff00000
 8007cd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cda:	1c51      	adds	r1, r2, #1
 8007cdc:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cde:	7852      	ldrb	r2, [r2, #1]
 8007ce0:	2a30      	cmp	r2, #48	; 0x30
 8007ce2:	d0f9      	beq.n	8007cd8 <_strtod_l+0x2a8>
 8007ce4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007ce8:	2908      	cmp	r1, #8
 8007cea:	f63f af79 	bhi.w	8007be0 <_strtod_l+0x1b0>
 8007cee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cf4:	9206      	str	r2, [sp, #24]
 8007cf6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cf8:	1c51      	adds	r1, r2, #1
 8007cfa:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cfc:	7852      	ldrb	r2, [r2, #1]
 8007cfe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007d02:	2e09      	cmp	r6, #9
 8007d04:	d937      	bls.n	8007d76 <_strtod_l+0x346>
 8007d06:	9e06      	ldr	r6, [sp, #24]
 8007d08:	1b89      	subs	r1, r1, r6
 8007d0a:	2908      	cmp	r1, #8
 8007d0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007d10:	dc02      	bgt.n	8007d18 <_strtod_l+0x2e8>
 8007d12:	4576      	cmp	r6, lr
 8007d14:	bfa8      	it	ge
 8007d16:	4676      	movge	r6, lr
 8007d18:	f1bc 0f00 	cmp.w	ip, #0
 8007d1c:	d000      	beq.n	8007d20 <_strtod_l+0x2f0>
 8007d1e:	4276      	negs	r6, r6
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	d14d      	bne.n	8007dc0 <_strtod_l+0x390>
 8007d24:	9904      	ldr	r1, [sp, #16]
 8007d26:	4301      	orrs	r1, r0
 8007d28:	f47f aec6 	bne.w	8007ab8 <_strtod_l+0x88>
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f47f aee1 	bne.w	8007af4 <_strtod_l+0xc4>
 8007d32:	2a69      	cmp	r2, #105	; 0x69
 8007d34:	d027      	beq.n	8007d86 <_strtod_l+0x356>
 8007d36:	dc24      	bgt.n	8007d82 <_strtod_l+0x352>
 8007d38:	2a49      	cmp	r2, #73	; 0x49
 8007d3a:	d024      	beq.n	8007d86 <_strtod_l+0x356>
 8007d3c:	2a4e      	cmp	r2, #78	; 0x4e
 8007d3e:	f47f aed9 	bne.w	8007af4 <_strtod_l+0xc4>
 8007d42:	499f      	ldr	r1, [pc, #636]	; (8007fc0 <_strtod_l+0x590>)
 8007d44:	a817      	add	r0, sp, #92	; 0x5c
 8007d46:	f001 ff31 	bl	8009bac <__match>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	f43f aed2 	beq.w	8007af4 <_strtod_l+0xc4>
 8007d50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b28      	cmp	r3, #40	; 0x28
 8007d56:	d12d      	bne.n	8007db4 <_strtod_l+0x384>
 8007d58:	499a      	ldr	r1, [pc, #616]	; (8007fc4 <_strtod_l+0x594>)
 8007d5a:	aa1a      	add	r2, sp, #104	; 0x68
 8007d5c:	a817      	add	r0, sp, #92	; 0x5c
 8007d5e:	f001 ff39 	bl	8009bd4 <__hexnan>
 8007d62:	2805      	cmp	r0, #5
 8007d64:	d126      	bne.n	8007db4 <_strtod_l+0x384>
 8007d66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007d6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d74:	e6a0      	b.n	8007ab8 <_strtod_l+0x88>
 8007d76:	210a      	movs	r1, #10
 8007d78:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007d7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d80:	e7b9      	b.n	8007cf6 <_strtod_l+0x2c6>
 8007d82:	2a6e      	cmp	r2, #110	; 0x6e
 8007d84:	e7db      	b.n	8007d3e <_strtod_l+0x30e>
 8007d86:	4990      	ldr	r1, [pc, #576]	; (8007fc8 <_strtod_l+0x598>)
 8007d88:	a817      	add	r0, sp, #92	; 0x5c
 8007d8a:	f001 ff0f 	bl	8009bac <__match>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f43f aeb0 	beq.w	8007af4 <_strtod_l+0xc4>
 8007d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d96:	498d      	ldr	r1, [pc, #564]	; (8007fcc <_strtod_l+0x59c>)
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	a817      	add	r0, sp, #92	; 0x5c
 8007d9c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d9e:	f001 ff05 	bl	8009bac <__match>
 8007da2:	b910      	cbnz	r0, 8007daa <_strtod_l+0x37a>
 8007da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007da6:	3301      	adds	r3, #1
 8007da8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007daa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007fdc <_strtod_l+0x5ac>
 8007dae:	f04f 0a00 	mov.w	sl, #0
 8007db2:	e681      	b.n	8007ab8 <_strtod_l+0x88>
 8007db4:	4886      	ldr	r0, [pc, #536]	; (8007fd0 <_strtod_l+0x5a0>)
 8007db6:	f003 f847 	bl	800ae48 <nan>
 8007dba:	ec5b ab10 	vmov	sl, fp, d0
 8007dbe:	e67b      	b.n	8007ab8 <_strtod_l+0x88>
 8007dc0:	9b05      	ldr	r3, [sp, #20]
 8007dc2:	9807      	ldr	r0, [sp, #28]
 8007dc4:	1af3      	subs	r3, r6, r3
 8007dc6:	2f00      	cmp	r7, #0
 8007dc8:	bf08      	it	eq
 8007dca:	462f      	moveq	r7, r5
 8007dcc:	2d10      	cmp	r5, #16
 8007dce:	9306      	str	r3, [sp, #24]
 8007dd0:	46a8      	mov	r8, r5
 8007dd2:	bfa8      	it	ge
 8007dd4:	f04f 0810 	movge.w	r8, #16
 8007dd8:	f7f8 fb94 	bl	8000504 <__aeabi_ui2d>
 8007ddc:	2d09      	cmp	r5, #9
 8007dde:	4682      	mov	sl, r0
 8007de0:	468b      	mov	fp, r1
 8007de2:	dd13      	ble.n	8007e0c <_strtod_l+0x3dc>
 8007de4:	4b7b      	ldr	r3, [pc, #492]	; (8007fd4 <_strtod_l+0x5a4>)
 8007de6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007dea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dee:	f7f8 fc03 	bl	80005f8 <__aeabi_dmul>
 8007df2:	4682      	mov	sl, r0
 8007df4:	4648      	mov	r0, r9
 8007df6:	468b      	mov	fp, r1
 8007df8:	f7f8 fb84 	bl	8000504 <__aeabi_ui2d>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4650      	mov	r0, sl
 8007e02:	4659      	mov	r1, fp
 8007e04:	f7f8 fa42 	bl	800028c <__adddf3>
 8007e08:	4682      	mov	sl, r0
 8007e0a:	468b      	mov	fp, r1
 8007e0c:	2d0f      	cmp	r5, #15
 8007e0e:	dc38      	bgt.n	8007e82 <_strtod_l+0x452>
 8007e10:	9b06      	ldr	r3, [sp, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f43f ae50 	beq.w	8007ab8 <_strtod_l+0x88>
 8007e18:	dd24      	ble.n	8007e64 <_strtod_l+0x434>
 8007e1a:	2b16      	cmp	r3, #22
 8007e1c:	dc0b      	bgt.n	8007e36 <_strtod_l+0x406>
 8007e1e:	496d      	ldr	r1, [pc, #436]	; (8007fd4 <_strtod_l+0x5a4>)
 8007e20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e28:	4652      	mov	r2, sl
 8007e2a:	465b      	mov	r3, fp
 8007e2c:	f7f8 fbe4 	bl	80005f8 <__aeabi_dmul>
 8007e30:	4682      	mov	sl, r0
 8007e32:	468b      	mov	fp, r1
 8007e34:	e640      	b.n	8007ab8 <_strtod_l+0x88>
 8007e36:	9a06      	ldr	r2, [sp, #24]
 8007e38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	db20      	blt.n	8007e82 <_strtod_l+0x452>
 8007e40:	4c64      	ldr	r4, [pc, #400]	; (8007fd4 <_strtod_l+0x5a4>)
 8007e42:	f1c5 050f 	rsb	r5, r5, #15
 8007e46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e4a:	4652      	mov	r2, sl
 8007e4c:	465b      	mov	r3, fp
 8007e4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e52:	f7f8 fbd1 	bl	80005f8 <__aeabi_dmul>
 8007e56:	9b06      	ldr	r3, [sp, #24]
 8007e58:	1b5d      	subs	r5, r3, r5
 8007e5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e62:	e7e3      	b.n	8007e2c <_strtod_l+0x3fc>
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	3316      	adds	r3, #22
 8007e68:	db0b      	blt.n	8007e82 <_strtod_l+0x452>
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	1b9e      	subs	r6, r3, r6
 8007e6e:	4b59      	ldr	r3, [pc, #356]	; (8007fd4 <_strtod_l+0x5a4>)
 8007e70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e78:	4650      	mov	r0, sl
 8007e7a:	4659      	mov	r1, fp
 8007e7c:	f7f8 fce6 	bl	800084c <__aeabi_ddiv>
 8007e80:	e7d6      	b.n	8007e30 <_strtod_l+0x400>
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	eba5 0808 	sub.w	r8, r5, r8
 8007e88:	4498      	add	r8, r3
 8007e8a:	f1b8 0f00 	cmp.w	r8, #0
 8007e8e:	dd74      	ble.n	8007f7a <_strtod_l+0x54a>
 8007e90:	f018 030f 	ands.w	r3, r8, #15
 8007e94:	d00a      	beq.n	8007eac <_strtod_l+0x47c>
 8007e96:	494f      	ldr	r1, [pc, #316]	; (8007fd4 <_strtod_l+0x5a4>)
 8007e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	465b      	mov	r3, fp
 8007ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea4:	f7f8 fba8 	bl	80005f8 <__aeabi_dmul>
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	468b      	mov	fp, r1
 8007eac:	f038 080f 	bics.w	r8, r8, #15
 8007eb0:	d04f      	beq.n	8007f52 <_strtod_l+0x522>
 8007eb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007eb6:	dd22      	ble.n	8007efe <_strtod_l+0x4ce>
 8007eb8:	2500      	movs	r5, #0
 8007eba:	462e      	mov	r6, r5
 8007ebc:	9507      	str	r5, [sp, #28]
 8007ebe:	9505      	str	r5, [sp, #20]
 8007ec0:	2322      	movs	r3, #34	; 0x22
 8007ec2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007fdc <_strtod_l+0x5ac>
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	f04f 0a00 	mov.w	sl, #0
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f43f adf2 	beq.w	8007ab8 <_strtod_l+0x88>
 8007ed4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f001 ff88 	bl	8009dec <_Bfree>
 8007edc:	9905      	ldr	r1, [sp, #20]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f001 ff84 	bl	8009dec <_Bfree>
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f001 ff80 	bl	8009dec <_Bfree>
 8007eec:	9907      	ldr	r1, [sp, #28]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f001 ff7c 	bl	8009dec <_Bfree>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f001 ff78 	bl	8009dec <_Bfree>
 8007efc:	e5dc      	b.n	8007ab8 <_strtod_l+0x88>
 8007efe:	4b36      	ldr	r3, [pc, #216]	; (8007fd8 <_strtod_l+0x5a8>)
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	2300      	movs	r3, #0
 8007f04:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f08:	4650      	mov	r0, sl
 8007f0a:	4659      	mov	r1, fp
 8007f0c:	4699      	mov	r9, r3
 8007f0e:	f1b8 0f01 	cmp.w	r8, #1
 8007f12:	dc21      	bgt.n	8007f58 <_strtod_l+0x528>
 8007f14:	b10b      	cbz	r3, 8007f1a <_strtod_l+0x4ea>
 8007f16:	4682      	mov	sl, r0
 8007f18:	468b      	mov	fp, r1
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <_strtod_l+0x5a8>)
 8007f1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f24:	4652      	mov	r2, sl
 8007f26:	465b      	mov	r3, fp
 8007f28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f2c:	f7f8 fb64 	bl	80005f8 <__aeabi_dmul>
 8007f30:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <_strtod_l+0x5ac>)
 8007f32:	460a      	mov	r2, r1
 8007f34:	400b      	ands	r3, r1
 8007f36:	492a      	ldr	r1, [pc, #168]	; (8007fe0 <_strtod_l+0x5b0>)
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	4682      	mov	sl, r0
 8007f3c:	d8bc      	bhi.n	8007eb8 <_strtod_l+0x488>
 8007f3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f42:	428b      	cmp	r3, r1
 8007f44:	bf86      	itte	hi
 8007f46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007fe4 <_strtod_l+0x5b4>
 8007f4a:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f52:	2300      	movs	r3, #0
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	e084      	b.n	8008062 <_strtod_l+0x632>
 8007f58:	f018 0f01 	tst.w	r8, #1
 8007f5c:	d005      	beq.n	8007f6a <_strtod_l+0x53a>
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	9a04      	ldr	r2, [sp, #16]
 8007f6c:	3208      	adds	r2, #8
 8007f6e:	f109 0901 	add.w	r9, r9, #1
 8007f72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f76:	9204      	str	r2, [sp, #16]
 8007f78:	e7c9      	b.n	8007f0e <_strtod_l+0x4de>
 8007f7a:	d0ea      	beq.n	8007f52 <_strtod_l+0x522>
 8007f7c:	f1c8 0800 	rsb	r8, r8, #0
 8007f80:	f018 020f 	ands.w	r2, r8, #15
 8007f84:	d00a      	beq.n	8007f9c <_strtod_l+0x56c>
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <_strtod_l+0x5a4>)
 8007f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	4659      	mov	r1, fp
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	f7f8 fc5a 	bl	800084c <__aeabi_ddiv>
 8007f98:	4682      	mov	sl, r0
 8007f9a:	468b      	mov	fp, r1
 8007f9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007fa0:	d0d7      	beq.n	8007f52 <_strtod_l+0x522>
 8007fa2:	f1b8 0f1f 	cmp.w	r8, #31
 8007fa6:	dd1f      	ble.n	8007fe8 <_strtod_l+0x5b8>
 8007fa8:	2500      	movs	r5, #0
 8007faa:	462e      	mov	r6, r5
 8007fac:	9507      	str	r5, [sp, #28]
 8007fae:	9505      	str	r5, [sp, #20]
 8007fb0:	2322      	movs	r3, #34	; 0x22
 8007fb2:	f04f 0a00 	mov.w	sl, #0
 8007fb6:	f04f 0b00 	mov.w	fp, #0
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	e786      	b.n	8007ecc <_strtod_l+0x49c>
 8007fbe:	bf00      	nop
 8007fc0:	0800b631 	.word	0x0800b631
 8007fc4:	0800b674 	.word	0x0800b674
 8007fc8:	0800b629 	.word	0x0800b629
 8007fcc:	0800b7b4 	.word	0x0800b7b4
 8007fd0:	0800bac8 	.word	0x0800bac8
 8007fd4:	0800b9a8 	.word	0x0800b9a8
 8007fd8:	0800b980 	.word	0x0800b980
 8007fdc:	7ff00000 	.word	0x7ff00000
 8007fe0:	7ca00000 	.word	0x7ca00000
 8007fe4:	7fefffff 	.word	0x7fefffff
 8007fe8:	f018 0310 	ands.w	r3, r8, #16
 8007fec:	bf18      	it	ne
 8007fee:	236a      	movne	r3, #106	; 0x6a
 8007ff0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80083a0 <_strtod_l+0x970>
 8007ff4:	9304      	str	r3, [sp, #16]
 8007ff6:	4650      	mov	r0, sl
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f018 0f01 	tst.w	r8, #1
 8008000:	d004      	beq.n	800800c <_strtod_l+0x5dc>
 8008002:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008006:	f7f8 faf7 	bl	80005f8 <__aeabi_dmul>
 800800a:	2301      	movs	r3, #1
 800800c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008010:	f109 0908 	add.w	r9, r9, #8
 8008014:	d1f2      	bne.n	8007ffc <_strtod_l+0x5cc>
 8008016:	b10b      	cbz	r3, 800801c <_strtod_l+0x5ec>
 8008018:	4682      	mov	sl, r0
 800801a:	468b      	mov	fp, r1
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	b1c3      	cbz	r3, 8008052 <_strtod_l+0x622>
 8008020:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008024:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008028:	2b00      	cmp	r3, #0
 800802a:	4659      	mov	r1, fp
 800802c:	dd11      	ble.n	8008052 <_strtod_l+0x622>
 800802e:	2b1f      	cmp	r3, #31
 8008030:	f340 8124 	ble.w	800827c <_strtod_l+0x84c>
 8008034:	2b34      	cmp	r3, #52	; 0x34
 8008036:	bfde      	ittt	le
 8008038:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800803c:	f04f 33ff 	movle.w	r3, #4294967295
 8008040:	fa03 f202 	lslle.w	r2, r3, r2
 8008044:	f04f 0a00 	mov.w	sl, #0
 8008048:	bfcc      	ite	gt
 800804a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800804e:	ea02 0b01 	andle.w	fp, r2, r1
 8008052:	2200      	movs	r2, #0
 8008054:	2300      	movs	r3, #0
 8008056:	4650      	mov	r0, sl
 8008058:	4659      	mov	r1, fp
 800805a:	f7f8 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800805e:	2800      	cmp	r0, #0
 8008060:	d1a2      	bne.n	8007fa8 <_strtod_l+0x578>
 8008062:	9b07      	ldr	r3, [sp, #28]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	9908      	ldr	r1, [sp, #32]
 8008068:	462b      	mov	r3, r5
 800806a:	463a      	mov	r2, r7
 800806c:	4620      	mov	r0, r4
 800806e:	f001 ff25 	bl	8009ebc <__s2b>
 8008072:	9007      	str	r0, [sp, #28]
 8008074:	2800      	cmp	r0, #0
 8008076:	f43f af1f 	beq.w	8007eb8 <_strtod_l+0x488>
 800807a:	9b05      	ldr	r3, [sp, #20]
 800807c:	1b9e      	subs	r6, r3, r6
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	bfb4      	ite	lt
 8008084:	4633      	movlt	r3, r6
 8008086:	2300      	movge	r3, #0
 8008088:	930c      	str	r3, [sp, #48]	; 0x30
 800808a:	9b06      	ldr	r3, [sp, #24]
 800808c:	2500      	movs	r5, #0
 800808e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008092:	9312      	str	r3, [sp, #72]	; 0x48
 8008094:	462e      	mov	r6, r5
 8008096:	9b07      	ldr	r3, [sp, #28]
 8008098:	4620      	mov	r0, r4
 800809a:	6859      	ldr	r1, [r3, #4]
 800809c:	f001 fe66 	bl	8009d6c <_Balloc>
 80080a0:	9005      	str	r0, [sp, #20]
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f af0c 	beq.w	8007ec0 <_strtod_l+0x490>
 80080a8:	9b07      	ldr	r3, [sp, #28]
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	3202      	adds	r2, #2
 80080ae:	f103 010c 	add.w	r1, r3, #12
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	300c      	adds	r0, #12
 80080b6:	f001 fe4b 	bl	8009d50 <memcpy>
 80080ba:	ec4b ab10 	vmov	d0, sl, fp
 80080be:	aa1a      	add	r2, sp, #104	; 0x68
 80080c0:	a919      	add	r1, sp, #100	; 0x64
 80080c2:	4620      	mov	r0, r4
 80080c4:	f002 fa40 	bl	800a548 <__d2b>
 80080c8:	ec4b ab18 	vmov	d8, sl, fp
 80080cc:	9018      	str	r0, [sp, #96]	; 0x60
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f aef6 	beq.w	8007ec0 <_strtod_l+0x490>
 80080d4:	2101      	movs	r1, #1
 80080d6:	4620      	mov	r0, r4
 80080d8:	f001 ff8a 	bl	8009ff0 <__i2b>
 80080dc:	4606      	mov	r6, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	f43f aeee 	beq.w	8007ec0 <_strtod_l+0x490>
 80080e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080e6:	9904      	ldr	r1, [sp, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	bfab      	itete	ge
 80080ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80080ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80080f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80080f6:	bfac      	ite	ge
 80080f8:	eb03 0902 	addge.w	r9, r3, r2
 80080fc:	1ad7      	sublt	r7, r2, r3
 80080fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008100:	eba3 0801 	sub.w	r8, r3, r1
 8008104:	4490      	add	r8, r2
 8008106:	4ba1      	ldr	r3, [pc, #644]	; (800838c <_strtod_l+0x95c>)
 8008108:	f108 38ff 	add.w	r8, r8, #4294967295
 800810c:	4598      	cmp	r8, r3
 800810e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008112:	f280 80c7 	bge.w	80082a4 <_strtod_l+0x874>
 8008116:	eba3 0308 	sub.w	r3, r3, r8
 800811a:	2b1f      	cmp	r3, #31
 800811c:	eba2 0203 	sub.w	r2, r2, r3
 8008120:	f04f 0101 	mov.w	r1, #1
 8008124:	f300 80b1 	bgt.w	800828a <_strtod_l+0x85a>
 8008128:	fa01 f303 	lsl.w	r3, r1, r3
 800812c:	930d      	str	r3, [sp, #52]	; 0x34
 800812e:	2300      	movs	r3, #0
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	eb09 0802 	add.w	r8, r9, r2
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	45c1      	cmp	r9, r8
 800813a:	4417      	add	r7, r2
 800813c:	441f      	add	r7, r3
 800813e:	464b      	mov	r3, r9
 8008140:	bfa8      	it	ge
 8008142:	4643      	movge	r3, r8
 8008144:	42bb      	cmp	r3, r7
 8008146:	bfa8      	it	ge
 8008148:	463b      	movge	r3, r7
 800814a:	2b00      	cmp	r3, #0
 800814c:	bfc2      	ittt	gt
 800814e:	eba8 0803 	subgt.w	r8, r8, r3
 8008152:	1aff      	subgt	r7, r7, r3
 8008154:	eba9 0903 	subgt.w	r9, r9, r3
 8008158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd17      	ble.n	800818e <_strtod_l+0x75e>
 800815e:	4631      	mov	r1, r6
 8008160:	461a      	mov	r2, r3
 8008162:	4620      	mov	r0, r4
 8008164:	f002 f804 	bl	800a170 <__pow5mult>
 8008168:	4606      	mov	r6, r0
 800816a:	2800      	cmp	r0, #0
 800816c:	f43f aea8 	beq.w	8007ec0 <_strtod_l+0x490>
 8008170:	4601      	mov	r1, r0
 8008172:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008174:	4620      	mov	r0, r4
 8008176:	f001 ff51 	bl	800a01c <__multiply>
 800817a:	900b      	str	r0, [sp, #44]	; 0x2c
 800817c:	2800      	cmp	r0, #0
 800817e:	f43f ae9f 	beq.w	8007ec0 <_strtod_l+0x490>
 8008182:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008184:	4620      	mov	r0, r4
 8008186:	f001 fe31 	bl	8009dec <_Bfree>
 800818a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818c:	9318      	str	r3, [sp, #96]	; 0x60
 800818e:	f1b8 0f00 	cmp.w	r8, #0
 8008192:	f300 808c 	bgt.w	80082ae <_strtod_l+0x87e>
 8008196:	9b06      	ldr	r3, [sp, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	dd08      	ble.n	80081ae <_strtod_l+0x77e>
 800819c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800819e:	9905      	ldr	r1, [sp, #20]
 80081a0:	4620      	mov	r0, r4
 80081a2:	f001 ffe5 	bl	800a170 <__pow5mult>
 80081a6:	9005      	str	r0, [sp, #20]
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f43f ae89 	beq.w	8007ec0 <_strtod_l+0x490>
 80081ae:	2f00      	cmp	r7, #0
 80081b0:	dd08      	ble.n	80081c4 <_strtod_l+0x794>
 80081b2:	9905      	ldr	r1, [sp, #20]
 80081b4:	463a      	mov	r2, r7
 80081b6:	4620      	mov	r0, r4
 80081b8:	f002 f834 	bl	800a224 <__lshift>
 80081bc:	9005      	str	r0, [sp, #20]
 80081be:	2800      	cmp	r0, #0
 80081c0:	f43f ae7e 	beq.w	8007ec0 <_strtod_l+0x490>
 80081c4:	f1b9 0f00 	cmp.w	r9, #0
 80081c8:	dd08      	ble.n	80081dc <_strtod_l+0x7ac>
 80081ca:	4631      	mov	r1, r6
 80081cc:	464a      	mov	r2, r9
 80081ce:	4620      	mov	r0, r4
 80081d0:	f002 f828 	bl	800a224 <__lshift>
 80081d4:	4606      	mov	r6, r0
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f43f ae72 	beq.w	8007ec0 <_strtod_l+0x490>
 80081dc:	9a05      	ldr	r2, [sp, #20]
 80081de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081e0:	4620      	mov	r0, r4
 80081e2:	f002 f8ab 	bl	800a33c <__mdiff>
 80081e6:	4605      	mov	r5, r0
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f43f ae69 	beq.w	8007ec0 <_strtod_l+0x490>
 80081ee:	68c3      	ldr	r3, [r0, #12]
 80081f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f2:	2300      	movs	r3, #0
 80081f4:	60c3      	str	r3, [r0, #12]
 80081f6:	4631      	mov	r1, r6
 80081f8:	f002 f884 	bl	800a304 <__mcmp>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	da60      	bge.n	80082c2 <_strtod_l+0x892>
 8008200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008202:	ea53 030a 	orrs.w	r3, r3, sl
 8008206:	f040 8082 	bne.w	800830e <_strtod_l+0x8de>
 800820a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800820e:	2b00      	cmp	r3, #0
 8008210:	d17d      	bne.n	800830e <_strtod_l+0x8de>
 8008212:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008216:	0d1b      	lsrs	r3, r3, #20
 8008218:	051b      	lsls	r3, r3, #20
 800821a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800821e:	d976      	bls.n	800830e <_strtod_l+0x8de>
 8008220:	696b      	ldr	r3, [r5, #20]
 8008222:	b913      	cbnz	r3, 800822a <_strtod_l+0x7fa>
 8008224:	692b      	ldr	r3, [r5, #16]
 8008226:	2b01      	cmp	r3, #1
 8008228:	dd71      	ble.n	800830e <_strtod_l+0x8de>
 800822a:	4629      	mov	r1, r5
 800822c:	2201      	movs	r2, #1
 800822e:	4620      	mov	r0, r4
 8008230:	f001 fff8 	bl	800a224 <__lshift>
 8008234:	4631      	mov	r1, r6
 8008236:	4605      	mov	r5, r0
 8008238:	f002 f864 	bl	800a304 <__mcmp>
 800823c:	2800      	cmp	r0, #0
 800823e:	dd66      	ble.n	800830e <_strtod_l+0x8de>
 8008240:	9904      	ldr	r1, [sp, #16]
 8008242:	4a53      	ldr	r2, [pc, #332]	; (8008390 <_strtod_l+0x960>)
 8008244:	465b      	mov	r3, fp
 8008246:	2900      	cmp	r1, #0
 8008248:	f000 8081 	beq.w	800834e <_strtod_l+0x91e>
 800824c:	ea02 010b 	and.w	r1, r2, fp
 8008250:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008254:	dc7b      	bgt.n	800834e <_strtod_l+0x91e>
 8008256:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800825a:	f77f aea9 	ble.w	8007fb0 <_strtod_l+0x580>
 800825e:	4b4d      	ldr	r3, [pc, #308]	; (8008394 <_strtod_l+0x964>)
 8008260:	4650      	mov	r0, sl
 8008262:	4659      	mov	r1, fp
 8008264:	2200      	movs	r2, #0
 8008266:	f7f8 f9c7 	bl	80005f8 <__aeabi_dmul>
 800826a:	460b      	mov	r3, r1
 800826c:	4303      	orrs	r3, r0
 800826e:	bf08      	it	eq
 8008270:	2322      	moveq	r3, #34	; 0x22
 8008272:	4682      	mov	sl, r0
 8008274:	468b      	mov	fp, r1
 8008276:	bf08      	it	eq
 8008278:	6023      	streq	r3, [r4, #0]
 800827a:	e62b      	b.n	8007ed4 <_strtod_l+0x4a4>
 800827c:	f04f 32ff 	mov.w	r2, #4294967295
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	ea03 0a0a 	and.w	sl, r3, sl
 8008288:	e6e3      	b.n	8008052 <_strtod_l+0x622>
 800828a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800828e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008292:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008296:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800829a:	fa01 f308 	lsl.w	r3, r1, r8
 800829e:	9308      	str	r3, [sp, #32]
 80082a0:	910d      	str	r1, [sp, #52]	; 0x34
 80082a2:	e746      	b.n	8008132 <_strtod_l+0x702>
 80082a4:	2300      	movs	r3, #0
 80082a6:	9308      	str	r3, [sp, #32]
 80082a8:	2301      	movs	r3, #1
 80082aa:	930d      	str	r3, [sp, #52]	; 0x34
 80082ac:	e741      	b.n	8008132 <_strtod_l+0x702>
 80082ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082b0:	4642      	mov	r2, r8
 80082b2:	4620      	mov	r0, r4
 80082b4:	f001 ffb6 	bl	800a224 <__lshift>
 80082b8:	9018      	str	r0, [sp, #96]	; 0x60
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f47f af6b 	bne.w	8008196 <_strtod_l+0x766>
 80082c0:	e5fe      	b.n	8007ec0 <_strtod_l+0x490>
 80082c2:	465f      	mov	r7, fp
 80082c4:	d16e      	bne.n	80083a4 <_strtod_l+0x974>
 80082c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082cc:	b342      	cbz	r2, 8008320 <_strtod_l+0x8f0>
 80082ce:	4a32      	ldr	r2, [pc, #200]	; (8008398 <_strtod_l+0x968>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d128      	bne.n	8008326 <_strtod_l+0x8f6>
 80082d4:	9b04      	ldr	r3, [sp, #16]
 80082d6:	4651      	mov	r1, sl
 80082d8:	b1eb      	cbz	r3, 8008316 <_strtod_l+0x8e6>
 80082da:	4b2d      	ldr	r3, [pc, #180]	; (8008390 <_strtod_l+0x960>)
 80082dc:	403b      	ands	r3, r7
 80082de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295
 80082e6:	d819      	bhi.n	800831c <_strtod_l+0x8ec>
 80082e8:	0d1b      	lsrs	r3, r3, #20
 80082ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	4299      	cmp	r1, r3
 80082f4:	d117      	bne.n	8008326 <_strtod_l+0x8f6>
 80082f6:	4b29      	ldr	r3, [pc, #164]	; (800839c <_strtod_l+0x96c>)
 80082f8:	429f      	cmp	r7, r3
 80082fa:	d102      	bne.n	8008302 <_strtod_l+0x8d2>
 80082fc:	3101      	adds	r1, #1
 80082fe:	f43f addf 	beq.w	8007ec0 <_strtod_l+0x490>
 8008302:	4b23      	ldr	r3, [pc, #140]	; (8008390 <_strtod_l+0x960>)
 8008304:	403b      	ands	r3, r7
 8008306:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800830a:	f04f 0a00 	mov.w	sl, #0
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1a4      	bne.n	800825e <_strtod_l+0x82e>
 8008314:	e5de      	b.n	8007ed4 <_strtod_l+0x4a4>
 8008316:	f04f 33ff 	mov.w	r3, #4294967295
 800831a:	e7ea      	b.n	80082f2 <_strtod_l+0x8c2>
 800831c:	4613      	mov	r3, r2
 800831e:	e7e8      	b.n	80082f2 <_strtod_l+0x8c2>
 8008320:	ea53 030a 	orrs.w	r3, r3, sl
 8008324:	d08c      	beq.n	8008240 <_strtod_l+0x810>
 8008326:	9b08      	ldr	r3, [sp, #32]
 8008328:	b1db      	cbz	r3, 8008362 <_strtod_l+0x932>
 800832a:	423b      	tst	r3, r7
 800832c:	d0ef      	beq.n	800830e <_strtod_l+0x8de>
 800832e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008330:	9a04      	ldr	r2, [sp, #16]
 8008332:	4650      	mov	r0, sl
 8008334:	4659      	mov	r1, fp
 8008336:	b1c3      	cbz	r3, 800836a <_strtod_l+0x93a>
 8008338:	f7ff fb5c 	bl	80079f4 <sulp>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	ec51 0b18 	vmov	r0, r1, d8
 8008344:	f7f7 ffa2 	bl	800028c <__adddf3>
 8008348:	4682      	mov	sl, r0
 800834a:	468b      	mov	fp, r1
 800834c:	e7df      	b.n	800830e <_strtod_l+0x8de>
 800834e:	4013      	ands	r3, r2
 8008350:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008354:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008358:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800835c:	f04f 3aff 	mov.w	sl, #4294967295
 8008360:	e7d5      	b.n	800830e <_strtod_l+0x8de>
 8008362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008364:	ea13 0f0a 	tst.w	r3, sl
 8008368:	e7e0      	b.n	800832c <_strtod_l+0x8fc>
 800836a:	f7ff fb43 	bl	80079f4 <sulp>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	ec51 0b18 	vmov	r0, r1, d8
 8008376:	f7f7 ff87 	bl	8000288 <__aeabi_dsub>
 800837a:	2200      	movs	r2, #0
 800837c:	2300      	movs	r3, #0
 800837e:	4682      	mov	sl, r0
 8008380:	468b      	mov	fp, r1
 8008382:	f7f8 fba1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008386:	2800      	cmp	r0, #0
 8008388:	d0c1      	beq.n	800830e <_strtod_l+0x8de>
 800838a:	e611      	b.n	8007fb0 <_strtod_l+0x580>
 800838c:	fffffc02 	.word	0xfffffc02
 8008390:	7ff00000 	.word	0x7ff00000
 8008394:	39500000 	.word	0x39500000
 8008398:	000fffff 	.word	0x000fffff
 800839c:	7fefffff 	.word	0x7fefffff
 80083a0:	0800b688 	.word	0x0800b688
 80083a4:	4631      	mov	r1, r6
 80083a6:	4628      	mov	r0, r5
 80083a8:	f002 f92a 	bl	800a600 <__ratio>
 80083ac:	ec59 8b10 	vmov	r8, r9, d0
 80083b0:	ee10 0a10 	vmov	r0, s0
 80083b4:	2200      	movs	r2, #0
 80083b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f8 fb98 	bl	8000af0 <__aeabi_dcmple>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d07a      	beq.n	80084ba <_strtod_l+0xa8a>
 80083c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d04a      	beq.n	8008460 <_strtod_l+0xa30>
 80083ca:	4b95      	ldr	r3, [pc, #596]	; (8008620 <_strtod_l+0xbf0>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008620 <_strtod_l+0xbf0>
 80083d6:	f04f 0800 	mov.w	r8, #0
 80083da:	4b92      	ldr	r3, [pc, #584]	; (8008624 <_strtod_l+0xbf4>)
 80083dc:	403b      	ands	r3, r7
 80083de:	930d      	str	r3, [sp, #52]	; 0x34
 80083e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083e2:	4b91      	ldr	r3, [pc, #580]	; (8008628 <_strtod_l+0xbf8>)
 80083e4:	429a      	cmp	r2, r3
 80083e6:	f040 80b0 	bne.w	800854a <_strtod_l+0xb1a>
 80083ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80083f2:	ec4b ab10 	vmov	d0, sl, fp
 80083f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083fa:	f002 f829 	bl	800a450 <__ulp>
 80083fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008402:	ec53 2b10 	vmov	r2, r3, d0
 8008406:	f7f8 f8f7 	bl	80005f8 <__aeabi_dmul>
 800840a:	4652      	mov	r2, sl
 800840c:	465b      	mov	r3, fp
 800840e:	f7f7 ff3d 	bl	800028c <__adddf3>
 8008412:	460b      	mov	r3, r1
 8008414:	4983      	ldr	r1, [pc, #524]	; (8008624 <_strtod_l+0xbf4>)
 8008416:	4a85      	ldr	r2, [pc, #532]	; (800862c <_strtod_l+0xbfc>)
 8008418:	4019      	ands	r1, r3
 800841a:	4291      	cmp	r1, r2
 800841c:	4682      	mov	sl, r0
 800841e:	d960      	bls.n	80084e2 <_strtod_l+0xab2>
 8008420:	ee18 3a90 	vmov	r3, s17
 8008424:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008428:	4293      	cmp	r3, r2
 800842a:	d104      	bne.n	8008436 <_strtod_l+0xa06>
 800842c:	ee18 3a10 	vmov	r3, s16
 8008430:	3301      	adds	r3, #1
 8008432:	f43f ad45 	beq.w	8007ec0 <_strtod_l+0x490>
 8008436:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008638 <_strtod_l+0xc08>
 800843a:	f04f 3aff 	mov.w	sl, #4294967295
 800843e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008440:	4620      	mov	r0, r4
 8008442:	f001 fcd3 	bl	8009dec <_Bfree>
 8008446:	9905      	ldr	r1, [sp, #20]
 8008448:	4620      	mov	r0, r4
 800844a:	f001 fccf 	bl	8009dec <_Bfree>
 800844e:	4631      	mov	r1, r6
 8008450:	4620      	mov	r0, r4
 8008452:	f001 fccb 	bl	8009dec <_Bfree>
 8008456:	4629      	mov	r1, r5
 8008458:	4620      	mov	r0, r4
 800845a:	f001 fcc7 	bl	8009dec <_Bfree>
 800845e:	e61a      	b.n	8008096 <_strtod_l+0x666>
 8008460:	f1ba 0f00 	cmp.w	sl, #0
 8008464:	d11b      	bne.n	800849e <_strtod_l+0xa6e>
 8008466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800846a:	b9f3      	cbnz	r3, 80084aa <_strtod_l+0xa7a>
 800846c:	4b6c      	ldr	r3, [pc, #432]	; (8008620 <_strtod_l+0xbf0>)
 800846e:	2200      	movs	r2, #0
 8008470:	4640      	mov	r0, r8
 8008472:	4649      	mov	r1, r9
 8008474:	f7f8 fb32 	bl	8000adc <__aeabi_dcmplt>
 8008478:	b9d0      	cbnz	r0, 80084b0 <_strtod_l+0xa80>
 800847a:	4640      	mov	r0, r8
 800847c:	4649      	mov	r1, r9
 800847e:	4b6c      	ldr	r3, [pc, #432]	; (8008630 <_strtod_l+0xc00>)
 8008480:	2200      	movs	r2, #0
 8008482:	f7f8 f8b9 	bl	80005f8 <__aeabi_dmul>
 8008486:	4680      	mov	r8, r0
 8008488:	4689      	mov	r9, r1
 800848a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800848e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008492:	9315      	str	r3, [sp, #84]	; 0x54
 8008494:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008498:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800849c:	e79d      	b.n	80083da <_strtod_l+0x9aa>
 800849e:	f1ba 0f01 	cmp.w	sl, #1
 80084a2:	d102      	bne.n	80084aa <_strtod_l+0xa7a>
 80084a4:	2f00      	cmp	r7, #0
 80084a6:	f43f ad83 	beq.w	8007fb0 <_strtod_l+0x580>
 80084aa:	4b62      	ldr	r3, [pc, #392]	; (8008634 <_strtod_l+0xc04>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	e78e      	b.n	80083ce <_strtod_l+0x99e>
 80084b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008630 <_strtod_l+0xc00>
 80084b4:	f04f 0800 	mov.w	r8, #0
 80084b8:	e7e7      	b.n	800848a <_strtod_l+0xa5a>
 80084ba:	4b5d      	ldr	r3, [pc, #372]	; (8008630 <_strtod_l+0xc00>)
 80084bc:	4640      	mov	r0, r8
 80084be:	4649      	mov	r1, r9
 80084c0:	2200      	movs	r2, #0
 80084c2:	f7f8 f899 	bl	80005f8 <__aeabi_dmul>
 80084c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c8:	4680      	mov	r8, r0
 80084ca:	4689      	mov	r9, r1
 80084cc:	b933      	cbnz	r3, 80084dc <_strtod_l+0xaac>
 80084ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084d2:	900e      	str	r0, [sp, #56]	; 0x38
 80084d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80084da:	e7dd      	b.n	8008498 <_strtod_l+0xa68>
 80084dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80084e0:	e7f9      	b.n	80084d6 <_strtod_l+0xaa6>
 80084e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1a8      	bne.n	800843e <_strtod_l+0xa0e>
 80084ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084f2:	0d1b      	lsrs	r3, r3, #20
 80084f4:	051b      	lsls	r3, r3, #20
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d1a1      	bne.n	800843e <_strtod_l+0xa0e>
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 fbdb 	bl	8000cb8 <__aeabi_d2lz>
 8008502:	f7f8 f84b 	bl	800059c <__aeabi_l2d>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f7 febb 	bl	8000288 <__aeabi_dsub>
 8008512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008518:	ea43 030a 	orr.w	r3, r3, sl
 800851c:	4313      	orrs	r3, r2
 800851e:	4680      	mov	r8, r0
 8008520:	4689      	mov	r9, r1
 8008522:	d055      	beq.n	80085d0 <_strtod_l+0xba0>
 8008524:	a336      	add	r3, pc, #216	; (adr r3, 8008600 <_strtod_l+0xbd0>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f7f8 fad7 	bl	8000adc <__aeabi_dcmplt>
 800852e:	2800      	cmp	r0, #0
 8008530:	f47f acd0 	bne.w	8007ed4 <_strtod_l+0x4a4>
 8008534:	a334      	add	r3, pc, #208	; (adr r3, 8008608 <_strtod_l+0xbd8>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	4640      	mov	r0, r8
 800853c:	4649      	mov	r1, r9
 800853e:	f7f8 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8008542:	2800      	cmp	r0, #0
 8008544:	f43f af7b 	beq.w	800843e <_strtod_l+0xa0e>
 8008548:	e4c4      	b.n	8007ed4 <_strtod_l+0x4a4>
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	b333      	cbz	r3, 800859c <_strtod_l+0xb6c>
 800854e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008550:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008554:	d822      	bhi.n	800859c <_strtod_l+0xb6c>
 8008556:	a32e      	add	r3, pc, #184	; (adr r3, 8008610 <_strtod_l+0xbe0>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	4640      	mov	r0, r8
 800855e:	4649      	mov	r1, r9
 8008560:	f7f8 fac6 	bl	8000af0 <__aeabi_dcmple>
 8008564:	b1a0      	cbz	r0, 8008590 <_strtod_l+0xb60>
 8008566:	4649      	mov	r1, r9
 8008568:	4640      	mov	r0, r8
 800856a:	f7f8 fb1d 	bl	8000ba8 <__aeabi_d2uiz>
 800856e:	2801      	cmp	r0, #1
 8008570:	bf38      	it	cc
 8008572:	2001      	movcc	r0, #1
 8008574:	f7f7 ffc6 	bl	8000504 <__aeabi_ui2d>
 8008578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857a:	4680      	mov	r8, r0
 800857c:	4689      	mov	r9, r1
 800857e:	bb23      	cbnz	r3, 80085ca <_strtod_l+0xb9a>
 8008580:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008584:	9010      	str	r0, [sp, #64]	; 0x40
 8008586:	9311      	str	r3, [sp, #68]	; 0x44
 8008588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800858c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008594:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008598:	1a9b      	subs	r3, r3, r2
 800859a:	9309      	str	r3, [sp, #36]	; 0x24
 800859c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085a0:	eeb0 0a48 	vmov.f32	s0, s16
 80085a4:	eef0 0a68 	vmov.f32	s1, s17
 80085a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085ac:	f001 ff50 	bl	800a450 <__ulp>
 80085b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085b4:	ec53 2b10 	vmov	r2, r3, d0
 80085b8:	f7f8 f81e 	bl	80005f8 <__aeabi_dmul>
 80085bc:	ec53 2b18 	vmov	r2, r3, d8
 80085c0:	f7f7 fe64 	bl	800028c <__adddf3>
 80085c4:	4682      	mov	sl, r0
 80085c6:	468b      	mov	fp, r1
 80085c8:	e78d      	b.n	80084e6 <_strtod_l+0xab6>
 80085ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80085ce:	e7db      	b.n	8008588 <_strtod_l+0xb58>
 80085d0:	a311      	add	r3, pc, #68	; (adr r3, 8008618 <_strtod_l+0xbe8>)
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f7f8 fa81 	bl	8000adc <__aeabi_dcmplt>
 80085da:	e7b2      	b.n	8008542 <_strtod_l+0xb12>
 80085dc:	2300      	movs	r3, #0
 80085de:	930a      	str	r3, [sp, #40]	; 0x28
 80085e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	f7ff ba6b 	b.w	8007ac0 <_strtod_l+0x90>
 80085ea:	2a65      	cmp	r2, #101	; 0x65
 80085ec:	f43f ab5f 	beq.w	8007cae <_strtod_l+0x27e>
 80085f0:	2a45      	cmp	r2, #69	; 0x45
 80085f2:	f43f ab5c 	beq.w	8007cae <_strtod_l+0x27e>
 80085f6:	2301      	movs	r3, #1
 80085f8:	f7ff bb94 	b.w	8007d24 <_strtod_l+0x2f4>
 80085fc:	f3af 8000 	nop.w
 8008600:	94a03595 	.word	0x94a03595
 8008604:	3fdfffff 	.word	0x3fdfffff
 8008608:	35afe535 	.word	0x35afe535
 800860c:	3fe00000 	.word	0x3fe00000
 8008610:	ffc00000 	.word	0xffc00000
 8008614:	41dfffff 	.word	0x41dfffff
 8008618:	94a03595 	.word	0x94a03595
 800861c:	3fcfffff 	.word	0x3fcfffff
 8008620:	3ff00000 	.word	0x3ff00000
 8008624:	7ff00000 	.word	0x7ff00000
 8008628:	7fe00000 	.word	0x7fe00000
 800862c:	7c9fffff 	.word	0x7c9fffff
 8008630:	3fe00000 	.word	0x3fe00000
 8008634:	bff00000 	.word	0xbff00000
 8008638:	7fefffff 	.word	0x7fefffff

0800863c <_strtod_r>:
 800863c:	4b01      	ldr	r3, [pc, #4]	; (8008644 <_strtod_r+0x8>)
 800863e:	f7ff b9f7 	b.w	8007a30 <_strtod_l>
 8008642:	bf00      	nop
 8008644:	20000074 	.word	0x20000074

08008648 <_strtol_l.constprop.0>:
 8008648:	2b01      	cmp	r3, #1
 800864a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800864e:	d001      	beq.n	8008654 <_strtol_l.constprop.0+0xc>
 8008650:	2b24      	cmp	r3, #36	; 0x24
 8008652:	d906      	bls.n	8008662 <_strtol_l.constprop.0+0x1a>
 8008654:	f7fe fae4 	bl	8006c20 <__errno>
 8008658:	2316      	movs	r3, #22
 800865a:	6003      	str	r3, [r0, #0]
 800865c:	2000      	movs	r0, #0
 800865e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008662:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008748 <_strtol_l.constprop.0+0x100>
 8008666:	460d      	mov	r5, r1
 8008668:	462e      	mov	r6, r5
 800866a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800866e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008672:	f017 0708 	ands.w	r7, r7, #8
 8008676:	d1f7      	bne.n	8008668 <_strtol_l.constprop.0+0x20>
 8008678:	2c2d      	cmp	r4, #45	; 0x2d
 800867a:	d132      	bne.n	80086e2 <_strtol_l.constprop.0+0x9a>
 800867c:	782c      	ldrb	r4, [r5, #0]
 800867e:	2701      	movs	r7, #1
 8008680:	1cb5      	adds	r5, r6, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d05b      	beq.n	800873e <_strtol_l.constprop.0+0xf6>
 8008686:	2b10      	cmp	r3, #16
 8008688:	d109      	bne.n	800869e <_strtol_l.constprop.0+0x56>
 800868a:	2c30      	cmp	r4, #48	; 0x30
 800868c:	d107      	bne.n	800869e <_strtol_l.constprop.0+0x56>
 800868e:	782c      	ldrb	r4, [r5, #0]
 8008690:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008694:	2c58      	cmp	r4, #88	; 0x58
 8008696:	d14d      	bne.n	8008734 <_strtol_l.constprop.0+0xec>
 8008698:	786c      	ldrb	r4, [r5, #1]
 800869a:	2310      	movs	r3, #16
 800869c:	3502      	adds	r5, #2
 800869e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80086a6:	f04f 0c00 	mov.w	ip, #0
 80086aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80086ae:	4666      	mov	r6, ip
 80086b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80086b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80086b8:	f1be 0f09 	cmp.w	lr, #9
 80086bc:	d816      	bhi.n	80086ec <_strtol_l.constprop.0+0xa4>
 80086be:	4674      	mov	r4, lr
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	dd24      	ble.n	800870e <_strtol_l.constprop.0+0xc6>
 80086c4:	f1bc 0f00 	cmp.w	ip, #0
 80086c8:	db1e      	blt.n	8008708 <_strtol_l.constprop.0+0xc0>
 80086ca:	45b1      	cmp	r9, r6
 80086cc:	d31c      	bcc.n	8008708 <_strtol_l.constprop.0+0xc0>
 80086ce:	d101      	bne.n	80086d4 <_strtol_l.constprop.0+0x8c>
 80086d0:	45a2      	cmp	sl, r4
 80086d2:	db19      	blt.n	8008708 <_strtol_l.constprop.0+0xc0>
 80086d4:	fb06 4603 	mla	r6, r6, r3, r4
 80086d8:	f04f 0c01 	mov.w	ip, #1
 80086dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086e0:	e7e8      	b.n	80086b4 <_strtol_l.constprop.0+0x6c>
 80086e2:	2c2b      	cmp	r4, #43	; 0x2b
 80086e4:	bf04      	itt	eq
 80086e6:	782c      	ldrbeq	r4, [r5, #0]
 80086e8:	1cb5      	addeq	r5, r6, #2
 80086ea:	e7ca      	b.n	8008682 <_strtol_l.constprop.0+0x3a>
 80086ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086f0:	f1be 0f19 	cmp.w	lr, #25
 80086f4:	d801      	bhi.n	80086fa <_strtol_l.constprop.0+0xb2>
 80086f6:	3c37      	subs	r4, #55	; 0x37
 80086f8:	e7e2      	b.n	80086c0 <_strtol_l.constprop.0+0x78>
 80086fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086fe:	f1be 0f19 	cmp.w	lr, #25
 8008702:	d804      	bhi.n	800870e <_strtol_l.constprop.0+0xc6>
 8008704:	3c57      	subs	r4, #87	; 0x57
 8008706:	e7db      	b.n	80086c0 <_strtol_l.constprop.0+0x78>
 8008708:	f04f 3cff 	mov.w	ip, #4294967295
 800870c:	e7e6      	b.n	80086dc <_strtol_l.constprop.0+0x94>
 800870e:	f1bc 0f00 	cmp.w	ip, #0
 8008712:	da05      	bge.n	8008720 <_strtol_l.constprop.0+0xd8>
 8008714:	2322      	movs	r3, #34	; 0x22
 8008716:	6003      	str	r3, [r0, #0]
 8008718:	4646      	mov	r6, r8
 800871a:	b942      	cbnz	r2, 800872e <_strtol_l.constprop.0+0xe6>
 800871c:	4630      	mov	r0, r6
 800871e:	e79e      	b.n	800865e <_strtol_l.constprop.0+0x16>
 8008720:	b107      	cbz	r7, 8008724 <_strtol_l.constprop.0+0xdc>
 8008722:	4276      	negs	r6, r6
 8008724:	2a00      	cmp	r2, #0
 8008726:	d0f9      	beq.n	800871c <_strtol_l.constprop.0+0xd4>
 8008728:	f1bc 0f00 	cmp.w	ip, #0
 800872c:	d000      	beq.n	8008730 <_strtol_l.constprop.0+0xe8>
 800872e:	1e69      	subs	r1, r5, #1
 8008730:	6011      	str	r1, [r2, #0]
 8008732:	e7f3      	b.n	800871c <_strtol_l.constprop.0+0xd4>
 8008734:	2430      	movs	r4, #48	; 0x30
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1b1      	bne.n	800869e <_strtol_l.constprop.0+0x56>
 800873a:	2308      	movs	r3, #8
 800873c:	e7af      	b.n	800869e <_strtol_l.constprop.0+0x56>
 800873e:	2c30      	cmp	r4, #48	; 0x30
 8008740:	d0a5      	beq.n	800868e <_strtol_l.constprop.0+0x46>
 8008742:	230a      	movs	r3, #10
 8008744:	e7ab      	b.n	800869e <_strtol_l.constprop.0+0x56>
 8008746:	bf00      	nop
 8008748:	0800b6b1 	.word	0x0800b6b1

0800874c <_strtol_r>:
 800874c:	f7ff bf7c 	b.w	8008648 <_strtol_l.constprop.0>

08008750 <quorem>:
 8008750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	6903      	ldr	r3, [r0, #16]
 8008756:	690c      	ldr	r4, [r1, #16]
 8008758:	42a3      	cmp	r3, r4
 800875a:	4607      	mov	r7, r0
 800875c:	f2c0 8081 	blt.w	8008862 <quorem+0x112>
 8008760:	3c01      	subs	r4, #1
 8008762:	f101 0814 	add.w	r8, r1, #20
 8008766:	f100 0514 	add.w	r5, r0, #20
 800876a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008774:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008778:	3301      	adds	r3, #1
 800877a:	429a      	cmp	r2, r3
 800877c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008784:	fbb2 f6f3 	udiv	r6, r2, r3
 8008788:	d331      	bcc.n	80087ee <quorem+0x9e>
 800878a:	f04f 0e00 	mov.w	lr, #0
 800878e:	4640      	mov	r0, r8
 8008790:	46ac      	mov	ip, r5
 8008792:	46f2      	mov	sl, lr
 8008794:	f850 2b04 	ldr.w	r2, [r0], #4
 8008798:	b293      	uxth	r3, r2
 800879a:	fb06 e303 	mla	r3, r6, r3, lr
 800879e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	ebaa 0303 	sub.w	r3, sl, r3
 80087a8:	f8dc a000 	ldr.w	sl, [ip]
 80087ac:	0c12      	lsrs	r2, r2, #16
 80087ae:	fa13 f38a 	uxtah	r3, r3, sl
 80087b2:	fb06 e202 	mla	r2, r6, r2, lr
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087be:	b292      	uxth	r2, r2
 80087c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80087cc:	4581      	cmp	r9, r0
 80087ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087d2:	f84c 3b04 	str.w	r3, [ip], #4
 80087d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087da:	d2db      	bcs.n	8008794 <quorem+0x44>
 80087dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80087e0:	b92b      	cbnz	r3, 80087ee <quorem+0x9e>
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	3b04      	subs	r3, #4
 80087e6:	429d      	cmp	r5, r3
 80087e8:	461a      	mov	r2, r3
 80087ea:	d32e      	bcc.n	800884a <quorem+0xfa>
 80087ec:	613c      	str	r4, [r7, #16]
 80087ee:	4638      	mov	r0, r7
 80087f0:	f001 fd88 	bl	800a304 <__mcmp>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	db24      	blt.n	8008842 <quorem+0xf2>
 80087f8:	3601      	adds	r6, #1
 80087fa:	4628      	mov	r0, r5
 80087fc:	f04f 0c00 	mov.w	ip, #0
 8008800:	f858 2b04 	ldr.w	r2, [r8], #4
 8008804:	f8d0 e000 	ldr.w	lr, [r0]
 8008808:	b293      	uxth	r3, r2
 800880a:	ebac 0303 	sub.w	r3, ip, r3
 800880e:	0c12      	lsrs	r2, r2, #16
 8008810:	fa13 f38e 	uxtah	r3, r3, lr
 8008814:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800881c:	b29b      	uxth	r3, r3
 800881e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008822:	45c1      	cmp	r9, r8
 8008824:	f840 3b04 	str.w	r3, [r0], #4
 8008828:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800882c:	d2e8      	bcs.n	8008800 <quorem+0xb0>
 800882e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008836:	b922      	cbnz	r2, 8008842 <quorem+0xf2>
 8008838:	3b04      	subs	r3, #4
 800883a:	429d      	cmp	r5, r3
 800883c:	461a      	mov	r2, r3
 800883e:	d30a      	bcc.n	8008856 <quorem+0x106>
 8008840:	613c      	str	r4, [r7, #16]
 8008842:	4630      	mov	r0, r6
 8008844:	b003      	add	sp, #12
 8008846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884a:	6812      	ldr	r2, [r2, #0]
 800884c:	3b04      	subs	r3, #4
 800884e:	2a00      	cmp	r2, #0
 8008850:	d1cc      	bne.n	80087ec <quorem+0x9c>
 8008852:	3c01      	subs	r4, #1
 8008854:	e7c7      	b.n	80087e6 <quorem+0x96>
 8008856:	6812      	ldr	r2, [r2, #0]
 8008858:	3b04      	subs	r3, #4
 800885a:	2a00      	cmp	r2, #0
 800885c:	d1f0      	bne.n	8008840 <quorem+0xf0>
 800885e:	3c01      	subs	r4, #1
 8008860:	e7eb      	b.n	800883a <quorem+0xea>
 8008862:	2000      	movs	r0, #0
 8008864:	e7ee      	b.n	8008844 <quorem+0xf4>
	...

08008868 <_dtoa_r>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	ed2d 8b04 	vpush	{d8-d9}
 8008870:	ec57 6b10 	vmov	r6, r7, d0
 8008874:	b093      	sub	sp, #76	; 0x4c
 8008876:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008878:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800887c:	9106      	str	r1, [sp, #24]
 800887e:	ee10 aa10 	vmov	sl, s0
 8008882:	4604      	mov	r4, r0
 8008884:	9209      	str	r2, [sp, #36]	; 0x24
 8008886:	930c      	str	r3, [sp, #48]	; 0x30
 8008888:	46bb      	mov	fp, r7
 800888a:	b975      	cbnz	r5, 80088aa <_dtoa_r+0x42>
 800888c:	2010      	movs	r0, #16
 800888e:	f001 fa45 	bl	8009d1c <malloc>
 8008892:	4602      	mov	r2, r0
 8008894:	6260      	str	r0, [r4, #36]	; 0x24
 8008896:	b920      	cbnz	r0, 80088a2 <_dtoa_r+0x3a>
 8008898:	4ba7      	ldr	r3, [pc, #668]	; (8008b38 <_dtoa_r+0x2d0>)
 800889a:	21ea      	movs	r1, #234	; 0xea
 800889c:	48a7      	ldr	r0, [pc, #668]	; (8008b3c <_dtoa_r+0x2d4>)
 800889e:	f002 fc23 	bl	800b0e8 <__assert_func>
 80088a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088a6:	6005      	str	r5, [r0, #0]
 80088a8:	60c5      	str	r5, [r0, #12]
 80088aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088ac:	6819      	ldr	r1, [r3, #0]
 80088ae:	b151      	cbz	r1, 80088c6 <_dtoa_r+0x5e>
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	604a      	str	r2, [r1, #4]
 80088b4:	2301      	movs	r3, #1
 80088b6:	4093      	lsls	r3, r2
 80088b8:	608b      	str	r3, [r1, #8]
 80088ba:	4620      	mov	r0, r4
 80088bc:	f001 fa96 	bl	8009dec <_Bfree>
 80088c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	1e3b      	subs	r3, r7, #0
 80088c8:	bfaa      	itet	ge
 80088ca:	2300      	movge	r3, #0
 80088cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80088d0:	f8c8 3000 	strge.w	r3, [r8]
 80088d4:	4b9a      	ldr	r3, [pc, #616]	; (8008b40 <_dtoa_r+0x2d8>)
 80088d6:	bfbc      	itt	lt
 80088d8:	2201      	movlt	r2, #1
 80088da:	f8c8 2000 	strlt.w	r2, [r8]
 80088de:	ea33 030b 	bics.w	r3, r3, fp
 80088e2:	d11b      	bne.n	800891c <_dtoa_r+0xb4>
 80088e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088f0:	4333      	orrs	r3, r6
 80088f2:	f000 8592 	beq.w	800941a <_dtoa_r+0xbb2>
 80088f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f8:	b963      	cbnz	r3, 8008914 <_dtoa_r+0xac>
 80088fa:	4b92      	ldr	r3, [pc, #584]	; (8008b44 <_dtoa_r+0x2dc>)
 80088fc:	e022      	b.n	8008944 <_dtoa_r+0xdc>
 80088fe:	4b92      	ldr	r3, [pc, #584]	; (8008b48 <_dtoa_r+0x2e0>)
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	3308      	adds	r3, #8
 8008904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	9801      	ldr	r0, [sp, #4]
 800890a:	b013      	add	sp, #76	; 0x4c
 800890c:	ecbd 8b04 	vpop	{d8-d9}
 8008910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008914:	4b8b      	ldr	r3, [pc, #556]	; (8008b44 <_dtoa_r+0x2dc>)
 8008916:	9301      	str	r3, [sp, #4]
 8008918:	3303      	adds	r3, #3
 800891a:	e7f3      	b.n	8008904 <_dtoa_r+0x9c>
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	4650      	mov	r0, sl
 8008922:	4659      	mov	r1, fp
 8008924:	f7f8 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008928:	ec4b ab19 	vmov	d9, sl, fp
 800892c:	4680      	mov	r8, r0
 800892e:	b158      	cbz	r0, 8008948 <_dtoa_r+0xe0>
 8008930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008932:	2301      	movs	r3, #1
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 856b 	beq.w	8009414 <_dtoa_r+0xbac>
 800893e:	4883      	ldr	r0, [pc, #524]	; (8008b4c <_dtoa_r+0x2e4>)
 8008940:	6018      	str	r0, [r3, #0]
 8008942:	1e43      	subs	r3, r0, #1
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	e7df      	b.n	8008908 <_dtoa_r+0xa0>
 8008948:	ec4b ab10 	vmov	d0, sl, fp
 800894c:	aa10      	add	r2, sp, #64	; 0x40
 800894e:	a911      	add	r1, sp, #68	; 0x44
 8008950:	4620      	mov	r0, r4
 8008952:	f001 fdf9 	bl	800a548 <__d2b>
 8008956:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800895a:	ee08 0a10 	vmov	s16, r0
 800895e:	2d00      	cmp	r5, #0
 8008960:	f000 8084 	beq.w	8008a6c <_dtoa_r+0x204>
 8008964:	ee19 3a90 	vmov	r3, s19
 8008968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800896c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008970:	4656      	mov	r6, sl
 8008972:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800897a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800897e:	4b74      	ldr	r3, [pc, #464]	; (8008b50 <_dtoa_r+0x2e8>)
 8008980:	2200      	movs	r2, #0
 8008982:	4630      	mov	r0, r6
 8008984:	4639      	mov	r1, r7
 8008986:	f7f7 fc7f 	bl	8000288 <__aeabi_dsub>
 800898a:	a365      	add	r3, pc, #404	; (adr r3, 8008b20 <_dtoa_r+0x2b8>)
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f7f7 fe32 	bl	80005f8 <__aeabi_dmul>
 8008994:	a364      	add	r3, pc, #400	; (adr r3, 8008b28 <_dtoa_r+0x2c0>)
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	f7f7 fc77 	bl	800028c <__adddf3>
 800899e:	4606      	mov	r6, r0
 80089a0:	4628      	mov	r0, r5
 80089a2:	460f      	mov	r7, r1
 80089a4:	f7f7 fdbe 	bl	8000524 <__aeabi_i2d>
 80089a8:	a361      	add	r3, pc, #388	; (adr r3, 8008b30 <_dtoa_r+0x2c8>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 fe23 	bl	80005f8 <__aeabi_dmul>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4630      	mov	r0, r6
 80089b8:	4639      	mov	r1, r7
 80089ba:	f7f7 fc67 	bl	800028c <__adddf3>
 80089be:	4606      	mov	r6, r0
 80089c0:	460f      	mov	r7, r1
 80089c2:	f7f8 f8c9 	bl	8000b58 <__aeabi_d2iz>
 80089c6:	2200      	movs	r2, #0
 80089c8:	9000      	str	r0, [sp, #0]
 80089ca:	2300      	movs	r3, #0
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f8 f884 	bl	8000adc <__aeabi_dcmplt>
 80089d4:	b150      	cbz	r0, 80089ec <_dtoa_r+0x184>
 80089d6:	9800      	ldr	r0, [sp, #0]
 80089d8:	f7f7 fda4 	bl	8000524 <__aeabi_i2d>
 80089dc:	4632      	mov	r2, r6
 80089de:	463b      	mov	r3, r7
 80089e0:	f7f8 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80089e4:	b910      	cbnz	r0, 80089ec <_dtoa_r+0x184>
 80089e6:	9b00      	ldr	r3, [sp, #0]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	9b00      	ldr	r3, [sp, #0]
 80089ee:	2b16      	cmp	r3, #22
 80089f0:	d85a      	bhi.n	8008aa8 <_dtoa_r+0x240>
 80089f2:	9a00      	ldr	r2, [sp, #0]
 80089f4:	4b57      	ldr	r3, [pc, #348]	; (8008b54 <_dtoa_r+0x2ec>)
 80089f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	ec51 0b19 	vmov	r0, r1, d9
 8008a02:	f7f8 f86b 	bl	8000adc <__aeabi_dcmplt>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d050      	beq.n	8008aac <_dtoa_r+0x244>
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	2300      	movs	r3, #0
 8008a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a16:	1b5d      	subs	r5, r3, r5
 8008a18:	1e6b      	subs	r3, r5, #1
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	bf45      	ittet	mi
 8008a1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a22:	9304      	strmi	r3, [sp, #16]
 8008a24:	2300      	movpl	r3, #0
 8008a26:	2300      	movmi	r3, #0
 8008a28:	bf4c      	ite	mi
 8008a2a:	9305      	strmi	r3, [sp, #20]
 8008a2c:	9304      	strpl	r3, [sp, #16]
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	db3d      	blt.n	8008ab0 <_dtoa_r+0x248>
 8008a34:	9b05      	ldr	r3, [sp, #20]
 8008a36:	9a00      	ldr	r2, [sp, #0]
 8008a38:	920a      	str	r2, [sp, #40]	; 0x28
 8008a3a:	4413      	add	r3, r2
 8008a3c:	9305      	str	r3, [sp, #20]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9307      	str	r3, [sp, #28]
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	f200 8089 	bhi.w	8008b5c <_dtoa_r+0x2f4>
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	bfc4      	itt	gt
 8008a4e:	3b04      	subgt	r3, #4
 8008a50:	9306      	strgt	r3, [sp, #24]
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	f1a3 0302 	sub.w	r3, r3, #2
 8008a58:	bfcc      	ite	gt
 8008a5a:	2500      	movgt	r5, #0
 8008a5c:	2501      	movle	r5, #1
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	f200 8087 	bhi.w	8008b72 <_dtoa_r+0x30a>
 8008a64:	e8df f003 	tbb	[pc, r3]
 8008a68:	59383a2d 	.word	0x59383a2d
 8008a6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a70:	441d      	add	r5, r3
 8008a72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	bfc1      	itttt	gt
 8008a7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a82:	fa0b f303 	lslgt.w	r3, fp, r3
 8008a86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a8a:	bfda      	itte	le
 8008a8c:	f1c3 0320 	rsble	r3, r3, #32
 8008a90:	fa06 f003 	lslle.w	r0, r6, r3
 8008a94:	4318      	orrgt	r0, r3
 8008a96:	f7f7 fd35 	bl	8000504 <__aeabi_ui2d>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008aa2:	3d01      	subs	r5, #1
 8008aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8008aa6:	e76a      	b.n	800897e <_dtoa_r+0x116>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e7b2      	b.n	8008a12 <_dtoa_r+0x1aa>
 8008aac:	900b      	str	r0, [sp, #44]	; 0x2c
 8008aae:	e7b1      	b.n	8008a14 <_dtoa_r+0x1ac>
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	9a00      	ldr	r2, [sp, #0]
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	4253      	negs	r3, r2
 8008aba:	9307      	str	r3, [sp, #28]
 8008abc:	2300      	movs	r3, #0
 8008abe:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac0:	e7bf      	b.n	8008a42 <_dtoa_r+0x1da>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9308      	str	r3, [sp, #32]
 8008ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc55      	bgt.n	8008b78 <_dtoa_r+0x310>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad6:	e00c      	b.n	8008af2 <_dtoa_r+0x28a>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e7f3      	b.n	8008ac4 <_dtoa_r+0x25c>
 8008adc:	2300      	movs	r3, #0
 8008ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ae0:	9308      	str	r3, [sp, #32]
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	9302      	str	r3, [sp, #8]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	bfb8      	it	lt
 8008af0:	2301      	movlt	r3, #1
 8008af2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008af4:	2200      	movs	r2, #0
 8008af6:	6042      	str	r2, [r0, #4]
 8008af8:	2204      	movs	r2, #4
 8008afa:	f102 0614 	add.w	r6, r2, #20
 8008afe:	429e      	cmp	r6, r3
 8008b00:	6841      	ldr	r1, [r0, #4]
 8008b02:	d93d      	bls.n	8008b80 <_dtoa_r+0x318>
 8008b04:	4620      	mov	r0, r4
 8008b06:	f001 f931 	bl	8009d6c <_Balloc>
 8008b0a:	9001      	str	r0, [sp, #4]
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d13b      	bne.n	8008b88 <_dtoa_r+0x320>
 8008b10:	4b11      	ldr	r3, [pc, #68]	; (8008b58 <_dtoa_r+0x2f0>)
 8008b12:	4602      	mov	r2, r0
 8008b14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b18:	e6c0      	b.n	800889c <_dtoa_r+0x34>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e7df      	b.n	8008ade <_dtoa_r+0x276>
 8008b1e:	bf00      	nop
 8008b20:	636f4361 	.word	0x636f4361
 8008b24:	3fd287a7 	.word	0x3fd287a7
 8008b28:	8b60c8b3 	.word	0x8b60c8b3
 8008b2c:	3fc68a28 	.word	0x3fc68a28
 8008b30:	509f79fb 	.word	0x509f79fb
 8008b34:	3fd34413 	.word	0x3fd34413
 8008b38:	0800b7be 	.word	0x0800b7be
 8008b3c:	0800b7d5 	.word	0x0800b7d5
 8008b40:	7ff00000 	.word	0x7ff00000
 8008b44:	0800b7ba 	.word	0x0800b7ba
 8008b48:	0800b7b1 	.word	0x0800b7b1
 8008b4c:	0800b635 	.word	0x0800b635
 8008b50:	3ff80000 	.word	0x3ff80000
 8008b54:	0800b9a8 	.word	0x0800b9a8
 8008b58:	0800b830 	.word	0x0800b830
 8008b5c:	2501      	movs	r5, #1
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9306      	str	r3, [sp, #24]
 8008b62:	9508      	str	r5, [sp, #32]
 8008b64:	f04f 33ff 	mov.w	r3, #4294967295
 8008b68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2312      	movs	r3, #18
 8008b70:	e7b0      	b.n	8008ad4 <_dtoa_r+0x26c>
 8008b72:	2301      	movs	r3, #1
 8008b74:	9308      	str	r3, [sp, #32]
 8008b76:	e7f5      	b.n	8008b64 <_dtoa_r+0x2fc>
 8008b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b7e:	e7b8      	b.n	8008af2 <_dtoa_r+0x28a>
 8008b80:	3101      	adds	r1, #1
 8008b82:	6041      	str	r1, [r0, #4]
 8008b84:	0052      	lsls	r2, r2, #1
 8008b86:	e7b8      	b.n	8008afa <_dtoa_r+0x292>
 8008b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b8a:	9a01      	ldr	r2, [sp, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	2b0e      	cmp	r3, #14
 8008b92:	f200 809d 	bhi.w	8008cd0 <_dtoa_r+0x468>
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	f000 809a 	beq.w	8008cd0 <_dtoa_r+0x468>
 8008b9c:	9b00      	ldr	r3, [sp, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd32      	ble.n	8008c08 <_dtoa_r+0x3a0>
 8008ba2:	4ab7      	ldr	r2, [pc, #732]	; (8008e80 <_dtoa_r+0x618>)
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008bac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bb0:	9b00      	ldr	r3, [sp, #0]
 8008bb2:	05d8      	lsls	r0, r3, #23
 8008bb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008bb8:	d516      	bpl.n	8008be8 <_dtoa_r+0x380>
 8008bba:	4bb2      	ldr	r3, [pc, #712]	; (8008e84 <_dtoa_r+0x61c>)
 8008bbc:	ec51 0b19 	vmov	r0, r1, d9
 8008bc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bc4:	f7f7 fe42 	bl	800084c <__aeabi_ddiv>
 8008bc8:	f007 070f 	and.w	r7, r7, #15
 8008bcc:	4682      	mov	sl, r0
 8008bce:	468b      	mov	fp, r1
 8008bd0:	2503      	movs	r5, #3
 8008bd2:	4eac      	ldr	r6, [pc, #688]	; (8008e84 <_dtoa_r+0x61c>)
 8008bd4:	b957      	cbnz	r7, 8008bec <_dtoa_r+0x384>
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	464b      	mov	r3, r9
 8008bda:	4650      	mov	r0, sl
 8008bdc:	4659      	mov	r1, fp
 8008bde:	f7f7 fe35 	bl	800084c <__aeabi_ddiv>
 8008be2:	4682      	mov	sl, r0
 8008be4:	468b      	mov	fp, r1
 8008be6:	e028      	b.n	8008c3a <_dtoa_r+0x3d2>
 8008be8:	2502      	movs	r5, #2
 8008bea:	e7f2      	b.n	8008bd2 <_dtoa_r+0x36a>
 8008bec:	07f9      	lsls	r1, r7, #31
 8008bee:	d508      	bpl.n	8008c02 <_dtoa_r+0x39a>
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	4680      	mov	r8, r0
 8008c00:	4689      	mov	r9, r1
 8008c02:	107f      	asrs	r7, r7, #1
 8008c04:	3608      	adds	r6, #8
 8008c06:	e7e5      	b.n	8008bd4 <_dtoa_r+0x36c>
 8008c08:	f000 809b 	beq.w	8008d42 <_dtoa_r+0x4da>
 8008c0c:	9b00      	ldr	r3, [sp, #0]
 8008c0e:	4f9d      	ldr	r7, [pc, #628]	; (8008e84 <_dtoa_r+0x61c>)
 8008c10:	425e      	negs	r6, r3
 8008c12:	4b9b      	ldr	r3, [pc, #620]	; (8008e80 <_dtoa_r+0x618>)
 8008c14:	f006 020f 	and.w	r2, r6, #15
 8008c18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	ec51 0b19 	vmov	r0, r1, d9
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	1136      	asrs	r6, r6, #4
 8008c2a:	4682      	mov	sl, r0
 8008c2c:	468b      	mov	fp, r1
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2502      	movs	r5, #2
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	d17a      	bne.n	8008d2c <_dtoa_r+0x4c4>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1d3      	bne.n	8008be2 <_dtoa_r+0x37a>
 8008c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8082 	beq.w	8008d46 <_dtoa_r+0x4de>
 8008c42:	4b91      	ldr	r3, [pc, #580]	; (8008e88 <_dtoa_r+0x620>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	4650      	mov	r0, sl
 8008c48:	4659      	mov	r1, fp
 8008c4a:	f7f7 ff47 	bl	8000adc <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d079      	beq.n	8008d46 <_dtoa_r+0x4de>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d076      	beq.n	8008d46 <_dtoa_r+0x4de>
 8008c58:	9b02      	ldr	r3, [sp, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dd36      	ble.n	8008ccc <_dtoa_r+0x464>
 8008c5e:	9b00      	ldr	r3, [sp, #0]
 8008c60:	4650      	mov	r0, sl
 8008c62:	4659      	mov	r1, fp
 8008c64:	1e5f      	subs	r7, r3, #1
 8008c66:	2200      	movs	r2, #0
 8008c68:	4b88      	ldr	r3, [pc, #544]	; (8008e8c <_dtoa_r+0x624>)
 8008c6a:	f7f7 fcc5 	bl	80005f8 <__aeabi_dmul>
 8008c6e:	9e02      	ldr	r6, [sp, #8]
 8008c70:	4682      	mov	sl, r0
 8008c72:	468b      	mov	fp, r1
 8008c74:	3501      	adds	r5, #1
 8008c76:	4628      	mov	r0, r5
 8008c78:	f7f7 fc54 	bl	8000524 <__aeabi_i2d>
 8008c7c:	4652      	mov	r2, sl
 8008c7e:	465b      	mov	r3, fp
 8008c80:	f7f7 fcba 	bl	80005f8 <__aeabi_dmul>
 8008c84:	4b82      	ldr	r3, [pc, #520]	; (8008e90 <_dtoa_r+0x628>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	f7f7 fb00 	bl	800028c <__adddf3>
 8008c8c:	46d0      	mov	r8, sl
 8008c8e:	46d9      	mov	r9, fp
 8008c90:	4682      	mov	sl, r0
 8008c92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008c96:	2e00      	cmp	r6, #0
 8008c98:	d158      	bne.n	8008d4c <_dtoa_r+0x4e4>
 8008c9a:	4b7e      	ldr	r3, [pc, #504]	; (8008e94 <_dtoa_r+0x62c>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	f7f7 faf1 	bl	8000288 <__aeabi_dsub>
 8008ca6:	4652      	mov	r2, sl
 8008ca8:	465b      	mov	r3, fp
 8008caa:	4680      	mov	r8, r0
 8008cac:	4689      	mov	r9, r1
 8008cae:	f7f7 ff33 	bl	8000b18 <__aeabi_dcmpgt>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	f040 8295 	bne.w	80091e2 <_dtoa_r+0x97a>
 8008cb8:	4652      	mov	r2, sl
 8008cba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f040 8289 	bne.w	80091de <_dtoa_r+0x976>
 8008ccc:	ec5b ab19 	vmov	sl, fp, d9
 8008cd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f2c0 8148 	blt.w	8008f68 <_dtoa_r+0x700>
 8008cd8:	9a00      	ldr	r2, [sp, #0]
 8008cda:	2a0e      	cmp	r2, #14
 8008cdc:	f300 8144 	bgt.w	8008f68 <_dtoa_r+0x700>
 8008ce0:	4b67      	ldr	r3, [pc, #412]	; (8008e80 <_dtoa_r+0x618>)
 8008ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ce6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f280 80d5 	bge.w	8008e9c <_dtoa_r+0x634>
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f300 80d1 	bgt.w	8008e9c <_dtoa_r+0x634>
 8008cfa:	f040 826f 	bne.w	80091dc <_dtoa_r+0x974>
 8008cfe:	4b65      	ldr	r3, [pc, #404]	; (8008e94 <_dtoa_r+0x62c>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	4640      	mov	r0, r8
 8008d04:	4649      	mov	r1, r9
 8008d06:	f7f7 fc77 	bl	80005f8 <__aeabi_dmul>
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	f7f7 fef9 	bl	8000b04 <__aeabi_dcmpge>
 8008d12:	9e03      	ldr	r6, [sp, #12]
 8008d14:	4637      	mov	r7, r6
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f040 8245 	bne.w	80091a6 <_dtoa_r+0x93e>
 8008d1c:	9d01      	ldr	r5, [sp, #4]
 8008d1e:	2331      	movs	r3, #49	; 0x31
 8008d20:	f805 3b01 	strb.w	r3, [r5], #1
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	3301      	adds	r3, #1
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	e240      	b.n	80091ae <_dtoa_r+0x946>
 8008d2c:	07f2      	lsls	r2, r6, #31
 8008d2e:	d505      	bpl.n	8008d3c <_dtoa_r+0x4d4>
 8008d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d34:	f7f7 fc60 	bl	80005f8 <__aeabi_dmul>
 8008d38:	3501      	adds	r5, #1
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	1076      	asrs	r6, r6, #1
 8008d3e:	3708      	adds	r7, #8
 8008d40:	e777      	b.n	8008c32 <_dtoa_r+0x3ca>
 8008d42:	2502      	movs	r5, #2
 8008d44:	e779      	b.n	8008c3a <_dtoa_r+0x3d2>
 8008d46:	9f00      	ldr	r7, [sp, #0]
 8008d48:	9e03      	ldr	r6, [sp, #12]
 8008d4a:	e794      	b.n	8008c76 <_dtoa_r+0x40e>
 8008d4c:	9901      	ldr	r1, [sp, #4]
 8008d4e:	4b4c      	ldr	r3, [pc, #304]	; (8008e80 <_dtoa_r+0x618>)
 8008d50:	4431      	add	r1, r6
 8008d52:	910d      	str	r1, [sp, #52]	; 0x34
 8008d54:	9908      	ldr	r1, [sp, #32]
 8008d56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d5e:	2900      	cmp	r1, #0
 8008d60:	d043      	beq.n	8008dea <_dtoa_r+0x582>
 8008d62:	494d      	ldr	r1, [pc, #308]	; (8008e98 <_dtoa_r+0x630>)
 8008d64:	2000      	movs	r0, #0
 8008d66:	f7f7 fd71 	bl	800084c <__aeabi_ddiv>
 8008d6a:	4652      	mov	r2, sl
 8008d6c:	465b      	mov	r3, fp
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	9d01      	ldr	r5, [sp, #4]
 8008d74:	4682      	mov	sl, r0
 8008d76:	468b      	mov	fp, r1
 8008d78:	4649      	mov	r1, r9
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	f7f7 feec 	bl	8000b58 <__aeabi_d2iz>
 8008d80:	4606      	mov	r6, r0
 8008d82:	f7f7 fbcf 	bl	8000524 <__aeabi_i2d>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 fa7b 	bl	8000288 <__aeabi_dsub>
 8008d92:	3630      	adds	r6, #48	; 0x30
 8008d94:	f805 6b01 	strb.w	r6, [r5], #1
 8008d98:	4652      	mov	r2, sl
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4689      	mov	r9, r1
 8008da0:	f7f7 fe9c 	bl	8000adc <__aeabi_dcmplt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d163      	bne.n	8008e70 <_dtoa_r+0x608>
 8008da8:	4642      	mov	r2, r8
 8008daa:	464b      	mov	r3, r9
 8008dac:	4936      	ldr	r1, [pc, #216]	; (8008e88 <_dtoa_r+0x620>)
 8008dae:	2000      	movs	r0, #0
 8008db0:	f7f7 fa6a 	bl	8000288 <__aeabi_dsub>
 8008db4:	4652      	mov	r2, sl
 8008db6:	465b      	mov	r3, fp
 8008db8:	f7f7 fe90 	bl	8000adc <__aeabi_dcmplt>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f040 80b5 	bne.w	8008f2c <_dtoa_r+0x6c4>
 8008dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dc4:	429d      	cmp	r5, r3
 8008dc6:	d081      	beq.n	8008ccc <_dtoa_r+0x464>
 8008dc8:	4b30      	ldr	r3, [pc, #192]	; (8008e8c <_dtoa_r+0x624>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4650      	mov	r0, sl
 8008dce:	4659      	mov	r1, fp
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	4b2d      	ldr	r3, [pc, #180]	; (8008e8c <_dtoa_r+0x624>)
 8008dd6:	4682      	mov	sl, r0
 8008dd8:	468b      	mov	fp, r1
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	2200      	movs	r2, #0
 8008de0:	f7f7 fc0a 	bl	80005f8 <__aeabi_dmul>
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	e7c6      	b.n	8008d78 <_dtoa_r+0x510>
 8008dea:	4650      	mov	r0, sl
 8008dec:	4659      	mov	r1, fp
 8008dee:	f7f7 fc03 	bl	80005f8 <__aeabi_dmul>
 8008df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008df4:	9d01      	ldr	r5, [sp, #4]
 8008df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008df8:	4682      	mov	sl, r0
 8008dfa:	468b      	mov	fp, r1
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	4640      	mov	r0, r8
 8008e00:	f7f7 feaa 	bl	8000b58 <__aeabi_d2iz>
 8008e04:	4606      	mov	r6, r0
 8008e06:	f7f7 fb8d 	bl	8000524 <__aeabi_i2d>
 8008e0a:	3630      	adds	r6, #48	; 0x30
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4640      	mov	r0, r8
 8008e12:	4649      	mov	r1, r9
 8008e14:	f7f7 fa38 	bl	8000288 <__aeabi_dsub>
 8008e18:	f805 6b01 	strb.w	r6, [r5], #1
 8008e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	4680      	mov	r8, r0
 8008e22:	4689      	mov	r9, r1
 8008e24:	f04f 0200 	mov.w	r2, #0
 8008e28:	d124      	bne.n	8008e74 <_dtoa_r+0x60c>
 8008e2a:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <_dtoa_r+0x630>)
 8008e2c:	4650      	mov	r0, sl
 8008e2e:	4659      	mov	r1, fp
 8008e30:	f7f7 fa2c 	bl	800028c <__adddf3>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4640      	mov	r0, r8
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	f7f7 fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d173      	bne.n	8008f2c <_dtoa_r+0x6c4>
 8008e44:	4652      	mov	r2, sl
 8008e46:	465b      	mov	r3, fp
 8008e48:	4913      	ldr	r1, [pc, #76]	; (8008e98 <_dtoa_r+0x630>)
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f7f7 fa1c 	bl	8000288 <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4640      	mov	r0, r8
 8008e56:	4649      	mov	r1, r9
 8008e58:	f7f7 fe40 	bl	8000adc <__aeabi_dcmplt>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f43f af35 	beq.w	8008ccc <_dtoa_r+0x464>
 8008e62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e64:	1e6b      	subs	r3, r5, #1
 8008e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e6c:	2b30      	cmp	r3, #48	; 0x30
 8008e6e:	d0f8      	beq.n	8008e62 <_dtoa_r+0x5fa>
 8008e70:	9700      	str	r7, [sp, #0]
 8008e72:	e049      	b.n	8008f08 <_dtoa_r+0x6a0>
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <_dtoa_r+0x624>)
 8008e76:	f7f7 fbbf 	bl	80005f8 <__aeabi_dmul>
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	4689      	mov	r9, r1
 8008e7e:	e7bd      	b.n	8008dfc <_dtoa_r+0x594>
 8008e80:	0800b9a8 	.word	0x0800b9a8
 8008e84:	0800b980 	.word	0x0800b980
 8008e88:	3ff00000 	.word	0x3ff00000
 8008e8c:	40240000 	.word	0x40240000
 8008e90:	401c0000 	.word	0x401c0000
 8008e94:	40140000 	.word	0x40140000
 8008e98:	3fe00000 	.word	0x3fe00000
 8008e9c:	9d01      	ldr	r5, [sp, #4]
 8008e9e:	4656      	mov	r6, sl
 8008ea0:	465f      	mov	r7, fp
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	f7f7 fccf 	bl	800084c <__aeabi_ddiv>
 8008eae:	f7f7 fe53 	bl	8000b58 <__aeabi_d2iz>
 8008eb2:	4682      	mov	sl, r0
 8008eb4:	f7f7 fb36 	bl	8000524 <__aeabi_i2d>
 8008eb8:	4642      	mov	r2, r8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	f7f7 fb9c 	bl	80005f8 <__aeabi_dmul>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008ecc:	f7f7 f9dc 	bl	8000288 <__aeabi_dsub>
 8008ed0:	f805 6b01 	strb.w	r6, [r5], #1
 8008ed4:	9e01      	ldr	r6, [sp, #4]
 8008ed6:	9f03      	ldr	r7, [sp, #12]
 8008ed8:	1bae      	subs	r6, r5, r6
 8008eda:	42b7      	cmp	r7, r6
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	d135      	bne.n	8008f4e <_dtoa_r+0x6e6>
 8008ee2:	f7f7 f9d3 	bl	800028c <__adddf3>
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	464b      	mov	r3, r9
 8008eea:	4606      	mov	r6, r0
 8008eec:	460f      	mov	r7, r1
 8008eee:	f7f7 fe13 	bl	8000b18 <__aeabi_dcmpgt>
 8008ef2:	b9d0      	cbnz	r0, 8008f2a <_dtoa_r+0x6c2>
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f00:	b110      	cbz	r0, 8008f08 <_dtoa_r+0x6a0>
 8008f02:	f01a 0f01 	tst.w	sl, #1
 8008f06:	d110      	bne.n	8008f2a <_dtoa_r+0x6c2>
 8008f08:	4620      	mov	r0, r4
 8008f0a:	ee18 1a10 	vmov	r1, s16
 8008f0e:	f000 ff6d 	bl	8009dec <_Bfree>
 8008f12:	2300      	movs	r3, #0
 8008f14:	9800      	ldr	r0, [sp, #0]
 8008f16:	702b      	strb	r3, [r5, #0]
 8008f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	6018      	str	r0, [r3, #0]
 8008f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f43f acf1 	beq.w	8008908 <_dtoa_r+0xa0>
 8008f26:	601d      	str	r5, [r3, #0]
 8008f28:	e4ee      	b.n	8008908 <_dtoa_r+0xa0>
 8008f2a:	9f00      	ldr	r7, [sp, #0]
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	461d      	mov	r5, r3
 8008f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f34:	2a39      	cmp	r2, #57	; 0x39
 8008f36:	d106      	bne.n	8008f46 <_dtoa_r+0x6de>
 8008f38:	9a01      	ldr	r2, [sp, #4]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d1f7      	bne.n	8008f2e <_dtoa_r+0x6c6>
 8008f3e:	9901      	ldr	r1, [sp, #4]
 8008f40:	2230      	movs	r2, #48	; 0x30
 8008f42:	3701      	adds	r7, #1
 8008f44:	700a      	strb	r2, [r1, #0]
 8008f46:	781a      	ldrb	r2, [r3, #0]
 8008f48:	3201      	adds	r2, #1
 8008f4a:	701a      	strb	r2, [r3, #0]
 8008f4c:	e790      	b.n	8008e70 <_dtoa_r+0x608>
 8008f4e:	4ba6      	ldr	r3, [pc, #664]	; (80091e8 <_dtoa_r+0x980>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	f7f7 fb51 	bl	80005f8 <__aeabi_dmul>
 8008f56:	2200      	movs	r2, #0
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	f7f7 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d09d      	beq.n	8008ea2 <_dtoa_r+0x63a>
 8008f66:	e7cf      	b.n	8008f08 <_dtoa_r+0x6a0>
 8008f68:	9a08      	ldr	r2, [sp, #32]
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	f000 80d7 	beq.w	800911e <_dtoa_r+0x8b6>
 8008f70:	9a06      	ldr	r2, [sp, #24]
 8008f72:	2a01      	cmp	r2, #1
 8008f74:	f300 80ba 	bgt.w	80090ec <_dtoa_r+0x884>
 8008f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f7a:	2a00      	cmp	r2, #0
 8008f7c:	f000 80b2 	beq.w	80090e4 <_dtoa_r+0x87c>
 8008f80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f84:	9e07      	ldr	r6, [sp, #28]
 8008f86:	9d04      	ldr	r5, [sp, #16]
 8008f88:	9a04      	ldr	r2, [sp, #16]
 8008f8a:	441a      	add	r2, r3
 8008f8c:	9204      	str	r2, [sp, #16]
 8008f8e:	9a05      	ldr	r2, [sp, #20]
 8008f90:	2101      	movs	r1, #1
 8008f92:	441a      	add	r2, r3
 8008f94:	4620      	mov	r0, r4
 8008f96:	9205      	str	r2, [sp, #20]
 8008f98:	f001 f82a 	bl	8009ff0 <__i2b>
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	dd0c      	ble.n	8008fbc <_dtoa_r+0x754>
 8008fa2:	9b05      	ldr	r3, [sp, #20]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dd09      	ble.n	8008fbc <_dtoa_r+0x754>
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	9a04      	ldr	r2, [sp, #16]
 8008fac:	bfa8      	it	ge
 8008fae:	462b      	movge	r3, r5
 8008fb0:	1ad2      	subs	r2, r2, r3
 8008fb2:	9204      	str	r2, [sp, #16]
 8008fb4:	9a05      	ldr	r2, [sp, #20]
 8008fb6:	1aed      	subs	r5, r5, r3
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	b31b      	cbz	r3, 8009008 <_dtoa_r+0x7a0>
 8008fc0:	9b08      	ldr	r3, [sp, #32]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 80af 	beq.w	8009126 <_dtoa_r+0x8be>
 8008fc8:	2e00      	cmp	r6, #0
 8008fca:	dd13      	ble.n	8008ff4 <_dtoa_r+0x78c>
 8008fcc:	4639      	mov	r1, r7
 8008fce:	4632      	mov	r2, r6
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f001 f8cd 	bl	800a170 <__pow5mult>
 8008fd6:	ee18 2a10 	vmov	r2, s16
 8008fda:	4601      	mov	r1, r0
 8008fdc:	4607      	mov	r7, r0
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f001 f81c 	bl	800a01c <__multiply>
 8008fe4:	ee18 1a10 	vmov	r1, s16
 8008fe8:	4680      	mov	r8, r0
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fefe 	bl	8009dec <_Bfree>
 8008ff0:	ee08 8a10 	vmov	s16, r8
 8008ff4:	9b07      	ldr	r3, [sp, #28]
 8008ff6:	1b9a      	subs	r2, r3, r6
 8008ff8:	d006      	beq.n	8009008 <_dtoa_r+0x7a0>
 8008ffa:	ee18 1a10 	vmov	r1, s16
 8008ffe:	4620      	mov	r0, r4
 8009000:	f001 f8b6 	bl	800a170 <__pow5mult>
 8009004:	ee08 0a10 	vmov	s16, r0
 8009008:	2101      	movs	r1, #1
 800900a:	4620      	mov	r0, r4
 800900c:	f000 fff0 	bl	8009ff0 <__i2b>
 8009010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009012:	2b00      	cmp	r3, #0
 8009014:	4606      	mov	r6, r0
 8009016:	f340 8088 	ble.w	800912a <_dtoa_r+0x8c2>
 800901a:	461a      	mov	r2, r3
 800901c:	4601      	mov	r1, r0
 800901e:	4620      	mov	r0, r4
 8009020:	f001 f8a6 	bl	800a170 <__pow5mult>
 8009024:	9b06      	ldr	r3, [sp, #24]
 8009026:	2b01      	cmp	r3, #1
 8009028:	4606      	mov	r6, r0
 800902a:	f340 8081 	ble.w	8009130 <_dtoa_r+0x8c8>
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	6933      	ldr	r3, [r6, #16]
 8009034:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009038:	6918      	ldr	r0, [r3, #16]
 800903a:	f000 ff89 	bl	8009f50 <__hi0bits>
 800903e:	f1c0 0020 	rsb	r0, r0, #32
 8009042:	9b05      	ldr	r3, [sp, #20]
 8009044:	4418      	add	r0, r3
 8009046:	f010 001f 	ands.w	r0, r0, #31
 800904a:	f000 8092 	beq.w	8009172 <_dtoa_r+0x90a>
 800904e:	f1c0 0320 	rsb	r3, r0, #32
 8009052:	2b04      	cmp	r3, #4
 8009054:	f340 808a 	ble.w	800916c <_dtoa_r+0x904>
 8009058:	f1c0 001c 	rsb	r0, r0, #28
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	4403      	add	r3, r0
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	9b05      	ldr	r3, [sp, #20]
 8009064:	4403      	add	r3, r0
 8009066:	4405      	add	r5, r0
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	dd07      	ble.n	8009080 <_dtoa_r+0x818>
 8009070:	ee18 1a10 	vmov	r1, s16
 8009074:	461a      	mov	r2, r3
 8009076:	4620      	mov	r0, r4
 8009078:	f001 f8d4 	bl	800a224 <__lshift>
 800907c:	ee08 0a10 	vmov	s16, r0
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	dd05      	ble.n	8009092 <_dtoa_r+0x82a>
 8009086:	4631      	mov	r1, r6
 8009088:	461a      	mov	r2, r3
 800908a:	4620      	mov	r0, r4
 800908c:	f001 f8ca 	bl	800a224 <__lshift>
 8009090:	4606      	mov	r6, r0
 8009092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d06e      	beq.n	8009176 <_dtoa_r+0x90e>
 8009098:	ee18 0a10 	vmov	r0, s16
 800909c:	4631      	mov	r1, r6
 800909e:	f001 f931 	bl	800a304 <__mcmp>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	da67      	bge.n	8009176 <_dtoa_r+0x90e>
 80090a6:	9b00      	ldr	r3, [sp, #0]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	ee18 1a10 	vmov	r1, s16
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	220a      	movs	r2, #10
 80090b2:	2300      	movs	r3, #0
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 febb 	bl	8009e30 <__multadd>
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	ee08 0a10 	vmov	s16, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 81b1 	beq.w	8009428 <_dtoa_r+0xbc0>
 80090c6:	2300      	movs	r3, #0
 80090c8:	4639      	mov	r1, r7
 80090ca:	220a      	movs	r2, #10
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 feaf 	bl	8009e30 <__multadd>
 80090d2:	9b02      	ldr	r3, [sp, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	4607      	mov	r7, r0
 80090d8:	f300 808e 	bgt.w	80091f8 <_dtoa_r+0x990>
 80090dc:	9b06      	ldr	r3, [sp, #24]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	dc51      	bgt.n	8009186 <_dtoa_r+0x91e>
 80090e2:	e089      	b.n	80091f8 <_dtoa_r+0x990>
 80090e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090ea:	e74b      	b.n	8008f84 <_dtoa_r+0x71c>
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	1e5e      	subs	r6, r3, #1
 80090f0:	9b07      	ldr	r3, [sp, #28]
 80090f2:	42b3      	cmp	r3, r6
 80090f4:	bfbf      	itttt	lt
 80090f6:	9b07      	ldrlt	r3, [sp, #28]
 80090f8:	9607      	strlt	r6, [sp, #28]
 80090fa:	1af2      	sublt	r2, r6, r3
 80090fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80090fe:	bfb6      	itet	lt
 8009100:	189b      	addlt	r3, r3, r2
 8009102:	1b9e      	subge	r6, r3, r6
 8009104:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	bfb8      	it	lt
 800910a:	2600      	movlt	r6, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfb7      	itett	lt
 8009110:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009114:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009118:	1a9d      	sublt	r5, r3, r2
 800911a:	2300      	movlt	r3, #0
 800911c:	e734      	b.n	8008f88 <_dtoa_r+0x720>
 800911e:	9e07      	ldr	r6, [sp, #28]
 8009120:	9d04      	ldr	r5, [sp, #16]
 8009122:	9f08      	ldr	r7, [sp, #32]
 8009124:	e73b      	b.n	8008f9e <_dtoa_r+0x736>
 8009126:	9a07      	ldr	r2, [sp, #28]
 8009128:	e767      	b.n	8008ffa <_dtoa_r+0x792>
 800912a:	9b06      	ldr	r3, [sp, #24]
 800912c:	2b01      	cmp	r3, #1
 800912e:	dc18      	bgt.n	8009162 <_dtoa_r+0x8fa>
 8009130:	f1ba 0f00 	cmp.w	sl, #0
 8009134:	d115      	bne.n	8009162 <_dtoa_r+0x8fa>
 8009136:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800913a:	b993      	cbnz	r3, 8009162 <_dtoa_r+0x8fa>
 800913c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009140:	0d1b      	lsrs	r3, r3, #20
 8009142:	051b      	lsls	r3, r3, #20
 8009144:	b183      	cbz	r3, 8009168 <_dtoa_r+0x900>
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	3301      	adds	r3, #1
 800914a:	9304      	str	r3, [sp, #16]
 800914c:	9b05      	ldr	r3, [sp, #20]
 800914e:	3301      	adds	r3, #1
 8009150:	9305      	str	r3, [sp, #20]
 8009152:	f04f 0801 	mov.w	r8, #1
 8009156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	f47f af6a 	bne.w	8009032 <_dtoa_r+0x7ca>
 800915e:	2001      	movs	r0, #1
 8009160:	e76f      	b.n	8009042 <_dtoa_r+0x7da>
 8009162:	f04f 0800 	mov.w	r8, #0
 8009166:	e7f6      	b.n	8009156 <_dtoa_r+0x8ee>
 8009168:	4698      	mov	r8, r3
 800916a:	e7f4      	b.n	8009156 <_dtoa_r+0x8ee>
 800916c:	f43f af7d 	beq.w	800906a <_dtoa_r+0x802>
 8009170:	4618      	mov	r0, r3
 8009172:	301c      	adds	r0, #28
 8009174:	e772      	b.n	800905c <_dtoa_r+0x7f4>
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dc37      	bgt.n	80091ec <_dtoa_r+0x984>
 800917c:	9b06      	ldr	r3, [sp, #24]
 800917e:	2b02      	cmp	r3, #2
 8009180:	dd34      	ble.n	80091ec <_dtoa_r+0x984>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	9302      	str	r3, [sp, #8]
 8009186:	9b02      	ldr	r3, [sp, #8]
 8009188:	b96b      	cbnz	r3, 80091a6 <_dtoa_r+0x93e>
 800918a:	4631      	mov	r1, r6
 800918c:	2205      	movs	r2, #5
 800918e:	4620      	mov	r0, r4
 8009190:	f000 fe4e 	bl	8009e30 <__multadd>
 8009194:	4601      	mov	r1, r0
 8009196:	4606      	mov	r6, r0
 8009198:	ee18 0a10 	vmov	r0, s16
 800919c:	f001 f8b2 	bl	800a304 <__mcmp>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f73f adbb 	bgt.w	8008d1c <_dtoa_r+0x4b4>
 80091a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a8:	9d01      	ldr	r5, [sp, #4]
 80091aa:	43db      	mvns	r3, r3
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	f04f 0800 	mov.w	r8, #0
 80091b2:	4631      	mov	r1, r6
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fe19 	bl	8009dec <_Bfree>
 80091ba:	2f00      	cmp	r7, #0
 80091bc:	f43f aea4 	beq.w	8008f08 <_dtoa_r+0x6a0>
 80091c0:	f1b8 0f00 	cmp.w	r8, #0
 80091c4:	d005      	beq.n	80091d2 <_dtoa_r+0x96a>
 80091c6:	45b8      	cmp	r8, r7
 80091c8:	d003      	beq.n	80091d2 <_dtoa_r+0x96a>
 80091ca:	4641      	mov	r1, r8
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 fe0d 	bl	8009dec <_Bfree>
 80091d2:	4639      	mov	r1, r7
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fe09 	bl	8009dec <_Bfree>
 80091da:	e695      	b.n	8008f08 <_dtoa_r+0x6a0>
 80091dc:	2600      	movs	r6, #0
 80091de:	4637      	mov	r7, r6
 80091e0:	e7e1      	b.n	80091a6 <_dtoa_r+0x93e>
 80091e2:	9700      	str	r7, [sp, #0]
 80091e4:	4637      	mov	r7, r6
 80091e6:	e599      	b.n	8008d1c <_dtoa_r+0x4b4>
 80091e8:	40240000 	.word	0x40240000
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80ca 	beq.w	8009388 <_dtoa_r+0xb20>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	dd05      	ble.n	8009208 <_dtoa_r+0x9a0>
 80091fc:	4639      	mov	r1, r7
 80091fe:	462a      	mov	r2, r5
 8009200:	4620      	mov	r0, r4
 8009202:	f001 f80f 	bl	800a224 <__lshift>
 8009206:	4607      	mov	r7, r0
 8009208:	f1b8 0f00 	cmp.w	r8, #0
 800920c:	d05b      	beq.n	80092c6 <_dtoa_r+0xa5e>
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4620      	mov	r0, r4
 8009212:	f000 fdab 	bl	8009d6c <_Balloc>
 8009216:	4605      	mov	r5, r0
 8009218:	b928      	cbnz	r0, 8009226 <_dtoa_r+0x9be>
 800921a:	4b87      	ldr	r3, [pc, #540]	; (8009438 <_dtoa_r+0xbd0>)
 800921c:	4602      	mov	r2, r0
 800921e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009222:	f7ff bb3b 	b.w	800889c <_dtoa_r+0x34>
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	3202      	adds	r2, #2
 800922a:	0092      	lsls	r2, r2, #2
 800922c:	f107 010c 	add.w	r1, r7, #12
 8009230:	300c      	adds	r0, #12
 8009232:	f000 fd8d 	bl	8009d50 <memcpy>
 8009236:	2201      	movs	r2, #1
 8009238:	4629      	mov	r1, r5
 800923a:	4620      	mov	r0, r4
 800923c:	f000 fff2 	bl	800a224 <__lshift>
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	f103 0901 	add.w	r9, r3, #1
 8009246:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800924a:	4413      	add	r3, r2
 800924c:	9305      	str	r3, [sp, #20]
 800924e:	f00a 0301 	and.w	r3, sl, #1
 8009252:	46b8      	mov	r8, r7
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	4607      	mov	r7, r0
 8009258:	4631      	mov	r1, r6
 800925a:	ee18 0a10 	vmov	r0, s16
 800925e:	f7ff fa77 	bl	8008750 <quorem>
 8009262:	4641      	mov	r1, r8
 8009264:	9002      	str	r0, [sp, #8]
 8009266:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800926a:	ee18 0a10 	vmov	r0, s16
 800926e:	f001 f849 	bl	800a304 <__mcmp>
 8009272:	463a      	mov	r2, r7
 8009274:	9003      	str	r0, [sp, #12]
 8009276:	4631      	mov	r1, r6
 8009278:	4620      	mov	r0, r4
 800927a:	f001 f85f 	bl	800a33c <__mdiff>
 800927e:	68c2      	ldr	r2, [r0, #12]
 8009280:	f109 3bff 	add.w	fp, r9, #4294967295
 8009284:	4605      	mov	r5, r0
 8009286:	bb02      	cbnz	r2, 80092ca <_dtoa_r+0xa62>
 8009288:	4601      	mov	r1, r0
 800928a:	ee18 0a10 	vmov	r0, s16
 800928e:	f001 f839 	bl	800a304 <__mcmp>
 8009292:	4602      	mov	r2, r0
 8009294:	4629      	mov	r1, r5
 8009296:	4620      	mov	r0, r4
 8009298:	9207      	str	r2, [sp, #28]
 800929a:	f000 fda7 	bl	8009dec <_Bfree>
 800929e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80092a2:	ea43 0102 	orr.w	r1, r3, r2
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	430b      	orrs	r3, r1
 80092aa:	464d      	mov	r5, r9
 80092ac:	d10f      	bne.n	80092ce <_dtoa_r+0xa66>
 80092ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092b2:	d02a      	beq.n	800930a <_dtoa_r+0xaa2>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dd02      	ble.n	80092c0 <_dtoa_r+0xa58>
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80092c0:	f88b a000 	strb.w	sl, [fp]
 80092c4:	e775      	b.n	80091b2 <_dtoa_r+0x94a>
 80092c6:	4638      	mov	r0, r7
 80092c8:	e7ba      	b.n	8009240 <_dtoa_r+0x9d8>
 80092ca:	2201      	movs	r2, #1
 80092cc:	e7e2      	b.n	8009294 <_dtoa_r+0xa2c>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	db04      	blt.n	80092de <_dtoa_r+0xa76>
 80092d4:	9906      	ldr	r1, [sp, #24]
 80092d6:	430b      	orrs	r3, r1
 80092d8:	9904      	ldr	r1, [sp, #16]
 80092da:	430b      	orrs	r3, r1
 80092dc:	d122      	bne.n	8009324 <_dtoa_r+0xabc>
 80092de:	2a00      	cmp	r2, #0
 80092e0:	ddee      	ble.n	80092c0 <_dtoa_r+0xa58>
 80092e2:	ee18 1a10 	vmov	r1, s16
 80092e6:	2201      	movs	r2, #1
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 ff9b 	bl	800a224 <__lshift>
 80092ee:	4631      	mov	r1, r6
 80092f0:	ee08 0a10 	vmov	s16, r0
 80092f4:	f001 f806 	bl	800a304 <__mcmp>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	dc03      	bgt.n	8009304 <_dtoa_r+0xa9c>
 80092fc:	d1e0      	bne.n	80092c0 <_dtoa_r+0xa58>
 80092fe:	f01a 0f01 	tst.w	sl, #1
 8009302:	d0dd      	beq.n	80092c0 <_dtoa_r+0xa58>
 8009304:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009308:	d1d7      	bne.n	80092ba <_dtoa_r+0xa52>
 800930a:	2339      	movs	r3, #57	; 0x39
 800930c:	f88b 3000 	strb.w	r3, [fp]
 8009310:	462b      	mov	r3, r5
 8009312:	461d      	mov	r5, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800931a:	2a39      	cmp	r2, #57	; 0x39
 800931c:	d071      	beq.n	8009402 <_dtoa_r+0xb9a>
 800931e:	3201      	adds	r2, #1
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e746      	b.n	80091b2 <_dtoa_r+0x94a>
 8009324:	2a00      	cmp	r2, #0
 8009326:	dd07      	ble.n	8009338 <_dtoa_r+0xad0>
 8009328:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800932c:	d0ed      	beq.n	800930a <_dtoa_r+0xaa2>
 800932e:	f10a 0301 	add.w	r3, sl, #1
 8009332:	f88b 3000 	strb.w	r3, [fp]
 8009336:	e73c      	b.n	80091b2 <_dtoa_r+0x94a>
 8009338:	9b05      	ldr	r3, [sp, #20]
 800933a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800933e:	4599      	cmp	r9, r3
 8009340:	d047      	beq.n	80093d2 <_dtoa_r+0xb6a>
 8009342:	ee18 1a10 	vmov	r1, s16
 8009346:	2300      	movs	r3, #0
 8009348:	220a      	movs	r2, #10
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fd70 	bl	8009e30 <__multadd>
 8009350:	45b8      	cmp	r8, r7
 8009352:	ee08 0a10 	vmov	s16, r0
 8009356:	f04f 0300 	mov.w	r3, #0
 800935a:	f04f 020a 	mov.w	r2, #10
 800935e:	4641      	mov	r1, r8
 8009360:	4620      	mov	r0, r4
 8009362:	d106      	bne.n	8009372 <_dtoa_r+0xb0a>
 8009364:	f000 fd64 	bl	8009e30 <__multadd>
 8009368:	4680      	mov	r8, r0
 800936a:	4607      	mov	r7, r0
 800936c:	f109 0901 	add.w	r9, r9, #1
 8009370:	e772      	b.n	8009258 <_dtoa_r+0x9f0>
 8009372:	f000 fd5d 	bl	8009e30 <__multadd>
 8009376:	4639      	mov	r1, r7
 8009378:	4680      	mov	r8, r0
 800937a:	2300      	movs	r3, #0
 800937c:	220a      	movs	r2, #10
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fd56 	bl	8009e30 <__multadd>
 8009384:	4607      	mov	r7, r0
 8009386:	e7f1      	b.n	800936c <_dtoa_r+0xb04>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	9302      	str	r3, [sp, #8]
 800938c:	9d01      	ldr	r5, [sp, #4]
 800938e:	ee18 0a10 	vmov	r0, s16
 8009392:	4631      	mov	r1, r6
 8009394:	f7ff f9dc 	bl	8008750 <quorem>
 8009398:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	f805 ab01 	strb.w	sl, [r5], #1
 80093a2:	1aea      	subs	r2, r5, r3
 80093a4:	9b02      	ldr	r3, [sp, #8]
 80093a6:	4293      	cmp	r3, r2
 80093a8:	dd09      	ble.n	80093be <_dtoa_r+0xb56>
 80093aa:	ee18 1a10 	vmov	r1, s16
 80093ae:	2300      	movs	r3, #0
 80093b0:	220a      	movs	r2, #10
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 fd3c 	bl	8009e30 <__multadd>
 80093b8:	ee08 0a10 	vmov	s16, r0
 80093bc:	e7e7      	b.n	800938e <_dtoa_r+0xb26>
 80093be:	9b02      	ldr	r3, [sp, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bfc8      	it	gt
 80093c4:	461d      	movgt	r5, r3
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	bfd8      	it	le
 80093ca:	2501      	movle	r5, #1
 80093cc:	441d      	add	r5, r3
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	ee18 1a10 	vmov	r1, s16
 80093d6:	2201      	movs	r2, #1
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 ff23 	bl	800a224 <__lshift>
 80093de:	4631      	mov	r1, r6
 80093e0:	ee08 0a10 	vmov	s16, r0
 80093e4:	f000 ff8e 	bl	800a304 <__mcmp>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	dc91      	bgt.n	8009310 <_dtoa_r+0xaa8>
 80093ec:	d102      	bne.n	80093f4 <_dtoa_r+0xb8c>
 80093ee:	f01a 0f01 	tst.w	sl, #1
 80093f2:	d18d      	bne.n	8009310 <_dtoa_r+0xaa8>
 80093f4:	462b      	mov	r3, r5
 80093f6:	461d      	mov	r5, r3
 80093f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093fc:	2a30      	cmp	r2, #48	; 0x30
 80093fe:	d0fa      	beq.n	80093f6 <_dtoa_r+0xb8e>
 8009400:	e6d7      	b.n	80091b2 <_dtoa_r+0x94a>
 8009402:	9a01      	ldr	r2, [sp, #4]
 8009404:	429a      	cmp	r2, r3
 8009406:	d184      	bne.n	8009312 <_dtoa_r+0xaaa>
 8009408:	9b00      	ldr	r3, [sp, #0]
 800940a:	3301      	adds	r3, #1
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	2331      	movs	r3, #49	; 0x31
 8009410:	7013      	strb	r3, [r2, #0]
 8009412:	e6ce      	b.n	80091b2 <_dtoa_r+0x94a>
 8009414:	4b09      	ldr	r3, [pc, #36]	; (800943c <_dtoa_r+0xbd4>)
 8009416:	f7ff ba95 	b.w	8008944 <_dtoa_r+0xdc>
 800941a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800941c:	2b00      	cmp	r3, #0
 800941e:	f47f aa6e 	bne.w	80088fe <_dtoa_r+0x96>
 8009422:	4b07      	ldr	r3, [pc, #28]	; (8009440 <_dtoa_r+0xbd8>)
 8009424:	f7ff ba8e 	b.w	8008944 <_dtoa_r+0xdc>
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	dcae      	bgt.n	800938c <_dtoa_r+0xb24>
 800942e:	9b06      	ldr	r3, [sp, #24]
 8009430:	2b02      	cmp	r3, #2
 8009432:	f73f aea8 	bgt.w	8009186 <_dtoa_r+0x91e>
 8009436:	e7a9      	b.n	800938c <_dtoa_r+0xb24>
 8009438:	0800b830 	.word	0x0800b830
 800943c:	0800b634 	.word	0x0800b634
 8009440:	0800b7b1 	.word	0x0800b7b1

08009444 <std>:
 8009444:	2300      	movs	r3, #0
 8009446:	b510      	push	{r4, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	e9c0 3300 	strd	r3, r3, [r0]
 800944e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009452:	6083      	str	r3, [r0, #8]
 8009454:	8181      	strh	r1, [r0, #12]
 8009456:	6643      	str	r3, [r0, #100]	; 0x64
 8009458:	81c2      	strh	r2, [r0, #14]
 800945a:	6183      	str	r3, [r0, #24]
 800945c:	4619      	mov	r1, r3
 800945e:	2208      	movs	r2, #8
 8009460:	305c      	adds	r0, #92	; 0x5c
 8009462:	f7fd fc07 	bl	8006c74 <memset>
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <std+0x38>)
 8009468:	6263      	str	r3, [r4, #36]	; 0x24
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <std+0x3c>)
 800946c:	62a3      	str	r3, [r4, #40]	; 0x28
 800946e:	4b05      	ldr	r3, [pc, #20]	; (8009484 <std+0x40>)
 8009470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <std+0x44>)
 8009474:	6224      	str	r4, [r4, #32]
 8009476:	6323      	str	r3, [r4, #48]	; 0x30
 8009478:	bd10      	pop	{r4, pc}
 800947a:	bf00      	nop
 800947c:	0800ae79 	.word	0x0800ae79
 8009480:	0800ae9b 	.word	0x0800ae9b
 8009484:	0800aed3 	.word	0x0800aed3
 8009488:	0800aef7 	.word	0x0800aef7

0800948c <_cleanup_r>:
 800948c:	4901      	ldr	r1, [pc, #4]	; (8009494 <_cleanup_r+0x8>)
 800948e:	f000 b8af 	b.w	80095f0 <_fwalk_reent>
 8009492:	bf00      	nop
 8009494:	0800b251 	.word	0x0800b251

08009498 <__sfmoreglue>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	2268      	movs	r2, #104	; 0x68
 800949c:	1e4d      	subs	r5, r1, #1
 800949e:	4355      	muls	r5, r2
 80094a0:	460e      	mov	r6, r1
 80094a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094a6:	f001 f9a5 	bl	800a7f4 <_malloc_r>
 80094aa:	4604      	mov	r4, r0
 80094ac:	b140      	cbz	r0, 80094c0 <__sfmoreglue+0x28>
 80094ae:	2100      	movs	r1, #0
 80094b0:	e9c0 1600 	strd	r1, r6, [r0]
 80094b4:	300c      	adds	r0, #12
 80094b6:	60a0      	str	r0, [r4, #8]
 80094b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094bc:	f7fd fbda 	bl	8006c74 <memset>
 80094c0:	4620      	mov	r0, r4
 80094c2:	bd70      	pop	{r4, r5, r6, pc}

080094c4 <__sfp_lock_acquire>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__sfp_lock_acquire+0x8>)
 80094c6:	f000 bc26 	b.w	8009d16 <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	20000401 	.word	0x20000401

080094d0 <__sfp_lock_release>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__sfp_lock_release+0x8>)
 80094d2:	f000 bc21 	b.w	8009d18 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	20000401 	.word	0x20000401

080094dc <__sinit_lock_acquire>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__sinit_lock_acquire+0x8>)
 80094de:	f000 bc1a 	b.w	8009d16 <__retarget_lock_acquire_recursive>
 80094e2:	bf00      	nop
 80094e4:	20000402 	.word	0x20000402

080094e8 <__sinit_lock_release>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sinit_lock_release+0x8>)
 80094ea:	f000 bc15 	b.w	8009d18 <__retarget_lock_release_recursive>
 80094ee:	bf00      	nop
 80094f0:	20000402 	.word	0x20000402

080094f4 <__sinit>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4604      	mov	r4, r0
 80094f8:	f7ff fff0 	bl	80094dc <__sinit_lock_acquire>
 80094fc:	69a3      	ldr	r3, [r4, #24]
 80094fe:	b11b      	cbz	r3, 8009508 <__sinit+0x14>
 8009500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009504:	f7ff bff0 	b.w	80094e8 <__sinit_lock_release>
 8009508:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800950c:	6523      	str	r3, [r4, #80]	; 0x50
 800950e:	4b13      	ldr	r3, [pc, #76]	; (800955c <__sinit+0x68>)
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <__sinit+0x6c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	62a2      	str	r2, [r4, #40]	; 0x28
 8009516:	42a3      	cmp	r3, r4
 8009518:	bf04      	itt	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	61a3      	streq	r3, [r4, #24]
 800951e:	4620      	mov	r0, r4
 8009520:	f000 f820 	bl	8009564 <__sfp>
 8009524:	6060      	str	r0, [r4, #4]
 8009526:	4620      	mov	r0, r4
 8009528:	f000 f81c 	bl	8009564 <__sfp>
 800952c:	60a0      	str	r0, [r4, #8]
 800952e:	4620      	mov	r0, r4
 8009530:	f000 f818 	bl	8009564 <__sfp>
 8009534:	2200      	movs	r2, #0
 8009536:	60e0      	str	r0, [r4, #12]
 8009538:	2104      	movs	r1, #4
 800953a:	6860      	ldr	r0, [r4, #4]
 800953c:	f7ff ff82 	bl	8009444 <std>
 8009540:	68a0      	ldr	r0, [r4, #8]
 8009542:	2201      	movs	r2, #1
 8009544:	2109      	movs	r1, #9
 8009546:	f7ff ff7d 	bl	8009444 <std>
 800954a:	68e0      	ldr	r0, [r4, #12]
 800954c:	2202      	movs	r2, #2
 800954e:	2112      	movs	r1, #18
 8009550:	f7ff ff78 	bl	8009444 <std>
 8009554:	2301      	movs	r3, #1
 8009556:	61a3      	str	r3, [r4, #24]
 8009558:	e7d2      	b.n	8009500 <__sinit+0xc>
 800955a:	bf00      	nop
 800955c:	0800b620 	.word	0x0800b620
 8009560:	0800948d 	.word	0x0800948d

08009564 <__sfp>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	4607      	mov	r7, r0
 8009568:	f7ff ffac 	bl	80094c4 <__sfp_lock_acquire>
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <__sfp+0x84>)
 800956e:	681e      	ldr	r6, [r3, #0]
 8009570:	69b3      	ldr	r3, [r6, #24]
 8009572:	b913      	cbnz	r3, 800957a <__sfp+0x16>
 8009574:	4630      	mov	r0, r6
 8009576:	f7ff ffbd 	bl	80094f4 <__sinit>
 800957a:	3648      	adds	r6, #72	; 0x48
 800957c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009580:	3b01      	subs	r3, #1
 8009582:	d503      	bpl.n	800958c <__sfp+0x28>
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	b30b      	cbz	r3, 80095cc <__sfp+0x68>
 8009588:	6836      	ldr	r6, [r6, #0]
 800958a:	e7f7      	b.n	800957c <__sfp+0x18>
 800958c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009590:	b9d5      	cbnz	r5, 80095c8 <__sfp+0x64>
 8009592:	4b16      	ldr	r3, [pc, #88]	; (80095ec <__sfp+0x88>)
 8009594:	60e3      	str	r3, [r4, #12]
 8009596:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800959a:	6665      	str	r5, [r4, #100]	; 0x64
 800959c:	f000 fbba 	bl	8009d14 <__retarget_lock_init_recursive>
 80095a0:	f7ff ff96 	bl	80094d0 <__sfp_lock_release>
 80095a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095ac:	6025      	str	r5, [r4, #0]
 80095ae:	61a5      	str	r5, [r4, #24]
 80095b0:	2208      	movs	r2, #8
 80095b2:	4629      	mov	r1, r5
 80095b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095b8:	f7fd fb5c 	bl	8006c74 <memset>
 80095bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095c4:	4620      	mov	r0, r4
 80095c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c8:	3468      	adds	r4, #104	; 0x68
 80095ca:	e7d9      	b.n	8009580 <__sfp+0x1c>
 80095cc:	2104      	movs	r1, #4
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff ff62 	bl	8009498 <__sfmoreglue>
 80095d4:	4604      	mov	r4, r0
 80095d6:	6030      	str	r0, [r6, #0]
 80095d8:	2800      	cmp	r0, #0
 80095da:	d1d5      	bne.n	8009588 <__sfp+0x24>
 80095dc:	f7ff ff78 	bl	80094d0 <__sfp_lock_release>
 80095e0:	230c      	movs	r3, #12
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	e7ee      	b.n	80095c4 <__sfp+0x60>
 80095e6:	bf00      	nop
 80095e8:	0800b620 	.word	0x0800b620
 80095ec:	ffff0001 	.word	0xffff0001

080095f0 <_fwalk_reent>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4606      	mov	r6, r0
 80095f6:	4688      	mov	r8, r1
 80095f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095fc:	2700      	movs	r7, #0
 80095fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009602:	f1b9 0901 	subs.w	r9, r9, #1
 8009606:	d505      	bpl.n	8009614 <_fwalk_reent+0x24>
 8009608:	6824      	ldr	r4, [r4, #0]
 800960a:	2c00      	cmp	r4, #0
 800960c:	d1f7      	bne.n	80095fe <_fwalk_reent+0xe>
 800960e:	4638      	mov	r0, r7
 8009610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009614:	89ab      	ldrh	r3, [r5, #12]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d907      	bls.n	800962a <_fwalk_reent+0x3a>
 800961a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800961e:	3301      	adds	r3, #1
 8009620:	d003      	beq.n	800962a <_fwalk_reent+0x3a>
 8009622:	4629      	mov	r1, r5
 8009624:	4630      	mov	r0, r6
 8009626:	47c0      	blx	r8
 8009628:	4307      	orrs	r7, r0
 800962a:	3568      	adds	r5, #104	; 0x68
 800962c:	e7e9      	b.n	8009602 <_fwalk_reent+0x12>

0800962e <rshift>:
 800962e:	6903      	ldr	r3, [r0, #16]
 8009630:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009638:	ea4f 1261 	mov.w	r2, r1, asr #5
 800963c:	f100 0414 	add.w	r4, r0, #20
 8009640:	dd45      	ble.n	80096ce <rshift+0xa0>
 8009642:	f011 011f 	ands.w	r1, r1, #31
 8009646:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800964a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800964e:	d10c      	bne.n	800966a <rshift+0x3c>
 8009650:	f100 0710 	add.w	r7, r0, #16
 8009654:	4629      	mov	r1, r5
 8009656:	42b1      	cmp	r1, r6
 8009658:	d334      	bcc.n	80096c4 <rshift+0x96>
 800965a:	1a9b      	subs	r3, r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	1eea      	subs	r2, r5, #3
 8009660:	4296      	cmp	r6, r2
 8009662:	bf38      	it	cc
 8009664:	2300      	movcc	r3, #0
 8009666:	4423      	add	r3, r4
 8009668:	e015      	b.n	8009696 <rshift+0x68>
 800966a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800966e:	f1c1 0820 	rsb	r8, r1, #32
 8009672:	40cf      	lsrs	r7, r1
 8009674:	f105 0e04 	add.w	lr, r5, #4
 8009678:	46a1      	mov	r9, r4
 800967a:	4576      	cmp	r6, lr
 800967c:	46f4      	mov	ip, lr
 800967e:	d815      	bhi.n	80096ac <rshift+0x7e>
 8009680:	1a9a      	subs	r2, r3, r2
 8009682:	0092      	lsls	r2, r2, #2
 8009684:	3a04      	subs	r2, #4
 8009686:	3501      	adds	r5, #1
 8009688:	42ae      	cmp	r6, r5
 800968a:	bf38      	it	cc
 800968c:	2200      	movcc	r2, #0
 800968e:	18a3      	adds	r3, r4, r2
 8009690:	50a7      	str	r7, [r4, r2]
 8009692:	b107      	cbz	r7, 8009696 <rshift+0x68>
 8009694:	3304      	adds	r3, #4
 8009696:	1b1a      	subs	r2, r3, r4
 8009698:	42a3      	cmp	r3, r4
 800969a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800969e:	bf08      	it	eq
 80096a0:	2300      	moveq	r3, #0
 80096a2:	6102      	str	r2, [r0, #16]
 80096a4:	bf08      	it	eq
 80096a6:	6143      	streq	r3, [r0, #20]
 80096a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ac:	f8dc c000 	ldr.w	ip, [ip]
 80096b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80096b4:	ea4c 0707 	orr.w	r7, ip, r7
 80096b8:	f849 7b04 	str.w	r7, [r9], #4
 80096bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096c0:	40cf      	lsrs	r7, r1
 80096c2:	e7da      	b.n	800967a <rshift+0x4c>
 80096c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80096c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80096cc:	e7c3      	b.n	8009656 <rshift+0x28>
 80096ce:	4623      	mov	r3, r4
 80096d0:	e7e1      	b.n	8009696 <rshift+0x68>

080096d2 <__hexdig_fun>:
 80096d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096d6:	2b09      	cmp	r3, #9
 80096d8:	d802      	bhi.n	80096e0 <__hexdig_fun+0xe>
 80096da:	3820      	subs	r0, #32
 80096dc:	b2c0      	uxtb	r0, r0
 80096de:	4770      	bx	lr
 80096e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80096e4:	2b05      	cmp	r3, #5
 80096e6:	d801      	bhi.n	80096ec <__hexdig_fun+0x1a>
 80096e8:	3847      	subs	r0, #71	; 0x47
 80096ea:	e7f7      	b.n	80096dc <__hexdig_fun+0xa>
 80096ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096f0:	2b05      	cmp	r3, #5
 80096f2:	d801      	bhi.n	80096f8 <__hexdig_fun+0x26>
 80096f4:	3827      	subs	r0, #39	; 0x27
 80096f6:	e7f1      	b.n	80096dc <__hexdig_fun+0xa>
 80096f8:	2000      	movs	r0, #0
 80096fa:	4770      	bx	lr

080096fc <__gethex>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	ed2d 8b02 	vpush	{d8}
 8009704:	b089      	sub	sp, #36	; 0x24
 8009706:	ee08 0a10 	vmov	s16, r0
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	4bb4      	ldr	r3, [pc, #720]	; (80099e0 <__gethex+0x2e4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	4618      	mov	r0, r3
 8009714:	468b      	mov	fp, r1
 8009716:	4690      	mov	r8, r2
 8009718:	f7f6 fd5a 	bl	80001d0 <strlen>
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	f8db 2000 	ldr.w	r2, [fp]
 8009722:	4403      	add	r3, r0
 8009724:	4682      	mov	sl, r0
 8009726:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800972a:	9305      	str	r3, [sp, #20]
 800972c:	1c93      	adds	r3, r2, #2
 800972e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009732:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009736:	32fe      	adds	r2, #254	; 0xfe
 8009738:	18d1      	adds	r1, r2, r3
 800973a:	461f      	mov	r7, r3
 800973c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009740:	9100      	str	r1, [sp, #0]
 8009742:	2830      	cmp	r0, #48	; 0x30
 8009744:	d0f8      	beq.n	8009738 <__gethex+0x3c>
 8009746:	f7ff ffc4 	bl	80096d2 <__hexdig_fun>
 800974a:	4604      	mov	r4, r0
 800974c:	2800      	cmp	r0, #0
 800974e:	d13a      	bne.n	80097c6 <__gethex+0xca>
 8009750:	9901      	ldr	r1, [sp, #4]
 8009752:	4652      	mov	r2, sl
 8009754:	4638      	mov	r0, r7
 8009756:	f001 fbd2 	bl	800aefe <strncmp>
 800975a:	4605      	mov	r5, r0
 800975c:	2800      	cmp	r0, #0
 800975e:	d168      	bne.n	8009832 <__gethex+0x136>
 8009760:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009764:	eb07 060a 	add.w	r6, r7, sl
 8009768:	f7ff ffb3 	bl	80096d2 <__hexdig_fun>
 800976c:	2800      	cmp	r0, #0
 800976e:	d062      	beq.n	8009836 <__gethex+0x13a>
 8009770:	4633      	mov	r3, r6
 8009772:	7818      	ldrb	r0, [r3, #0]
 8009774:	2830      	cmp	r0, #48	; 0x30
 8009776:	461f      	mov	r7, r3
 8009778:	f103 0301 	add.w	r3, r3, #1
 800977c:	d0f9      	beq.n	8009772 <__gethex+0x76>
 800977e:	f7ff ffa8 	bl	80096d2 <__hexdig_fun>
 8009782:	2301      	movs	r3, #1
 8009784:	fab0 f480 	clz	r4, r0
 8009788:	0964      	lsrs	r4, r4, #5
 800978a:	4635      	mov	r5, r6
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	463a      	mov	r2, r7
 8009790:	4616      	mov	r6, r2
 8009792:	3201      	adds	r2, #1
 8009794:	7830      	ldrb	r0, [r6, #0]
 8009796:	f7ff ff9c 	bl	80096d2 <__hexdig_fun>
 800979a:	2800      	cmp	r0, #0
 800979c:	d1f8      	bne.n	8009790 <__gethex+0x94>
 800979e:	9901      	ldr	r1, [sp, #4]
 80097a0:	4652      	mov	r2, sl
 80097a2:	4630      	mov	r0, r6
 80097a4:	f001 fbab 	bl	800aefe <strncmp>
 80097a8:	b980      	cbnz	r0, 80097cc <__gethex+0xd0>
 80097aa:	b94d      	cbnz	r5, 80097c0 <__gethex+0xc4>
 80097ac:	eb06 050a 	add.w	r5, r6, sl
 80097b0:	462a      	mov	r2, r5
 80097b2:	4616      	mov	r6, r2
 80097b4:	3201      	adds	r2, #1
 80097b6:	7830      	ldrb	r0, [r6, #0]
 80097b8:	f7ff ff8b 	bl	80096d2 <__hexdig_fun>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1f8      	bne.n	80097b2 <__gethex+0xb6>
 80097c0:	1bad      	subs	r5, r5, r6
 80097c2:	00ad      	lsls	r5, r5, #2
 80097c4:	e004      	b.n	80097d0 <__gethex+0xd4>
 80097c6:	2400      	movs	r4, #0
 80097c8:	4625      	mov	r5, r4
 80097ca:	e7e0      	b.n	800978e <__gethex+0x92>
 80097cc:	2d00      	cmp	r5, #0
 80097ce:	d1f7      	bne.n	80097c0 <__gethex+0xc4>
 80097d0:	7833      	ldrb	r3, [r6, #0]
 80097d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097d6:	2b50      	cmp	r3, #80	; 0x50
 80097d8:	d13b      	bne.n	8009852 <__gethex+0x156>
 80097da:	7873      	ldrb	r3, [r6, #1]
 80097dc:	2b2b      	cmp	r3, #43	; 0x2b
 80097de:	d02c      	beq.n	800983a <__gethex+0x13e>
 80097e0:	2b2d      	cmp	r3, #45	; 0x2d
 80097e2:	d02e      	beq.n	8009842 <__gethex+0x146>
 80097e4:	1c71      	adds	r1, r6, #1
 80097e6:	f04f 0900 	mov.w	r9, #0
 80097ea:	7808      	ldrb	r0, [r1, #0]
 80097ec:	f7ff ff71 	bl	80096d2 <__hexdig_fun>
 80097f0:	1e43      	subs	r3, r0, #1
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b18      	cmp	r3, #24
 80097f6:	d82c      	bhi.n	8009852 <__gethex+0x156>
 80097f8:	f1a0 0210 	sub.w	r2, r0, #16
 80097fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009800:	f7ff ff67 	bl	80096d2 <__hexdig_fun>
 8009804:	1e43      	subs	r3, r0, #1
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b18      	cmp	r3, #24
 800980a:	d91d      	bls.n	8009848 <__gethex+0x14c>
 800980c:	f1b9 0f00 	cmp.w	r9, #0
 8009810:	d000      	beq.n	8009814 <__gethex+0x118>
 8009812:	4252      	negs	r2, r2
 8009814:	4415      	add	r5, r2
 8009816:	f8cb 1000 	str.w	r1, [fp]
 800981a:	b1e4      	cbz	r4, 8009856 <__gethex+0x15a>
 800981c:	9b00      	ldr	r3, [sp, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bf14      	ite	ne
 8009822:	2700      	movne	r7, #0
 8009824:	2706      	moveq	r7, #6
 8009826:	4638      	mov	r0, r7
 8009828:	b009      	add	sp, #36	; 0x24
 800982a:	ecbd 8b02 	vpop	{d8}
 800982e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009832:	463e      	mov	r6, r7
 8009834:	4625      	mov	r5, r4
 8009836:	2401      	movs	r4, #1
 8009838:	e7ca      	b.n	80097d0 <__gethex+0xd4>
 800983a:	f04f 0900 	mov.w	r9, #0
 800983e:	1cb1      	adds	r1, r6, #2
 8009840:	e7d3      	b.n	80097ea <__gethex+0xee>
 8009842:	f04f 0901 	mov.w	r9, #1
 8009846:	e7fa      	b.n	800983e <__gethex+0x142>
 8009848:	230a      	movs	r3, #10
 800984a:	fb03 0202 	mla	r2, r3, r2, r0
 800984e:	3a10      	subs	r2, #16
 8009850:	e7d4      	b.n	80097fc <__gethex+0x100>
 8009852:	4631      	mov	r1, r6
 8009854:	e7df      	b.n	8009816 <__gethex+0x11a>
 8009856:	1bf3      	subs	r3, r6, r7
 8009858:	3b01      	subs	r3, #1
 800985a:	4621      	mov	r1, r4
 800985c:	2b07      	cmp	r3, #7
 800985e:	dc0b      	bgt.n	8009878 <__gethex+0x17c>
 8009860:	ee18 0a10 	vmov	r0, s16
 8009864:	f000 fa82 	bl	8009d6c <_Balloc>
 8009868:	4604      	mov	r4, r0
 800986a:	b940      	cbnz	r0, 800987e <__gethex+0x182>
 800986c:	4b5d      	ldr	r3, [pc, #372]	; (80099e4 <__gethex+0x2e8>)
 800986e:	4602      	mov	r2, r0
 8009870:	21de      	movs	r1, #222	; 0xde
 8009872:	485d      	ldr	r0, [pc, #372]	; (80099e8 <__gethex+0x2ec>)
 8009874:	f001 fc38 	bl	800b0e8 <__assert_func>
 8009878:	3101      	adds	r1, #1
 800987a:	105b      	asrs	r3, r3, #1
 800987c:	e7ee      	b.n	800985c <__gethex+0x160>
 800987e:	f100 0914 	add.w	r9, r0, #20
 8009882:	f04f 0b00 	mov.w	fp, #0
 8009886:	f1ca 0301 	rsb	r3, sl, #1
 800988a:	f8cd 9008 	str.w	r9, [sp, #8]
 800988e:	f8cd b000 	str.w	fp, [sp]
 8009892:	9306      	str	r3, [sp, #24]
 8009894:	42b7      	cmp	r7, r6
 8009896:	d340      	bcc.n	800991a <__gethex+0x21e>
 8009898:	9802      	ldr	r0, [sp, #8]
 800989a:	9b00      	ldr	r3, [sp, #0]
 800989c:	f840 3b04 	str.w	r3, [r0], #4
 80098a0:	eba0 0009 	sub.w	r0, r0, r9
 80098a4:	1080      	asrs	r0, r0, #2
 80098a6:	0146      	lsls	r6, r0, #5
 80098a8:	6120      	str	r0, [r4, #16]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fb50 	bl	8009f50 <__hi0bits>
 80098b0:	1a30      	subs	r0, r6, r0
 80098b2:	f8d8 6000 	ldr.w	r6, [r8]
 80098b6:	42b0      	cmp	r0, r6
 80098b8:	dd63      	ble.n	8009982 <__gethex+0x286>
 80098ba:	1b87      	subs	r7, r0, r6
 80098bc:	4639      	mov	r1, r7
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 fef4 	bl	800a6ac <__any_on>
 80098c4:	4682      	mov	sl, r0
 80098c6:	b1a8      	cbz	r0, 80098f4 <__gethex+0x1f8>
 80098c8:	1e7b      	subs	r3, r7, #1
 80098ca:	1159      	asrs	r1, r3, #5
 80098cc:	f003 021f 	and.w	r2, r3, #31
 80098d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80098d4:	f04f 0a01 	mov.w	sl, #1
 80098d8:	fa0a f202 	lsl.w	r2, sl, r2
 80098dc:	420a      	tst	r2, r1
 80098de:	d009      	beq.n	80098f4 <__gethex+0x1f8>
 80098e0:	4553      	cmp	r3, sl
 80098e2:	dd05      	ble.n	80098f0 <__gethex+0x1f4>
 80098e4:	1eb9      	subs	r1, r7, #2
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 fee0 	bl	800a6ac <__any_on>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d145      	bne.n	800997c <__gethex+0x280>
 80098f0:	f04f 0a02 	mov.w	sl, #2
 80098f4:	4639      	mov	r1, r7
 80098f6:	4620      	mov	r0, r4
 80098f8:	f7ff fe99 	bl	800962e <rshift>
 80098fc:	443d      	add	r5, r7
 80098fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009902:	42ab      	cmp	r3, r5
 8009904:	da4c      	bge.n	80099a0 <__gethex+0x2a4>
 8009906:	ee18 0a10 	vmov	r0, s16
 800990a:	4621      	mov	r1, r4
 800990c:	f000 fa6e 	bl	8009dec <_Bfree>
 8009910:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009912:	2300      	movs	r3, #0
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	27a3      	movs	r7, #163	; 0xa3
 8009918:	e785      	b.n	8009826 <__gethex+0x12a>
 800991a:	1e73      	subs	r3, r6, #1
 800991c:	9a05      	ldr	r2, [sp, #20]
 800991e:	9303      	str	r3, [sp, #12]
 8009920:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009924:	4293      	cmp	r3, r2
 8009926:	d019      	beq.n	800995c <__gethex+0x260>
 8009928:	f1bb 0f20 	cmp.w	fp, #32
 800992c:	d107      	bne.n	800993e <__gethex+0x242>
 800992e:	9b02      	ldr	r3, [sp, #8]
 8009930:	9a00      	ldr	r2, [sp, #0]
 8009932:	f843 2b04 	str.w	r2, [r3], #4
 8009936:	9302      	str	r3, [sp, #8]
 8009938:	2300      	movs	r3, #0
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	469b      	mov	fp, r3
 800993e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009942:	f7ff fec6 	bl	80096d2 <__hexdig_fun>
 8009946:	9b00      	ldr	r3, [sp, #0]
 8009948:	f000 000f 	and.w	r0, r0, #15
 800994c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009950:	4303      	orrs	r3, r0
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	f10b 0b04 	add.w	fp, fp, #4
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	e00d      	b.n	8009978 <__gethex+0x27c>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	9a06      	ldr	r2, [sp, #24]
 8009960:	4413      	add	r3, r2
 8009962:	42bb      	cmp	r3, r7
 8009964:	d3e0      	bcc.n	8009928 <__gethex+0x22c>
 8009966:	4618      	mov	r0, r3
 8009968:	9901      	ldr	r1, [sp, #4]
 800996a:	9307      	str	r3, [sp, #28]
 800996c:	4652      	mov	r2, sl
 800996e:	f001 fac6 	bl	800aefe <strncmp>
 8009972:	9b07      	ldr	r3, [sp, #28]
 8009974:	2800      	cmp	r0, #0
 8009976:	d1d7      	bne.n	8009928 <__gethex+0x22c>
 8009978:	461e      	mov	r6, r3
 800997a:	e78b      	b.n	8009894 <__gethex+0x198>
 800997c:	f04f 0a03 	mov.w	sl, #3
 8009980:	e7b8      	b.n	80098f4 <__gethex+0x1f8>
 8009982:	da0a      	bge.n	800999a <__gethex+0x29e>
 8009984:	1a37      	subs	r7, r6, r0
 8009986:	4621      	mov	r1, r4
 8009988:	ee18 0a10 	vmov	r0, s16
 800998c:	463a      	mov	r2, r7
 800998e:	f000 fc49 	bl	800a224 <__lshift>
 8009992:	1bed      	subs	r5, r5, r7
 8009994:	4604      	mov	r4, r0
 8009996:	f100 0914 	add.w	r9, r0, #20
 800999a:	f04f 0a00 	mov.w	sl, #0
 800999e:	e7ae      	b.n	80098fe <__gethex+0x202>
 80099a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80099a4:	42a8      	cmp	r0, r5
 80099a6:	dd72      	ble.n	8009a8e <__gethex+0x392>
 80099a8:	1b45      	subs	r5, r0, r5
 80099aa:	42ae      	cmp	r6, r5
 80099ac:	dc36      	bgt.n	8009a1c <__gethex+0x320>
 80099ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d02a      	beq.n	8009a0c <__gethex+0x310>
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d02c      	beq.n	8009a14 <__gethex+0x318>
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d11c      	bne.n	80099f8 <__gethex+0x2fc>
 80099be:	42ae      	cmp	r6, r5
 80099c0:	d11a      	bne.n	80099f8 <__gethex+0x2fc>
 80099c2:	2e01      	cmp	r6, #1
 80099c4:	d112      	bne.n	80099ec <__gethex+0x2f0>
 80099c6:	9a04      	ldr	r2, [sp, #16]
 80099c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	2301      	movs	r3, #1
 80099d0:	6123      	str	r3, [r4, #16]
 80099d2:	f8c9 3000 	str.w	r3, [r9]
 80099d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099d8:	2762      	movs	r7, #98	; 0x62
 80099da:	601c      	str	r4, [r3, #0]
 80099dc:	e723      	b.n	8009826 <__gethex+0x12a>
 80099de:	bf00      	nop
 80099e0:	0800b90c 	.word	0x0800b90c
 80099e4:	0800b830 	.word	0x0800b830
 80099e8:	0800b8a4 	.word	0x0800b8a4
 80099ec:	1e71      	subs	r1, r6, #1
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 fe5c 	bl	800a6ac <__any_on>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d1e6      	bne.n	80099c6 <__gethex+0x2ca>
 80099f8:	ee18 0a10 	vmov	r0, s16
 80099fc:	4621      	mov	r1, r4
 80099fe:	f000 f9f5 	bl	8009dec <_Bfree>
 8009a02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a04:	2300      	movs	r3, #0
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	2750      	movs	r7, #80	; 0x50
 8009a0a:	e70c      	b.n	8009826 <__gethex+0x12a>
 8009a0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1f2      	bne.n	80099f8 <__gethex+0x2fc>
 8009a12:	e7d8      	b.n	80099c6 <__gethex+0x2ca>
 8009a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1d5      	bne.n	80099c6 <__gethex+0x2ca>
 8009a1a:	e7ed      	b.n	80099f8 <__gethex+0x2fc>
 8009a1c:	1e6f      	subs	r7, r5, #1
 8009a1e:	f1ba 0f00 	cmp.w	sl, #0
 8009a22:	d131      	bne.n	8009a88 <__gethex+0x38c>
 8009a24:	b127      	cbz	r7, 8009a30 <__gethex+0x334>
 8009a26:	4639      	mov	r1, r7
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 fe3f 	bl	800a6ac <__any_on>
 8009a2e:	4682      	mov	sl, r0
 8009a30:	117b      	asrs	r3, r7, #5
 8009a32:	2101      	movs	r1, #1
 8009a34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009a38:	f007 071f 	and.w	r7, r7, #31
 8009a3c:	fa01 f707 	lsl.w	r7, r1, r7
 8009a40:	421f      	tst	r7, r3
 8009a42:	4629      	mov	r1, r5
 8009a44:	4620      	mov	r0, r4
 8009a46:	bf18      	it	ne
 8009a48:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a4c:	1b76      	subs	r6, r6, r5
 8009a4e:	f7ff fdee 	bl	800962e <rshift>
 8009a52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a56:	2702      	movs	r7, #2
 8009a58:	f1ba 0f00 	cmp.w	sl, #0
 8009a5c:	d048      	beq.n	8009af0 <__gethex+0x3f4>
 8009a5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d015      	beq.n	8009a92 <__gethex+0x396>
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d017      	beq.n	8009a9a <__gethex+0x39e>
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d109      	bne.n	8009a82 <__gethex+0x386>
 8009a6e:	f01a 0f02 	tst.w	sl, #2
 8009a72:	d006      	beq.n	8009a82 <__gethex+0x386>
 8009a74:	f8d9 0000 	ldr.w	r0, [r9]
 8009a78:	ea4a 0a00 	orr.w	sl, sl, r0
 8009a7c:	f01a 0f01 	tst.w	sl, #1
 8009a80:	d10e      	bne.n	8009aa0 <__gethex+0x3a4>
 8009a82:	f047 0710 	orr.w	r7, r7, #16
 8009a86:	e033      	b.n	8009af0 <__gethex+0x3f4>
 8009a88:	f04f 0a01 	mov.w	sl, #1
 8009a8c:	e7d0      	b.n	8009a30 <__gethex+0x334>
 8009a8e:	2701      	movs	r7, #1
 8009a90:	e7e2      	b.n	8009a58 <__gethex+0x35c>
 8009a92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a94:	f1c3 0301 	rsb	r3, r3, #1
 8009a98:	9315      	str	r3, [sp, #84]	; 0x54
 8009a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d0f0      	beq.n	8009a82 <__gethex+0x386>
 8009aa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009aa4:	f104 0314 	add.w	r3, r4, #20
 8009aa8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009aac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ab0:	f04f 0c00 	mov.w	ip, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009abe:	d01c      	beq.n	8009afa <__gethex+0x3fe>
 8009ac0:	3201      	adds	r2, #1
 8009ac2:	6002      	str	r2, [r0, #0]
 8009ac4:	2f02      	cmp	r7, #2
 8009ac6:	f104 0314 	add.w	r3, r4, #20
 8009aca:	d13f      	bne.n	8009b4c <__gethex+0x450>
 8009acc:	f8d8 2000 	ldr.w	r2, [r8]
 8009ad0:	3a01      	subs	r2, #1
 8009ad2:	42b2      	cmp	r2, r6
 8009ad4:	d10a      	bne.n	8009aec <__gethex+0x3f0>
 8009ad6:	1171      	asrs	r1, r6, #5
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ade:	f006 061f 	and.w	r6, r6, #31
 8009ae2:	fa02 f606 	lsl.w	r6, r2, r6
 8009ae6:	421e      	tst	r6, r3
 8009ae8:	bf18      	it	ne
 8009aea:	4617      	movne	r7, r2
 8009aec:	f047 0720 	orr.w	r7, r7, #32
 8009af0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009af2:	601c      	str	r4, [r3, #0]
 8009af4:	9b04      	ldr	r3, [sp, #16]
 8009af6:	601d      	str	r5, [r3, #0]
 8009af8:	e695      	b.n	8009826 <__gethex+0x12a>
 8009afa:	4299      	cmp	r1, r3
 8009afc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b00:	d8d8      	bhi.n	8009ab4 <__gethex+0x3b8>
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	459b      	cmp	fp, r3
 8009b06:	db19      	blt.n	8009b3c <__gethex+0x440>
 8009b08:	6861      	ldr	r1, [r4, #4]
 8009b0a:	ee18 0a10 	vmov	r0, s16
 8009b0e:	3101      	adds	r1, #1
 8009b10:	f000 f92c 	bl	8009d6c <_Balloc>
 8009b14:	4681      	mov	r9, r0
 8009b16:	b918      	cbnz	r0, 8009b20 <__gethex+0x424>
 8009b18:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <__gethex+0x488>)
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	2184      	movs	r1, #132	; 0x84
 8009b1e:	e6a8      	b.n	8009872 <__gethex+0x176>
 8009b20:	6922      	ldr	r2, [r4, #16]
 8009b22:	3202      	adds	r2, #2
 8009b24:	f104 010c 	add.w	r1, r4, #12
 8009b28:	0092      	lsls	r2, r2, #2
 8009b2a:	300c      	adds	r0, #12
 8009b2c:	f000 f910 	bl	8009d50 <memcpy>
 8009b30:	4621      	mov	r1, r4
 8009b32:	ee18 0a10 	vmov	r0, s16
 8009b36:	f000 f959 	bl	8009dec <_Bfree>
 8009b3a:	464c      	mov	r4, r9
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b44:	6122      	str	r2, [r4, #16]
 8009b46:	2201      	movs	r2, #1
 8009b48:	615a      	str	r2, [r3, #20]
 8009b4a:	e7bb      	b.n	8009ac4 <__gethex+0x3c8>
 8009b4c:	6922      	ldr	r2, [r4, #16]
 8009b4e:	455a      	cmp	r2, fp
 8009b50:	dd0b      	ble.n	8009b6a <__gethex+0x46e>
 8009b52:	2101      	movs	r1, #1
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7ff fd6a 	bl	800962e <rshift>
 8009b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b5e:	3501      	adds	r5, #1
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	f6ff aed0 	blt.w	8009906 <__gethex+0x20a>
 8009b66:	2701      	movs	r7, #1
 8009b68:	e7c0      	b.n	8009aec <__gethex+0x3f0>
 8009b6a:	f016 061f 	ands.w	r6, r6, #31
 8009b6e:	d0fa      	beq.n	8009b66 <__gethex+0x46a>
 8009b70:	4453      	add	r3, sl
 8009b72:	f1c6 0620 	rsb	r6, r6, #32
 8009b76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009b7a:	f000 f9e9 	bl	8009f50 <__hi0bits>
 8009b7e:	42b0      	cmp	r0, r6
 8009b80:	dbe7      	blt.n	8009b52 <__gethex+0x456>
 8009b82:	e7f0      	b.n	8009b66 <__gethex+0x46a>
 8009b84:	0800b830 	.word	0x0800b830

08009b88 <L_shift>:
 8009b88:	f1c2 0208 	rsb	r2, r2, #8
 8009b8c:	0092      	lsls	r2, r2, #2
 8009b8e:	b570      	push	{r4, r5, r6, lr}
 8009b90:	f1c2 0620 	rsb	r6, r2, #32
 8009b94:	6843      	ldr	r3, [r0, #4]
 8009b96:	6804      	ldr	r4, [r0, #0]
 8009b98:	fa03 f506 	lsl.w	r5, r3, r6
 8009b9c:	432c      	orrs	r4, r5
 8009b9e:	40d3      	lsrs	r3, r2
 8009ba0:	6004      	str	r4, [r0, #0]
 8009ba2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ba6:	4288      	cmp	r0, r1
 8009ba8:	d3f4      	bcc.n	8009b94 <L_shift+0xc>
 8009baa:	bd70      	pop	{r4, r5, r6, pc}

08009bac <__match>:
 8009bac:	b530      	push	{r4, r5, lr}
 8009bae:	6803      	ldr	r3, [r0, #0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bb6:	b914      	cbnz	r4, 8009bbe <__match+0x12>
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	2001      	movs	r0, #1
 8009bbc:	bd30      	pop	{r4, r5, pc}
 8009bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009bc6:	2d19      	cmp	r5, #25
 8009bc8:	bf98      	it	ls
 8009bca:	3220      	addls	r2, #32
 8009bcc:	42a2      	cmp	r2, r4
 8009bce:	d0f0      	beq.n	8009bb2 <__match+0x6>
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	e7f3      	b.n	8009bbc <__match+0x10>

08009bd4 <__hexnan>:
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	680b      	ldr	r3, [r1, #0]
 8009bda:	115e      	asrs	r6, r3, #5
 8009bdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009be0:	f013 031f 	ands.w	r3, r3, #31
 8009be4:	b087      	sub	sp, #28
 8009be6:	bf18      	it	ne
 8009be8:	3604      	addne	r6, #4
 8009bea:	2500      	movs	r5, #0
 8009bec:	1f37      	subs	r7, r6, #4
 8009bee:	4690      	mov	r8, r2
 8009bf0:	6802      	ldr	r2, [r0, #0]
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009bfa:	46b9      	mov	r9, r7
 8009bfc:	463c      	mov	r4, r7
 8009bfe:	9502      	str	r5, [sp, #8]
 8009c00:	46ab      	mov	fp, r5
 8009c02:	7851      	ldrb	r1, [r2, #1]
 8009c04:	1c53      	adds	r3, r2, #1
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	b341      	cbz	r1, 8009c5c <__hexnan+0x88>
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	9205      	str	r2, [sp, #20]
 8009c0e:	9104      	str	r1, [sp, #16]
 8009c10:	f7ff fd5f 	bl	80096d2 <__hexdig_fun>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d14f      	bne.n	8009cb8 <__hexnan+0xe4>
 8009c18:	9904      	ldr	r1, [sp, #16]
 8009c1a:	9a05      	ldr	r2, [sp, #20]
 8009c1c:	2920      	cmp	r1, #32
 8009c1e:	d818      	bhi.n	8009c52 <__hexnan+0x7e>
 8009c20:	9b02      	ldr	r3, [sp, #8]
 8009c22:	459b      	cmp	fp, r3
 8009c24:	dd13      	ble.n	8009c4e <__hexnan+0x7a>
 8009c26:	454c      	cmp	r4, r9
 8009c28:	d206      	bcs.n	8009c38 <__hexnan+0x64>
 8009c2a:	2d07      	cmp	r5, #7
 8009c2c:	dc04      	bgt.n	8009c38 <__hexnan+0x64>
 8009c2e:	462a      	mov	r2, r5
 8009c30:	4649      	mov	r1, r9
 8009c32:	4620      	mov	r0, r4
 8009c34:	f7ff ffa8 	bl	8009b88 <L_shift>
 8009c38:	4544      	cmp	r4, r8
 8009c3a:	d950      	bls.n	8009cde <__hexnan+0x10a>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f1a4 0904 	sub.w	r9, r4, #4
 8009c42:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c46:	f8cd b008 	str.w	fp, [sp, #8]
 8009c4a:	464c      	mov	r4, r9
 8009c4c:	461d      	mov	r5, r3
 8009c4e:	9a03      	ldr	r2, [sp, #12]
 8009c50:	e7d7      	b.n	8009c02 <__hexnan+0x2e>
 8009c52:	2929      	cmp	r1, #41	; 0x29
 8009c54:	d156      	bne.n	8009d04 <__hexnan+0x130>
 8009c56:	3202      	adds	r2, #2
 8009c58:	f8ca 2000 	str.w	r2, [sl]
 8009c5c:	f1bb 0f00 	cmp.w	fp, #0
 8009c60:	d050      	beq.n	8009d04 <__hexnan+0x130>
 8009c62:	454c      	cmp	r4, r9
 8009c64:	d206      	bcs.n	8009c74 <__hexnan+0xa0>
 8009c66:	2d07      	cmp	r5, #7
 8009c68:	dc04      	bgt.n	8009c74 <__hexnan+0xa0>
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f7ff ff8a 	bl	8009b88 <L_shift>
 8009c74:	4544      	cmp	r4, r8
 8009c76:	d934      	bls.n	8009ce2 <__hexnan+0x10e>
 8009c78:	f1a8 0204 	sub.w	r2, r8, #4
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c82:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c86:	429f      	cmp	r7, r3
 8009c88:	d2f9      	bcs.n	8009c7e <__hexnan+0xaa>
 8009c8a:	1b3b      	subs	r3, r7, r4
 8009c8c:	f023 0303 	bic.w	r3, r3, #3
 8009c90:	3304      	adds	r3, #4
 8009c92:	3401      	adds	r4, #1
 8009c94:	3e03      	subs	r6, #3
 8009c96:	42b4      	cmp	r4, r6
 8009c98:	bf88      	it	hi
 8009c9a:	2304      	movhi	r3, #4
 8009c9c:	4443      	add	r3, r8
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f843 2b04 	str.w	r2, [r3], #4
 8009ca4:	429f      	cmp	r7, r3
 8009ca6:	d2fb      	bcs.n	8009ca0 <__hexnan+0xcc>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	b91b      	cbnz	r3, 8009cb4 <__hexnan+0xe0>
 8009cac:	4547      	cmp	r7, r8
 8009cae:	d127      	bne.n	8009d00 <__hexnan+0x12c>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	2005      	movs	r0, #5
 8009cb6:	e026      	b.n	8009d06 <__hexnan+0x132>
 8009cb8:	3501      	adds	r5, #1
 8009cba:	2d08      	cmp	r5, #8
 8009cbc:	f10b 0b01 	add.w	fp, fp, #1
 8009cc0:	dd06      	ble.n	8009cd0 <__hexnan+0xfc>
 8009cc2:	4544      	cmp	r4, r8
 8009cc4:	d9c3      	bls.n	8009c4e <__hexnan+0x7a>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ccc:	2501      	movs	r5, #1
 8009cce:	3c04      	subs	r4, #4
 8009cd0:	6822      	ldr	r2, [r4, #0]
 8009cd2:	f000 000f 	and.w	r0, r0, #15
 8009cd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009cda:	6022      	str	r2, [r4, #0]
 8009cdc:	e7b7      	b.n	8009c4e <__hexnan+0x7a>
 8009cde:	2508      	movs	r5, #8
 8009ce0:	e7b5      	b.n	8009c4e <__hexnan+0x7a>
 8009ce2:	9b01      	ldr	r3, [sp, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0df      	beq.n	8009ca8 <__hexnan+0xd4>
 8009ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cec:	f1c3 0320 	rsb	r3, r3, #32
 8009cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009cf8:	401a      	ands	r2, r3
 8009cfa:	f846 2c04 	str.w	r2, [r6, #-4]
 8009cfe:	e7d3      	b.n	8009ca8 <__hexnan+0xd4>
 8009d00:	3f04      	subs	r7, #4
 8009d02:	e7d1      	b.n	8009ca8 <__hexnan+0xd4>
 8009d04:	2004      	movs	r0, #4
 8009d06:	b007      	add	sp, #28
 8009d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d0c <_localeconv_r>:
 8009d0c:	4800      	ldr	r0, [pc, #0]	; (8009d10 <_localeconv_r+0x4>)
 8009d0e:	4770      	bx	lr
 8009d10:	20000164 	.word	0x20000164

08009d14 <__retarget_lock_init_recursive>:
 8009d14:	4770      	bx	lr

08009d16 <__retarget_lock_acquire_recursive>:
 8009d16:	4770      	bx	lr

08009d18 <__retarget_lock_release_recursive>:
 8009d18:	4770      	bx	lr
	...

08009d1c <malloc>:
 8009d1c:	4b02      	ldr	r3, [pc, #8]	; (8009d28 <malloc+0xc>)
 8009d1e:	4601      	mov	r1, r0
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	f000 bd67 	b.w	800a7f4 <_malloc_r>
 8009d26:	bf00      	nop
 8009d28:	2000000c 	.word	0x2000000c

08009d2c <__ascii_mbtowc>:
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	b901      	cbnz	r1, 8009d32 <__ascii_mbtowc+0x6>
 8009d30:	a901      	add	r1, sp, #4
 8009d32:	b142      	cbz	r2, 8009d46 <__ascii_mbtowc+0x1a>
 8009d34:	b14b      	cbz	r3, 8009d4a <__ascii_mbtowc+0x1e>
 8009d36:	7813      	ldrb	r3, [r2, #0]
 8009d38:	600b      	str	r3, [r1, #0]
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	1e10      	subs	r0, r2, #0
 8009d3e:	bf18      	it	ne
 8009d40:	2001      	movne	r0, #1
 8009d42:	b002      	add	sp, #8
 8009d44:	4770      	bx	lr
 8009d46:	4610      	mov	r0, r2
 8009d48:	e7fb      	b.n	8009d42 <__ascii_mbtowc+0x16>
 8009d4a:	f06f 0001 	mvn.w	r0, #1
 8009d4e:	e7f8      	b.n	8009d42 <__ascii_mbtowc+0x16>

08009d50 <memcpy>:
 8009d50:	440a      	add	r2, r1
 8009d52:	4291      	cmp	r1, r2
 8009d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d58:	d100      	bne.n	8009d5c <memcpy+0xc>
 8009d5a:	4770      	bx	lr
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d66:	4291      	cmp	r1, r2
 8009d68:	d1f9      	bne.n	8009d5e <memcpy+0xe>
 8009d6a:	bd10      	pop	{r4, pc}

08009d6c <_Balloc>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	b976      	cbnz	r6, 8009d94 <_Balloc+0x28>
 8009d76:	2010      	movs	r0, #16
 8009d78:	f7ff ffd0 	bl	8009d1c <malloc>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6260      	str	r0, [r4, #36]	; 0x24
 8009d80:	b920      	cbnz	r0, 8009d8c <_Balloc+0x20>
 8009d82:	4b18      	ldr	r3, [pc, #96]	; (8009de4 <_Balloc+0x78>)
 8009d84:	4818      	ldr	r0, [pc, #96]	; (8009de8 <_Balloc+0x7c>)
 8009d86:	2166      	movs	r1, #102	; 0x66
 8009d88:	f001 f9ae 	bl	800b0e8 <__assert_func>
 8009d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d90:	6006      	str	r6, [r0, #0]
 8009d92:	60c6      	str	r6, [r0, #12]
 8009d94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d96:	68f3      	ldr	r3, [r6, #12]
 8009d98:	b183      	cbz	r3, 8009dbc <_Balloc+0x50>
 8009d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009da2:	b9b8      	cbnz	r0, 8009dd4 <_Balloc+0x68>
 8009da4:	2101      	movs	r1, #1
 8009da6:	fa01 f605 	lsl.w	r6, r1, r5
 8009daa:	1d72      	adds	r2, r6, #5
 8009dac:	0092      	lsls	r2, r2, #2
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 fc9d 	bl	800a6ee <_calloc_r>
 8009db4:	b160      	cbz	r0, 8009dd0 <_Balloc+0x64>
 8009db6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dba:	e00e      	b.n	8009dda <_Balloc+0x6e>
 8009dbc:	2221      	movs	r2, #33	; 0x21
 8009dbe:	2104      	movs	r1, #4
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 fc94 	bl	800a6ee <_calloc_r>
 8009dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dc8:	60f0      	str	r0, [r6, #12]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e4      	bne.n	8009d9a <_Balloc+0x2e>
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	6802      	ldr	r2, [r0, #0]
 8009dd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009de0:	e7f7      	b.n	8009dd2 <_Balloc+0x66>
 8009de2:	bf00      	nop
 8009de4:	0800b7be 	.word	0x0800b7be
 8009de8:	0800b920 	.word	0x0800b920

08009dec <_Bfree>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009df0:	4605      	mov	r5, r0
 8009df2:	460c      	mov	r4, r1
 8009df4:	b976      	cbnz	r6, 8009e14 <_Bfree+0x28>
 8009df6:	2010      	movs	r0, #16
 8009df8:	f7ff ff90 	bl	8009d1c <malloc>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	6268      	str	r0, [r5, #36]	; 0x24
 8009e00:	b920      	cbnz	r0, 8009e0c <_Bfree+0x20>
 8009e02:	4b09      	ldr	r3, [pc, #36]	; (8009e28 <_Bfree+0x3c>)
 8009e04:	4809      	ldr	r0, [pc, #36]	; (8009e2c <_Bfree+0x40>)
 8009e06:	218a      	movs	r1, #138	; 0x8a
 8009e08:	f001 f96e 	bl	800b0e8 <__assert_func>
 8009e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e10:	6006      	str	r6, [r0, #0]
 8009e12:	60c6      	str	r6, [r0, #12]
 8009e14:	b13c      	cbz	r4, 8009e26 <_Bfree+0x3a>
 8009e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e18:	6862      	ldr	r2, [r4, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e20:	6021      	str	r1, [r4, #0]
 8009e22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	0800b7be 	.word	0x0800b7be
 8009e2c:	0800b920 	.word	0x0800b920

08009e30 <__multadd>:
 8009e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e34:	690d      	ldr	r5, [r1, #16]
 8009e36:	4607      	mov	r7, r0
 8009e38:	460c      	mov	r4, r1
 8009e3a:	461e      	mov	r6, r3
 8009e3c:	f101 0c14 	add.w	ip, r1, #20
 8009e40:	2000      	movs	r0, #0
 8009e42:	f8dc 3000 	ldr.w	r3, [ip]
 8009e46:	b299      	uxth	r1, r3
 8009e48:	fb02 6101 	mla	r1, r2, r1, r6
 8009e4c:	0c1e      	lsrs	r6, r3, #16
 8009e4e:	0c0b      	lsrs	r3, r1, #16
 8009e50:	fb02 3306 	mla	r3, r2, r6, r3
 8009e54:	b289      	uxth	r1, r1
 8009e56:	3001      	adds	r0, #1
 8009e58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e5c:	4285      	cmp	r5, r0
 8009e5e:	f84c 1b04 	str.w	r1, [ip], #4
 8009e62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e66:	dcec      	bgt.n	8009e42 <__multadd+0x12>
 8009e68:	b30e      	cbz	r6, 8009eae <__multadd+0x7e>
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	42ab      	cmp	r3, r5
 8009e6e:	dc19      	bgt.n	8009ea4 <__multadd+0x74>
 8009e70:	6861      	ldr	r1, [r4, #4]
 8009e72:	4638      	mov	r0, r7
 8009e74:	3101      	adds	r1, #1
 8009e76:	f7ff ff79 	bl	8009d6c <_Balloc>
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	b928      	cbnz	r0, 8009e8a <__multadd+0x5a>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <__multadd+0x84>)
 8009e82:	480d      	ldr	r0, [pc, #52]	; (8009eb8 <__multadd+0x88>)
 8009e84:	21b5      	movs	r1, #181	; 0xb5
 8009e86:	f001 f92f 	bl	800b0e8 <__assert_func>
 8009e8a:	6922      	ldr	r2, [r4, #16]
 8009e8c:	3202      	adds	r2, #2
 8009e8e:	f104 010c 	add.w	r1, r4, #12
 8009e92:	0092      	lsls	r2, r2, #2
 8009e94:	300c      	adds	r0, #12
 8009e96:	f7ff ff5b 	bl	8009d50 <memcpy>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f7ff ffa5 	bl	8009dec <_Bfree>
 8009ea2:	4644      	mov	r4, r8
 8009ea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ea8:	3501      	adds	r5, #1
 8009eaa:	615e      	str	r6, [r3, #20]
 8009eac:	6125      	str	r5, [r4, #16]
 8009eae:	4620      	mov	r0, r4
 8009eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb4:	0800b830 	.word	0x0800b830
 8009eb8:	0800b920 	.word	0x0800b920

08009ebc <__s2b>:
 8009ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	4615      	mov	r5, r2
 8009ec4:	461f      	mov	r7, r3
 8009ec6:	2209      	movs	r2, #9
 8009ec8:	3308      	adds	r3, #8
 8009eca:	4606      	mov	r6, r0
 8009ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	db09      	blt.n	8009eec <__s2b+0x30>
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f7ff ff47 	bl	8009d6c <_Balloc>
 8009ede:	b940      	cbnz	r0, 8009ef2 <__s2b+0x36>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <__s2b+0x8c>)
 8009ee4:	4819      	ldr	r0, [pc, #100]	; (8009f4c <__s2b+0x90>)
 8009ee6:	21ce      	movs	r1, #206	; 0xce
 8009ee8:	f001 f8fe 	bl	800b0e8 <__assert_func>
 8009eec:	0052      	lsls	r2, r2, #1
 8009eee:	3101      	adds	r1, #1
 8009ef0:	e7f0      	b.n	8009ed4 <__s2b+0x18>
 8009ef2:	9b08      	ldr	r3, [sp, #32]
 8009ef4:	6143      	str	r3, [r0, #20]
 8009ef6:	2d09      	cmp	r5, #9
 8009ef8:	f04f 0301 	mov.w	r3, #1
 8009efc:	6103      	str	r3, [r0, #16]
 8009efe:	dd16      	ble.n	8009f2e <__s2b+0x72>
 8009f00:	f104 0909 	add.w	r9, r4, #9
 8009f04:	46c8      	mov	r8, r9
 8009f06:	442c      	add	r4, r5
 8009f08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	3b30      	subs	r3, #48	; 0x30
 8009f10:	220a      	movs	r2, #10
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ff8c 	bl	8009e30 <__multadd>
 8009f18:	45a0      	cmp	r8, r4
 8009f1a:	d1f5      	bne.n	8009f08 <__s2b+0x4c>
 8009f1c:	f1a5 0408 	sub.w	r4, r5, #8
 8009f20:	444c      	add	r4, r9
 8009f22:	1b2d      	subs	r5, r5, r4
 8009f24:	1963      	adds	r3, r4, r5
 8009f26:	42bb      	cmp	r3, r7
 8009f28:	db04      	blt.n	8009f34 <__s2b+0x78>
 8009f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	340a      	adds	r4, #10
 8009f30:	2509      	movs	r5, #9
 8009f32:	e7f6      	b.n	8009f22 <__s2b+0x66>
 8009f34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f38:	4601      	mov	r1, r0
 8009f3a:	3b30      	subs	r3, #48	; 0x30
 8009f3c:	220a      	movs	r2, #10
 8009f3e:	4630      	mov	r0, r6
 8009f40:	f7ff ff76 	bl	8009e30 <__multadd>
 8009f44:	e7ee      	b.n	8009f24 <__s2b+0x68>
 8009f46:	bf00      	nop
 8009f48:	0800b830 	.word	0x0800b830
 8009f4c:	0800b920 	.word	0x0800b920

08009f50 <__hi0bits>:
 8009f50:	0c03      	lsrs	r3, r0, #16
 8009f52:	041b      	lsls	r3, r3, #16
 8009f54:	b9d3      	cbnz	r3, 8009f8c <__hi0bits+0x3c>
 8009f56:	0400      	lsls	r0, r0, #16
 8009f58:	2310      	movs	r3, #16
 8009f5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f5e:	bf04      	itt	eq
 8009f60:	0200      	lsleq	r0, r0, #8
 8009f62:	3308      	addeq	r3, #8
 8009f64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f68:	bf04      	itt	eq
 8009f6a:	0100      	lsleq	r0, r0, #4
 8009f6c:	3304      	addeq	r3, #4
 8009f6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f72:	bf04      	itt	eq
 8009f74:	0080      	lsleq	r0, r0, #2
 8009f76:	3302      	addeq	r3, #2
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	db05      	blt.n	8009f88 <__hi0bits+0x38>
 8009f7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f80:	f103 0301 	add.w	r3, r3, #1
 8009f84:	bf08      	it	eq
 8009f86:	2320      	moveq	r3, #32
 8009f88:	4618      	mov	r0, r3
 8009f8a:	4770      	bx	lr
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e7e4      	b.n	8009f5a <__hi0bits+0xa>

08009f90 <__lo0bits>:
 8009f90:	6803      	ldr	r3, [r0, #0]
 8009f92:	f013 0207 	ands.w	r2, r3, #7
 8009f96:	4601      	mov	r1, r0
 8009f98:	d00b      	beq.n	8009fb2 <__lo0bits+0x22>
 8009f9a:	07da      	lsls	r2, r3, #31
 8009f9c:	d423      	bmi.n	8009fe6 <__lo0bits+0x56>
 8009f9e:	0798      	lsls	r0, r3, #30
 8009fa0:	bf49      	itett	mi
 8009fa2:	085b      	lsrmi	r3, r3, #1
 8009fa4:	089b      	lsrpl	r3, r3, #2
 8009fa6:	2001      	movmi	r0, #1
 8009fa8:	600b      	strmi	r3, [r1, #0]
 8009faa:	bf5c      	itt	pl
 8009fac:	600b      	strpl	r3, [r1, #0]
 8009fae:	2002      	movpl	r0, #2
 8009fb0:	4770      	bx	lr
 8009fb2:	b298      	uxth	r0, r3
 8009fb4:	b9a8      	cbnz	r0, 8009fe2 <__lo0bits+0x52>
 8009fb6:	0c1b      	lsrs	r3, r3, #16
 8009fb8:	2010      	movs	r0, #16
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	b90a      	cbnz	r2, 8009fc2 <__lo0bits+0x32>
 8009fbe:	3008      	adds	r0, #8
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	071a      	lsls	r2, r3, #28
 8009fc4:	bf04      	itt	eq
 8009fc6:	091b      	lsreq	r3, r3, #4
 8009fc8:	3004      	addeq	r0, #4
 8009fca:	079a      	lsls	r2, r3, #30
 8009fcc:	bf04      	itt	eq
 8009fce:	089b      	lsreq	r3, r3, #2
 8009fd0:	3002      	addeq	r0, #2
 8009fd2:	07da      	lsls	r2, r3, #31
 8009fd4:	d403      	bmi.n	8009fde <__lo0bits+0x4e>
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	f100 0001 	add.w	r0, r0, #1
 8009fdc:	d005      	beq.n	8009fea <__lo0bits+0x5a>
 8009fde:	600b      	str	r3, [r1, #0]
 8009fe0:	4770      	bx	lr
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	e7e9      	b.n	8009fba <__lo0bits+0x2a>
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	4770      	bx	lr
 8009fea:	2020      	movs	r0, #32
 8009fec:	4770      	bx	lr
	...

08009ff0 <__i2b>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	f7ff feb9 	bl	8009d6c <_Balloc>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	b928      	cbnz	r0, 800a00a <__i2b+0x1a>
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <__i2b+0x24>)
 800a000:	4805      	ldr	r0, [pc, #20]	; (800a018 <__i2b+0x28>)
 800a002:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a006:	f001 f86f 	bl	800b0e8 <__assert_func>
 800a00a:	2301      	movs	r3, #1
 800a00c:	6144      	str	r4, [r0, #20]
 800a00e:	6103      	str	r3, [r0, #16]
 800a010:	bd10      	pop	{r4, pc}
 800a012:	bf00      	nop
 800a014:	0800b830 	.word	0x0800b830
 800a018:	0800b920 	.word	0x0800b920

0800a01c <__multiply>:
 800a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	4691      	mov	r9, r2
 800a022:	690a      	ldr	r2, [r1, #16]
 800a024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a028:	429a      	cmp	r2, r3
 800a02a:	bfb8      	it	lt
 800a02c:	460b      	movlt	r3, r1
 800a02e:	460c      	mov	r4, r1
 800a030:	bfbc      	itt	lt
 800a032:	464c      	movlt	r4, r9
 800a034:	4699      	movlt	r9, r3
 800a036:	6927      	ldr	r7, [r4, #16]
 800a038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a03c:	68a3      	ldr	r3, [r4, #8]
 800a03e:	6861      	ldr	r1, [r4, #4]
 800a040:	eb07 060a 	add.w	r6, r7, sl
 800a044:	42b3      	cmp	r3, r6
 800a046:	b085      	sub	sp, #20
 800a048:	bfb8      	it	lt
 800a04a:	3101      	addlt	r1, #1
 800a04c:	f7ff fe8e 	bl	8009d6c <_Balloc>
 800a050:	b930      	cbnz	r0, 800a060 <__multiply+0x44>
 800a052:	4602      	mov	r2, r0
 800a054:	4b44      	ldr	r3, [pc, #272]	; (800a168 <__multiply+0x14c>)
 800a056:	4845      	ldr	r0, [pc, #276]	; (800a16c <__multiply+0x150>)
 800a058:	f240 115d 	movw	r1, #349	; 0x15d
 800a05c:	f001 f844 	bl	800b0e8 <__assert_func>
 800a060:	f100 0514 	add.w	r5, r0, #20
 800a064:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a068:	462b      	mov	r3, r5
 800a06a:	2200      	movs	r2, #0
 800a06c:	4543      	cmp	r3, r8
 800a06e:	d321      	bcc.n	800a0b4 <__multiply+0x98>
 800a070:	f104 0314 	add.w	r3, r4, #20
 800a074:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a078:	f109 0314 	add.w	r3, r9, #20
 800a07c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a080:	9202      	str	r2, [sp, #8]
 800a082:	1b3a      	subs	r2, r7, r4
 800a084:	3a15      	subs	r2, #21
 800a086:	f022 0203 	bic.w	r2, r2, #3
 800a08a:	3204      	adds	r2, #4
 800a08c:	f104 0115 	add.w	r1, r4, #21
 800a090:	428f      	cmp	r7, r1
 800a092:	bf38      	it	cc
 800a094:	2204      	movcc	r2, #4
 800a096:	9201      	str	r2, [sp, #4]
 800a098:	9a02      	ldr	r2, [sp, #8]
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d80c      	bhi.n	800a0ba <__multiply+0x9e>
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	dd03      	ble.n	800a0ac <__multiply+0x90>
 800a0a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d05a      	beq.n	800a162 <__multiply+0x146>
 800a0ac:	6106      	str	r6, [r0, #16]
 800a0ae:	b005      	add	sp, #20
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	f843 2b04 	str.w	r2, [r3], #4
 800a0b8:	e7d8      	b.n	800a06c <__multiply+0x50>
 800a0ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0be:	f1ba 0f00 	cmp.w	sl, #0
 800a0c2:	d024      	beq.n	800a10e <__multiply+0xf2>
 800a0c4:	f104 0e14 	add.w	lr, r4, #20
 800a0c8:	46a9      	mov	r9, r5
 800a0ca:	f04f 0c00 	mov.w	ip, #0
 800a0ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0d2:	f8d9 1000 	ldr.w	r1, [r9]
 800a0d6:	fa1f fb82 	uxth.w	fp, r2
 800a0da:	b289      	uxth	r1, r1
 800a0dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a0e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a0e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a0e8:	4461      	add	r1, ip
 800a0ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800a0f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0f6:	b289      	uxth	r1, r1
 800a0f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0fc:	4577      	cmp	r7, lr
 800a0fe:	f849 1b04 	str.w	r1, [r9], #4
 800a102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a106:	d8e2      	bhi.n	800a0ce <__multiply+0xb2>
 800a108:	9a01      	ldr	r2, [sp, #4]
 800a10a:	f845 c002 	str.w	ip, [r5, r2]
 800a10e:	9a03      	ldr	r2, [sp, #12]
 800a110:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a114:	3304      	adds	r3, #4
 800a116:	f1b9 0f00 	cmp.w	r9, #0
 800a11a:	d020      	beq.n	800a15e <__multiply+0x142>
 800a11c:	6829      	ldr	r1, [r5, #0]
 800a11e:	f104 0c14 	add.w	ip, r4, #20
 800a122:	46ae      	mov	lr, r5
 800a124:	f04f 0a00 	mov.w	sl, #0
 800a128:	f8bc b000 	ldrh.w	fp, [ip]
 800a12c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a130:	fb09 220b 	mla	r2, r9, fp, r2
 800a134:	4492      	add	sl, r2
 800a136:	b289      	uxth	r1, r1
 800a138:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a13c:	f84e 1b04 	str.w	r1, [lr], #4
 800a140:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a144:	f8be 1000 	ldrh.w	r1, [lr]
 800a148:	0c12      	lsrs	r2, r2, #16
 800a14a:	fb09 1102 	mla	r1, r9, r2, r1
 800a14e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a152:	4567      	cmp	r7, ip
 800a154:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a158:	d8e6      	bhi.n	800a128 <__multiply+0x10c>
 800a15a:	9a01      	ldr	r2, [sp, #4]
 800a15c:	50a9      	str	r1, [r5, r2]
 800a15e:	3504      	adds	r5, #4
 800a160:	e79a      	b.n	800a098 <__multiply+0x7c>
 800a162:	3e01      	subs	r6, #1
 800a164:	e79c      	b.n	800a0a0 <__multiply+0x84>
 800a166:	bf00      	nop
 800a168:	0800b830 	.word	0x0800b830
 800a16c:	0800b920 	.word	0x0800b920

0800a170 <__pow5mult>:
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a174:	4615      	mov	r5, r2
 800a176:	f012 0203 	ands.w	r2, r2, #3
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	d007      	beq.n	800a190 <__pow5mult+0x20>
 800a180:	4c25      	ldr	r4, [pc, #148]	; (800a218 <__pow5mult+0xa8>)
 800a182:	3a01      	subs	r2, #1
 800a184:	2300      	movs	r3, #0
 800a186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a18a:	f7ff fe51 	bl	8009e30 <__multadd>
 800a18e:	4607      	mov	r7, r0
 800a190:	10ad      	asrs	r5, r5, #2
 800a192:	d03d      	beq.n	800a210 <__pow5mult+0xa0>
 800a194:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a196:	b97c      	cbnz	r4, 800a1b8 <__pow5mult+0x48>
 800a198:	2010      	movs	r0, #16
 800a19a:	f7ff fdbf 	bl	8009d1c <malloc>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a1a2:	b928      	cbnz	r0, 800a1b0 <__pow5mult+0x40>
 800a1a4:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <__pow5mult+0xac>)
 800a1a6:	481e      	ldr	r0, [pc, #120]	; (800a220 <__pow5mult+0xb0>)
 800a1a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1ac:	f000 ff9c 	bl	800b0e8 <__assert_func>
 800a1b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1b4:	6004      	str	r4, [r0, #0]
 800a1b6:	60c4      	str	r4, [r0, #12]
 800a1b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1c0:	b94c      	cbnz	r4, 800a1d6 <__pow5mult+0x66>
 800a1c2:	f240 2171 	movw	r1, #625	; 0x271
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f7ff ff12 	bl	8009ff0 <__i2b>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	6003      	str	r3, [r0, #0]
 800a1d6:	f04f 0900 	mov.w	r9, #0
 800a1da:	07eb      	lsls	r3, r5, #31
 800a1dc:	d50a      	bpl.n	800a1f4 <__pow5mult+0x84>
 800a1de:	4639      	mov	r1, r7
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7ff ff1a 	bl	800a01c <__multiply>
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f7ff fdfd 	bl	8009dec <_Bfree>
 800a1f2:	4647      	mov	r7, r8
 800a1f4:	106d      	asrs	r5, r5, #1
 800a1f6:	d00b      	beq.n	800a210 <__pow5mult+0xa0>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	b938      	cbnz	r0, 800a20c <__pow5mult+0x9c>
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	4621      	mov	r1, r4
 800a200:	4630      	mov	r0, r6
 800a202:	f7ff ff0b 	bl	800a01c <__multiply>
 800a206:	6020      	str	r0, [r4, #0]
 800a208:	f8c0 9000 	str.w	r9, [r0]
 800a20c:	4604      	mov	r4, r0
 800a20e:	e7e4      	b.n	800a1da <__pow5mult+0x6a>
 800a210:	4638      	mov	r0, r7
 800a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a216:	bf00      	nop
 800a218:	0800ba70 	.word	0x0800ba70
 800a21c:	0800b7be 	.word	0x0800b7be
 800a220:	0800b920 	.word	0x0800b920

0800a224 <__lshift>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	460c      	mov	r4, r1
 800a22a:	6849      	ldr	r1, [r1, #4]
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a232:	68a3      	ldr	r3, [r4, #8]
 800a234:	4607      	mov	r7, r0
 800a236:	4691      	mov	r9, r2
 800a238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a23c:	f108 0601 	add.w	r6, r8, #1
 800a240:	42b3      	cmp	r3, r6
 800a242:	db0b      	blt.n	800a25c <__lshift+0x38>
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff fd91 	bl	8009d6c <_Balloc>
 800a24a:	4605      	mov	r5, r0
 800a24c:	b948      	cbnz	r0, 800a262 <__lshift+0x3e>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b2a      	ldr	r3, [pc, #168]	; (800a2fc <__lshift+0xd8>)
 800a252:	482b      	ldr	r0, [pc, #172]	; (800a300 <__lshift+0xdc>)
 800a254:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a258:	f000 ff46 	bl	800b0e8 <__assert_func>
 800a25c:	3101      	adds	r1, #1
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	e7ee      	b.n	800a240 <__lshift+0x1c>
 800a262:	2300      	movs	r3, #0
 800a264:	f100 0114 	add.w	r1, r0, #20
 800a268:	f100 0210 	add.w	r2, r0, #16
 800a26c:	4618      	mov	r0, r3
 800a26e:	4553      	cmp	r3, sl
 800a270:	db37      	blt.n	800a2e2 <__lshift+0xbe>
 800a272:	6920      	ldr	r0, [r4, #16]
 800a274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a278:	f104 0314 	add.w	r3, r4, #20
 800a27c:	f019 091f 	ands.w	r9, r9, #31
 800a280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a284:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a288:	d02f      	beq.n	800a2ea <__lshift+0xc6>
 800a28a:	f1c9 0e20 	rsb	lr, r9, #32
 800a28e:	468a      	mov	sl, r1
 800a290:	f04f 0c00 	mov.w	ip, #0
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	fa02 f209 	lsl.w	r2, r2, r9
 800a29a:	ea42 020c 	orr.w	r2, r2, ip
 800a29e:	f84a 2b04 	str.w	r2, [sl], #4
 800a2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a6:	4298      	cmp	r0, r3
 800a2a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a2ac:	d8f2      	bhi.n	800a294 <__lshift+0x70>
 800a2ae:	1b03      	subs	r3, r0, r4
 800a2b0:	3b15      	subs	r3, #21
 800a2b2:	f023 0303 	bic.w	r3, r3, #3
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	f104 0215 	add.w	r2, r4, #21
 800a2bc:	4290      	cmp	r0, r2
 800a2be:	bf38      	it	cc
 800a2c0:	2304      	movcc	r3, #4
 800a2c2:	f841 c003 	str.w	ip, [r1, r3]
 800a2c6:	f1bc 0f00 	cmp.w	ip, #0
 800a2ca:	d001      	beq.n	800a2d0 <__lshift+0xac>
 800a2cc:	f108 0602 	add.w	r6, r8, #2
 800a2d0:	3e01      	subs	r6, #1
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	612e      	str	r6, [r5, #16]
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	f7ff fd88 	bl	8009dec <_Bfree>
 800a2dc:	4628      	mov	r0, r5
 800a2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	e7c1      	b.n	800a26e <__lshift+0x4a>
 800a2ea:	3904      	subs	r1, #4
 800a2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2f4:	4298      	cmp	r0, r3
 800a2f6:	d8f9      	bhi.n	800a2ec <__lshift+0xc8>
 800a2f8:	e7ea      	b.n	800a2d0 <__lshift+0xac>
 800a2fa:	bf00      	nop
 800a2fc:	0800b830 	.word	0x0800b830
 800a300:	0800b920 	.word	0x0800b920

0800a304 <__mcmp>:
 800a304:	b530      	push	{r4, r5, lr}
 800a306:	6902      	ldr	r2, [r0, #16]
 800a308:	690c      	ldr	r4, [r1, #16]
 800a30a:	1b12      	subs	r2, r2, r4
 800a30c:	d10e      	bne.n	800a32c <__mcmp+0x28>
 800a30e:	f100 0314 	add.w	r3, r0, #20
 800a312:	3114      	adds	r1, #20
 800a314:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a31c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a320:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a324:	42a5      	cmp	r5, r4
 800a326:	d003      	beq.n	800a330 <__mcmp+0x2c>
 800a328:	d305      	bcc.n	800a336 <__mcmp+0x32>
 800a32a:	2201      	movs	r2, #1
 800a32c:	4610      	mov	r0, r2
 800a32e:	bd30      	pop	{r4, r5, pc}
 800a330:	4283      	cmp	r3, r0
 800a332:	d3f3      	bcc.n	800a31c <__mcmp+0x18>
 800a334:	e7fa      	b.n	800a32c <__mcmp+0x28>
 800a336:	f04f 32ff 	mov.w	r2, #4294967295
 800a33a:	e7f7      	b.n	800a32c <__mcmp+0x28>

0800a33c <__mdiff>:
 800a33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	460c      	mov	r4, r1
 800a342:	4606      	mov	r6, r0
 800a344:	4611      	mov	r1, r2
 800a346:	4620      	mov	r0, r4
 800a348:	4690      	mov	r8, r2
 800a34a:	f7ff ffdb 	bl	800a304 <__mcmp>
 800a34e:	1e05      	subs	r5, r0, #0
 800a350:	d110      	bne.n	800a374 <__mdiff+0x38>
 800a352:	4629      	mov	r1, r5
 800a354:	4630      	mov	r0, r6
 800a356:	f7ff fd09 	bl	8009d6c <_Balloc>
 800a35a:	b930      	cbnz	r0, 800a36a <__mdiff+0x2e>
 800a35c:	4b3a      	ldr	r3, [pc, #232]	; (800a448 <__mdiff+0x10c>)
 800a35e:	4602      	mov	r2, r0
 800a360:	f240 2132 	movw	r1, #562	; 0x232
 800a364:	4839      	ldr	r0, [pc, #228]	; (800a44c <__mdiff+0x110>)
 800a366:	f000 febf 	bl	800b0e8 <__assert_func>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a374:	bfa4      	itt	ge
 800a376:	4643      	movge	r3, r8
 800a378:	46a0      	movge	r8, r4
 800a37a:	4630      	mov	r0, r6
 800a37c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a380:	bfa6      	itte	ge
 800a382:	461c      	movge	r4, r3
 800a384:	2500      	movge	r5, #0
 800a386:	2501      	movlt	r5, #1
 800a388:	f7ff fcf0 	bl	8009d6c <_Balloc>
 800a38c:	b920      	cbnz	r0, 800a398 <__mdiff+0x5c>
 800a38e:	4b2e      	ldr	r3, [pc, #184]	; (800a448 <__mdiff+0x10c>)
 800a390:	4602      	mov	r2, r0
 800a392:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a396:	e7e5      	b.n	800a364 <__mdiff+0x28>
 800a398:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a39c:	6926      	ldr	r6, [r4, #16]
 800a39e:	60c5      	str	r5, [r0, #12]
 800a3a0:	f104 0914 	add.w	r9, r4, #20
 800a3a4:	f108 0514 	add.w	r5, r8, #20
 800a3a8:	f100 0e14 	add.w	lr, r0, #20
 800a3ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a3b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a3b4:	f108 0210 	add.w	r2, r8, #16
 800a3b8:	46f2      	mov	sl, lr
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3c4:	fa1f f883 	uxth.w	r8, r3
 800a3c8:	fa11 f18b 	uxtah	r1, r1, fp
 800a3cc:	0c1b      	lsrs	r3, r3, #16
 800a3ce:	eba1 0808 	sub.w	r8, r1, r8
 800a3d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a3da:	fa1f f888 	uxth.w	r8, r8
 800a3de:	1419      	asrs	r1, r3, #16
 800a3e0:	454e      	cmp	r6, r9
 800a3e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a3ea:	d8e7      	bhi.n	800a3bc <__mdiff+0x80>
 800a3ec:	1b33      	subs	r3, r6, r4
 800a3ee:	3b15      	subs	r3, #21
 800a3f0:	f023 0303 	bic.w	r3, r3, #3
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	3415      	adds	r4, #21
 800a3f8:	42a6      	cmp	r6, r4
 800a3fa:	bf38      	it	cc
 800a3fc:	2304      	movcc	r3, #4
 800a3fe:	441d      	add	r5, r3
 800a400:	4473      	add	r3, lr
 800a402:	469e      	mov	lr, r3
 800a404:	462e      	mov	r6, r5
 800a406:	4566      	cmp	r6, ip
 800a408:	d30e      	bcc.n	800a428 <__mdiff+0xec>
 800a40a:	f10c 0203 	add.w	r2, ip, #3
 800a40e:	1b52      	subs	r2, r2, r5
 800a410:	f022 0203 	bic.w	r2, r2, #3
 800a414:	3d03      	subs	r5, #3
 800a416:	45ac      	cmp	ip, r5
 800a418:	bf38      	it	cc
 800a41a:	2200      	movcc	r2, #0
 800a41c:	441a      	add	r2, r3
 800a41e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a422:	b17b      	cbz	r3, 800a444 <__mdiff+0x108>
 800a424:	6107      	str	r7, [r0, #16]
 800a426:	e7a3      	b.n	800a370 <__mdiff+0x34>
 800a428:	f856 8b04 	ldr.w	r8, [r6], #4
 800a42c:	fa11 f288 	uxtah	r2, r1, r8
 800a430:	1414      	asrs	r4, r2, #16
 800a432:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a436:	b292      	uxth	r2, r2
 800a438:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a43c:	f84e 2b04 	str.w	r2, [lr], #4
 800a440:	1421      	asrs	r1, r4, #16
 800a442:	e7e0      	b.n	800a406 <__mdiff+0xca>
 800a444:	3f01      	subs	r7, #1
 800a446:	e7ea      	b.n	800a41e <__mdiff+0xe2>
 800a448:	0800b830 	.word	0x0800b830
 800a44c:	0800b920 	.word	0x0800b920

0800a450 <__ulp>:
 800a450:	b082      	sub	sp, #8
 800a452:	ed8d 0b00 	vstr	d0, [sp]
 800a456:	9b01      	ldr	r3, [sp, #4]
 800a458:	4912      	ldr	r1, [pc, #72]	; (800a4a4 <__ulp+0x54>)
 800a45a:	4019      	ands	r1, r3
 800a45c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a460:	2900      	cmp	r1, #0
 800a462:	dd05      	ble.n	800a470 <__ulp+0x20>
 800a464:	2200      	movs	r2, #0
 800a466:	460b      	mov	r3, r1
 800a468:	ec43 2b10 	vmov	d0, r2, r3
 800a46c:	b002      	add	sp, #8
 800a46e:	4770      	bx	lr
 800a470:	4249      	negs	r1, r1
 800a472:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a476:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	f04f 0300 	mov.w	r3, #0
 800a482:	da04      	bge.n	800a48e <__ulp+0x3e>
 800a484:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a488:	fa41 f300 	asr.w	r3, r1, r0
 800a48c:	e7ec      	b.n	800a468 <__ulp+0x18>
 800a48e:	f1a0 0114 	sub.w	r1, r0, #20
 800a492:	291e      	cmp	r1, #30
 800a494:	bfda      	itte	le
 800a496:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a49a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a49e:	2101      	movgt	r1, #1
 800a4a0:	460a      	mov	r2, r1
 800a4a2:	e7e1      	b.n	800a468 <__ulp+0x18>
 800a4a4:	7ff00000 	.word	0x7ff00000

0800a4a8 <__b2d>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	6905      	ldr	r5, [r0, #16]
 800a4ac:	f100 0714 	add.w	r7, r0, #20
 800a4b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a4b4:	1f2e      	subs	r6, r5, #4
 800a4b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f7ff fd48 	bl	8009f50 <__hi0bits>
 800a4c0:	f1c0 0320 	rsb	r3, r0, #32
 800a4c4:	280a      	cmp	r0, #10
 800a4c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a544 <__b2d+0x9c>
 800a4ca:	600b      	str	r3, [r1, #0]
 800a4cc:	dc14      	bgt.n	800a4f8 <__b2d+0x50>
 800a4ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800a4d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a4d6:	42b7      	cmp	r7, r6
 800a4d8:	ea41 030c 	orr.w	r3, r1, ip
 800a4dc:	bf34      	ite	cc
 800a4de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a4e2:	2100      	movcs	r1, #0
 800a4e4:	3015      	adds	r0, #21
 800a4e6:	fa04 f000 	lsl.w	r0, r4, r0
 800a4ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800a4ee:	ea40 0201 	orr.w	r2, r0, r1
 800a4f2:	ec43 2b10 	vmov	d0, r2, r3
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f8:	42b7      	cmp	r7, r6
 800a4fa:	bf3a      	itte	cc
 800a4fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a500:	f1a5 0608 	subcc.w	r6, r5, #8
 800a504:	2100      	movcs	r1, #0
 800a506:	380b      	subs	r0, #11
 800a508:	d017      	beq.n	800a53a <__b2d+0x92>
 800a50a:	f1c0 0c20 	rsb	ip, r0, #32
 800a50e:	fa04 f500 	lsl.w	r5, r4, r0
 800a512:	42be      	cmp	r6, r7
 800a514:	fa21 f40c 	lsr.w	r4, r1, ip
 800a518:	ea45 0504 	orr.w	r5, r5, r4
 800a51c:	bf8c      	ite	hi
 800a51e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a522:	2400      	movls	r4, #0
 800a524:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a528:	fa01 f000 	lsl.w	r0, r1, r0
 800a52c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a530:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a534:	ea40 0204 	orr.w	r2, r0, r4
 800a538:	e7db      	b.n	800a4f2 <__b2d+0x4a>
 800a53a:	ea44 030c 	orr.w	r3, r4, ip
 800a53e:	460a      	mov	r2, r1
 800a540:	e7d7      	b.n	800a4f2 <__b2d+0x4a>
 800a542:	bf00      	nop
 800a544:	3ff00000 	.word	0x3ff00000

0800a548 <__d2b>:
 800a548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a54c:	4689      	mov	r9, r1
 800a54e:	2101      	movs	r1, #1
 800a550:	ec57 6b10 	vmov	r6, r7, d0
 800a554:	4690      	mov	r8, r2
 800a556:	f7ff fc09 	bl	8009d6c <_Balloc>
 800a55a:	4604      	mov	r4, r0
 800a55c:	b930      	cbnz	r0, 800a56c <__d2b+0x24>
 800a55e:	4602      	mov	r2, r0
 800a560:	4b25      	ldr	r3, [pc, #148]	; (800a5f8 <__d2b+0xb0>)
 800a562:	4826      	ldr	r0, [pc, #152]	; (800a5fc <__d2b+0xb4>)
 800a564:	f240 310a 	movw	r1, #778	; 0x30a
 800a568:	f000 fdbe 	bl	800b0e8 <__assert_func>
 800a56c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a574:	bb35      	cbnz	r5, 800a5c4 <__d2b+0x7c>
 800a576:	2e00      	cmp	r6, #0
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	d028      	beq.n	800a5ce <__d2b+0x86>
 800a57c:	4668      	mov	r0, sp
 800a57e:	9600      	str	r6, [sp, #0]
 800a580:	f7ff fd06 	bl	8009f90 <__lo0bits>
 800a584:	9900      	ldr	r1, [sp, #0]
 800a586:	b300      	cbz	r0, 800a5ca <__d2b+0x82>
 800a588:	9a01      	ldr	r2, [sp, #4]
 800a58a:	f1c0 0320 	rsb	r3, r0, #32
 800a58e:	fa02 f303 	lsl.w	r3, r2, r3
 800a592:	430b      	orrs	r3, r1
 800a594:	40c2      	lsrs	r2, r0
 800a596:	6163      	str	r3, [r4, #20]
 800a598:	9201      	str	r2, [sp, #4]
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	61a3      	str	r3, [r4, #24]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	bf14      	ite	ne
 800a5a2:	2202      	movne	r2, #2
 800a5a4:	2201      	moveq	r2, #1
 800a5a6:	6122      	str	r2, [r4, #16]
 800a5a8:	b1d5      	cbz	r5, 800a5e0 <__d2b+0x98>
 800a5aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5ae:	4405      	add	r5, r0
 800a5b0:	f8c9 5000 	str.w	r5, [r9]
 800a5b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5b8:	f8c8 0000 	str.w	r0, [r8]
 800a5bc:	4620      	mov	r0, r4
 800a5be:	b003      	add	sp, #12
 800a5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5c8:	e7d5      	b.n	800a576 <__d2b+0x2e>
 800a5ca:	6161      	str	r1, [r4, #20]
 800a5cc:	e7e5      	b.n	800a59a <__d2b+0x52>
 800a5ce:	a801      	add	r0, sp, #4
 800a5d0:	f7ff fcde 	bl	8009f90 <__lo0bits>
 800a5d4:	9b01      	ldr	r3, [sp, #4]
 800a5d6:	6163      	str	r3, [r4, #20]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	6122      	str	r2, [r4, #16]
 800a5dc:	3020      	adds	r0, #32
 800a5de:	e7e3      	b.n	800a5a8 <__d2b+0x60>
 800a5e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5e8:	f8c9 0000 	str.w	r0, [r9]
 800a5ec:	6918      	ldr	r0, [r3, #16]
 800a5ee:	f7ff fcaf 	bl	8009f50 <__hi0bits>
 800a5f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5f6:	e7df      	b.n	800a5b8 <__d2b+0x70>
 800a5f8:	0800b830 	.word	0x0800b830
 800a5fc:	0800b920 	.word	0x0800b920

0800a600 <__ratio>:
 800a600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	4688      	mov	r8, r1
 800a606:	4669      	mov	r1, sp
 800a608:	4681      	mov	r9, r0
 800a60a:	f7ff ff4d 	bl	800a4a8 <__b2d>
 800a60e:	a901      	add	r1, sp, #4
 800a610:	4640      	mov	r0, r8
 800a612:	ec55 4b10 	vmov	r4, r5, d0
 800a616:	f7ff ff47 	bl	800a4a8 <__b2d>
 800a61a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a61e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a622:	eba3 0c02 	sub.w	ip, r3, r2
 800a626:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a62a:	1a9b      	subs	r3, r3, r2
 800a62c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a630:	ec51 0b10 	vmov	r0, r1, d0
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfd6      	itet	le
 800a638:	460a      	movle	r2, r1
 800a63a:	462a      	movgt	r2, r5
 800a63c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a640:	468b      	mov	fp, r1
 800a642:	462f      	mov	r7, r5
 800a644:	bfd4      	ite	le
 800a646:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a64a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a64e:	4620      	mov	r0, r4
 800a650:	ee10 2a10 	vmov	r2, s0
 800a654:	465b      	mov	r3, fp
 800a656:	4639      	mov	r1, r7
 800a658:	f7f6 f8f8 	bl	800084c <__aeabi_ddiv>
 800a65c:	ec41 0b10 	vmov	d0, r0, r1
 800a660:	b003      	add	sp, #12
 800a662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a666 <__copybits>:
 800a666:	3901      	subs	r1, #1
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	1149      	asrs	r1, r1, #5
 800a66c:	6914      	ldr	r4, [r2, #16]
 800a66e:	3101      	adds	r1, #1
 800a670:	f102 0314 	add.w	r3, r2, #20
 800a674:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a678:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a67c:	1f05      	subs	r5, r0, #4
 800a67e:	42a3      	cmp	r3, r4
 800a680:	d30c      	bcc.n	800a69c <__copybits+0x36>
 800a682:	1aa3      	subs	r3, r4, r2
 800a684:	3b11      	subs	r3, #17
 800a686:	f023 0303 	bic.w	r3, r3, #3
 800a68a:	3211      	adds	r2, #17
 800a68c:	42a2      	cmp	r2, r4
 800a68e:	bf88      	it	hi
 800a690:	2300      	movhi	r3, #0
 800a692:	4418      	add	r0, r3
 800a694:	2300      	movs	r3, #0
 800a696:	4288      	cmp	r0, r1
 800a698:	d305      	bcc.n	800a6a6 <__copybits+0x40>
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6a4:	e7eb      	b.n	800a67e <__copybits+0x18>
 800a6a6:	f840 3b04 	str.w	r3, [r0], #4
 800a6aa:	e7f4      	b.n	800a696 <__copybits+0x30>

0800a6ac <__any_on>:
 800a6ac:	f100 0214 	add.w	r2, r0, #20
 800a6b0:	6900      	ldr	r0, [r0, #16]
 800a6b2:	114b      	asrs	r3, r1, #5
 800a6b4:	4298      	cmp	r0, r3
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	db11      	blt.n	800a6de <__any_on+0x32>
 800a6ba:	dd0a      	ble.n	800a6d2 <__any_on+0x26>
 800a6bc:	f011 011f 	ands.w	r1, r1, #31
 800a6c0:	d007      	beq.n	800a6d2 <__any_on+0x26>
 800a6c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6c6:	fa24 f001 	lsr.w	r0, r4, r1
 800a6ca:	fa00 f101 	lsl.w	r1, r0, r1
 800a6ce:	428c      	cmp	r4, r1
 800a6d0:	d10b      	bne.n	800a6ea <__any_on+0x3e>
 800a6d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d803      	bhi.n	800a6e2 <__any_on+0x36>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	4603      	mov	r3, r0
 800a6e0:	e7f7      	b.n	800a6d2 <__any_on+0x26>
 800a6e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6e6:	2900      	cmp	r1, #0
 800a6e8:	d0f5      	beq.n	800a6d6 <__any_on+0x2a>
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	e7f6      	b.n	800a6dc <__any_on+0x30>

0800a6ee <_calloc_r>:
 800a6ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6f0:	fba1 2402 	umull	r2, r4, r1, r2
 800a6f4:	b94c      	cbnz	r4, 800a70a <_calloc_r+0x1c>
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	9201      	str	r2, [sp, #4]
 800a6fa:	f000 f87b 	bl	800a7f4 <_malloc_r>
 800a6fe:	9a01      	ldr	r2, [sp, #4]
 800a700:	4605      	mov	r5, r0
 800a702:	b930      	cbnz	r0, 800a712 <_calloc_r+0x24>
 800a704:	4628      	mov	r0, r5
 800a706:	b003      	add	sp, #12
 800a708:	bd30      	pop	{r4, r5, pc}
 800a70a:	220c      	movs	r2, #12
 800a70c:	6002      	str	r2, [r0, #0]
 800a70e:	2500      	movs	r5, #0
 800a710:	e7f8      	b.n	800a704 <_calloc_r+0x16>
 800a712:	4621      	mov	r1, r4
 800a714:	f7fc faae 	bl	8006c74 <memset>
 800a718:	e7f4      	b.n	800a704 <_calloc_r+0x16>
	...

0800a71c <_free_r>:
 800a71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a71e:	2900      	cmp	r1, #0
 800a720:	d044      	beq.n	800a7ac <_free_r+0x90>
 800a722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a726:	9001      	str	r0, [sp, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f1a1 0404 	sub.w	r4, r1, #4
 800a72e:	bfb8      	it	lt
 800a730:	18e4      	addlt	r4, r4, r3
 800a732:	f000 fe6d 	bl	800b410 <__malloc_lock>
 800a736:	4a1e      	ldr	r2, [pc, #120]	; (800a7b0 <_free_r+0x94>)
 800a738:	9801      	ldr	r0, [sp, #4]
 800a73a:	6813      	ldr	r3, [r2, #0]
 800a73c:	b933      	cbnz	r3, 800a74c <_free_r+0x30>
 800a73e:	6063      	str	r3, [r4, #4]
 800a740:	6014      	str	r4, [r2, #0]
 800a742:	b003      	add	sp, #12
 800a744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a748:	f000 be68 	b.w	800b41c <__malloc_unlock>
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d908      	bls.n	800a762 <_free_r+0x46>
 800a750:	6825      	ldr	r5, [r4, #0]
 800a752:	1961      	adds	r1, r4, r5
 800a754:	428b      	cmp	r3, r1
 800a756:	bf01      	itttt	eq
 800a758:	6819      	ldreq	r1, [r3, #0]
 800a75a:	685b      	ldreq	r3, [r3, #4]
 800a75c:	1949      	addeq	r1, r1, r5
 800a75e:	6021      	streq	r1, [r4, #0]
 800a760:	e7ed      	b.n	800a73e <_free_r+0x22>
 800a762:	461a      	mov	r2, r3
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	b10b      	cbz	r3, 800a76c <_free_r+0x50>
 800a768:	42a3      	cmp	r3, r4
 800a76a:	d9fa      	bls.n	800a762 <_free_r+0x46>
 800a76c:	6811      	ldr	r1, [r2, #0]
 800a76e:	1855      	adds	r5, r2, r1
 800a770:	42a5      	cmp	r5, r4
 800a772:	d10b      	bne.n	800a78c <_free_r+0x70>
 800a774:	6824      	ldr	r4, [r4, #0]
 800a776:	4421      	add	r1, r4
 800a778:	1854      	adds	r4, r2, r1
 800a77a:	42a3      	cmp	r3, r4
 800a77c:	6011      	str	r1, [r2, #0]
 800a77e:	d1e0      	bne.n	800a742 <_free_r+0x26>
 800a780:	681c      	ldr	r4, [r3, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	6053      	str	r3, [r2, #4]
 800a786:	4421      	add	r1, r4
 800a788:	6011      	str	r1, [r2, #0]
 800a78a:	e7da      	b.n	800a742 <_free_r+0x26>
 800a78c:	d902      	bls.n	800a794 <_free_r+0x78>
 800a78e:	230c      	movs	r3, #12
 800a790:	6003      	str	r3, [r0, #0]
 800a792:	e7d6      	b.n	800a742 <_free_r+0x26>
 800a794:	6825      	ldr	r5, [r4, #0]
 800a796:	1961      	adds	r1, r4, r5
 800a798:	428b      	cmp	r3, r1
 800a79a:	bf04      	itt	eq
 800a79c:	6819      	ldreq	r1, [r3, #0]
 800a79e:	685b      	ldreq	r3, [r3, #4]
 800a7a0:	6063      	str	r3, [r4, #4]
 800a7a2:	bf04      	itt	eq
 800a7a4:	1949      	addeq	r1, r1, r5
 800a7a6:	6021      	streq	r1, [r4, #0]
 800a7a8:	6054      	str	r4, [r2, #4]
 800a7aa:	e7ca      	b.n	800a742 <_free_r+0x26>
 800a7ac:	b003      	add	sp, #12
 800a7ae:	bd30      	pop	{r4, r5, pc}
 800a7b0:	20000404 	.word	0x20000404

0800a7b4 <sbrk_aligned>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	4e0e      	ldr	r6, [pc, #56]	; (800a7f0 <sbrk_aligned+0x3c>)
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	6831      	ldr	r1, [r6, #0]
 800a7bc:	4605      	mov	r5, r0
 800a7be:	b911      	cbnz	r1, 800a7c6 <sbrk_aligned+0x12>
 800a7c0:	f000 fb4a 	bl	800ae58 <_sbrk_r>
 800a7c4:	6030      	str	r0, [r6, #0]
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f000 fb45 	bl	800ae58 <_sbrk_r>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	d00a      	beq.n	800a7e8 <sbrk_aligned+0x34>
 800a7d2:	1cc4      	adds	r4, r0, #3
 800a7d4:	f024 0403 	bic.w	r4, r4, #3
 800a7d8:	42a0      	cmp	r0, r4
 800a7da:	d007      	beq.n	800a7ec <sbrk_aligned+0x38>
 800a7dc:	1a21      	subs	r1, r4, r0
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 fb3a 	bl	800ae58 <_sbrk_r>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d101      	bne.n	800a7ec <sbrk_aligned+0x38>
 800a7e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}
 800a7f0:	20000408 	.word	0x20000408

0800a7f4 <_malloc_r>:
 800a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f8:	1ccd      	adds	r5, r1, #3
 800a7fa:	f025 0503 	bic.w	r5, r5, #3
 800a7fe:	3508      	adds	r5, #8
 800a800:	2d0c      	cmp	r5, #12
 800a802:	bf38      	it	cc
 800a804:	250c      	movcc	r5, #12
 800a806:	2d00      	cmp	r5, #0
 800a808:	4607      	mov	r7, r0
 800a80a:	db01      	blt.n	800a810 <_malloc_r+0x1c>
 800a80c:	42a9      	cmp	r1, r5
 800a80e:	d905      	bls.n	800a81c <_malloc_r+0x28>
 800a810:	230c      	movs	r3, #12
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	2600      	movs	r6, #0
 800a816:	4630      	mov	r0, r6
 800a818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81c:	4e2e      	ldr	r6, [pc, #184]	; (800a8d8 <_malloc_r+0xe4>)
 800a81e:	f000 fdf7 	bl	800b410 <__malloc_lock>
 800a822:	6833      	ldr	r3, [r6, #0]
 800a824:	461c      	mov	r4, r3
 800a826:	bb34      	cbnz	r4, 800a876 <_malloc_r+0x82>
 800a828:	4629      	mov	r1, r5
 800a82a:	4638      	mov	r0, r7
 800a82c:	f7ff ffc2 	bl	800a7b4 <sbrk_aligned>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	4604      	mov	r4, r0
 800a834:	d14d      	bne.n	800a8d2 <_malloc_r+0xde>
 800a836:	6834      	ldr	r4, [r6, #0]
 800a838:	4626      	mov	r6, r4
 800a83a:	2e00      	cmp	r6, #0
 800a83c:	d140      	bne.n	800a8c0 <_malloc_r+0xcc>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	4631      	mov	r1, r6
 800a842:	4638      	mov	r0, r7
 800a844:	eb04 0803 	add.w	r8, r4, r3
 800a848:	f000 fb06 	bl	800ae58 <_sbrk_r>
 800a84c:	4580      	cmp	r8, r0
 800a84e:	d13a      	bne.n	800a8c6 <_malloc_r+0xd2>
 800a850:	6821      	ldr	r1, [r4, #0]
 800a852:	3503      	adds	r5, #3
 800a854:	1a6d      	subs	r5, r5, r1
 800a856:	f025 0503 	bic.w	r5, r5, #3
 800a85a:	3508      	adds	r5, #8
 800a85c:	2d0c      	cmp	r5, #12
 800a85e:	bf38      	it	cc
 800a860:	250c      	movcc	r5, #12
 800a862:	4629      	mov	r1, r5
 800a864:	4638      	mov	r0, r7
 800a866:	f7ff ffa5 	bl	800a7b4 <sbrk_aligned>
 800a86a:	3001      	adds	r0, #1
 800a86c:	d02b      	beq.n	800a8c6 <_malloc_r+0xd2>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	442b      	add	r3, r5
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	e00e      	b.n	800a894 <_malloc_r+0xa0>
 800a876:	6822      	ldr	r2, [r4, #0]
 800a878:	1b52      	subs	r2, r2, r5
 800a87a:	d41e      	bmi.n	800a8ba <_malloc_r+0xc6>
 800a87c:	2a0b      	cmp	r2, #11
 800a87e:	d916      	bls.n	800a8ae <_malloc_r+0xba>
 800a880:	1961      	adds	r1, r4, r5
 800a882:	42a3      	cmp	r3, r4
 800a884:	6025      	str	r5, [r4, #0]
 800a886:	bf18      	it	ne
 800a888:	6059      	strne	r1, [r3, #4]
 800a88a:	6863      	ldr	r3, [r4, #4]
 800a88c:	bf08      	it	eq
 800a88e:	6031      	streq	r1, [r6, #0]
 800a890:	5162      	str	r2, [r4, r5]
 800a892:	604b      	str	r3, [r1, #4]
 800a894:	4638      	mov	r0, r7
 800a896:	f104 060b 	add.w	r6, r4, #11
 800a89a:	f000 fdbf 	bl	800b41c <__malloc_unlock>
 800a89e:	f026 0607 	bic.w	r6, r6, #7
 800a8a2:	1d23      	adds	r3, r4, #4
 800a8a4:	1af2      	subs	r2, r6, r3
 800a8a6:	d0b6      	beq.n	800a816 <_malloc_r+0x22>
 800a8a8:	1b9b      	subs	r3, r3, r6
 800a8aa:	50a3      	str	r3, [r4, r2]
 800a8ac:	e7b3      	b.n	800a816 <_malloc_r+0x22>
 800a8ae:	6862      	ldr	r2, [r4, #4]
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	bf0c      	ite	eq
 800a8b4:	6032      	streq	r2, [r6, #0]
 800a8b6:	605a      	strne	r2, [r3, #4]
 800a8b8:	e7ec      	b.n	800a894 <_malloc_r+0xa0>
 800a8ba:	4623      	mov	r3, r4
 800a8bc:	6864      	ldr	r4, [r4, #4]
 800a8be:	e7b2      	b.n	800a826 <_malloc_r+0x32>
 800a8c0:	4634      	mov	r4, r6
 800a8c2:	6876      	ldr	r6, [r6, #4]
 800a8c4:	e7b9      	b.n	800a83a <_malloc_r+0x46>
 800a8c6:	230c      	movs	r3, #12
 800a8c8:	603b      	str	r3, [r7, #0]
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	f000 fda6 	bl	800b41c <__malloc_unlock>
 800a8d0:	e7a1      	b.n	800a816 <_malloc_r+0x22>
 800a8d2:	6025      	str	r5, [r4, #0]
 800a8d4:	e7de      	b.n	800a894 <_malloc_r+0xa0>
 800a8d6:	bf00      	nop
 800a8d8:	20000404 	.word	0x20000404

0800a8dc <__ssputs_r>:
 800a8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e0:	688e      	ldr	r6, [r1, #8]
 800a8e2:	429e      	cmp	r6, r3
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	4690      	mov	r8, r2
 800a8ea:	461f      	mov	r7, r3
 800a8ec:	d838      	bhi.n	800a960 <__ssputs_r+0x84>
 800a8ee:	898a      	ldrh	r2, [r1, #12]
 800a8f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8f4:	d032      	beq.n	800a95c <__ssputs_r+0x80>
 800a8f6:	6825      	ldr	r5, [r4, #0]
 800a8f8:	6909      	ldr	r1, [r1, #16]
 800a8fa:	eba5 0901 	sub.w	r9, r5, r1
 800a8fe:	6965      	ldr	r5, [r4, #20]
 800a900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a908:	3301      	adds	r3, #1
 800a90a:	444b      	add	r3, r9
 800a90c:	106d      	asrs	r5, r5, #1
 800a90e:	429d      	cmp	r5, r3
 800a910:	bf38      	it	cc
 800a912:	461d      	movcc	r5, r3
 800a914:	0553      	lsls	r3, r2, #21
 800a916:	d531      	bpl.n	800a97c <__ssputs_r+0xa0>
 800a918:	4629      	mov	r1, r5
 800a91a:	f7ff ff6b 	bl	800a7f4 <_malloc_r>
 800a91e:	4606      	mov	r6, r0
 800a920:	b950      	cbnz	r0, 800a938 <__ssputs_r+0x5c>
 800a922:	230c      	movs	r3, #12
 800a924:	f8ca 3000 	str.w	r3, [sl]
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92e:	81a3      	strh	r3, [r4, #12]
 800a930:	f04f 30ff 	mov.w	r0, #4294967295
 800a934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a938:	6921      	ldr	r1, [r4, #16]
 800a93a:	464a      	mov	r2, r9
 800a93c:	f7ff fa08 	bl	8009d50 <memcpy>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	6126      	str	r6, [r4, #16]
 800a94e:	6165      	str	r5, [r4, #20]
 800a950:	444e      	add	r6, r9
 800a952:	eba5 0509 	sub.w	r5, r5, r9
 800a956:	6026      	str	r6, [r4, #0]
 800a958:	60a5      	str	r5, [r4, #8]
 800a95a:	463e      	mov	r6, r7
 800a95c:	42be      	cmp	r6, r7
 800a95e:	d900      	bls.n	800a962 <__ssputs_r+0x86>
 800a960:	463e      	mov	r6, r7
 800a962:	6820      	ldr	r0, [r4, #0]
 800a964:	4632      	mov	r2, r6
 800a966:	4641      	mov	r1, r8
 800a968:	f000 fd38 	bl	800b3dc <memmove>
 800a96c:	68a3      	ldr	r3, [r4, #8]
 800a96e:	1b9b      	subs	r3, r3, r6
 800a970:	60a3      	str	r3, [r4, #8]
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	4433      	add	r3, r6
 800a976:	6023      	str	r3, [r4, #0]
 800a978:	2000      	movs	r0, #0
 800a97a:	e7db      	b.n	800a934 <__ssputs_r+0x58>
 800a97c:	462a      	mov	r2, r5
 800a97e:	f000 fd53 	bl	800b428 <_realloc_r>
 800a982:	4606      	mov	r6, r0
 800a984:	2800      	cmp	r0, #0
 800a986:	d1e1      	bne.n	800a94c <__ssputs_r+0x70>
 800a988:	6921      	ldr	r1, [r4, #16]
 800a98a:	4650      	mov	r0, sl
 800a98c:	f7ff fec6 	bl	800a71c <_free_r>
 800a990:	e7c7      	b.n	800a922 <__ssputs_r+0x46>
	...

0800a994 <_svfiprintf_r>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	4698      	mov	r8, r3
 800a99a:	898b      	ldrh	r3, [r1, #12]
 800a99c:	061b      	lsls	r3, r3, #24
 800a99e:	b09d      	sub	sp, #116	; 0x74
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	d50e      	bpl.n	800a9c6 <_svfiprintf_r+0x32>
 800a9a8:	690b      	ldr	r3, [r1, #16]
 800a9aa:	b963      	cbnz	r3, 800a9c6 <_svfiprintf_r+0x32>
 800a9ac:	2140      	movs	r1, #64	; 0x40
 800a9ae:	f7ff ff21 	bl	800a7f4 <_malloc_r>
 800a9b2:	6028      	str	r0, [r5, #0]
 800a9b4:	6128      	str	r0, [r5, #16]
 800a9b6:	b920      	cbnz	r0, 800a9c2 <_svfiprintf_r+0x2e>
 800a9b8:	230c      	movs	r3, #12
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	e0d1      	b.n	800ab66 <_svfiprintf_r+0x1d2>
 800a9c2:	2340      	movs	r3, #64	; 0x40
 800a9c4:	616b      	str	r3, [r5, #20]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ca:	2320      	movs	r3, #32
 800a9cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9d4:	2330      	movs	r3, #48	; 0x30
 800a9d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab80 <_svfiprintf_r+0x1ec>
 800a9da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9de:	f04f 0901 	mov.w	r9, #1
 800a9e2:	4623      	mov	r3, r4
 800a9e4:	469a      	mov	sl, r3
 800a9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9ea:	b10a      	cbz	r2, 800a9f0 <_svfiprintf_r+0x5c>
 800a9ec:	2a25      	cmp	r2, #37	; 0x25
 800a9ee:	d1f9      	bne.n	800a9e4 <_svfiprintf_r+0x50>
 800a9f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a9f4:	d00b      	beq.n	800aa0e <_svfiprintf_r+0x7a>
 800a9f6:	465b      	mov	r3, fp
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	f7ff ff6d 	bl	800a8dc <__ssputs_r>
 800aa02:	3001      	adds	r0, #1
 800aa04:	f000 80aa 	beq.w	800ab5c <_svfiprintf_r+0x1c8>
 800aa08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa0a:	445a      	add	r2, fp
 800aa0c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa0e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 80a2 	beq.w	800ab5c <_svfiprintf_r+0x1c8>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa22:	f10a 0a01 	add.w	sl, sl, #1
 800aa26:	9304      	str	r3, [sp, #16]
 800aa28:	9307      	str	r3, [sp, #28]
 800aa2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa2e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa30:	4654      	mov	r4, sl
 800aa32:	2205      	movs	r2, #5
 800aa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa38:	4851      	ldr	r0, [pc, #324]	; (800ab80 <_svfiprintf_r+0x1ec>)
 800aa3a:	f7f5 fbd1 	bl	80001e0 <memchr>
 800aa3e:	9a04      	ldr	r2, [sp, #16]
 800aa40:	b9d8      	cbnz	r0, 800aa7a <_svfiprintf_r+0xe6>
 800aa42:	06d0      	lsls	r0, r2, #27
 800aa44:	bf44      	itt	mi
 800aa46:	2320      	movmi	r3, #32
 800aa48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa4c:	0711      	lsls	r1, r2, #28
 800aa4e:	bf44      	itt	mi
 800aa50:	232b      	movmi	r3, #43	; 0x2b
 800aa52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa56:	f89a 3000 	ldrb.w	r3, [sl]
 800aa5a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa5c:	d015      	beq.n	800aa8a <_svfiprintf_r+0xf6>
 800aa5e:	9a07      	ldr	r2, [sp, #28]
 800aa60:	4654      	mov	r4, sl
 800aa62:	2000      	movs	r0, #0
 800aa64:	f04f 0c0a 	mov.w	ip, #10
 800aa68:	4621      	mov	r1, r4
 800aa6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa6e:	3b30      	subs	r3, #48	; 0x30
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	d94e      	bls.n	800ab12 <_svfiprintf_r+0x17e>
 800aa74:	b1b0      	cbz	r0, 800aaa4 <_svfiprintf_r+0x110>
 800aa76:	9207      	str	r2, [sp, #28]
 800aa78:	e014      	b.n	800aaa4 <_svfiprintf_r+0x110>
 800aa7a:	eba0 0308 	sub.w	r3, r0, r8
 800aa7e:	fa09 f303 	lsl.w	r3, r9, r3
 800aa82:	4313      	orrs	r3, r2
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	46a2      	mov	sl, r4
 800aa88:	e7d2      	b.n	800aa30 <_svfiprintf_r+0x9c>
 800aa8a:	9b03      	ldr	r3, [sp, #12]
 800aa8c:	1d19      	adds	r1, r3, #4
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	9103      	str	r1, [sp, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bfbb      	ittet	lt
 800aa96:	425b      	neglt	r3, r3
 800aa98:	f042 0202 	orrlt.w	r2, r2, #2
 800aa9c:	9307      	strge	r3, [sp, #28]
 800aa9e:	9307      	strlt	r3, [sp, #28]
 800aaa0:	bfb8      	it	lt
 800aaa2:	9204      	strlt	r2, [sp, #16]
 800aaa4:	7823      	ldrb	r3, [r4, #0]
 800aaa6:	2b2e      	cmp	r3, #46	; 0x2e
 800aaa8:	d10c      	bne.n	800aac4 <_svfiprintf_r+0x130>
 800aaaa:	7863      	ldrb	r3, [r4, #1]
 800aaac:	2b2a      	cmp	r3, #42	; 0x2a
 800aaae:	d135      	bne.n	800ab1c <_svfiprintf_r+0x188>
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	1d1a      	adds	r2, r3, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	9203      	str	r2, [sp, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	bfb8      	it	lt
 800aabc:	f04f 33ff 	movlt.w	r3, #4294967295
 800aac0:	3402      	adds	r4, #2
 800aac2:	9305      	str	r3, [sp, #20]
 800aac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab90 <_svfiprintf_r+0x1fc>
 800aac8:	7821      	ldrb	r1, [r4, #0]
 800aaca:	2203      	movs	r2, #3
 800aacc:	4650      	mov	r0, sl
 800aace:	f7f5 fb87 	bl	80001e0 <memchr>
 800aad2:	b140      	cbz	r0, 800aae6 <_svfiprintf_r+0x152>
 800aad4:	2340      	movs	r3, #64	; 0x40
 800aad6:	eba0 000a 	sub.w	r0, r0, sl
 800aada:	fa03 f000 	lsl.w	r0, r3, r0
 800aade:	9b04      	ldr	r3, [sp, #16]
 800aae0:	4303      	orrs	r3, r0
 800aae2:	3401      	adds	r4, #1
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaea:	4826      	ldr	r0, [pc, #152]	; (800ab84 <_svfiprintf_r+0x1f0>)
 800aaec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaf0:	2206      	movs	r2, #6
 800aaf2:	f7f5 fb75 	bl	80001e0 <memchr>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d038      	beq.n	800ab6c <_svfiprintf_r+0x1d8>
 800aafa:	4b23      	ldr	r3, [pc, #140]	; (800ab88 <_svfiprintf_r+0x1f4>)
 800aafc:	bb1b      	cbnz	r3, 800ab46 <_svfiprintf_r+0x1b2>
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	3307      	adds	r3, #7
 800ab02:	f023 0307 	bic.w	r3, r3, #7
 800ab06:	3308      	adds	r3, #8
 800ab08:	9303      	str	r3, [sp, #12]
 800ab0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab0c:	4433      	add	r3, r6
 800ab0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab10:	e767      	b.n	800a9e2 <_svfiprintf_r+0x4e>
 800ab12:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab16:	460c      	mov	r4, r1
 800ab18:	2001      	movs	r0, #1
 800ab1a:	e7a5      	b.n	800aa68 <_svfiprintf_r+0xd4>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	3401      	adds	r4, #1
 800ab20:	9305      	str	r3, [sp, #20]
 800ab22:	4619      	mov	r1, r3
 800ab24:	f04f 0c0a 	mov.w	ip, #10
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab2e:	3a30      	subs	r2, #48	; 0x30
 800ab30:	2a09      	cmp	r2, #9
 800ab32:	d903      	bls.n	800ab3c <_svfiprintf_r+0x1a8>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d0c5      	beq.n	800aac4 <_svfiprintf_r+0x130>
 800ab38:	9105      	str	r1, [sp, #20]
 800ab3a:	e7c3      	b.n	800aac4 <_svfiprintf_r+0x130>
 800ab3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab40:	4604      	mov	r4, r0
 800ab42:	2301      	movs	r3, #1
 800ab44:	e7f0      	b.n	800ab28 <_svfiprintf_r+0x194>
 800ab46:	ab03      	add	r3, sp, #12
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	462a      	mov	r2, r5
 800ab4c:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <_svfiprintf_r+0x1f8>)
 800ab4e:	a904      	add	r1, sp, #16
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7fc f937 	bl	8006dc4 <_printf_float>
 800ab56:	1c42      	adds	r2, r0, #1
 800ab58:	4606      	mov	r6, r0
 800ab5a:	d1d6      	bne.n	800ab0a <_svfiprintf_r+0x176>
 800ab5c:	89ab      	ldrh	r3, [r5, #12]
 800ab5e:	065b      	lsls	r3, r3, #25
 800ab60:	f53f af2c 	bmi.w	800a9bc <_svfiprintf_r+0x28>
 800ab64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab66:	b01d      	add	sp, #116	; 0x74
 800ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6c:	ab03      	add	r3, sp, #12
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	462a      	mov	r2, r5
 800ab72:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <_svfiprintf_r+0x1f8>)
 800ab74:	a904      	add	r1, sp, #16
 800ab76:	4638      	mov	r0, r7
 800ab78:	f7fc fbc8 	bl	800730c <_printf_i>
 800ab7c:	e7eb      	b.n	800ab56 <_svfiprintf_r+0x1c2>
 800ab7e:	bf00      	nop
 800ab80:	0800ba7c 	.word	0x0800ba7c
 800ab84:	0800ba86 	.word	0x0800ba86
 800ab88:	08006dc5 	.word	0x08006dc5
 800ab8c:	0800a8dd 	.word	0x0800a8dd
 800ab90:	0800ba82 	.word	0x0800ba82

0800ab94 <__sfputc_r>:
 800ab94:	6893      	ldr	r3, [r2, #8]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	b410      	push	{r4}
 800ab9c:	6093      	str	r3, [r2, #8]
 800ab9e:	da08      	bge.n	800abb2 <__sfputc_r+0x1e>
 800aba0:	6994      	ldr	r4, [r2, #24]
 800aba2:	42a3      	cmp	r3, r4
 800aba4:	db01      	blt.n	800abaa <__sfputc_r+0x16>
 800aba6:	290a      	cmp	r1, #10
 800aba8:	d103      	bne.n	800abb2 <__sfputc_r+0x1e>
 800abaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abae:	f000 b9bb 	b.w	800af28 <__swbuf_r>
 800abb2:	6813      	ldr	r3, [r2, #0]
 800abb4:	1c58      	adds	r0, r3, #1
 800abb6:	6010      	str	r0, [r2, #0]
 800abb8:	7019      	strb	r1, [r3, #0]
 800abba:	4608      	mov	r0, r1
 800abbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <__sfputs_r>:
 800abc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	4614      	mov	r4, r2
 800abca:	18d5      	adds	r5, r2, r3
 800abcc:	42ac      	cmp	r4, r5
 800abce:	d101      	bne.n	800abd4 <__sfputs_r+0x12>
 800abd0:	2000      	movs	r0, #0
 800abd2:	e007      	b.n	800abe4 <__sfputs_r+0x22>
 800abd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd8:	463a      	mov	r2, r7
 800abda:	4630      	mov	r0, r6
 800abdc:	f7ff ffda 	bl	800ab94 <__sfputc_r>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d1f3      	bne.n	800abcc <__sfputs_r+0xa>
 800abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abe8 <_vfiprintf_r>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	460d      	mov	r5, r1
 800abee:	b09d      	sub	sp, #116	; 0x74
 800abf0:	4614      	mov	r4, r2
 800abf2:	4698      	mov	r8, r3
 800abf4:	4606      	mov	r6, r0
 800abf6:	b118      	cbz	r0, 800ac00 <_vfiprintf_r+0x18>
 800abf8:	6983      	ldr	r3, [r0, #24]
 800abfa:	b90b      	cbnz	r3, 800ac00 <_vfiprintf_r+0x18>
 800abfc:	f7fe fc7a 	bl	80094f4 <__sinit>
 800ac00:	4b89      	ldr	r3, [pc, #548]	; (800ae28 <_vfiprintf_r+0x240>)
 800ac02:	429d      	cmp	r5, r3
 800ac04:	d11b      	bne.n	800ac3e <_vfiprintf_r+0x56>
 800ac06:	6875      	ldr	r5, [r6, #4]
 800ac08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac0a:	07d9      	lsls	r1, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_vfiprintf_r+0x32>
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	059a      	lsls	r2, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_vfiprintf_r+0x32>
 800ac14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac16:	f7ff f87e 	bl	8009d16 <__retarget_lock_acquire_recursive>
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	071b      	lsls	r3, r3, #28
 800ac1e:	d501      	bpl.n	800ac24 <_vfiprintf_r+0x3c>
 800ac20:	692b      	ldr	r3, [r5, #16]
 800ac22:	b9eb      	cbnz	r3, 800ac60 <_vfiprintf_r+0x78>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 f9f0 	bl	800b00c <__swsetup_r>
 800ac2c:	b1c0      	cbz	r0, 800ac60 <_vfiprintf_r+0x78>
 800ac2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac30:	07dc      	lsls	r4, r3, #31
 800ac32:	d50e      	bpl.n	800ac52 <_vfiprintf_r+0x6a>
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	b01d      	add	sp, #116	; 0x74
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3e:	4b7b      	ldr	r3, [pc, #492]	; (800ae2c <_vfiprintf_r+0x244>)
 800ac40:	429d      	cmp	r5, r3
 800ac42:	d101      	bne.n	800ac48 <_vfiprintf_r+0x60>
 800ac44:	68b5      	ldr	r5, [r6, #8]
 800ac46:	e7df      	b.n	800ac08 <_vfiprintf_r+0x20>
 800ac48:	4b79      	ldr	r3, [pc, #484]	; (800ae30 <_vfiprintf_r+0x248>)
 800ac4a:	429d      	cmp	r5, r3
 800ac4c:	bf08      	it	eq
 800ac4e:	68f5      	ldreq	r5, [r6, #12]
 800ac50:	e7da      	b.n	800ac08 <_vfiprintf_r+0x20>
 800ac52:	89ab      	ldrh	r3, [r5, #12]
 800ac54:	0598      	lsls	r0, r3, #22
 800ac56:	d4ed      	bmi.n	800ac34 <_vfiprintf_r+0x4c>
 800ac58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac5a:	f7ff f85d 	bl	8009d18 <__retarget_lock_release_recursive>
 800ac5e:	e7e9      	b.n	800ac34 <_vfiprintf_r+0x4c>
 800ac60:	2300      	movs	r3, #0
 800ac62:	9309      	str	r3, [sp, #36]	; 0x24
 800ac64:	2320      	movs	r3, #32
 800ac66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac6e:	2330      	movs	r3, #48	; 0x30
 800ac70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae34 <_vfiprintf_r+0x24c>
 800ac74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac78:	f04f 0901 	mov.w	r9, #1
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	469a      	mov	sl, r3
 800ac80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac84:	b10a      	cbz	r2, 800ac8a <_vfiprintf_r+0xa2>
 800ac86:	2a25      	cmp	r2, #37	; 0x25
 800ac88:	d1f9      	bne.n	800ac7e <_vfiprintf_r+0x96>
 800ac8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac8e:	d00b      	beq.n	800aca8 <_vfiprintf_r+0xc0>
 800ac90:	465b      	mov	r3, fp
 800ac92:	4622      	mov	r2, r4
 800ac94:	4629      	mov	r1, r5
 800ac96:	4630      	mov	r0, r6
 800ac98:	f7ff ff93 	bl	800abc2 <__sfputs_r>
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	f000 80aa 	beq.w	800adf6 <_vfiprintf_r+0x20e>
 800aca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aca4:	445a      	add	r2, fp
 800aca6:	9209      	str	r2, [sp, #36]	; 0x24
 800aca8:	f89a 3000 	ldrb.w	r3, [sl]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 80a2 	beq.w	800adf6 <_vfiprintf_r+0x20e>
 800acb2:	2300      	movs	r3, #0
 800acb4:	f04f 32ff 	mov.w	r2, #4294967295
 800acb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acbc:	f10a 0a01 	add.w	sl, sl, #1
 800acc0:	9304      	str	r3, [sp, #16]
 800acc2:	9307      	str	r3, [sp, #28]
 800acc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acc8:	931a      	str	r3, [sp, #104]	; 0x68
 800acca:	4654      	mov	r4, sl
 800accc:	2205      	movs	r2, #5
 800acce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd2:	4858      	ldr	r0, [pc, #352]	; (800ae34 <_vfiprintf_r+0x24c>)
 800acd4:	f7f5 fa84 	bl	80001e0 <memchr>
 800acd8:	9a04      	ldr	r2, [sp, #16]
 800acda:	b9d8      	cbnz	r0, 800ad14 <_vfiprintf_r+0x12c>
 800acdc:	06d1      	lsls	r1, r2, #27
 800acde:	bf44      	itt	mi
 800ace0:	2320      	movmi	r3, #32
 800ace2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ace6:	0713      	lsls	r3, r2, #28
 800ace8:	bf44      	itt	mi
 800acea:	232b      	movmi	r3, #43	; 0x2b
 800acec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acf0:	f89a 3000 	ldrb.w	r3, [sl]
 800acf4:	2b2a      	cmp	r3, #42	; 0x2a
 800acf6:	d015      	beq.n	800ad24 <_vfiprintf_r+0x13c>
 800acf8:	9a07      	ldr	r2, [sp, #28]
 800acfa:	4654      	mov	r4, sl
 800acfc:	2000      	movs	r0, #0
 800acfe:	f04f 0c0a 	mov.w	ip, #10
 800ad02:	4621      	mov	r1, r4
 800ad04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad08:	3b30      	subs	r3, #48	; 0x30
 800ad0a:	2b09      	cmp	r3, #9
 800ad0c:	d94e      	bls.n	800adac <_vfiprintf_r+0x1c4>
 800ad0e:	b1b0      	cbz	r0, 800ad3e <_vfiprintf_r+0x156>
 800ad10:	9207      	str	r2, [sp, #28]
 800ad12:	e014      	b.n	800ad3e <_vfiprintf_r+0x156>
 800ad14:	eba0 0308 	sub.w	r3, r0, r8
 800ad18:	fa09 f303 	lsl.w	r3, r9, r3
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	46a2      	mov	sl, r4
 800ad22:	e7d2      	b.n	800acca <_vfiprintf_r+0xe2>
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	1d19      	adds	r1, r3, #4
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	9103      	str	r1, [sp, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	bfbb      	ittet	lt
 800ad30:	425b      	neglt	r3, r3
 800ad32:	f042 0202 	orrlt.w	r2, r2, #2
 800ad36:	9307      	strge	r3, [sp, #28]
 800ad38:	9307      	strlt	r3, [sp, #28]
 800ad3a:	bfb8      	it	lt
 800ad3c:	9204      	strlt	r2, [sp, #16]
 800ad3e:	7823      	ldrb	r3, [r4, #0]
 800ad40:	2b2e      	cmp	r3, #46	; 0x2e
 800ad42:	d10c      	bne.n	800ad5e <_vfiprintf_r+0x176>
 800ad44:	7863      	ldrb	r3, [r4, #1]
 800ad46:	2b2a      	cmp	r3, #42	; 0x2a
 800ad48:	d135      	bne.n	800adb6 <_vfiprintf_r+0x1ce>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	1d1a      	adds	r2, r3, #4
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	9203      	str	r2, [sp, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	bfb8      	it	lt
 800ad56:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad5a:	3402      	adds	r4, #2
 800ad5c:	9305      	str	r3, [sp, #20]
 800ad5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae44 <_vfiprintf_r+0x25c>
 800ad62:	7821      	ldrb	r1, [r4, #0]
 800ad64:	2203      	movs	r2, #3
 800ad66:	4650      	mov	r0, sl
 800ad68:	f7f5 fa3a 	bl	80001e0 <memchr>
 800ad6c:	b140      	cbz	r0, 800ad80 <_vfiprintf_r+0x198>
 800ad6e:	2340      	movs	r3, #64	; 0x40
 800ad70:	eba0 000a 	sub.w	r0, r0, sl
 800ad74:	fa03 f000 	lsl.w	r0, r3, r0
 800ad78:	9b04      	ldr	r3, [sp, #16]
 800ad7a:	4303      	orrs	r3, r0
 800ad7c:	3401      	adds	r4, #1
 800ad7e:	9304      	str	r3, [sp, #16]
 800ad80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad84:	482c      	ldr	r0, [pc, #176]	; (800ae38 <_vfiprintf_r+0x250>)
 800ad86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad8a:	2206      	movs	r2, #6
 800ad8c:	f7f5 fa28 	bl	80001e0 <memchr>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d03f      	beq.n	800ae14 <_vfiprintf_r+0x22c>
 800ad94:	4b29      	ldr	r3, [pc, #164]	; (800ae3c <_vfiprintf_r+0x254>)
 800ad96:	bb1b      	cbnz	r3, 800ade0 <_vfiprintf_r+0x1f8>
 800ad98:	9b03      	ldr	r3, [sp, #12]
 800ad9a:	3307      	adds	r3, #7
 800ad9c:	f023 0307 	bic.w	r3, r3, #7
 800ada0:	3308      	adds	r3, #8
 800ada2:	9303      	str	r3, [sp, #12]
 800ada4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada6:	443b      	add	r3, r7
 800ada8:	9309      	str	r3, [sp, #36]	; 0x24
 800adaa:	e767      	b.n	800ac7c <_vfiprintf_r+0x94>
 800adac:	fb0c 3202 	mla	r2, ip, r2, r3
 800adb0:	460c      	mov	r4, r1
 800adb2:	2001      	movs	r0, #1
 800adb4:	e7a5      	b.n	800ad02 <_vfiprintf_r+0x11a>
 800adb6:	2300      	movs	r3, #0
 800adb8:	3401      	adds	r4, #1
 800adba:	9305      	str	r3, [sp, #20]
 800adbc:	4619      	mov	r1, r3
 800adbe:	f04f 0c0a 	mov.w	ip, #10
 800adc2:	4620      	mov	r0, r4
 800adc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adc8:	3a30      	subs	r2, #48	; 0x30
 800adca:	2a09      	cmp	r2, #9
 800adcc:	d903      	bls.n	800add6 <_vfiprintf_r+0x1ee>
 800adce:	2b00      	cmp	r3, #0
 800add0:	d0c5      	beq.n	800ad5e <_vfiprintf_r+0x176>
 800add2:	9105      	str	r1, [sp, #20]
 800add4:	e7c3      	b.n	800ad5e <_vfiprintf_r+0x176>
 800add6:	fb0c 2101 	mla	r1, ip, r1, r2
 800adda:	4604      	mov	r4, r0
 800addc:	2301      	movs	r3, #1
 800adde:	e7f0      	b.n	800adc2 <_vfiprintf_r+0x1da>
 800ade0:	ab03      	add	r3, sp, #12
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	462a      	mov	r2, r5
 800ade6:	4b16      	ldr	r3, [pc, #88]	; (800ae40 <_vfiprintf_r+0x258>)
 800ade8:	a904      	add	r1, sp, #16
 800adea:	4630      	mov	r0, r6
 800adec:	f7fb ffea 	bl	8006dc4 <_printf_float>
 800adf0:	4607      	mov	r7, r0
 800adf2:	1c78      	adds	r0, r7, #1
 800adf4:	d1d6      	bne.n	800ada4 <_vfiprintf_r+0x1bc>
 800adf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adf8:	07d9      	lsls	r1, r3, #31
 800adfa:	d405      	bmi.n	800ae08 <_vfiprintf_r+0x220>
 800adfc:	89ab      	ldrh	r3, [r5, #12]
 800adfe:	059a      	lsls	r2, r3, #22
 800ae00:	d402      	bmi.n	800ae08 <_vfiprintf_r+0x220>
 800ae02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae04:	f7fe ff88 	bl	8009d18 <__retarget_lock_release_recursive>
 800ae08:	89ab      	ldrh	r3, [r5, #12]
 800ae0a:	065b      	lsls	r3, r3, #25
 800ae0c:	f53f af12 	bmi.w	800ac34 <_vfiprintf_r+0x4c>
 800ae10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae12:	e711      	b.n	800ac38 <_vfiprintf_r+0x50>
 800ae14:	ab03      	add	r3, sp, #12
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	462a      	mov	r2, r5
 800ae1a:	4b09      	ldr	r3, [pc, #36]	; (800ae40 <_vfiprintf_r+0x258>)
 800ae1c:	a904      	add	r1, sp, #16
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7fc fa74 	bl	800730c <_printf_i>
 800ae24:	e7e4      	b.n	800adf0 <_vfiprintf_r+0x208>
 800ae26:	bf00      	nop
 800ae28:	0800b864 	.word	0x0800b864
 800ae2c:	0800b884 	.word	0x0800b884
 800ae30:	0800b844 	.word	0x0800b844
 800ae34:	0800ba7c 	.word	0x0800ba7c
 800ae38:	0800ba86 	.word	0x0800ba86
 800ae3c:	08006dc5 	.word	0x08006dc5
 800ae40:	0800abc3 	.word	0x0800abc3
 800ae44:	0800ba82 	.word	0x0800ba82

0800ae48 <nan>:
 800ae48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae50 <nan+0x8>
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	00000000 	.word	0x00000000
 800ae54:	7ff80000 	.word	0x7ff80000

0800ae58 <_sbrk_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	; (800ae74 <_sbrk_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f6 fed8 	bl	8001c18 <_sbrk>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_sbrk_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_sbrk_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	2000040c 	.word	0x2000040c

0800ae78 <__sread>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae80:	f000 fb02 	bl	800b488 <_read_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	bfab      	itete	ge
 800ae88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae8c:	181b      	addge	r3, r3, r0
 800ae8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae92:	bfac      	ite	ge
 800ae94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae96:	81a3      	strhlt	r3, [r4, #12]
 800ae98:	bd10      	pop	{r4, pc}

0800ae9a <__swrite>:
 800ae9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9e:	461f      	mov	r7, r3
 800aea0:	898b      	ldrh	r3, [r1, #12]
 800aea2:	05db      	lsls	r3, r3, #23
 800aea4:	4605      	mov	r5, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	4616      	mov	r6, r2
 800aeaa:	d505      	bpl.n	800aeb8 <__swrite+0x1e>
 800aeac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f000 fa1a 	bl	800b2ec <_lseek_r>
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aec2:	81a3      	strh	r3, [r4, #12]
 800aec4:	4632      	mov	r2, r6
 800aec6:	463b      	mov	r3, r7
 800aec8:	4628      	mov	r0, r5
 800aeca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aece:	f000 b88b 	b.w	800afe8 <_write_r>

0800aed2 <__sseek>:
 800aed2:	b510      	push	{r4, lr}
 800aed4:	460c      	mov	r4, r1
 800aed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeda:	f000 fa07 	bl	800b2ec <_lseek_r>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	bf15      	itete	ne
 800aee4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aeea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aeee:	81a3      	strheq	r3, [r4, #12]
 800aef0:	bf18      	it	ne
 800aef2:	81a3      	strhne	r3, [r4, #12]
 800aef4:	bd10      	pop	{r4, pc}

0800aef6 <__sclose>:
 800aef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefa:	f000 b913 	b.w	800b124 <_close_r>

0800aefe <strncmp>:
 800aefe:	b510      	push	{r4, lr}
 800af00:	b17a      	cbz	r2, 800af22 <strncmp+0x24>
 800af02:	4603      	mov	r3, r0
 800af04:	3901      	subs	r1, #1
 800af06:	1884      	adds	r4, r0, r2
 800af08:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af10:	4290      	cmp	r0, r2
 800af12:	d101      	bne.n	800af18 <strncmp+0x1a>
 800af14:	42a3      	cmp	r3, r4
 800af16:	d101      	bne.n	800af1c <strncmp+0x1e>
 800af18:	1a80      	subs	r0, r0, r2
 800af1a:	bd10      	pop	{r4, pc}
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d1f3      	bne.n	800af08 <strncmp+0xa>
 800af20:	e7fa      	b.n	800af18 <strncmp+0x1a>
 800af22:	4610      	mov	r0, r2
 800af24:	e7f9      	b.n	800af1a <strncmp+0x1c>
	...

0800af28 <__swbuf_r>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	460e      	mov	r6, r1
 800af2c:	4614      	mov	r4, r2
 800af2e:	4605      	mov	r5, r0
 800af30:	b118      	cbz	r0, 800af3a <__swbuf_r+0x12>
 800af32:	6983      	ldr	r3, [r0, #24]
 800af34:	b90b      	cbnz	r3, 800af3a <__swbuf_r+0x12>
 800af36:	f7fe fadd 	bl	80094f4 <__sinit>
 800af3a:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <__swbuf_r+0x98>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	d12b      	bne.n	800af98 <__swbuf_r+0x70>
 800af40:	686c      	ldr	r4, [r5, #4]
 800af42:	69a3      	ldr	r3, [r4, #24]
 800af44:	60a3      	str	r3, [r4, #8]
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	071a      	lsls	r2, r3, #28
 800af4a:	d52f      	bpl.n	800afac <__swbuf_r+0x84>
 800af4c:	6923      	ldr	r3, [r4, #16]
 800af4e:	b36b      	cbz	r3, 800afac <__swbuf_r+0x84>
 800af50:	6923      	ldr	r3, [r4, #16]
 800af52:	6820      	ldr	r0, [r4, #0]
 800af54:	1ac0      	subs	r0, r0, r3
 800af56:	6963      	ldr	r3, [r4, #20]
 800af58:	b2f6      	uxtb	r6, r6
 800af5a:	4283      	cmp	r3, r0
 800af5c:	4637      	mov	r7, r6
 800af5e:	dc04      	bgt.n	800af6a <__swbuf_r+0x42>
 800af60:	4621      	mov	r1, r4
 800af62:	4628      	mov	r0, r5
 800af64:	f000 f974 	bl	800b250 <_fflush_r>
 800af68:	bb30      	cbnz	r0, 800afb8 <__swbuf_r+0x90>
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	60a3      	str	r3, [r4, #8]
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	6022      	str	r2, [r4, #0]
 800af76:	701e      	strb	r6, [r3, #0]
 800af78:	6963      	ldr	r3, [r4, #20]
 800af7a:	3001      	adds	r0, #1
 800af7c:	4283      	cmp	r3, r0
 800af7e:	d004      	beq.n	800af8a <__swbuf_r+0x62>
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	07db      	lsls	r3, r3, #31
 800af84:	d506      	bpl.n	800af94 <__swbuf_r+0x6c>
 800af86:	2e0a      	cmp	r6, #10
 800af88:	d104      	bne.n	800af94 <__swbuf_r+0x6c>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4628      	mov	r0, r5
 800af8e:	f000 f95f 	bl	800b250 <_fflush_r>
 800af92:	b988      	cbnz	r0, 800afb8 <__swbuf_r+0x90>
 800af94:	4638      	mov	r0, r7
 800af96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af98:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <__swbuf_r+0x9c>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d101      	bne.n	800afa2 <__swbuf_r+0x7a>
 800af9e:	68ac      	ldr	r4, [r5, #8]
 800afa0:	e7cf      	b.n	800af42 <__swbuf_r+0x1a>
 800afa2:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <__swbuf_r+0xa0>)
 800afa4:	429c      	cmp	r4, r3
 800afa6:	bf08      	it	eq
 800afa8:	68ec      	ldreq	r4, [r5, #12]
 800afaa:	e7ca      	b.n	800af42 <__swbuf_r+0x1a>
 800afac:	4621      	mov	r1, r4
 800afae:	4628      	mov	r0, r5
 800afb0:	f000 f82c 	bl	800b00c <__swsetup_r>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d0cb      	beq.n	800af50 <__swbuf_r+0x28>
 800afb8:	f04f 37ff 	mov.w	r7, #4294967295
 800afbc:	e7ea      	b.n	800af94 <__swbuf_r+0x6c>
 800afbe:	bf00      	nop
 800afc0:	0800b864 	.word	0x0800b864
 800afc4:	0800b884 	.word	0x0800b884
 800afc8:	0800b844 	.word	0x0800b844

0800afcc <__ascii_wctomb>:
 800afcc:	b149      	cbz	r1, 800afe2 <__ascii_wctomb+0x16>
 800afce:	2aff      	cmp	r2, #255	; 0xff
 800afd0:	bf85      	ittet	hi
 800afd2:	238a      	movhi	r3, #138	; 0x8a
 800afd4:	6003      	strhi	r3, [r0, #0]
 800afd6:	700a      	strbls	r2, [r1, #0]
 800afd8:	f04f 30ff 	movhi.w	r0, #4294967295
 800afdc:	bf98      	it	ls
 800afde:	2001      	movls	r0, #1
 800afe0:	4770      	bx	lr
 800afe2:	4608      	mov	r0, r1
 800afe4:	4770      	bx	lr
	...

0800afe8 <_write_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_write_r+0x20>)
 800afec:	4604      	mov	r4, r0
 800afee:	4608      	mov	r0, r1
 800aff0:	4611      	mov	r1, r2
 800aff2:	2200      	movs	r2, #0
 800aff4:	602a      	str	r2, [r5, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f7f5 fffe 	bl	8000ff8 <_write>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_write_r+0x1e>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_write_r+0x1e>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	2000040c 	.word	0x2000040c

0800b00c <__swsetup_r>:
 800b00c:	4b32      	ldr	r3, [pc, #200]	; (800b0d8 <__swsetup_r+0xcc>)
 800b00e:	b570      	push	{r4, r5, r6, lr}
 800b010:	681d      	ldr	r5, [r3, #0]
 800b012:	4606      	mov	r6, r0
 800b014:	460c      	mov	r4, r1
 800b016:	b125      	cbz	r5, 800b022 <__swsetup_r+0x16>
 800b018:	69ab      	ldr	r3, [r5, #24]
 800b01a:	b913      	cbnz	r3, 800b022 <__swsetup_r+0x16>
 800b01c:	4628      	mov	r0, r5
 800b01e:	f7fe fa69 	bl	80094f4 <__sinit>
 800b022:	4b2e      	ldr	r3, [pc, #184]	; (800b0dc <__swsetup_r+0xd0>)
 800b024:	429c      	cmp	r4, r3
 800b026:	d10f      	bne.n	800b048 <__swsetup_r+0x3c>
 800b028:	686c      	ldr	r4, [r5, #4]
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b030:	0719      	lsls	r1, r3, #28
 800b032:	d42c      	bmi.n	800b08e <__swsetup_r+0x82>
 800b034:	06dd      	lsls	r5, r3, #27
 800b036:	d411      	bmi.n	800b05c <__swsetup_r+0x50>
 800b038:	2309      	movs	r3, #9
 800b03a:	6033      	str	r3, [r6, #0]
 800b03c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b040:	81a3      	strh	r3, [r4, #12]
 800b042:	f04f 30ff 	mov.w	r0, #4294967295
 800b046:	e03e      	b.n	800b0c6 <__swsetup_r+0xba>
 800b048:	4b25      	ldr	r3, [pc, #148]	; (800b0e0 <__swsetup_r+0xd4>)
 800b04a:	429c      	cmp	r4, r3
 800b04c:	d101      	bne.n	800b052 <__swsetup_r+0x46>
 800b04e:	68ac      	ldr	r4, [r5, #8]
 800b050:	e7eb      	b.n	800b02a <__swsetup_r+0x1e>
 800b052:	4b24      	ldr	r3, [pc, #144]	; (800b0e4 <__swsetup_r+0xd8>)
 800b054:	429c      	cmp	r4, r3
 800b056:	bf08      	it	eq
 800b058:	68ec      	ldreq	r4, [r5, #12]
 800b05a:	e7e6      	b.n	800b02a <__swsetup_r+0x1e>
 800b05c:	0758      	lsls	r0, r3, #29
 800b05e:	d512      	bpl.n	800b086 <__swsetup_r+0x7a>
 800b060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b062:	b141      	cbz	r1, 800b076 <__swsetup_r+0x6a>
 800b064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b068:	4299      	cmp	r1, r3
 800b06a:	d002      	beq.n	800b072 <__swsetup_r+0x66>
 800b06c:	4630      	mov	r0, r6
 800b06e:	f7ff fb55 	bl	800a71c <_free_r>
 800b072:	2300      	movs	r3, #0
 800b074:	6363      	str	r3, [r4, #52]	; 0x34
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b07c:	81a3      	strh	r3, [r4, #12]
 800b07e:	2300      	movs	r3, #0
 800b080:	6063      	str	r3, [r4, #4]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f043 0308 	orr.w	r3, r3, #8
 800b08c:	81a3      	strh	r3, [r4, #12]
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	b94b      	cbnz	r3, 800b0a6 <__swsetup_r+0x9a>
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b09c:	d003      	beq.n	800b0a6 <__swsetup_r+0x9a>
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 f95b 	bl	800b35c <__smakebuf_r>
 800b0a6:	89a0      	ldrh	r0, [r4, #12]
 800b0a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0ac:	f010 0301 	ands.w	r3, r0, #1
 800b0b0:	d00a      	beq.n	800b0c8 <__swsetup_r+0xbc>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	60a3      	str	r3, [r4, #8]
 800b0b6:	6963      	ldr	r3, [r4, #20]
 800b0b8:	425b      	negs	r3, r3
 800b0ba:	61a3      	str	r3, [r4, #24]
 800b0bc:	6923      	ldr	r3, [r4, #16]
 800b0be:	b943      	cbnz	r3, 800b0d2 <__swsetup_r+0xc6>
 800b0c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0c4:	d1ba      	bne.n	800b03c <__swsetup_r+0x30>
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}
 800b0c8:	0781      	lsls	r1, r0, #30
 800b0ca:	bf58      	it	pl
 800b0cc:	6963      	ldrpl	r3, [r4, #20]
 800b0ce:	60a3      	str	r3, [r4, #8]
 800b0d0:	e7f4      	b.n	800b0bc <__swsetup_r+0xb0>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e7f7      	b.n	800b0c6 <__swsetup_r+0xba>
 800b0d6:	bf00      	nop
 800b0d8:	2000000c 	.word	0x2000000c
 800b0dc:	0800b864 	.word	0x0800b864
 800b0e0:	0800b884 	.word	0x0800b884
 800b0e4:	0800b844 	.word	0x0800b844

0800b0e8 <__assert_func>:
 800b0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0ea:	4614      	mov	r4, r2
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4b09      	ldr	r3, [pc, #36]	; (800b114 <__assert_func+0x2c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	68d8      	ldr	r0, [r3, #12]
 800b0f6:	b14c      	cbz	r4, 800b10c <__assert_func+0x24>
 800b0f8:	4b07      	ldr	r3, [pc, #28]	; (800b118 <__assert_func+0x30>)
 800b0fa:	9100      	str	r1, [sp, #0]
 800b0fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b100:	4906      	ldr	r1, [pc, #24]	; (800b11c <__assert_func+0x34>)
 800b102:	462b      	mov	r3, r5
 800b104:	f000 f8e0 	bl	800b2c8 <fiprintf>
 800b108:	f000 f9d0 	bl	800b4ac <abort>
 800b10c:	4b04      	ldr	r3, [pc, #16]	; (800b120 <__assert_func+0x38>)
 800b10e:	461c      	mov	r4, r3
 800b110:	e7f3      	b.n	800b0fa <__assert_func+0x12>
 800b112:	bf00      	nop
 800b114:	2000000c 	.word	0x2000000c
 800b118:	0800ba8d 	.word	0x0800ba8d
 800b11c:	0800ba9a 	.word	0x0800ba9a
 800b120:	0800bac8 	.word	0x0800bac8

0800b124 <_close_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4d06      	ldr	r5, [pc, #24]	; (800b140 <_close_r+0x1c>)
 800b128:	2300      	movs	r3, #0
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	602b      	str	r3, [r5, #0]
 800b130:	f7f6 fd3d 	bl	8001bae <_close>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_close_r+0x1a>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_close_r+0x1a>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	2000040c 	.word	0x2000040c

0800b144 <__sflush_r>:
 800b144:	898a      	ldrh	r2, [r1, #12]
 800b146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14a:	4605      	mov	r5, r0
 800b14c:	0710      	lsls	r0, r2, #28
 800b14e:	460c      	mov	r4, r1
 800b150:	d458      	bmi.n	800b204 <__sflush_r+0xc0>
 800b152:	684b      	ldr	r3, [r1, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	dc05      	bgt.n	800b164 <__sflush_r+0x20>
 800b158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dc02      	bgt.n	800b164 <__sflush_r+0x20>
 800b15e:	2000      	movs	r0, #0
 800b160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b166:	2e00      	cmp	r6, #0
 800b168:	d0f9      	beq.n	800b15e <__sflush_r+0x1a>
 800b16a:	2300      	movs	r3, #0
 800b16c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b170:	682f      	ldr	r7, [r5, #0]
 800b172:	602b      	str	r3, [r5, #0]
 800b174:	d032      	beq.n	800b1dc <__sflush_r+0x98>
 800b176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	075a      	lsls	r2, r3, #29
 800b17c:	d505      	bpl.n	800b18a <__sflush_r+0x46>
 800b17e:	6863      	ldr	r3, [r4, #4]
 800b180:	1ac0      	subs	r0, r0, r3
 800b182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b184:	b10b      	cbz	r3, 800b18a <__sflush_r+0x46>
 800b186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b188:	1ac0      	subs	r0, r0, r3
 800b18a:	2300      	movs	r3, #0
 800b18c:	4602      	mov	r2, r0
 800b18e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b190:	6a21      	ldr	r1, [r4, #32]
 800b192:	4628      	mov	r0, r5
 800b194:	47b0      	blx	r6
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	d106      	bne.n	800b1aa <__sflush_r+0x66>
 800b19c:	6829      	ldr	r1, [r5, #0]
 800b19e:	291d      	cmp	r1, #29
 800b1a0:	d82c      	bhi.n	800b1fc <__sflush_r+0xb8>
 800b1a2:	4a2a      	ldr	r2, [pc, #168]	; (800b24c <__sflush_r+0x108>)
 800b1a4:	40ca      	lsrs	r2, r1
 800b1a6:	07d6      	lsls	r6, r2, #31
 800b1a8:	d528      	bpl.n	800b1fc <__sflush_r+0xb8>
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	6062      	str	r2, [r4, #4]
 800b1ae:	04d9      	lsls	r1, r3, #19
 800b1b0:	6922      	ldr	r2, [r4, #16]
 800b1b2:	6022      	str	r2, [r4, #0]
 800b1b4:	d504      	bpl.n	800b1c0 <__sflush_r+0x7c>
 800b1b6:	1c42      	adds	r2, r0, #1
 800b1b8:	d101      	bne.n	800b1be <__sflush_r+0x7a>
 800b1ba:	682b      	ldr	r3, [r5, #0]
 800b1bc:	b903      	cbnz	r3, 800b1c0 <__sflush_r+0x7c>
 800b1be:	6560      	str	r0, [r4, #84]	; 0x54
 800b1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1c2:	602f      	str	r7, [r5, #0]
 800b1c4:	2900      	cmp	r1, #0
 800b1c6:	d0ca      	beq.n	800b15e <__sflush_r+0x1a>
 800b1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1cc:	4299      	cmp	r1, r3
 800b1ce:	d002      	beq.n	800b1d6 <__sflush_r+0x92>
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f7ff faa3 	bl	800a71c <_free_r>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	6360      	str	r0, [r4, #52]	; 0x34
 800b1da:	e7c1      	b.n	800b160 <__sflush_r+0x1c>
 800b1dc:	6a21      	ldr	r1, [r4, #32]
 800b1de:	2301      	movs	r3, #1
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	47b0      	blx	r6
 800b1e4:	1c41      	adds	r1, r0, #1
 800b1e6:	d1c7      	bne.n	800b178 <__sflush_r+0x34>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0c4      	beq.n	800b178 <__sflush_r+0x34>
 800b1ee:	2b1d      	cmp	r3, #29
 800b1f0:	d001      	beq.n	800b1f6 <__sflush_r+0xb2>
 800b1f2:	2b16      	cmp	r3, #22
 800b1f4:	d101      	bne.n	800b1fa <__sflush_r+0xb6>
 800b1f6:	602f      	str	r7, [r5, #0]
 800b1f8:	e7b1      	b.n	800b15e <__sflush_r+0x1a>
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b200:	81a3      	strh	r3, [r4, #12]
 800b202:	e7ad      	b.n	800b160 <__sflush_r+0x1c>
 800b204:	690f      	ldr	r7, [r1, #16]
 800b206:	2f00      	cmp	r7, #0
 800b208:	d0a9      	beq.n	800b15e <__sflush_r+0x1a>
 800b20a:	0793      	lsls	r3, r2, #30
 800b20c:	680e      	ldr	r6, [r1, #0]
 800b20e:	bf08      	it	eq
 800b210:	694b      	ldreq	r3, [r1, #20]
 800b212:	600f      	str	r7, [r1, #0]
 800b214:	bf18      	it	ne
 800b216:	2300      	movne	r3, #0
 800b218:	eba6 0807 	sub.w	r8, r6, r7
 800b21c:	608b      	str	r3, [r1, #8]
 800b21e:	f1b8 0f00 	cmp.w	r8, #0
 800b222:	dd9c      	ble.n	800b15e <__sflush_r+0x1a>
 800b224:	6a21      	ldr	r1, [r4, #32]
 800b226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b228:	4643      	mov	r3, r8
 800b22a:	463a      	mov	r2, r7
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b0      	blx	r6
 800b230:	2800      	cmp	r0, #0
 800b232:	dc06      	bgt.n	800b242 <__sflush_r+0xfe>
 800b234:	89a3      	ldrh	r3, [r4, #12]
 800b236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	e78e      	b.n	800b160 <__sflush_r+0x1c>
 800b242:	4407      	add	r7, r0
 800b244:	eba8 0800 	sub.w	r8, r8, r0
 800b248:	e7e9      	b.n	800b21e <__sflush_r+0xda>
 800b24a:	bf00      	nop
 800b24c:	20400001 	.word	0x20400001

0800b250 <_fflush_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	690b      	ldr	r3, [r1, #16]
 800b254:	4605      	mov	r5, r0
 800b256:	460c      	mov	r4, r1
 800b258:	b913      	cbnz	r3, 800b260 <_fflush_r+0x10>
 800b25a:	2500      	movs	r5, #0
 800b25c:	4628      	mov	r0, r5
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	b118      	cbz	r0, 800b26a <_fflush_r+0x1a>
 800b262:	6983      	ldr	r3, [r0, #24]
 800b264:	b90b      	cbnz	r3, 800b26a <_fflush_r+0x1a>
 800b266:	f7fe f945 	bl	80094f4 <__sinit>
 800b26a:	4b14      	ldr	r3, [pc, #80]	; (800b2bc <_fflush_r+0x6c>)
 800b26c:	429c      	cmp	r4, r3
 800b26e:	d11b      	bne.n	800b2a8 <_fflush_r+0x58>
 800b270:	686c      	ldr	r4, [r5, #4]
 800b272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0ef      	beq.n	800b25a <_fflush_r+0xa>
 800b27a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b27c:	07d0      	lsls	r0, r2, #31
 800b27e:	d404      	bmi.n	800b28a <_fflush_r+0x3a>
 800b280:	0599      	lsls	r1, r3, #22
 800b282:	d402      	bmi.n	800b28a <_fflush_r+0x3a>
 800b284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b286:	f7fe fd46 	bl	8009d16 <__retarget_lock_acquire_recursive>
 800b28a:	4628      	mov	r0, r5
 800b28c:	4621      	mov	r1, r4
 800b28e:	f7ff ff59 	bl	800b144 <__sflush_r>
 800b292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b294:	07da      	lsls	r2, r3, #31
 800b296:	4605      	mov	r5, r0
 800b298:	d4e0      	bmi.n	800b25c <_fflush_r+0xc>
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	059b      	lsls	r3, r3, #22
 800b29e:	d4dd      	bmi.n	800b25c <_fflush_r+0xc>
 800b2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2a2:	f7fe fd39 	bl	8009d18 <__retarget_lock_release_recursive>
 800b2a6:	e7d9      	b.n	800b25c <_fflush_r+0xc>
 800b2a8:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <_fflush_r+0x70>)
 800b2aa:	429c      	cmp	r4, r3
 800b2ac:	d101      	bne.n	800b2b2 <_fflush_r+0x62>
 800b2ae:	68ac      	ldr	r4, [r5, #8]
 800b2b0:	e7df      	b.n	800b272 <_fflush_r+0x22>
 800b2b2:	4b04      	ldr	r3, [pc, #16]	; (800b2c4 <_fflush_r+0x74>)
 800b2b4:	429c      	cmp	r4, r3
 800b2b6:	bf08      	it	eq
 800b2b8:	68ec      	ldreq	r4, [r5, #12]
 800b2ba:	e7da      	b.n	800b272 <_fflush_r+0x22>
 800b2bc:	0800b864 	.word	0x0800b864
 800b2c0:	0800b884 	.word	0x0800b884
 800b2c4:	0800b844 	.word	0x0800b844

0800b2c8 <fiprintf>:
 800b2c8:	b40e      	push	{r1, r2, r3}
 800b2ca:	b503      	push	{r0, r1, lr}
 800b2cc:	4601      	mov	r1, r0
 800b2ce:	ab03      	add	r3, sp, #12
 800b2d0:	4805      	ldr	r0, [pc, #20]	; (800b2e8 <fiprintf+0x20>)
 800b2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d6:	6800      	ldr	r0, [r0, #0]
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	f7ff fc85 	bl	800abe8 <_vfiprintf_r>
 800b2de:	b002      	add	sp, #8
 800b2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2e4:	b003      	add	sp, #12
 800b2e6:	4770      	bx	lr
 800b2e8:	2000000c 	.word	0x2000000c

0800b2ec <_lseek_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4d07      	ldr	r5, [pc, #28]	; (800b30c <_lseek_r+0x20>)
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	4608      	mov	r0, r1
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	602a      	str	r2, [r5, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f7f6 fc7e 	bl	8001bfc <_lseek>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_lseek_r+0x1e>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_lseek_r+0x1e>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	2000040c 	.word	0x2000040c

0800b310 <__swhatbuf_r>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	460e      	mov	r6, r1
 800b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b318:	2900      	cmp	r1, #0
 800b31a:	b096      	sub	sp, #88	; 0x58
 800b31c:	4614      	mov	r4, r2
 800b31e:	461d      	mov	r5, r3
 800b320:	da08      	bge.n	800b334 <__swhatbuf_r+0x24>
 800b322:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	602a      	str	r2, [r5, #0]
 800b32a:	061a      	lsls	r2, r3, #24
 800b32c:	d410      	bmi.n	800b350 <__swhatbuf_r+0x40>
 800b32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b332:	e00e      	b.n	800b352 <__swhatbuf_r+0x42>
 800b334:	466a      	mov	r2, sp
 800b336:	f000 f8c1 	bl	800b4bc <_fstat_r>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	dbf1      	blt.n	800b322 <__swhatbuf_r+0x12>
 800b33e:	9a01      	ldr	r2, [sp, #4]
 800b340:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b344:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b348:	425a      	negs	r2, r3
 800b34a:	415a      	adcs	r2, r3
 800b34c:	602a      	str	r2, [r5, #0]
 800b34e:	e7ee      	b.n	800b32e <__swhatbuf_r+0x1e>
 800b350:	2340      	movs	r3, #64	; 0x40
 800b352:	2000      	movs	r0, #0
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	b016      	add	sp, #88	; 0x58
 800b358:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b35c <__smakebuf_r>:
 800b35c:	898b      	ldrh	r3, [r1, #12]
 800b35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b360:	079d      	lsls	r5, r3, #30
 800b362:	4606      	mov	r6, r0
 800b364:	460c      	mov	r4, r1
 800b366:	d507      	bpl.n	800b378 <__smakebuf_r+0x1c>
 800b368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	6123      	str	r3, [r4, #16]
 800b370:	2301      	movs	r3, #1
 800b372:	6163      	str	r3, [r4, #20]
 800b374:	b002      	add	sp, #8
 800b376:	bd70      	pop	{r4, r5, r6, pc}
 800b378:	ab01      	add	r3, sp, #4
 800b37a:	466a      	mov	r2, sp
 800b37c:	f7ff ffc8 	bl	800b310 <__swhatbuf_r>
 800b380:	9900      	ldr	r1, [sp, #0]
 800b382:	4605      	mov	r5, r0
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff fa35 	bl	800a7f4 <_malloc_r>
 800b38a:	b948      	cbnz	r0, 800b3a0 <__smakebuf_r+0x44>
 800b38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b390:	059a      	lsls	r2, r3, #22
 800b392:	d4ef      	bmi.n	800b374 <__smakebuf_r+0x18>
 800b394:	f023 0303 	bic.w	r3, r3, #3
 800b398:	f043 0302 	orr.w	r3, r3, #2
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	e7e3      	b.n	800b368 <__smakebuf_r+0xc>
 800b3a0:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <__smakebuf_r+0x7c>)
 800b3a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	6020      	str	r0, [r4, #0]
 800b3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ac:	81a3      	strh	r3, [r4, #12]
 800b3ae:	9b00      	ldr	r3, [sp, #0]
 800b3b0:	6163      	str	r3, [r4, #20]
 800b3b2:	9b01      	ldr	r3, [sp, #4]
 800b3b4:	6120      	str	r0, [r4, #16]
 800b3b6:	b15b      	cbz	r3, 800b3d0 <__smakebuf_r+0x74>
 800b3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f000 f88f 	bl	800b4e0 <_isatty_r>
 800b3c2:	b128      	cbz	r0, 800b3d0 <__smakebuf_r+0x74>
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	f043 0301 	orr.w	r3, r3, #1
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	89a0      	ldrh	r0, [r4, #12]
 800b3d2:	4305      	orrs	r5, r0
 800b3d4:	81a5      	strh	r5, [r4, #12]
 800b3d6:	e7cd      	b.n	800b374 <__smakebuf_r+0x18>
 800b3d8:	0800948d 	.word	0x0800948d

0800b3dc <memmove>:
 800b3dc:	4288      	cmp	r0, r1
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	eb01 0402 	add.w	r4, r1, r2
 800b3e4:	d902      	bls.n	800b3ec <memmove+0x10>
 800b3e6:	4284      	cmp	r4, r0
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	d807      	bhi.n	800b3fc <memmove+0x20>
 800b3ec:	1e43      	subs	r3, r0, #1
 800b3ee:	42a1      	cmp	r1, r4
 800b3f0:	d008      	beq.n	800b404 <memmove+0x28>
 800b3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3fa:	e7f8      	b.n	800b3ee <memmove+0x12>
 800b3fc:	4402      	add	r2, r0
 800b3fe:	4601      	mov	r1, r0
 800b400:	428a      	cmp	r2, r1
 800b402:	d100      	bne.n	800b406 <memmove+0x2a>
 800b404:	bd10      	pop	{r4, pc}
 800b406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b40e:	e7f7      	b.n	800b400 <memmove+0x24>

0800b410 <__malloc_lock>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__malloc_lock+0x8>)
 800b412:	f7fe bc80 	b.w	8009d16 <__retarget_lock_acquire_recursive>
 800b416:	bf00      	nop
 800b418:	20000400 	.word	0x20000400

0800b41c <__malloc_unlock>:
 800b41c:	4801      	ldr	r0, [pc, #4]	; (800b424 <__malloc_unlock+0x8>)
 800b41e:	f7fe bc7b 	b.w	8009d18 <__retarget_lock_release_recursive>
 800b422:	bf00      	nop
 800b424:	20000400 	.word	0x20000400

0800b428 <_realloc_r>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4614      	mov	r4, r2
 800b430:	460e      	mov	r6, r1
 800b432:	b921      	cbnz	r1, 800b43e <_realloc_r+0x16>
 800b434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	4611      	mov	r1, r2
 800b43a:	f7ff b9db 	b.w	800a7f4 <_malloc_r>
 800b43e:	b92a      	cbnz	r2, 800b44c <_realloc_r+0x24>
 800b440:	f7ff f96c 	bl	800a71c <_free_r>
 800b444:	4625      	mov	r5, r4
 800b446:	4628      	mov	r0, r5
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	f000 f858 	bl	800b500 <_malloc_usable_size_r>
 800b450:	4284      	cmp	r4, r0
 800b452:	4607      	mov	r7, r0
 800b454:	d802      	bhi.n	800b45c <_realloc_r+0x34>
 800b456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b45a:	d812      	bhi.n	800b482 <_realloc_r+0x5a>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4640      	mov	r0, r8
 800b460:	f7ff f9c8 	bl	800a7f4 <_malloc_r>
 800b464:	4605      	mov	r5, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0ed      	beq.n	800b446 <_realloc_r+0x1e>
 800b46a:	42bc      	cmp	r4, r7
 800b46c:	4622      	mov	r2, r4
 800b46e:	4631      	mov	r1, r6
 800b470:	bf28      	it	cs
 800b472:	463a      	movcs	r2, r7
 800b474:	f7fe fc6c 	bl	8009d50 <memcpy>
 800b478:	4631      	mov	r1, r6
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7ff f94e 	bl	800a71c <_free_r>
 800b480:	e7e1      	b.n	800b446 <_realloc_r+0x1e>
 800b482:	4635      	mov	r5, r6
 800b484:	e7df      	b.n	800b446 <_realloc_r+0x1e>
	...

0800b488 <_read_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d07      	ldr	r5, [pc, #28]	; (800b4a8 <_read_r+0x20>)
 800b48c:	4604      	mov	r4, r0
 800b48e:	4608      	mov	r0, r1
 800b490:	4611      	mov	r1, r2
 800b492:	2200      	movs	r2, #0
 800b494:	602a      	str	r2, [r5, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	f7f6 fb6c 	bl	8001b74 <_read>
 800b49c:	1c43      	adds	r3, r0, #1
 800b49e:	d102      	bne.n	800b4a6 <_read_r+0x1e>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	b103      	cbz	r3, 800b4a6 <_read_r+0x1e>
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	2000040c 	.word	0x2000040c

0800b4ac <abort>:
 800b4ac:	b508      	push	{r3, lr}
 800b4ae:	2006      	movs	r0, #6
 800b4b0:	f000 f856 	bl	800b560 <raise>
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	f7f6 fb53 	bl	8001b60 <_exit>
	...

0800b4bc <_fstat_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d07      	ldr	r5, [pc, #28]	; (800b4dc <_fstat_r+0x20>)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	602b      	str	r3, [r5, #0]
 800b4ca:	f7f6 fb7c 	bl	8001bc6 <_fstat>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	d102      	bne.n	800b4d8 <_fstat_r+0x1c>
 800b4d2:	682b      	ldr	r3, [r5, #0]
 800b4d4:	b103      	cbz	r3, 800b4d8 <_fstat_r+0x1c>
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	bd38      	pop	{r3, r4, r5, pc}
 800b4da:	bf00      	nop
 800b4dc:	2000040c 	.word	0x2000040c

0800b4e0 <_isatty_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d06      	ldr	r5, [pc, #24]	; (800b4fc <_isatty_r+0x1c>)
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	602b      	str	r3, [r5, #0]
 800b4ec:	f7f6 fb7b 	bl	8001be6 <_isatty>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_isatty_r+0x1a>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_isatty_r+0x1a>
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	2000040c 	.word	0x2000040c

0800b500 <_malloc_usable_size_r>:
 800b500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b504:	1f18      	subs	r0, r3, #4
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfbc      	itt	lt
 800b50a:	580b      	ldrlt	r3, [r1, r0]
 800b50c:	18c0      	addlt	r0, r0, r3
 800b50e:	4770      	bx	lr

0800b510 <_raise_r>:
 800b510:	291f      	cmp	r1, #31
 800b512:	b538      	push	{r3, r4, r5, lr}
 800b514:	4604      	mov	r4, r0
 800b516:	460d      	mov	r5, r1
 800b518:	d904      	bls.n	800b524 <_raise_r+0x14>
 800b51a:	2316      	movs	r3, #22
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	f04f 30ff 	mov.w	r0, #4294967295
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b526:	b112      	cbz	r2, 800b52e <_raise_r+0x1e>
 800b528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b52c:	b94b      	cbnz	r3, 800b542 <_raise_r+0x32>
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 f830 	bl	800b594 <_getpid_r>
 800b534:	462a      	mov	r2, r5
 800b536:	4601      	mov	r1, r0
 800b538:	4620      	mov	r0, r4
 800b53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b53e:	f000 b817 	b.w	800b570 <_kill_r>
 800b542:	2b01      	cmp	r3, #1
 800b544:	d00a      	beq.n	800b55c <_raise_r+0x4c>
 800b546:	1c59      	adds	r1, r3, #1
 800b548:	d103      	bne.n	800b552 <_raise_r+0x42>
 800b54a:	2316      	movs	r3, #22
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	2001      	movs	r0, #1
 800b550:	e7e7      	b.n	800b522 <_raise_r+0x12>
 800b552:	2400      	movs	r4, #0
 800b554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b558:	4628      	mov	r0, r5
 800b55a:	4798      	blx	r3
 800b55c:	2000      	movs	r0, #0
 800b55e:	e7e0      	b.n	800b522 <_raise_r+0x12>

0800b560 <raise>:
 800b560:	4b02      	ldr	r3, [pc, #8]	; (800b56c <raise+0xc>)
 800b562:	4601      	mov	r1, r0
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	f7ff bfd3 	b.w	800b510 <_raise_r>
 800b56a:	bf00      	nop
 800b56c:	2000000c 	.word	0x2000000c

0800b570 <_kill_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4d07      	ldr	r5, [pc, #28]	; (800b590 <_kill_r+0x20>)
 800b574:	2300      	movs	r3, #0
 800b576:	4604      	mov	r4, r0
 800b578:	4608      	mov	r0, r1
 800b57a:	4611      	mov	r1, r2
 800b57c:	602b      	str	r3, [r5, #0]
 800b57e:	f7f6 fadf 	bl	8001b40 <_kill>
 800b582:	1c43      	adds	r3, r0, #1
 800b584:	d102      	bne.n	800b58c <_kill_r+0x1c>
 800b586:	682b      	ldr	r3, [r5, #0]
 800b588:	b103      	cbz	r3, 800b58c <_kill_r+0x1c>
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	bd38      	pop	{r3, r4, r5, pc}
 800b58e:	bf00      	nop
 800b590:	2000040c 	.word	0x2000040c

0800b594 <_getpid_r>:
 800b594:	f7f6 bacc 	b.w	8001b30 <_getpid>

0800b598 <_init>:
 800b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59a:	bf00      	nop
 800b59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59e:	bc08      	pop	{r3}
 800b5a0:	469e      	mov	lr, r3
 800b5a2:	4770      	bx	lr

0800b5a4 <_fini>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	bf00      	nop
 800b5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5aa:	bc08      	pop	{r3}
 800b5ac:	469e      	mov	lr, r3
 800b5ae:	4770      	bx	lr
