
Nucleo-F439ZI-Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800a790  0800a790  0001a790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad68  0800ad68  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad68  0800ad68  0001ad68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad70  0800ad70  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad70  0800ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad74  0800ad74  0001ad74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800ad78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          00000348  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000054c  2000054c  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d9a  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002997  00000000  00000000  00033fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00036968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  00037998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c20  00000000  00000000  000388c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ac8  00000000  00000000  000604e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef2c6  00000000  00000000  00072fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016226e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059cc  00000000  00000000  001622c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a774 	.word	0x0800a774

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	0800a774 	.word	0x0800a774

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f001 f91b 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f004 faca 	bl	80055e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f001 f933 	bl	80022e6 <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f001 f8fb 	bl	8002292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000002c 	.word	0x2000002c
 80010b4:	20000004 	.word	0x20000004
 80010b8:	20000000 	.word	0x20000000

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004
 80010e0:	20000220 	.word	0x20000220

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000220 	.word	0x20000220

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e033      	b.n	80011c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f004 fa6c 	bl	8005640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	2b00      	cmp	r3, #0
 8001180:	d118      	bne.n	80011b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800118a:	f023 0302 	bic.w	r3, r3, #2
 800118e:	f043 0202 	orr.w	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f94a 	bl	8001430 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f023 0303 	bic.w	r3, r3, #3
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
 80011b2:	e001      	b.n	80011b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x1c>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e113      	b.n	8001410 <HAL_ADC_ConfigChannel+0x244>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	d925      	bls.n	8001244 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68d9      	ldr	r1, [r3, #12]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	3b1e      	subs	r3, #30
 800120e:	2207      	movs	r2, #7
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68d9      	ldr	r1, [r3, #12]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	4603      	mov	r3, r0
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4403      	add	r3, r0
 8001236:	3b1e      	subs	r3, #30
 8001238:	409a      	lsls	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	e022      	b.n	800128a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6919      	ldr	r1, [r3, #16]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	2207      	movs	r2, #7
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6919      	ldr	r1, [r3, #16]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	4603      	mov	r3, r0
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4403      	add	r3, r0
 8001280:	409a      	lsls	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d824      	bhi.n	80012dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b05      	subs	r3, #5
 80012a4:	221f      	movs	r2, #31
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	400a      	ands	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	3b05      	subs	r3, #5
 80012ce:	fa00 f203 	lsl.w	r2, r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
 80012da:	e04c      	b.n	8001376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d824      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b23      	subs	r3, #35	; 0x23
 80012f6:	221f      	movs	r2, #31
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43da      	mvns	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	400a      	ands	r2, r1
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b23      	subs	r3, #35	; 0x23
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
 800132c:	e023      	b.n	8001376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	3b41      	subs	r3, #65	; 0x41
 8001340:	221f      	movs	r2, #31
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b41      	subs	r3, #65	; 0x41
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_ADC_ConfigChannel+0x250>)
 8001378:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <HAL_ADC_ConfigChannel+0x254>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d10f      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1d8>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b12      	cmp	r3, #18
 800138a:	d10b      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_ADC_ConfigChannel+0x254>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12b      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x23a>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_ADC_ConfigChannel+0x258>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d003      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x1f4>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b11      	cmp	r3, #17
 80013be:	d122      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_ADC_ConfigChannel+0x258>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d111      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_ADC_ConfigChannel+0x25c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_ADC_ConfigChannel+0x260>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	0c9a      	lsrs	r2, r3, #18
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f8:	e002      	b.n	8001400 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f9      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40012300 	.word	0x40012300
 8001420:	40012000 	.word	0x40012000
 8001424:	10000012 	.word	0x10000012
 8001428:	2000002c 	.word	0x2000002c
 800142c:	431bde83 	.word	0x431bde83

08001430 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001438:	4b79      	ldr	r3, [pc, #484]	; (8001620 <ADC_Init+0x1f0>)
 800143a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	431a      	orrs	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	021a      	lsls	r2, r3, #8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6899      	ldr	r1, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	4a58      	ldr	r2, [pc, #352]	; (8001624 <ADC_Init+0x1f4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d022      	beq.n	800150e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6899      	ldr	r1, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6899      	ldr	r1, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e00f      	b.n	800152e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800151c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800152c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0202 	bic.w	r2, r2, #2
 800153c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6899      	ldr	r1, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7e1b      	ldrb	r3, [r3, #24]
 8001548:	005a      	lsls	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01b      	beq.n	8001594 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800156a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800157a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	3b01      	subs	r3, #1
 8001588:	035a      	lsls	r2, r3, #13
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	e007      	b.n	80015a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	3b01      	subs	r3, #1
 80015c0:	051a      	lsls	r2, r3, #20
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e6:	025a      	lsls	r2, r3, #9
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6899      	ldr	r1, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	029a      	lsls	r2, r3, #10
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40012300 	.word	0x40012300
 8001624:	0f000001 	.word	0x0f000001

08001628 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0ed      	b.n	8001816 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f004 f83e 	bl	80056c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800165c:	f7ff fd42 	bl	80010e4 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001662:	e012      	b.n	800168a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001664:	f7ff fd3e 	bl	80010e4 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b0a      	cmp	r3, #10
 8001670:	d90b      	bls.n	800168a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2205      	movs	r2, #5
 8001682:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0c5      	b.n	8001816 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0e5      	beq.n	8001664 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0202 	bic.w	r2, r2, #2
 80016a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a8:	f7ff fd1c 	bl	80010e4 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ae:	e012      	b.n	80016d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016b0:	f7ff fd18 	bl	80010e4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b0a      	cmp	r3, #10
 80016bc:	d90b      	bls.n	80016d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2205      	movs	r2, #5
 80016ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e09f      	b.n	8001816 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e5      	bne.n	80016b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7e5b      	ldrb	r3, [r3, #25]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7e9b      	ldrb	r3, [r3, #26]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0220 	orr.w	r2, r2, #32
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0220 	bic.w	r2, r2, #32
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7edb      	ldrb	r3, [r3, #27]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0210 	bic.w	r2, r2, #16
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0210 	orr.w	r2, r2, #16
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7f1b      	ldrb	r3, [r3, #28]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d108      	bne.n	80017a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0208 	orr.w	r2, r2, #8
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e007      	b.n	80017b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0208 	bic.w	r2, r2, #8
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7f5b      	ldrb	r3, [r3, #29]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0204 	orr.w	r2, r2, #4
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e007      	b.n	80017e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0204 	bic.w	r2, r2, #4
 80017de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	ea42 0103 	orr.w	r1, r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	1e5a      	subs	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001838:	7cfb      	ldrb	r3, [r7, #19]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d003      	beq.n	8001846 <HAL_CAN_ConfigFilter+0x26>
 800183e:	7cfb      	ldrb	r3, [r7, #19]
 8001840:	2b02      	cmp	r3, #2
 8001842:	f040 80be 	bne.w	80019c2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_CAN_ConfigFilter+0x1bc>)
 8001848:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001860:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	431a      	orrs	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	2201      	movs	r2, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	401a      	ands	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d123      	bne.n	80018f0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3248      	adds	r2, #72	; 0x48
 80018d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e6:	6979      	ldr	r1, [r7, #20]
 80018e8:	3348      	adds	r3, #72	; 0x48
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d122      	bne.n	800193e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	431a      	orrs	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001918:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3248      	adds	r2, #72	; 0x48
 800191e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001932:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001934:	6979      	ldr	r1, [r7, #20]
 8001936:	3348      	adds	r3, #72	; 0x48
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001958:	e007      	b.n	800196a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	431a      	orrs	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001984:	e007      	b.n	8001996 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	431a      	orrs	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019b4:	f023 0201 	bic.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e006      	b.n	80019d0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
  }
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40006400 	.word	0x40006400

080019e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d12e      	bne.n	8001a52 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff fb6a 	bl	80010e4 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a12:	e012      	b.n	8001a3a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a14:	f7ff fb66 	bl	80010e4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b0a      	cmp	r3, #10
 8001a20:	d90b      	bls.n	8001a3a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2205      	movs	r2, #5
 8001a32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e012      	b.n	8001a60 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e5      	bne.n	8001a14 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e006      	b.n	8001a60 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
  }
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d003      	beq.n	8001a94 <HAL_CAN_AddTxMessage+0x2c>
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	f040 80b8 	bne.w	8001c04 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80a0 	beq.w	8001bf4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	0e1b      	lsrs	r3, r3, #24
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d907      	bls.n	8001ad4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e09e      	b.n	8001c12 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10d      	bne.n	8001b02 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	6809      	ldr	r1, [r1, #0]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3318      	adds	r3, #24
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	440b      	add	r3, r1
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e00f      	b.n	8001b22 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b0c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b16:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3318      	adds	r3, #24
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	440b      	add	r3, r1
 8001b20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	440b      	add	r3, r1
 8001b32:	3304      	adds	r3, #4
 8001b34:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	7d1b      	ldrb	r3, [r3, #20]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d111      	bne.n	8001b62 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3318      	adds	r3, #24
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4413      	add	r3, r2
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6811      	ldr	r1, [r2, #0]
 8001b52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3318      	adds	r3, #24
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3304      	adds	r3, #4
 8001b60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3307      	adds	r3, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3306      	adds	r3, #6
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3305      	adds	r3, #5
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	3204      	adds	r2, #4
 8001b82:	7812      	ldrb	r2, [r2, #0]
 8001b84:	4610      	mov	r0, r2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	6811      	ldr	r1, [r2, #0]
 8001b8a:	ea43 0200 	orr.w	r2, r3, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b98:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	061a      	lsls	r2, r3, #24
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	4610      	mov	r0, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	6811      	ldr	r1, [r2, #0]
 8001bc0:	ea43 0200 	orr.w	r2, r3, r0
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	440b      	add	r3, r1
 8001bca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001bce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3318      	adds	r3, #24
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	6811      	ldr	r1, [r2, #0]
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3318      	adds	r3, #24
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	440b      	add	r3, r1
 8001bee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e00e      	b.n	8001c12 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e006      	b.n	8001c12 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
  }
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d002      	beq.n	8001c3c <HAL_CAN_ActivateNotification+0x1e>
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d109      	bne.n	8001c50 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6959      	ldr	r1, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e006      	b.n	8001c5e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b08a      	sub	sp, #40	; 0x28
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d07c      	beq.n	8001daa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d023      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f983 	bl	8001fd8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cd2:	e016      	b.n	8001d02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	e00c      	b.n	8001d02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e002      	b.n	8001d02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f989 	bl	8002014 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d024      	beq.n	8001d56 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f963 	bl	8001fec <HAL_CAN_TxMailbox1CompleteCallback>
 8001d26:	e016      	b.n	8001d56 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	e00c      	b.n	8001d56 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	e002      	b.n	8001d56 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f969 	bl	8002028 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d024      	beq.n	8001daa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f943 	bl	8002000 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d7a:	e016      	b.n	8001daa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	e00c      	b.n	8001daa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
 8001da2:	e002      	b.n	8001daa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f949 	bl	800203c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00c      	beq.n	8001dce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2210      	movs	r2, #16
 8001dcc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2208      	movs	r2, #8
 8001de8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f93a 	bl	8002064 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f921 	bl	8002050 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2210      	movs	r2, #16
 8001e30:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f91c 	bl	800208c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d009      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f903 	bl	8002078 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f906 	bl	80020a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2208      	movs	r2, #8
 8001eae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8ff 	bl	80020b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d07b      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d072      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d043      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d03e      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f38:	2b60      	cmp	r3, #96	; 0x60
 8001f3a:	d02b      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x32a>
 8001f3c:	2b60      	cmp	r3, #96	; 0x60
 8001f3e:	d82e      	bhi.n	8001f9e <HAL_CAN_IRQHandler+0x334>
 8001f40:	2b50      	cmp	r3, #80	; 0x50
 8001f42:	d022      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x320>
 8001f44:	2b50      	cmp	r3, #80	; 0x50
 8001f46:	d82a      	bhi.n	8001f9e <HAL_CAN_IRQHandler+0x334>
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d019      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x316>
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	d826      	bhi.n	8001f9e <HAL_CAN_IRQHandler+0x334>
 8001f50:	2b30      	cmp	r3, #48	; 0x30
 8001f52:	d010      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x30c>
 8001f54:	2b30      	cmp	r3, #48	; 0x30
 8001f56:	d822      	bhi.n	8001f9e <HAL_CAN_IRQHandler+0x334>
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d002      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x2f8>
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d005      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f60:	e01d      	b.n	8001f9e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f6a:	e019      	b.n	8001fa0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f74:	e014      	b.n	8001fa0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f043 0320 	orr.w	r3, r3, #32
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f7e:	e00f      	b.n	8001fa0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f88:	e00a      	b.n	8001fa0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f92:	e005      	b.n	8001fa0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f9c:	e000      	b.n	8001fa0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f9e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f87c 	bl	80020c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f7ff ff8e 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff29 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff3e 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff8e 	bl	80021d0 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5d 	bl	800217c <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff31 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffa2 	bl	8002238 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e177      	b.n	800260c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8166 	bne.w	8002606 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	2b02      	cmp	r3, #2
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80c0 	beq.w	8002606 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b66      	ldr	r3, [pc, #408]	; (8002624 <HAL_GPIO_Init+0x324>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a65      	ldr	r2, [pc, #404]	; (8002624 <HAL_GPIO_Init+0x324>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_GPIO_Init+0x324>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a2:	4a61      	ldr	r2, [pc, #388]	; (8002628 <HAL_GPIO_Init+0x328>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_GPIO_Init+0x32c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d037      	beq.n	800253e <HAL_GPIO_Init+0x23e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a57      	ldr	r2, [pc, #348]	; (8002630 <HAL_GPIO_Init+0x330>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d031      	beq.n	800253a <HAL_GPIO_Init+0x23a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_GPIO_Init+0x334>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d02b      	beq.n	8002536 <HAL_GPIO_Init+0x236>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a55      	ldr	r2, [pc, #340]	; (8002638 <HAL_GPIO_Init+0x338>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d025      	beq.n	8002532 <HAL_GPIO_Init+0x232>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a54      	ldr	r2, [pc, #336]	; (800263c <HAL_GPIO_Init+0x33c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01f      	beq.n	800252e <HAL_GPIO_Init+0x22e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a53      	ldr	r2, [pc, #332]	; (8002640 <HAL_GPIO_Init+0x340>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d019      	beq.n	800252a <HAL_GPIO_Init+0x22a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a52      	ldr	r2, [pc, #328]	; (8002644 <HAL_GPIO_Init+0x344>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_GPIO_Init+0x226>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a51      	ldr	r2, [pc, #324]	; (8002648 <HAL_GPIO_Init+0x348>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00d      	beq.n	8002522 <HAL_GPIO_Init+0x222>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a50      	ldr	r2, [pc, #320]	; (800264c <HAL_GPIO_Init+0x34c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <HAL_GPIO_Init+0x21e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4f      	ldr	r2, [pc, #316]	; (8002650 <HAL_GPIO_Init+0x350>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_GPIO_Init+0x21a>
 8002516:	2309      	movs	r3, #9
 8002518:	e012      	b.n	8002540 <HAL_GPIO_Init+0x240>
 800251a:	230a      	movs	r3, #10
 800251c:	e010      	b.n	8002540 <HAL_GPIO_Init+0x240>
 800251e:	2308      	movs	r3, #8
 8002520:	e00e      	b.n	8002540 <HAL_GPIO_Init+0x240>
 8002522:	2307      	movs	r3, #7
 8002524:	e00c      	b.n	8002540 <HAL_GPIO_Init+0x240>
 8002526:	2306      	movs	r3, #6
 8002528:	e00a      	b.n	8002540 <HAL_GPIO_Init+0x240>
 800252a:	2305      	movs	r3, #5
 800252c:	e008      	b.n	8002540 <HAL_GPIO_Init+0x240>
 800252e:	2304      	movs	r3, #4
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x240>
 8002532:	2303      	movs	r3, #3
 8002534:	e004      	b.n	8002540 <HAL_GPIO_Init+0x240>
 8002536:	2302      	movs	r3, #2
 8002538:	e002      	b.n	8002540 <HAL_GPIO_Init+0x240>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_GPIO_Init+0x240>
 800253e:	2300      	movs	r3, #0
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	f002 0203 	and.w	r2, r2, #3
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	4093      	lsls	r3, r2
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002550:	4935      	ldr	r1, [pc, #212]	; (8002628 <HAL_GPIO_Init+0x328>)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_GPIO_Init+0x354>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002582:	4a34      	ldr	r2, [pc, #208]	; (8002654 <HAL_GPIO_Init+0x354>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002588:	4b32      	ldr	r3, [pc, #200]	; (8002654 <HAL_GPIO_Init+0x354>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_GPIO_Init+0x354>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_GPIO_Init+0x354>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d6:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <HAL_GPIO_Init+0x354>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_GPIO_Init+0x354>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_GPIO_Init+0x354>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3301      	adds	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b0f      	cmp	r3, #15
 8002610:	f67f ae84 	bls.w	800231c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40021400 	.word	0x40021400
 8002644:	40021800 	.word	0x40021800
 8002648:	40021c00 	.word	0x40021c00
 800264c:	40022000 	.word	0x40022000
 8002650:	40022400 	.word	0x40022400
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e267      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d075      	beq.n	8002796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c2:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x108>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e242      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x74>
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b70      	ldr	r3, [pc, #448]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6f      	ldr	r2, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6c      	ldr	r2, [pc, #432]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002724:	4b69      	ldr	r3, [pc, #420]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a68      	ldr	r2, [pc, #416]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fcce 	bl	80010e4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fcca 	bl	80010e4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e207      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xc0>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fcba 	bl	80010e4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fcb6 	bl	80010e4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1f3      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b51      	ldr	r3, [pc, #324]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0xe8>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d063      	beq.n	800286a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a2:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ba:	4b44      	ldr	r3, [pc, #272]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1c7      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4937      	ldr	r1, [pc, #220]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCC_OscConfig+0x244>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fc6f 	bl	80010e4 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fc6b 	bl	80010e4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1a8      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4925      	ldr	r1, [pc, #148]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_OscConfig+0x244>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fc4e 	bl	80010e4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe fc4a 	bl	80010e4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e187      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d036      	beq.n	80028e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x248>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fc2e 	bl	80010e4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fc2a 	bl	80010e4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e167      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x200>
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x248>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fc17 	bl	80010e4 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	e00e      	b.n	80028d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe fc13 	bl	80010e4 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d907      	bls.n	80028d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e150      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ea      	bne.n	80028ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8097 	beq.w	8002a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
 8002912:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b77      	ldr	r3, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b74      	ldr	r3, [pc, #464]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a73      	ldr	r2, [pc, #460]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe fbd3 	bl	80010e4 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fbcf 	bl	80010e4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e10c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x2ea>
 8002968:	4b64      	ldr	r3, [pc, #400]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a63      	ldr	r2, [pc, #396]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x30c>
 800297e:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a5e      	ldr	r2, [pc, #376]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	4a5b      	ldr	r2, [pc, #364]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	; 0x70
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002998:	4b58      	ldr	r3, [pc, #352]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fb94 	bl	80010e4 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe fb90 	bl	80010e4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0cb      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCC_OscConfig+0x334>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe fb7e 	bl	80010e4 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fb7a 	bl	80010e4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0b5      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ee      	bne.n	80029ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	4a38      	ldr	r2, [pc, #224]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a1 	beq.w	8002b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d05c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d141      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fb4e 	bl	80010e4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fb4a 	bl	80010e4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e087      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	491b      	ldr	r1, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fb23 	bl	80010e4 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fb1f 	bl	80010e4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e05c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x416>
 8002ac0:	e054      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb0c 	bl	80010e4 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fb08 	bl	80010e4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e045      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x444>
 8002aee:	e03d      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e038      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x4ec>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d028      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d121      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d111      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d119      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e067      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4934      	ldr	r1, [pc, #208]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fa3a 	bl	80010e4 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe fa36 	bl	80010e4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490a      	ldr	r1, [pc, #40]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f99a 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	0800a8a8 	.word	0x0800a8a8
 8002d40:	2000002c 	.word	0x2000002c
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b094      	sub	sp, #80	; 0x50
 8002d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	647b      	str	r3, [r7, #68]	; 0x44
 8002d54:	2300      	movs	r3, #0
 8002d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d58:	2300      	movs	r3, #0
 8002d5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d60:	4b79      	ldr	r3, [pc, #484]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d00d      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	f200 80e1 	bhi.w	8002f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7a:	e0db      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b73      	ldr	r3, [pc, #460]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d80:	e0db      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d82:	4b73      	ldr	r3, [pc, #460]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d86:	e0d8      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d88:	4b6f      	ldr	r3, [pc, #444]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002da8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
 8002db2:	2300      	movs	r3, #0
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
 8002db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	f04f 0000 	mov.w	r0, #0
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	0159      	lsls	r1, r3, #5
 8002dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dcc:	0150      	lsls	r0, r2, #5
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	1a51      	subs	r1, r2, r1
 8002dd6:	6139      	str	r1, [r7, #16]
 8002dd8:	4629      	mov	r1, r5
 8002dda:	eb63 0301 	sbc.w	r3, r3, r1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dec:	4659      	mov	r1, fp
 8002dee:	018b      	lsls	r3, r1, #6
 8002df0:	4651      	mov	r1, sl
 8002df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df6:	4651      	mov	r1, sl
 8002df8:	018a      	lsls	r2, r1, #6
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8002e00:	4659      	mov	r1, fp
 8002e02:	eb63 0901 	sbc.w	r9, r3, r1
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e1a:	4690      	mov	r8, r2
 8002e1c:	4699      	mov	r9, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	eb18 0303 	adds.w	r3, r8, r3
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	462b      	mov	r3, r5
 8002e28:	eb49 0303 	adc.w	r3, r9, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	024b      	lsls	r3, r1, #9
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e44:	4621      	mov	r1, r4
 8002e46:	024a      	lsls	r2, r1, #9
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e58:	f7fd ff26 	bl	8000ca8 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e64:	e058      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4611      	mov	r1, r2
 8002e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e80:	4642      	mov	r2, r8
 8002e82:	464b      	mov	r3, r9
 8002e84:	f04f 0000 	mov.w	r0, #0
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	0159      	lsls	r1, r3, #5
 8002e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e92:	0150      	lsls	r0, r2, #5
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	00eb      	lsls	r3, r5, #3
 8002eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ece:	00e2      	lsls	r2, r4, #3
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	18e3      	adds	r3, r4, r3
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	464b      	mov	r3, r9
 8002edc:	eb45 0303 	adc.w	r3, r5, r3
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	028b      	lsls	r3, r1, #10
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef8:	4621      	mov	r1, r4
 8002efa:	028a      	lsls	r2, r1, #10
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	61fa      	str	r2, [r7, #28]
 8002f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f0c:	f7fd fecc 	bl	8000ca8 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f32:	e002      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3750      	adds	r7, #80	; 0x50
 8002f40:	46bd      	mov	sp, r7
 8002f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	2000002c 	.word	0x2000002c

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a9b      	lsrs	r3, r3, #10
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	0800a8b8 	.word	0x0800a8b8

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f98:	f7ff ffdc 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0b5b      	lsrs	r3, r3, #13
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	0800a8b8 	.word	0x0800a8b8

08002fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e041      	b.n	8003052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f002 fbfa 	bl	80057dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f000 fba8 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d001      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e04e      	b.n	8003112 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a23      	ldr	r2, [pc, #140]	; (8003120 <HAL_TIM_Base_Start_IT+0xc4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d022      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d01d      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_TIM_Base_Start_IT+0xc8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d018      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_TIM_Base_Start_IT+0xcc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1c      	ldr	r2, [pc, #112]	; (800312c <HAL_TIM_Base_Start_IT+0xd0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00e      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_TIM_Base_Start_IT+0xd4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d009      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_TIM_Base_Start_IT+0xdc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d010      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fe:	e007      	b.n	8003110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40010400 	.word	0x40010400
 8003134:	40014000 	.word	0x40014000
 8003138:	40001800 	.word	0x40001800

0800313c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f002 fb18 	bl	8005798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 fae8 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_TIM_PWM_Start+0x24>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e022      	b.n	8003246 <HAL_TIM_PWM_Start+0x6a>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d109      	bne.n	800321a <HAL_TIM_PWM_Start+0x3e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e015      	b.n	8003246 <HAL_TIM_PWM_Start+0x6a>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PWM_Start+0x58>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e008      	b.n	8003246 <HAL_TIM_PWM_Start+0x6a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e07c      	b.n	8003348 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_TIM_PWM_Start+0x82>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800325c:	e013      	b.n	8003286 <HAL_TIM_PWM_Start+0xaa>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d104      	bne.n	800326e <HAL_TIM_PWM_Start+0x92>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800326c:	e00b      	b.n	8003286 <HAL_TIM_PWM_Start+0xaa>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0xa2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800327c:	e003      	b.n	8003286 <HAL_TIM_PWM_Start+0xaa>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2201      	movs	r2, #1
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fcae 	bl	8003bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <HAL_TIM_PWM_Start+0x174>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIM_PWM_Start+0xcc>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2c      	ldr	r2, [pc, #176]	; (8003354 <HAL_TIM_PWM_Start+0x178>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_TIM_PWM_Start+0xd0>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_TIM_PWM_Start+0xd2>
 80032ac:	2300      	movs	r3, #0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a22      	ldr	r2, [pc, #136]	; (8003350 <HAL_TIM_PWM_Start+0x174>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <HAL_TIM_PWM_Start+0x136>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d01d      	beq.n	8003312 <HAL_TIM_PWM_Start+0x136>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_TIM_PWM_Start+0x17c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d018      	beq.n	8003312 <HAL_TIM_PWM_Start+0x136>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <HAL_TIM_PWM_Start+0x180>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_TIM_PWM_Start+0x136>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <HAL_TIM_PWM_Start+0x184>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_TIM_PWM_Start+0x136>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a16      	ldr	r2, [pc, #88]	; (8003354 <HAL_TIM_PWM_Start+0x178>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_TIM_PWM_Start+0x136>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_TIM_PWM_Start+0x188>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_TIM_PWM_Start+0x136>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a16      	ldr	r2, [pc, #88]	; (8003368 <HAL_TIM_PWM_Start+0x18c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b06      	cmp	r3, #6
 8003322:	d010      	beq.n	8003346 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	e007      	b.n	8003346 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40010000 	.word	0x40010000
 8003354:	40010400 	.word	0x40010400
 8003358:	40000400 	.word	0x40000400
 800335c:	40000800 	.word	0x40000800
 8003360:	40000c00 	.word	0x40000c00
 8003364:	40014000 	.word	0x40014000
 8003368:	40001800 	.word	0x40001800

0800336c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9b0 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9a2 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f9b3 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0204 	mvn.w	r2, #4
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f986 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f978 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f989 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b08      	cmp	r3, #8
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0208 	mvn.w	r2, #8
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f95c 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f94e 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f95f 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0210 	mvn.w	r2, #16
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2208      	movs	r2, #8
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f932 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f924 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f935 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0201 	mvn.w	r2, #1
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f001 f9dc 	bl	80048a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fc68 	bl	8003dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8fa 	bl	800373c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b20      	cmp	r3, #32
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0220 	mvn.w	r2, #32
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fc32 	bl	8003dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003596:	2302      	movs	r3, #2
 8003598:	e0ae      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	f200 809f 	bhi.w	80036e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	080036e9 	.word	0x080036e9
 80035b8:	080036e9 	.word	0x080036e9
 80035bc:	080036e9 	.word	0x080036e9
 80035c0:	08003625 	.word	0x08003625
 80035c4:	080036e9 	.word	0x080036e9
 80035c8:	080036e9 	.word	0x080036e9
 80035cc:	080036e9 	.word	0x080036e9
 80035d0:	08003667 	.word	0x08003667
 80035d4:	080036e9 	.word	0x080036e9
 80035d8:	080036e9 	.word	0x080036e9
 80035dc:	080036e9 	.word	0x080036e9
 80035e0:	080036a7 	.word	0x080036a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f950 	bl	8003890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0208 	orr.w	r2, r2, #8
 80035fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6999      	ldr	r1, [r3, #24]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	619a      	str	r2, [r3, #24]
      break;
 8003622:	e064      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f9a0 	bl	8003970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	021a      	lsls	r2, r3, #8
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	619a      	str	r2, [r3, #24]
      break;
 8003664:	e043      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f9f5 	bl	8003a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0208 	orr.w	r2, r2, #8
 8003680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0204 	bic.w	r2, r2, #4
 8003690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69d9      	ldr	r1, [r3, #28]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	61da      	str	r2, [r3, #28]
      break;
 80036a4:	e023      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fa49 	bl	8003b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69d9      	ldr	r1, [r3, #28]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	021a      	lsls	r2, r3, #8
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	61da      	str	r2, [r3, #28]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75fb      	strb	r3, [r7, #23]
      break;
 80036ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a40      	ldr	r2, [pc, #256]	; (8003864 <TIM_Base_SetConfig+0x114>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d00f      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <TIM_Base_SetConfig+0x118>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00b      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3c      	ldr	r2, [pc, #240]	; (800386c <TIM_Base_SetConfig+0x11c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <TIM_Base_SetConfig+0x120>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <TIM_Base_SetConfig+0x124>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d108      	bne.n	80037a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2f      	ldr	r2, [pc, #188]	; (8003864 <TIM_Base_SetConfig+0x114>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d027      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	; (8003868 <TIM_Base_SetConfig+0x118>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d023      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2b      	ldr	r2, [pc, #172]	; (800386c <TIM_Base_SetConfig+0x11c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01f      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <TIM_Base_SetConfig+0x120>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a29      	ldr	r2, [pc, #164]	; (8003874 <TIM_Base_SetConfig+0x124>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d017      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a28      	ldr	r2, [pc, #160]	; (8003878 <TIM_Base_SetConfig+0x128>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a27      	ldr	r2, [pc, #156]	; (800387c <TIM_Base_SetConfig+0x12c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00f      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a26      	ldr	r2, [pc, #152]	; (8003880 <TIM_Base_SetConfig+0x130>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a25      	ldr	r2, [pc, #148]	; (8003884 <TIM_Base_SetConfig+0x134>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a24      	ldr	r2, [pc, #144]	; (8003888 <TIM_Base_SetConfig+0x138>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <TIM_Base_SetConfig+0x13c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <TIM_Base_SetConfig+0x114>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_Base_SetConfig+0xf8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <TIM_Base_SetConfig+0x124>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d103      	bne.n	8003850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	615a      	str	r2, [r3, #20]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40010400 	.word	0x40010400
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400
 8003880:	40014800 	.word	0x40014800
 8003884:	40001800 	.word	0x40001800
 8003888:	40001c00 	.word	0x40001c00
 800388c:	40002000 	.word	0x40002000

08003890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0201 	bic.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 0302 	bic.w	r3, r3, #2
 80038d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a20      	ldr	r2, [pc, #128]	; (8003968 <TIM_OC1_SetConfig+0xd8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_OC1_SetConfig+0x64>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <TIM_OC1_SetConfig+0xdc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10c      	bne.n	800390e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0308 	bic.w	r3, r3, #8
 80038fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a15      	ldr	r2, [pc, #84]	; (8003968 <TIM_OC1_SetConfig+0xd8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_OC1_SetConfig+0x8e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <TIM_OC1_SetConfig+0xdc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d111      	bne.n	8003942 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40010000 	.word	0x40010000
 800396c:	40010400 	.word	0x40010400

08003970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0210 	bic.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0320 	bic.w	r3, r3, #32
 80039ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <TIM_OC2_SetConfig+0xe4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC2_SetConfig+0x68>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <TIM_OC2_SetConfig+0xe8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10d      	bne.n	80039f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <TIM_OC2_SetConfig+0xe4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC2_SetConfig+0x94>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <TIM_OC2_SetConfig+0xe8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d113      	bne.n	8003a2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40010400 	.word	0x40010400

08003a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0303 	bic.w	r3, r3, #3
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a21      	ldr	r2, [pc, #132]	; (8003b3c <TIM_OC3_SetConfig+0xe0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC3_SetConfig+0x66>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <TIM_OC3_SetConfig+0xe4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10d      	bne.n	8003ade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <TIM_OC3_SetConfig+0xe0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_OC3_SetConfig+0x92>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <TIM_OC3_SetConfig+0xe4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d113      	bne.n	8003b16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40010400 	.word	0x40010400

08003b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	031b      	lsls	r3, r3, #12
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <TIM_OC4_SetConfig+0xa4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC4_SetConfig+0x68>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <TIM_OC4_SetConfig+0xa8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d109      	bne.n	8003bc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010400 	.word	0x40010400

08003bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2201      	movs	r2, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e05a      	b.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca0:	d01d      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1a      	ldr	r2, [pc, #104]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40001800 	.word	0x40001800

08003d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e03d      	b.n	8003dcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e03f      	b.n	8003e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f001 fd3a 	bl	80058a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f929 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08a      	sub	sp, #40	; 0x28
 8003e9e:	af02      	add	r7, sp, #8
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d17c      	bne.n	8003fb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_UART_Transmit+0x2c>
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e075      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Transmit+0x3e>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e06e      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2221      	movs	r2, #33	; 0x21
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eee:	f7fd f8f9 	bl	80010e4 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d108      	bne.n	8003f1c <HAL_UART_Transmit+0x82>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e003      	b.n	8003f24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f2c:	e02a      	b.n	8003f84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2200      	movs	r2, #0
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f840 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e036      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	3302      	adds	r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e007      	b.n	8003f76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1cf      	bne.n	8003f2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f810 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e006      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b090      	sub	sp, #64	; 0x40
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	e050      	b.n	8004072 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d04c      	beq.n	8004072 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0x30>
 8003fde:	f7fd f881 	bl	80010e4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d241      	bcs.n	8004072 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800400e:	637a      	str	r2, [r7, #52]	; 0x34
 8004010:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3314      	adds	r3, #20
 8004028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	613b      	str	r3, [r7, #16]
   return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004042:	623a      	str	r2, [r7, #32]
 8004044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e00f      	b.n	8004092 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4013      	ands	r3, r2
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	429a      	cmp	r2, r3
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	429a      	cmp	r2, r3
 800408e:	d09f      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3740      	adds	r7, #64	; 0x40
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0c0      	sub	sp, #256	; 0x100
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	ea40 0301 	orr.w	r3, r0, r1
 80040c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f4:	f021 010c 	bic.w	r1, r1, #12
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004102:	430b      	orrs	r3, r1
 8004104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004116:	6999      	ldr	r1, [r3, #24]
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	ea40 0301 	orr.w	r3, r0, r1
 8004122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b8f      	ldr	r3, [pc, #572]	; (8004368 <UART_SetConfig+0x2cc>)
 800412c:	429a      	cmp	r2, r3
 800412e:	d005      	beq.n	800413c <UART_SetConfig+0xa0>
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b8d      	ldr	r3, [pc, #564]	; (800436c <UART_SetConfig+0x2d0>)
 8004138:	429a      	cmp	r2, r3
 800413a:	d104      	bne.n	8004146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7fe ff2a 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8004140:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004144:	e003      	b.n	800414e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7fe ff11 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 800414a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	f040 810c 	bne.w	8004374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800415c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004166:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800416a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	1891      	adds	r1, r2, r2
 8004174:	65b9      	str	r1, [r7, #88]	; 0x58
 8004176:	415b      	adcs	r3, r3
 8004178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800417a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800417e:	4621      	mov	r1, r4
 8004180:	eb12 0801 	adds.w	r8, r2, r1
 8004184:	4629      	mov	r1, r5
 8004186:	eb43 0901 	adc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041ac:	462b      	mov	r3, r5
 80041ae:	eb49 0303 	adc.w	r3, r9, r3
 80041b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041ca:	460b      	mov	r3, r1
 80041cc:	18db      	adds	r3, r3, r3
 80041ce:	653b      	str	r3, [r7, #80]	; 0x50
 80041d0:	4613      	mov	r3, r2
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	657b      	str	r3, [r7, #84]	; 0x54
 80041d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041e0:	f7fc fd62 	bl	8000ca8 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4b61      	ldr	r3, [pc, #388]	; (8004370 <UART_SetConfig+0x2d4>)
 80041ea:	fba3 2302 	umull	r2, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	011c      	lsls	r4, r3, #4
 80041f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	1891      	adds	r1, r2, r2
 800420a:	64b9      	str	r1, [r7, #72]	; 0x48
 800420c:	415b      	adcs	r3, r3
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004214:	4641      	mov	r1, r8
 8004216:	eb12 0a01 	adds.w	sl, r2, r1
 800421a:	4649      	mov	r1, r9
 800421c:	eb43 0b01 	adc.w	fp, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800422c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004234:	4692      	mov	sl, r2
 8004236:	469b      	mov	fp, r3
 8004238:	4643      	mov	r3, r8
 800423a:	eb1a 0303 	adds.w	r3, sl, r3
 800423e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004242:	464b      	mov	r3, r9
 8004244:	eb4b 0303 	adc.w	r3, fp, r3
 8004248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004258:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800425c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004260:	460b      	mov	r3, r1
 8004262:	18db      	adds	r3, r3, r3
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
 8004266:	4613      	mov	r3, r2
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
 800426e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004276:	f7fc fd17 	bl	8000ca8 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4611      	mov	r1, r2
 8004280:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <UART_SetConfig+0x2d4>)
 8004282:	fba3 2301 	umull	r2, r3, r3, r1
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2264      	movs	r2, #100	; 0x64
 800428a:	fb02 f303 	mul.w	r3, r2, r3
 800428e:	1acb      	subs	r3, r1, r3
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <UART_SetConfig+0x2d4>)
 8004298:	fba3 2302 	umull	r2, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042a4:	441c      	add	r4, r3
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	63b9      	str	r1, [r7, #56]	; 0x38
 80042c0:	415b      	adcs	r3, r3
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6339      	str	r1, [r7, #48]	; 0x30
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004314:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800431c:	460b      	mov	r3, r1
 800431e:	18db      	adds	r3, r3, r3
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
 8004322:	4613      	mov	r3, r2
 8004324:	eb42 0303 	adc.w	r3, r2, r3
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800432a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800432e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004332:	f7fc fcb9 	bl	8000ca8 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <UART_SetConfig+0x2d4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <UART_SetConfig+0x2d4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 0207 	and.w	r2, r3, #7
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4422      	add	r2, r4
 8004362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004364:	e105      	b.n	8004572 <UART_SetConfig+0x4d6>
 8004366:	bf00      	nop
 8004368:	40011000 	.word	0x40011000
 800436c:	40011400 	.word	0x40011400
 8004370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800437e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	1891      	adds	r1, r2, r2
 800438c:	6239      	str	r1, [r7, #32]
 800438e:	415b      	adcs	r3, r3
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
 8004392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004396:	4641      	mov	r1, r8
 8004398:	1854      	adds	r4, r2, r1
 800439a:	4649      	mov	r1, r9
 800439c:	eb43 0501 	adc.w	r5, r3, r1
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	18e3      	adds	r3, r4, r3
 80043b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043bc:	464b      	mov	r3, r9
 80043be:	eb45 0303 	adc.w	r3, r5, r3
 80043c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043e2:	4629      	mov	r1, r5
 80043e4:	008b      	lsls	r3, r1, #2
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ec:	4621      	mov	r1, r4
 80043ee:	008a      	lsls	r2, r1, #2
 80043f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043f4:	f7fc fc58 	bl	8000ca8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b60      	ldr	r3, [pc, #384]	; (8004580 <UART_SetConfig+0x4e4>)
 80043fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	011c      	lsls	r4, r3, #4
 8004406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004410:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	1891      	adds	r1, r2, r2
 800441e:	61b9      	str	r1, [r7, #24]
 8004420:	415b      	adcs	r3, r3
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004428:	4641      	mov	r1, r8
 800442a:	1851      	adds	r1, r2, r1
 800442c:	6139      	str	r1, [r7, #16]
 800442e:	4649      	mov	r1, r9
 8004430:	414b      	adcs	r3, r1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004440:	4659      	mov	r1, fp
 8004442:	00cb      	lsls	r3, r1, #3
 8004444:	4651      	mov	r1, sl
 8004446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444a:	4651      	mov	r1, sl
 800444c:	00ca      	lsls	r2, r1, #3
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	4603      	mov	r3, r0
 8004454:	4642      	mov	r2, r8
 8004456:	189b      	adds	r3, r3, r2
 8004458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	67bb      	str	r3, [r7, #120]	; 0x78
 8004472:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004480:	4649      	mov	r1, r9
 8004482:	008b      	lsls	r3, r1, #2
 8004484:	4641      	mov	r1, r8
 8004486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448a:	4641      	mov	r1, r8
 800448c:	008a      	lsls	r2, r1, #2
 800448e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004492:	f7fc fc09 	bl	8000ca8 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <UART_SetConfig+0x4e4>)
 800449c:	fba3 1302 	umull	r1, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	2164      	movs	r1, #100	; 0x64
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	3332      	adds	r3, #50	; 0x32
 80044ae:	4a34      	ldr	r2, [pc, #208]	; (8004580 <UART_SetConfig+0x4e4>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ba:	441c      	add	r4, r3
 80044bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c0:	2200      	movs	r2, #0
 80044c2:	673b      	str	r3, [r7, #112]	; 0x70
 80044c4:	677a      	str	r2, [r7, #116]	; 0x74
 80044c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044ca:	4642      	mov	r2, r8
 80044cc:	464b      	mov	r3, r9
 80044ce:	1891      	adds	r1, r2, r2
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	415b      	adcs	r3, r3
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044da:	4641      	mov	r1, r8
 80044dc:	1851      	adds	r1, r2, r1
 80044de:	6039      	str	r1, [r7, #0]
 80044e0:	4649      	mov	r1, r9
 80044e2:	414b      	adcs	r3, r1
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044f2:	4659      	mov	r1, fp
 80044f4:	00cb      	lsls	r3, r1, #3
 80044f6:	4651      	mov	r1, sl
 80044f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fc:	4651      	mov	r1, sl
 80044fe:	00ca      	lsls	r2, r1, #3
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	4603      	mov	r3, r0
 8004506:	4642      	mov	r2, r8
 8004508:	189b      	adds	r3, r3, r2
 800450a:	66bb      	str	r3, [r7, #104]	; 0x68
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	663b      	str	r3, [r7, #96]	; 0x60
 8004520:	667a      	str	r2, [r7, #100]	; 0x64
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800452e:	4649      	mov	r1, r9
 8004530:	008b      	lsls	r3, r1, #2
 8004532:	4641      	mov	r1, r8
 8004534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004538:	4641      	mov	r1, r8
 800453a:	008a      	lsls	r2, r1, #2
 800453c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004540:	f7fc fbb2 	bl	8000ca8 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <UART_SetConfig+0x4e4>)
 800454a:	fba3 1302 	umull	r1, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2164      	movs	r1, #100	; 0x64
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <UART_SetConfig+0x4e4>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4422      	add	r2, r4
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <joy_steer_to_steer>:
#define JOY_STEERING_INDEX 1
#define JOY_THROTTLE_INDEX 0
#define JOY_EMK_INDEX 4
#define JOY_MODE_INDEX 5

static void joy_steer_to_steer(app_state_t *app){
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	int joy_steer = app->rc_receiver_state.channels[JOY_STEERING_INDEX].servo_position;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004592:	617b      	str	r3, [r7, #20]

	if (joy_steer > SPEKTRUM_STEER_NEUTRAL){
 8004594:	4b34      	ldr	r3, [pc, #208]	; (8004668 <joy_steer_to_steer+0xe4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	429a      	cmp	r2, r3
 800459c:	dd2e      	ble.n	80045fc <joy_steer_to_steer+0x78>
		float steering_percent = ((float) joy_steer - (float)SPEKTRUM_STEER_NEUTRAL) / ((float)SPEKTRUM_STEER_MAX - (float)SPEKTRUM_STEER_NEUTRAL);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045a8:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <joy_steer_to_steer+0xe4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80045b8:	4b2c      	ldr	r3, [pc, #176]	; (800466c <joy_steer_to_steer+0xe8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045c4:	4b28      	ldr	r3, [pc, #160]	; (8004668 <joy_steer_to_steer+0xe4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d8:	edc7 7a03 	vstr	s15, [r7, #12]
		app->steering_angle = steering_percent * GOKART_STEER_MAX + GOKART_STEER_MAX;
 80045dc:	4b24      	ldr	r3, [pc, #144]	; (8004670 <joy_steer_to_steer+0xec>)
 80045de:	ed93 7a00 	vldr	s14, [r3]
 80045e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80045e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <joy_steer_to_steer+0xec>)
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	edc3 7a01 	vstr	s15, [r3, #4]
	} else{
		float steering_percent = ((float) SPEKTRUM_STEER_NEUTRAL - (float)joy_steer) / ((float)SPEKTRUM_STEER_NEUTRAL - (float)SPEKTRUM_STEER_MIN);
		app->steering_angle = -steering_percent * GOKART_STEER_MAX + GOKART_STEER_MAX;
	}
}
 80045fa:	e02f      	b.n	800465c <joy_steer_to_steer+0xd8>
		float steering_percent = ((float) SPEKTRUM_STEER_NEUTRAL - (float)joy_steer) / ((float)SPEKTRUM_STEER_NEUTRAL - (float)SPEKTRUM_STEER_MIN);
 80045fc:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <joy_steer_to_steer+0xe4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004612:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <joy_steer_to_steer+0xe4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <joy_steer_to_steer+0xf0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800462e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004636:	edc7 7a04 	vstr	s15, [r7, #16]
		app->steering_angle = -steering_percent * GOKART_STEER_MAX + GOKART_STEER_MAX;
 800463a:	edd7 7a04 	vldr	s15, [r7, #16]
 800463e:	eeb1 7a67 	vneg.f32	s14, s15
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <joy_steer_to_steer+0xec>)
 8004644:	edd3 7a00 	vldr	s15, [r3]
 8004648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <joy_steer_to_steer+0xec>)
 800464e:	edd3 7a00 	vldr	s15, [r3]
 8004652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800465c:	bf00      	nop
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	2000001c 	.word	0x2000001c
 800466c:	20000018 	.word	0x20000018
 8004670:	20000008 	.word	0x20000008
 8004674:	20000014 	.word	0x20000014

08004678 <joy_throttle_to_throttle>:

static void joy_throttle_to_throttle(app_state_t *app){
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	int joy_throttle = app->rc_receiver_state.channels[JOY_THROTTLE_INDEX].servo_position;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004686:	60fb      	str	r3, [r7, #12]
	float acc_percent = (float)(joy_throttle - SPEKTRUM_THROTTLE_NEUTRAL) / (float)(SPEKTRUM_THROTTLE_MAX - SPEKTRUM_THROTTLE_NEUTRAL);
 8004688:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <joy_throttle_to_throttle+0x108>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	ee07 3a90 	vmov	s15, r3
 8004694:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004698:	4b3a      	ldr	r3, [pc, #232]	; (8004784 <joy_throttle_to_throttle+0x10c>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <joy_throttle_to_throttle+0x108>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ae:	edc7 7a02 	vstr	s15, [r7, #8]

	app->acc_percent = acc_percent;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	601a      	str	r2, [r3, #0]

//	debug_printf("acceleration %.2f" nl, acc_percent);

	if (acc_percent < -0.6){
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f7fb ff55 	bl	8000568 <__aeabi_f2d>
 80046be:	a32c      	add	r3, pc, #176	; (adr r3, 8004770 <joy_throttle_to_throttle+0xf8>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fc fa1a 	bl	8000afc <__aeabi_dcmplt>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d011      	beq.n	80046f2 <joy_throttle_to_throttle+0x7a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80046ce:	2201      	movs	r2, #1
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	482d      	ldr	r0, [pc, #180]	; (8004788 <joy_throttle_to_throttle+0x110>)
 80046d4:	f7fd ffc0 	bl	8002658 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80046d8:	2201      	movs	r2, #1
 80046da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046de:	482b      	ldr	r0, [pc, #172]	; (800478c <joy_throttle_to_throttle+0x114>)
 80046e0:	f7fd ffba 	bl	8002658 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046ea:	4828      	ldr	r0, [pc, #160]	; (800478c <joy_throttle_to_throttle+0x114>)
 80046ec:	f7fd ffb4 	bl	8002658 <HAL_GPIO_WritePin>
	} else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
	}
}
 80046f0:	e038      	b.n	8004764 <joy_throttle_to_throttle+0xec>
	} else if (acc_percent > -0.6 && acc_percent > -0.2){
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f7fb ff38 	bl	8000568 <__aeabi_f2d>
 80046f8:	a31d      	add	r3, pc, #116	; (adr r3, 8004770 <joy_throttle_to_throttle+0xf8>)
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f7fc fa1b 	bl	8000b38 <__aeabi_dcmpgt>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01c      	beq.n	8004742 <joy_throttle_to_throttle+0xca>
 8004708:	68b8      	ldr	r0, [r7, #8]
 800470a:	f7fb ff2d 	bl	8000568 <__aeabi_f2d>
 800470e:	a31a      	add	r3, pc, #104	; (adr r3, 8004778 <joy_throttle_to_throttle+0x100>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fc fa10 	bl	8000b38 <__aeabi_dcmpgt>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <joy_throttle_to_throttle+0xca>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800471e:	2200      	movs	r2, #0
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	4819      	ldr	r0, [pc, #100]	; (8004788 <joy_throttle_to_throttle+0x110>)
 8004724:	f7fd ff98 	bl	8002658 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8004728:	2201      	movs	r2, #1
 800472a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800472e:	4817      	ldr	r0, [pc, #92]	; (800478c <joy_throttle_to_throttle+0x114>)
 8004730:	f7fd ff92 	bl	8002658 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004734:	2200      	movs	r2, #0
 8004736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800473a:	4814      	ldr	r0, [pc, #80]	; (800478c <joy_throttle_to_throttle+0x114>)
 800473c:	f7fd ff8c 	bl	8002658 <HAL_GPIO_WritePin>
}
 8004740:	e010      	b.n	8004764 <joy_throttle_to_throttle+0xec>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004742:	2200      	movs	r2, #0
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	4810      	ldr	r0, [pc, #64]	; (8004788 <joy_throttle_to_throttle+0x110>)
 8004748:	f7fd ff86 	bl	8002658 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 800474c:	2200      	movs	r2, #0
 800474e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004752:	480e      	ldr	r0, [pc, #56]	; (800478c <joy_throttle_to_throttle+0x114>)
 8004754:	f7fd ff80 	bl	8002658 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8004758:	2200      	movs	r2, #0
 800475a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800475e:	480b      	ldr	r0, [pc, #44]	; (800478c <joy_throttle_to_throttle+0x114>)
 8004760:	f7fd ff7a 	bl	8002658 <HAL_GPIO_WritePin>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	f3af 8000 	nop.w
 8004770:	33333333 	.word	0x33333333
 8004774:	bfe33333 	.word	0xbfe33333
 8004778:	9999999a 	.word	0x9999999a
 800477c:	bfc99999 	.word	0xbfc99999
 8004780:	20000010 	.word	0x20000010
 8004784:	2000000c 	.word	0x2000000c
 8004788:	40020400 	.word	0x40020400
 800478c:	40021000 	.word	0x40021000

08004790 <joy_switch_to_power>:

static void joy_switch_to_power(app_state_t *app){
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	int emk = app->rc_receiver_state.channels[4].servo_position;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800479e:	60fb      	str	r3, [r7, #12]

	if (emk == 1706){
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f240 62aa 	movw	r2, #1706	; 0x6aa
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d106      	bne.n	80047b8 <joy_switch_to_power+0x28>
	  HAL_GPIO_WritePin(GPIOE, relay_vcc_Pin|relay_input_Pin, GPIO_PIN_SET);
 80047aa:	2201      	movs	r2, #1
 80047ac:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80047b0:	4806      	ldr	r0, [pc, #24]	; (80047cc <joy_switch_to_power+0x3c>)
 80047b2:	f7fd ff51 	bl	8002658 <HAL_GPIO_WritePin>
	} else{
	  HAL_GPIO_WritePin(GPIOE, relay_vcc_Pin|relay_input_Pin, GPIO_PIN_RESET);
	}
}
 80047b6:	e005      	b.n	80047c4 <joy_switch_to_power+0x34>
	  HAL_GPIO_WritePin(GPIOE, relay_vcc_Pin|relay_input_Pin, GPIO_PIN_RESET);
 80047b8:	2200      	movs	r2, #0
 80047ba:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80047be:	4803      	ldr	r0, [pc, #12]	; (80047cc <joy_switch_to_power+0x3c>)
 80047c0:	f7fd ff4a 	bl	8002658 <HAL_GPIO_WritePin>
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000

080047d0 <convert_channels_to_commands>:

static void convert_channels_to_commands(app_state_t *app) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	joy_steer_to_steer(app);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fed3 	bl	8004584 <joy_steer_to_steer>
	joy_throttle_to_throttle(app);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ff4a 	bl	8004678 <joy_throttle_to_throttle>
	joy_switch_to_power(app);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ffd3 	bl	8004790 <joy_switch_to_power>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <handle_spektrum_msg>:

static void handle_spektrum_msg(const spektrum_internal_msg_t *msg, void *context) {
 80047f2:	b590      	push	{r4, r7, lr}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]

	app_state_t *app = (app_state_t *) context;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

	spektrum_msg_to_state(msg, &app->rc_receiver_state, (long) HAL_GetTick());
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8004806:	f7fc fc6d 	bl	80010e4 <HAL_GetTick>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	4621      	mov	r1, r4
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fd56 	bl	80052c2 <spektrum_msg_to_state>

	if (app->num_rc_readings < 5) {
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800481c:	2b04      	cmp	r3, #4
 800481e:	dc07      	bgt.n	8004830 <handle_spektrum_msg+0x3e>
		app->num_rc_readings++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		return;
 800482e:	e002      	b.n	8004836 <handle_spektrum_msg+0x44>
	}

	// convert to commands
	convert_channels_to_commands(app);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ffcd 	bl	80047d0 <convert_channels_to_commands>
}
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}

0800483c <app_run>:

void app_debug_loop(app_state_t *app) {

}

void app_run(app_state_t *app) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

	// STARTUP
	printf(red_bold("------------------------------") nl);
 8004844:	4812      	ldr	r0, [pc, #72]	; (8004890 <app_run+0x54>)
 8004846:	f002 fb09 	bl	8006e5c <puts>
	printf(MAIN "waiting..." nl);
 800484a:	4812      	ldr	r0, [pc, #72]	; (8004894 <app_run+0x58>)
 800484c:	f002 fb06 	bl	8006e5c <puts>
	debug_sizeof();
 8004850:	f001 fa3a 	bl	8005cc8 <debug_sizeof>

	// add a delay to ensure all external peripherals correctly start up
	// and start providing correct data
	HAL_Delay(100);
 8004854:	2064      	movs	r0, #100	; 0x64
 8004856:	f7fc fc51 	bl	80010fc <HAL_Delay>

	printf(MAIN "starting..." nl);
 800485a:	480f      	ldr	r0, [pc, #60]	; (8004898 <app_run+0x5c>)
 800485c:	f002 fafe 	bl	8006e5c <puts>

	app->steering_angle = 60.0;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <app_run+0x60>)
 8004864:	605a      	str	r2, [r3, #4]

	spektrum_nucleo_state_t *rc_receiver = &app->rc_receiver;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	330c      	adds	r3, #12
 800486a:	60fb      	str	r3, [r7, #12]

	spektrum_nucleo_init(rc_receiver);
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fd8c 	bl	800538a <spektrum_nucleo_init>
	spektrum_nucleo_start_receiving(SPEKTRUM_UART);
 8004872:	480b      	ldr	r0, [pc, #44]	; (80048a0 <app_run+0x64>)
 8004874:	f000 fe52 	bl	800551c <spektrum_nucleo_start_receiving>

	rc_receiver->msg_handler = handle_spektrum_msg;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <app_run+0x68>)
 800487c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	rc_receiver->msg_handler_context = app;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	0800a790 	.word	0x0800a790
 8004894:	0800a7bc 	.word	0x0800a7bc
 8004898:	0800a7e0 	.word	0x0800a7e0
 800489c:	42700000 	.word	0x42700000
 80048a0:	20000324 	.word	0x20000324
 80048a4:	080047f3 	.word	0x080047f3

080048a8 <HAL_TIM_PeriodElapsedCallback>:
		return (uint8_t) (huart3.Instance->DR & (uint8_t) 0x00FF);
	}
	return -1;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a59      	ldr	r2, [pc, #356]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	f040 80a1 	bne.w	80049fc <HAL_TIM_PeriodElapsedCallback+0x154>
	  // get remote control speed
	  acc_percent = app.acc_percent;
 80048ba:	4b58      	ldr	r3, [pc, #352]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80048c0:	6013      	str	r3, [r2, #0]

	  if (acc_percent < -0.6){
 80048c2:	4b57      	ldr	r3, [pc, #348]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fb fe4e 	bl	8000568 <__aeabi_f2d>
 80048cc:	a34e      	add	r3, pc, #312	; (adr r3, 8004a08 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fc f913 	bl	8000afc <__aeabi_dcmplt>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		  TxData[1] = (int)0;
 80048dc:	4b51      	ldr	r3, [pc, #324]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80048de:	2200      	movs	r2, #0
 80048e0:	705a      	strb	r2, [r3, #1]
	  }
	  if (acc_percent >= -0.6 && acc_percent < -0.2){
 80048e2:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fb fe3e 	bl	8000568 <__aeabi_f2d>
 80048ec:	a346      	add	r3, pc, #280	; (adr r3, 8004a08 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fc f917 	bl	8000b24 <__aeabi_dcmpge>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00f      	beq.n	800491c <HAL_TIM_PeriodElapsedCallback+0x74>
 80048fc:	4b48      	ldr	r3, [pc, #288]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fe31 	bl	8000568 <__aeabi_f2d>
 8004906:	a342      	add	r3, pc, #264	; (adr r3, 8004a10 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f7fc f8f6 	bl	8000afc <__aeabi_dcmplt>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_TIM_PeriodElapsedCallback+0x74>
		  TxData[1] = (int)1;
 8004916:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004918:	2201      	movs	r2, #1
 800491a:	705a      	strb	r2, [r3, #1]
	  }
	  if (acc_percent >= -0.2){
 800491c:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fb fe21 	bl	8000568 <__aeabi_f2d>
 8004926:	a33a      	add	r3, pc, #232	; (adr r3, 8004a10 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fc f8fa 	bl	8000b24 <__aeabi_dcmpge>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_TIM_PeriodElapsedCallback+0x94>
		  TxData[1] = (int)2;
 8004936:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004938:	2202      	movs	r2, #2
 800493a:	705a      	strb	r2, [r3, #1]
	  }

	  if (acc_percent < 0.00){
 800493c:	4b38      	ldr	r3, [pc, #224]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800493e:	edd3 7a00 	vldr	s15, [r3]
 8004942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d503      	bpl.n	8004954 <HAL_TIM_PeriodElapsedCallback+0xac>
		  acc_percent = 0.00;
 800494c:	4b34      	ldr	r3, [pc, #208]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
	  }

	  if (acc_percent > 1.00){
 8004954:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004956:	edd3 7a00 	vldr	s15, [r3]
 800495a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800495e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004966:	dd03      	ble.n	8004970 <HAL_TIM_PeriodElapsedCallback+0xc8>
		  acc_percent = 1.00;
 8004968:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800496a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800496e:	601a      	str	r2, [r3, #0]
	  }

	  speed_suppress_count += 1;
 8004970:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	4a2c      	ldr	r2, [pc, #176]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004978:	6013      	str	r3, [r2, #0]

	  if (speed_suppress_count < speed_suppress_low){
 800497a:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	da16      	bge.n	80049b4 <HAL_TIM_PeriodElapsedCallback+0x10c>
		  TIM1->CCR1 = 135 - 135 * acc_percent * acc_limit;
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004988:	edd3 7a00 	vldr	s15, [r3]
 800498c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004a30 <HAL_TIM_PeriodElapsedCallback+0x188>
 8004990:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004996:	edd3 7a00 	vldr	s15, [r3]
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004a30 <HAL_TIM_PeriodElapsedCallback+0x188>
 80049a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 2a90 	vmov	r2, s15
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34
 80049b2:	e00f      	b.n	80049d4 <HAL_TIM_PeriodElapsedCallback+0x12c>
	  }
	  else if(speed_suppress_count < speed_suppress_high){
 80049b4:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	da03      	bge.n	80049c8 <HAL_TIM_PeriodElapsedCallback+0x120>
		  TIM1->CCR1 = 135;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80049c2:	2287      	movs	r2, #135	; 0x87
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34
 80049c6:	e005      	b.n	80049d4 <HAL_TIM_PeriodElapsedCallback+0x12c>
	  }
	  else{
		  TIM1->CCR1 = 135;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80049ca:	2287      	movs	r2, #135	; 0x87
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34
		  speed_suppress_count = 0;
 80049ce:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
	  }

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80049d4:	2100      	movs	r1, #0
 80049d6:	481a      	ldr	r0, [pc, #104]	; (8004a40 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80049d8:	f7fe fc00 	bl	80031dc <HAL_TIM_PWM_Start>

	  // send steer command over can bus
	  TxData[0] = (int)app.steering_angle;
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80049de:	edd3 7a01 	vldr	s15, [r3, #4]
 80049e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e6:	edc7 7a00 	vstr	s15, [r7]
 80049ea:	783a      	ldrb	r2, [r7, #0]
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80049ee:	701a      	strb	r2, [r3, #0]

	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80049f0:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80049f4:	4914      	ldr	r1, [pc, #80]	; (8004a48 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80049f6:	4815      	ldr	r0, [pc, #84]	; (8004a4c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80049f8:	f7fd f836 	bl	8001a68 <HAL_CAN_AddTxMessage>
  }
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	f3af 8000 	nop.w
 8004a08:	33333333 	.word	0x33333333
 8004a0c:	bfe33333 	.word	0xbfe33333
 8004a10:	9999999a 	.word	0x9999999a
 8004a14:	bfc99999 	.word	0xbfc99999
 8004a18:	200002dc 	.word	0x200002dc
 8004a1c:	200003f8 	.word	0x200003f8
 8004a20:	200003f0 	.word	0x200003f0
 8004a24:	20000530 	.word	0x20000530
 8004a28:	200003f4 	.word	0x200003f4
 8004a2c:	20000024 	.word	0x20000024
 8004a30:	43070000 	.word	0x43070000
 8004a34:	20000020 	.word	0x20000020
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	20000028 	.word	0x20000028
 8004a40:	20000294 	.word	0x20000294
 8004a44:	2000052c 	.word	0x2000052c
 8004a48:	20000514 	.word	0x20000514
 8004a4c:	2000026c 	.word	0x2000026c

08004a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a54:	f7fc fae0 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a58:	f000 f824 	bl	8004aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a5c:	f000 fa84 	bl	8004f68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8004a60:	f000 fa2e 	bl	8004ec0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8004a64:	f000 fa02 	bl	8004e6c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004a68:	f000 f946 	bl	8004cf8 <MX_TIM1_Init>
  MX_CAN1_Init();
 8004a6c:	f000 f8d6 	bl	8004c1c <MX_CAN1_Init>
  MX_ADC1_Init();
 8004a70:	f000 f882 	bl	8004b78 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8004a74:	f000 fa4e 	bl	8004f14 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8004a78:	f000 f9c2 	bl	8004e00 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  main_app = &app;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <main+0x48>)
 8004a7e:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <main+0x4c>)
 8004a80:	601a      	str	r2, [r3, #0]
  app_run(&app);
 8004a82:	4806      	ldr	r0, [pc, #24]	; (8004a9c <main+0x4c>)
 8004a84:	f7ff feda 	bl	800483c <app_run>

  HAL_TIM_Base_Start_IT(&htim6);
 8004a88:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <main+0x50>)
 8004a8a:	f7fe fae7 	bl	800305c <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8004a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a92:	f7fc fb33 	bl	80010fc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004a96:	e7fe      	b.n	8004a96 <main+0x46>
 8004a98:	20000510 	.word	0x20000510
 8004a9c:	200003f8 	.word	0x200003f8
 8004aa0:	200002dc 	.word	0x200002dc

08004aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b094      	sub	sp, #80	; 0x50
 8004aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aaa:	f107 0320 	add.w	r3, r7, #32
 8004aae:	2230      	movs	r2, #48	; 0x30
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f989 	bl	8005dca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <SystemClock_Config+0xcc>)
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	4a27      	ldr	r2, [pc, #156]	; (8004b70 <SystemClock_Config+0xcc>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <SystemClock_Config+0xcc>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <SystemClock_Config+0xd0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <SystemClock_Config+0xd0>)
 8004aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <SystemClock_Config+0xd0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b00:	2302      	movs	r3, #2
 8004b02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b04:	2301      	movs	r3, #1
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b08:	2310      	movs	r3, #16
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b10:	2300      	movs	r3, #0
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004b14:	2308      	movs	r3, #8
 8004b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004b18:	23a8      	movs	r3, #168	; 0xa8
 8004b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004b20:	2307      	movs	r3, #7
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b24:	f107 0320 	add.w	r3, r7, #32
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fdaf 	bl	800268c <HAL_RCC_OscConfig>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004b34:	f000 fb3e 	bl	80051b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b38:	230f      	movs	r3, #15
 8004b3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004b50:	f107 030c 	add.w	r3, r7, #12
 8004b54:	2105      	movs	r1, #5
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe f810 	bl	8002b7c <HAL_RCC_ClockConfig>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004b62:	f000 fb27 	bl	80051b4 <Error_Handler>
  }
}
 8004b66:	bf00      	nop
 8004b68:	3750      	adds	r7, #80	; 0x50
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000

08004b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b7e:	463b      	mov	r3, r7
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004b8c:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <MX_ADC1_Init+0x9c>)
 8004b8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004b90:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004b92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004b98:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004bb2:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bba:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <MX_ADC1_Init+0xa0>)
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004bd8:	480d      	ldr	r0, [pc, #52]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bda:	f7fc fab3 	bl	8001144 <HAL_ADC_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004be4:	f000 fae6 	bl	80051b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004be8:	2303      	movs	r3, #3
 8004bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4805      	ldr	r0, [pc, #20]	; (8004c10 <MX_ADC1_Init+0x98>)
 8004bfa:	f7fc fae7 	bl	80011cc <HAL_ADC_ConfigChannel>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004c04:	f000 fad6 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000224 	.word	0x20000224
 8004c14:	40012000 	.word	0x40012000
 8004c18:	0f000001 	.word	0x0f000001

08004c1c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
  TxHeader.DLC = 4;
 8004c22:	4b32      	ldr	r3, [pc, #200]	; (8004cec <MX_CAN1_Init+0xd0>)
 8004c24:	2204      	movs	r2, #4
 8004c26:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8004c28:	4b30      	ldr	r3, [pc, #192]	; (8004cec <MX_CAN1_Init+0xd0>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8004c2e:	4b2f      	ldr	r3, [pc, #188]	; (8004cec <MX_CAN1_Init+0xd0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <MX_CAN1_Init+0xd0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x104;
 8004c3a:	4b2c      	ldr	r3, [pc, #176]	; (8004cec <MX_CAN1_Init+0xd0>)
 8004c3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c40:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8004c42:	4b2a      	ldr	r3, [pc, #168]	; (8004cec <MX_CAN1_Init+0xd0>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <MX_CAN1_Init+0xd8>)
 8004c4c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 42;
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c50:	222a      	movs	r2, #42	; 0x2a
 8004c52:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004c54:	4b26      	ldr	r3, [pc, #152]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8004c60:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c62:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8004c66:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c6a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8004c6e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8004c7c:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004c94:	4816      	ldr	r0, [pc, #88]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004c96:	f7fc fcc7 	bl	8001628 <HAL_CAN_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_CAN1_Init+0x88>
  {
    Error_Handler();
 8004ca0:	f000 fa88 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 8004ca8:	230a      	movs	r3, #10
 8004caa:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8004ccc:	463b      	mov	r3, r7
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4807      	ldr	r0, [pc, #28]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004cd2:	f7fc fda5 	bl	8001820 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8004cd6:	4806      	ldr	r0, [pc, #24]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004cd8:	f7fc fe82 	bl	80019e0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4804      	ldr	r0, [pc, #16]	; (8004cf0 <MX_CAN1_Init+0xd4>)
 8004ce0:	f7fc ff9d 	bl	8001c1e <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 8004ce4:	bf00      	nop
 8004ce6:	3728      	adds	r7, #40	; 0x28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000514 	.word	0x20000514
 8004cf0:	2000026c 	.word	0x2000026c
 8004cf4:	40006400 	.word	0x40006400

08004cf8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b092      	sub	sp, #72	; 0x48
 8004cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]
 8004d18:	615a      	str	r2, [r3, #20]
 8004d1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	2220      	movs	r2, #32
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 f851 	bl	8005dca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d28:	4b33      	ldr	r3, [pc, #204]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d2a:	4a34      	ldr	r2, [pc, #208]	; (8004dfc <MX_TIM1_Init+0x104>)
 8004d2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3*168-1;
 8004d2e:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d30:	f240 12f7 	movw	r2, #503	; 0x1f7
 8004d34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d36:	4b30      	ldr	r3, [pc, #192]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8004d3c:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d3e:	22c7      	movs	r2, #199	; 0xc7
 8004d40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d42:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d48:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d54:	4828      	ldr	r0, [pc, #160]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d56:	f7fe f9f1 	bl	800313c <HAL_TIM_PWM_Init>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004d60:	f000 fa28 	bl	80051b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d64:	2300      	movs	r3, #0
 8004d66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d70:	4619      	mov	r1, r3
 8004d72:	4821      	ldr	r0, [pc, #132]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004d74:	f7fe ff62 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004d7e:	f000 fa19 	bl	80051b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d82:	2360      	movs	r3, #96	; 0x60
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da2:	2200      	movs	r2, #0
 8004da4:	4619      	mov	r1, r3
 8004da6:	4814      	ldr	r0, [pc, #80]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004da8:	f7fe fbe8 	bl	800357c <HAL_TIM_PWM_ConfigChannel>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004db2:	f000 f9ff 	bl	80051b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4807      	ldr	r0, [pc, #28]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004dda:	f7fe ffab 	bl	8003d34 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8004de4:	f000 f9e6 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004de8:	4803      	ldr	r0, [pc, #12]	; (8004df8 <MX_TIM1_Init+0x100>)
 8004dea:	f000 fd1f 	bl	800582c <HAL_TIM_MspPostInit>

}
 8004dee:	bf00      	nop
 8004df0:	3748      	adds	r7, #72	; 0x48
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000294 	.word	0x20000294
 8004dfc:	40010000 	.word	0x40010000

08004e00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e06:	463b      	mov	r3, r7
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <MX_TIM6_Init+0x64>)
 8004e10:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <MX_TIM6_Init+0x68>)
 8004e12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168-1;
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <MX_TIM6_Init+0x64>)
 8004e16:	22a7      	movs	r2, #167	; 0xa7
 8004e18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <MX_TIM6_Init+0x64>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8004e20:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <MX_TIM6_Init+0x64>)
 8004e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <MX_TIM6_Init+0x64>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004e2e:	480d      	ldr	r0, [pc, #52]	; (8004e64 <MX_TIM6_Init+0x64>)
 8004e30:	f7fe f8c4 	bl	8002fbc <HAL_TIM_Base_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004e3a:	f000 f9bb 	bl	80051b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004e46:	463b      	mov	r3, r7
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4806      	ldr	r0, [pc, #24]	; (8004e64 <MX_TIM6_Init+0x64>)
 8004e4c:	f7fe fef6 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004e56:	f000 f9ad 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200002dc 	.word	0x200002dc
 8004e68:	40001000 	.word	0x40001000

08004e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e72:	4a12      	ldr	r2, [pc, #72]	; (8004ebc <MX_USART2_UART_Init+0x50>)
 8004e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e92:	2204      	movs	r2, #4
 8004e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ea2:	4805      	ldr	r0, [pc, #20]	; (8004eb8 <MX_USART2_UART_Init+0x4c>)
 8004ea4:	f7fe ffac 	bl	8003e00 <HAL_UART_Init>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004eae:	f000 f981 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000324 	.word	0x20000324
 8004ebc:	40004400 	.word	0x40004400

08004ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <MX_USART3_UART_Init+0x50>)
 8004ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004eca:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004ee6:	220c      	movs	r2, #12
 8004ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ef6:	4805      	ldr	r0, [pc, #20]	; (8004f0c <MX_USART3_UART_Init+0x4c>)
 8004ef8:	f7fe ff82 	bl	8003e00 <HAL_UART_Init>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004f02:	f000 f957 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000368 	.word	0x20000368
 8004f10:	40004800 	.word	0x40004800

08004f14 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004f18:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <MX_USART6_UART_Init+0x50>)
 8004f1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f24:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f26:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004f38:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f3a:	220c      	movs	r2, #12
 8004f3c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f3e:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004f4a:	4805      	ldr	r0, [pc, #20]	; (8004f60 <MX_USART6_UART_Init+0x4c>)
 8004f4c:	f7fe ff58 	bl	8003e00 <HAL_UART_Init>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004f56:	f000 f92d 	bl	80051b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	200003ac 	.word	0x200003ac
 8004f64:	40011400 	.word	0x40011400

08004f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f6e:	f107 031c 	add.w	r3, r7, #28
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	609a      	str	r2, [r3, #8]
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	4b86      	ldr	r3, [pc, #536]	; (800519c <MX_GPIO_Init+0x234>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a85      	ldr	r2, [pc, #532]	; (800519c <MX_GPIO_Init+0x234>)
 8004f88:	f043 0304 	orr.w	r3, r3, #4
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b83      	ldr	r3, [pc, #524]	; (800519c <MX_GPIO_Init+0x234>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	4b7f      	ldr	r3, [pc, #508]	; (800519c <MX_GPIO_Init+0x234>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	4a7e      	ldr	r2, [pc, #504]	; (800519c <MX_GPIO_Init+0x234>)
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004faa:	4b7c      	ldr	r3, [pc, #496]	; (800519c <MX_GPIO_Init+0x234>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	4b78      	ldr	r3, [pc, #480]	; (800519c <MX_GPIO_Init+0x234>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	4a77      	ldr	r2, [pc, #476]	; (800519c <MX_GPIO_Init+0x234>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc6:	4b75      	ldr	r3, [pc, #468]	; (800519c <MX_GPIO_Init+0x234>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	4b71      	ldr	r3, [pc, #452]	; (800519c <MX_GPIO_Init+0x234>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	4a70      	ldr	r2, [pc, #448]	; (800519c <MX_GPIO_Init+0x234>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe2:	4b6e      	ldr	r3, [pc, #440]	; (800519c <MX_GPIO_Init+0x234>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	4b6a      	ldr	r3, [pc, #424]	; (800519c <MX_GPIO_Init+0x234>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	4a69      	ldr	r2, [pc, #420]	; (800519c <MX_GPIO_Init+0x234>)
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffe:	4b67      	ldr	r3, [pc, #412]	; (800519c <MX_GPIO_Init+0x234>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	4b63      	ldr	r3, [pc, #396]	; (800519c <MX_GPIO_Init+0x234>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	4a62      	ldr	r2, [pc, #392]	; (800519c <MX_GPIO_Init+0x234>)
 8005014:	f043 0308 	orr.w	r3, r3, #8
 8005018:	6313      	str	r3, [r2, #48]	; 0x30
 800501a:	4b60      	ldr	r3, [pc, #384]	; (800519c <MX_GPIO_Init+0x234>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	607b      	str	r3, [r7, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4b5c      	ldr	r3, [pc, #368]	; (800519c <MX_GPIO_Init+0x234>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	4a5b      	ldr	r2, [pc, #364]	; (800519c <MX_GPIO_Init+0x234>)
 8005030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005034:	6313      	str	r3, [r2, #48]	; 0x30
 8005036:	4b59      	ldr	r3, [pc, #356]	; (800519c <MX_GPIO_Init+0x234>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005042:	2200      	movs	r2, #0
 8005044:	f244 0181 	movw	r1, #16513	; 0x4081
 8005048:	4855      	ldr	r0, [pc, #340]	; (80051a0 <MX_GPIO_Init+0x238>)
 800504a:	f7fd fb05 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, relay_vcc_Pin|relay_input_Pin, GPIO_PIN_RESET);
 800504e:	2200      	movs	r2, #0
 8005050:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8005054:	4853      	ldr	r0, [pc, #332]	; (80051a4 <MX_GPIO_Init+0x23c>)
 8005056:	f7fd faff 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800505a:	2200      	movs	r2, #0
 800505c:	2160      	movs	r1, #96	; 0x60
 800505e:	4852      	ldr	r0, [pc, #328]	; (80051a8 <MX_GPIO_Init+0x240>)
 8005060:	f7fd fafa 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005064:	2332      	movs	r3, #50	; 0x32
 8005066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2302      	movs	r3, #2
 800506a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005070:	2303      	movs	r3, #3
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005074:	230b      	movs	r3, #11
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005078:	f107 031c 	add.w	r3, r7, #28
 800507c:	4619      	mov	r1, r3
 800507e:	484b      	ldr	r0, [pc, #300]	; (80051ac <MX_GPIO_Init+0x244>)
 8005080:	f7fd f93e 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005084:	2386      	movs	r3, #134	; 0x86
 8005086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	2302      	movs	r3, #2
 800508a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005090:	2303      	movs	r3, #3
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005094:	230b      	movs	r3, #11
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005098:	f107 031c 	add.w	r3, r7, #28
 800509c:	4619      	mov	r1, r3
 800509e:	4844      	ldr	r0, [pc, #272]	; (80051b0 <MX_GPIO_Init+0x248>)
 80050a0:	f7fd f92e 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80050a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80050a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050aa:	2301      	movs	r3, #1
 80050ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b6:	f107 031c 	add.w	r3, r7, #28
 80050ba:	4619      	mov	r1, r3
 80050bc:	4838      	ldr	r0, [pc, #224]	; (80051a0 <MX_GPIO_Init+0x238>)
 80050be:	f7fd f91f 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_vcc_Pin relay_input_Pin */
  GPIO_InitStruct.Pin = relay_vcc_Pin|relay_input_Pin;
 80050c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80050c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050c8:	2301      	movs	r3, #1
 80050ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d0:	2300      	movs	r3, #0
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050d4:	f107 031c 	add.w	r3, r7, #28
 80050d8:	4619      	mov	r1, r3
 80050da:	4832      	ldr	r0, [pc, #200]	; (80051a4 <MX_GPIO_Init+0x23c>)
 80050dc:	f7fd f910 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80050e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e6:	2302      	movs	r3, #2
 80050e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ee:	2303      	movs	r3, #3
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050f2:	230b      	movs	r3, #11
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80050f6:	f107 031c 	add.w	r3, r7, #28
 80050fa:	4619      	mov	r1, r3
 80050fc:	4828      	ldr	r0, [pc, #160]	; (80051a0 <MX_GPIO_Init+0x238>)
 80050fe:	f7fd f8ff 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|USB_OverCurrent_Pin;
 8005102:	2390      	movs	r3, #144	; 0x90
 8005104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005106:	2300      	movs	r3, #0
 8005108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800510e:	f107 031c 	add.w	r3, r7, #28
 8005112:	4619      	mov	r1, r3
 8005114:	4824      	ldr	r0, [pc, #144]	; (80051a8 <MX_GPIO_Init+0x240>)
 8005116:	f7fd f8f3 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|USB_PowerSwitchOn_Pin;
 800511a:	2360      	movs	r3, #96	; 0x60
 800511c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800511e:	2301      	movs	r3, #1
 8005120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	2300      	movs	r3, #0
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800512a:	f107 031c 	add.w	r3, r7, #28
 800512e:	4619      	mov	r1, r3
 8005130:	481d      	ldr	r0, [pc, #116]	; (80051a8 <MX_GPIO_Init+0x240>)
 8005132:	f7fd f8e5 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005136:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800513a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	2302      	movs	r3, #2
 800513e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005144:	2303      	movs	r3, #3
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005148:	230a      	movs	r3, #10
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514c:	f107 031c 	add.w	r3, r7, #28
 8005150:	4619      	mov	r1, r3
 8005152:	4817      	ldr	r0, [pc, #92]	; (80051b0 <MX_GPIO_Init+0x248>)
 8005154:	f7fd f8d4 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800515e:	2300      	movs	r3, #0
 8005160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005166:	f107 031c 	add.w	r3, r7, #28
 800516a:	4619      	mov	r1, r3
 800516c:	4810      	ldr	r0, [pc, #64]	; (80051b0 <MX_GPIO_Init+0x248>)
 800516e:	f7fd f8c7 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005172:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005178:	2302      	movs	r3, #2
 800517a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005180:	2303      	movs	r3, #3
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005184:	230b      	movs	r3, #11
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005188:	f107 031c 	add.w	r3, r7, #28
 800518c:	4619      	mov	r1, r3
 800518e:	4806      	ldr	r0, [pc, #24]	; (80051a8 <MX_GPIO_Init+0x240>)
 8005190:	f7fd f8b6 	bl	8002300 <HAL_GPIO_Init>

}
 8005194:	bf00      	nop
 8005196:	3730      	adds	r7, #48	; 0x30
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023800 	.word	0x40023800
 80051a0:	40020400 	.word	0x40020400
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40021800 	.word	0x40021800
 80051ac:	40020800 	.word	0x40020800
 80051b0:	40020000 	.word	0x40020000

080051b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80051b8:	b672      	cpsid	i
}
 80051ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80051bc:	2201      	movs	r2, #1
 80051be:	2101      	movs	r1, #1
 80051c0:	4813      	ldr	r0, [pc, #76]	; (8005210 <Error_Handler+0x5c>)
 80051c2:	f7fd fa49 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80051c6:	2201      	movs	r2, #1
 80051c8:	2180      	movs	r1, #128	; 0x80
 80051ca:	4811      	ldr	r0, [pc, #68]	; (8005210 <Error_Handler+0x5c>)
 80051cc:	f7fd fa44 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80051d0:	2201      	movs	r2, #1
 80051d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051d6:	480e      	ldr	r0, [pc, #56]	; (8005210 <Error_Handler+0x5c>)
 80051d8:	f7fd fa3e 	bl	8002658 <HAL_GPIO_WritePin>

	HAL_Delay(500);
 80051dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051e0:	f7fb ff8c 	bl	80010fc <HAL_Delay>

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80051e4:	2200      	movs	r2, #0
 80051e6:	2101      	movs	r1, #1
 80051e8:	4809      	ldr	r0, [pc, #36]	; (8005210 <Error_Handler+0x5c>)
 80051ea:	f7fd fa35 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80051ee:	2200      	movs	r2, #0
 80051f0:	2180      	movs	r1, #128	; 0x80
 80051f2:	4807      	ldr	r0, [pc, #28]	; (8005210 <Error_Handler+0x5c>)
 80051f4:	f7fd fa30 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80051f8:	2200      	movs	r2, #0
 80051fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051fe:	4804      	ldr	r0, [pc, #16]	; (8005210 <Error_Handler+0x5c>)
 8005200:	f7fd fa2a 	bl	8002658 <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8005204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005208:	f7fb ff78 	bl	80010fc <HAL_Delay>
//	while (1) {
//	}
  /* USER CODE END Error_Handler_Debug */
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40020400 	.word	0x40020400

08005214 <spektrum_packet_to_msg>:
	"Aux_5",
	"Aux_6",
	"Aux_7",
};

void spektrum_packet_to_msg(spektrum_internal_packet_t *packet, spektrum_internal_msg_t *msg) {
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	msg->fades = packet->fades;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	781a      	ldrb	r2, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	701a      	strb	r2, [r3, #0]
	msg->system = packet->system;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	785a      	ldrb	r2, [r3, #1]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 7; ++i) {
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e03c      	b.n	80052ae <spektrum_packet_to_msg+0x9a>
		uint16_t value = ntohs(packet->servo[i]);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	885b      	ldrh	r3, [r3, #2]
 800523e:	b29b      	uxth	r3, r3
 8005240:	ba5b      	rev16	r3, r3
 8005242:	827b      	strh	r3, [r7, #18]
		spektrum_channel_data_t *servo = &msg->data[i];
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	60fb      	str	r3, [r7, #12]
		if (packet->system == SPEKTRUM_SYSTEM_22MS_1024_DSM2) {
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10e      	bne.n	800527c <spektrum_packet_to_msg+0x68>
			servo->servo_phase = false;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
			servo->channel_id = (SPEKTRUM_MASK_1024_CHANNEL_ID & value) >> 10u;
 8005264:	8a7b      	ldrh	r3, [r7, #18]
 8005266:	0a9b      	lsrs	r3, r3, #10
 8005268:	b29b      	uxth	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	605a      	str	r2, [r3, #4]
			servo->servo_position = SPEKTRUM_MASK_1024_SERVO_POS & value;
 8005270:	8a7b      	ldrh	r3, [r7, #18]
 8005272:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	609a      	str	r2, [r3, #8]
 800527a:	e015      	b.n	80052a8 <spektrum_packet_to_msg+0x94>
		} else {
			// else 2048
			servo->servo_phase = 0x8000u & value;
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	701a      	strb	r2, [r3, #0]
			servo->channel_id = (SPEKTRUM_MASK_2048_CHANNEL_ID & value) >> 11u;
 8005290:	8a7b      	ldrh	r3, [r7, #18]
 8005292:	0adb      	lsrs	r3, r3, #11
 8005294:	b29b      	uxth	r3, r3
 8005296:	f003 020f 	and.w	r2, r3, #15
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
			servo->servo_position = SPEKTRUM_MASK_2048_SERVO_POS & value;
 800529e:	8a7b      	ldrh	r3, [r7, #18]
 80052a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 7; ++i) {
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3301      	adds	r3, #1
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b06      	cmp	r3, #6
 80052b2:	ddbf      	ble.n	8005234 <spektrum_packet_to_msg+0x20>
		}
	}
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <spektrum_msg_to_state>:

	}

}

void spektrum_msg_to_state(const spektrum_internal_msg_t *msg, spektrum_state_t *state, long current_time) {
 80052c2:	b480      	push	{r7}
 80052c4:	b089      	sub	sp, #36	; 0x24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]

	state->fades = msg->fades;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	701a      	strb	r2, [r3, #0]
	state->system = msg->system;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	785a      	ldrb	r2, [r3, #1]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	705a      	strb	r2, [r3, #1]

	if (state->last_msg_ts > 0) {
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd0c      	ble.n	8005300 <spektrum_msg_to_state+0x3e>
		long delay = current_time - state->last_msg_ts;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	61bb      	str	r3, [r7, #24]
		if (delay > state->max_msg_delay) {
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	dd02      	ble.n	8005300 <spektrum_msg_to_state+0x3e>
			state->max_msg_delay = delay;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	671a      	str	r2, [r3, #112]	; 0x70
		}
	}

	state->connected = true;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	state->last_msg_ts = current_time;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	66da      	str	r2, [r3, #108]	; 0x6c

	for (int i = 0; i < SPEKTRUM_NUM_MSG_CHANNELS; ++i) {
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	e030      	b.n	8005376 <spektrum_msg_to_state+0xb4>
		const spektrum_channel_data_t *channel = &msg->data[i];
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	4613      	mov	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	3304      	adds	r3, #4
 8005324:	617b      	str	r3, [r7, #20]
		if (channel->channel_id == SPEKTRUM_CHANNEL_LAST) {
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	d01f      	beq.n	800536e <spektrum_msg_to_state+0xac>
			// skip the special channel that is used as the end of the data section of the packet
			continue;
		}
		if (channel->channel_id < 0 || channel->channel_id >= SPEKTRUM_NUM_STD_CHANNELS) {
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	db03      	blt.n	800533e <spektrum_msg_to_state+0x7c>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b0b      	cmp	r3, #11
 800533c:	dd05      	ble.n	800534a <spektrum_msg_to_state+0x88>
			state->num_unexpected_channels++;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	669a      	str	r2, [r3, #104]	; 0x68
			continue;
 8005348:	e012      	b.n	8005370 <spektrum_msg_to_state+0xae>
		}
		state->channels[channel->channel_id].servo_phase = channel->servo_phase;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	7811      	ldrb	r1, [r2, #0]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4413      	add	r3, r2
 8005358:	460a      	mov	r2, r1
 800535a:	711a      	strb	r2, [r3, #4]
		state->channels[channel->channel_id].servo_position = channel->servo_position;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	6892      	ldr	r2, [r2, #8]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	e000      	b.n	8005370 <spektrum_msg_to_state+0xae>
			continue;
 800536e:	bf00      	nop
	for (int i = 0; i < SPEKTRUM_NUM_MSG_CHANNELS; ++i) {
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3301      	adds	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2b06      	cmp	r3, #6
 800537a:	ddcb      	ble.n	8005314 <spektrum_msg_to_state+0x52>
	}

}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <spektrum_nucleo_init>:
#include <string.h>
#include "spektrum_nucleo.h"

void spektrum_nucleo_init(spektrum_nucleo_state_t *state) {
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
	memset(state, 0, sizeof(spektrum_nucleo_state_t));
 8005392:	2294      	movs	r2, #148	; 0x94
 8005394:	2100      	movs	r1, #0
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fd17 	bl	8005dca <memset>
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <spektrum_nucleo_reset_receiver>:

void spektrum_nucleo_reset_receiver(spektrum_nucleo_state_t *state, bool full) {
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
	state->num_lost_bytes += state->buffer_size;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	67da      	str	r2, [r3, #124]	; 0x7c
	state->buffer_size = 0;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	615a      	str	r2, [r3, #20]
	if (full) {
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <spektrum_nucleo_reset_receiver+0x2c>
		state->receiver_state = UNINITIALIZED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
	}
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <spektrum_nucleo_process_packet>:

static void spektrum_nucleo_process_packet(spektrum_nucleo_state_t *state) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

	// check packet structure first
	uint8_t system = state->packet.system;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	789b      	ldrb	r3, [r3, #2]
 80053e8:	73fb      	strb	r3, [r7, #15]
	if (
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d013      	beq.n	8005418 <spektrum_nucleo_process_packet+0x3c>
		system != SPEKTRUM_SYSTEM_22MS_1024_DSM2
		&& system != SPEKTRUM_SYSTEM_11MS_2048_DSM2
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b12      	cmp	r3, #18
 80053f4:	d010      	beq.n	8005418 <spektrum_nucleo_process_packet+0x3c>
		&& system != SPEKTRUM_SYSTEM_22MS_2048_DSMS
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2ba2      	cmp	r3, #162	; 0xa2
 80053fa:	d00d      	beq.n	8005418 <spektrum_nucleo_process_packet+0x3c>
		&& system != SPEKTRUM_SYSTEM_11MS_2048_DSMX
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2bb2      	cmp	r3, #178	; 0xb2
 8005400:	d00a      	beq.n	8005418 <spektrum_nucleo_process_packet+0x3c>
		) {
		state->num_invalid_packets++;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		state->buffer_size = 0;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	615a      	str	r2, [r3, #20]
		return;
 8005416:	e015      	b.n	8005444 <spektrum_nucleo_process_packet+0x68>
	// TODO: It seems that the last channel (servo) data are always 0xFFFF. We can check that.

	// packet okay

	// parse it
	spektrum_packet_to_msg(&state->packet, &state->msg);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3318      	adds	r3, #24
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7ff fef6 	bl	8005214 <spektrum_packet_to_msg>

	state->msg_handler(&state->msg, state->msg_handler_context);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	f102 0018 	add.w	r0, r2, #24
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800543a:	4611      	mov	r1, r2
 800543c:	4798      	blx	r3

	// reset buffer
	state->buffer_size = 0;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	615a      	str	r2, [r3, #20]

}
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <spektrum_nucleo_handle_overrun>:

void spektrum_nucleo_handle_overrun(spektrum_nucleo_state_t *state) {
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
	state->num_overruns++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	spektrum_nucleo_reset_receiver(state, true);
 8005460:	2101      	movs	r1, #1
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff ff9e 	bl	80053a4 <spektrum_nucleo_reset_receiver>
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <spektrum_nucleo_handle_byte>:

void spektrum_nucleo_handle_byte(spektrum_nucleo_state_t *state, uint8_t data) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	70fb      	strb	r3, [r7, #3]

	if (state->receiver_state == EXPECTING_DELAY) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d105      	bne.n	8005492 <spektrum_nucleo_handle_byte+0x22>
		state->num_lost_bytes++;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	67da      	str	r2, [r3, #124]	; 0x7c
		return;
 8005490:	e01d      	b.n	80054ce <spektrum_nucleo_handle_byte+0x5e>
	}

	if (state->receiver_state == UNINITIALIZED) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <spektrum_nucleo_handle_byte+0x32>
		state->receiver_state = RECEIVING_PACKET;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t *buffer = (uint8_t *) &state->packet;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]

	buffer[state->buffer_size++] = data;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	1c59      	adds	r1, r3, #1
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6151      	str	r1, [r2, #20]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	701a      	strb	r2, [r3, #0]

	if (state->buffer_size == sizeof(spektrum_internal_packet_t)) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d105      	bne.n	80054ce <spektrum_nucleo_handle_byte+0x5e>
		spektrum_nucleo_process_packet(state);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff8a 	bl	80053dc <spektrum_nucleo_process_packet>
		state->receiver_state = EXPECTING_DELAY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	701a      	strb	r2, [r3, #0]
	}

}
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <spektrum_nucleo_handle_idle>:

void spektrum_nucleo_handle_idle(spektrum_nucleo_state_t *state, uint32_t ts) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]

	state->uart_idle_it_last_ts = ts;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	679a      	str	r2, [r3, #120]	; 0x78
	state->uart_idle_it_count += 1u;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	675a      	str	r2, [r3, #116]	; 0x74

	if (state->receiver_state == RECEIVING_PACKET) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10b      	bne.n	8005510 <spektrum_nucleo_handle_idle+0x3c>
		state->num_lost_packets += 1u;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		spektrum_nucleo_reset_receiver(state, false);
 8005506:	2100      	movs	r1, #0
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff4b 	bl	80053a4 <spektrum_nucleo_reset_receiver>
		return;
 800550e:	e002      	b.n	8005516 <spektrum_nucleo_handle_idle+0x42>
	}

	state->receiver_state = RECEIVING_PACKET;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]

}
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <spektrum_nucleo_start_receiving>:
	state->num_lost_packets = 0u;
	state->num_invalid_packets = 0u;
	state->num_overruns = 0u;
}

void spektrum_nucleo_start_receiving(UART_HandleTypeDef *huart) {
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	// __HAL_UART_ENABLE_IT(huart, UART_IT_ORE); TODO
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0210 	orr.w	r2, r2, #16
 8005532:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0220 	orr.w	r2, r2, #32
 8005542:	60da      	str	r2, [r3, #12]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <spektrum_nucleo_irq_handler>:
	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
	// __HAL_UART_DISABLE_IT(huart, UART_IT_ORE); TODO
}

void spektrum_nucleo_irq_handler(spektrum_nucleo_state_t *state, UART_HandleTypeDef *huart) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d10e      	bne.n	8005586 <spektrum_nucleo_irq_handler+0x36>
		__HAL_UART_CLEAR_OREFLAG(huart);
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	693b      	ldr	r3, [r7, #16]
		spektrum_nucleo_handle_overrun(state);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ff63 	bl	800544a <spektrum_nucleo_handle_overrun>
		return;
 8005584:	e02a      	b.n	80055dc <spektrum_nucleo_irq_handler+0x8c>
	}

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) == SET) {
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b20      	cmp	r3, #32
 8005592:	d109      	bne.n	80055a8 <spektrum_nucleo_irq_handler+0x58>
		uint8_t data = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	75fb      	strb	r3, [r7, #23]
		spektrum_nucleo_handle_byte(state, data);
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff65 	bl	8005470 <spektrum_nucleo_handle_byte>
		return;
 80055a6:	e019      	b.n	80055dc <spektrum_nucleo_irq_handler+0x8c>
	}

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d112      	bne.n	80055dc <spektrum_nucleo_irq_handler+0x8c>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
		spektrum_nucleo_handle_idle(state, HAL_GetTick());
 80055cc:	f7fb fd8a 	bl	80010e4 <HAL_GetTick>
 80055d0:	4603      	mov	r3, r0
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ff7d 	bl	80054d4 <spektrum_nucleo_handle_idle>
		return;
 80055da:	bf00      	nop
	}

};
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <HAL_MspInit+0x58>)
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	4a12      	ldr	r2, [pc, #72]	; (800563c <HAL_MspInit+0x58>)
 80055f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055f8:	6453      	str	r3, [r2, #68]	; 0x44
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <HAL_MspInit+0x58>)
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <HAL_MspInit+0x58>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	4a0b      	ldr	r2, [pc, #44]	; (800563c <HAL_MspInit+0x58>)
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <HAL_MspInit+0x58>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005622:	2200      	movs	r2, #0
 8005624:	2100      	movs	r1, #0
 8005626:	2005      	movs	r0, #5
 8005628:	f7fc fe33 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800562c:	2005      	movs	r0, #5
 800562e:	f7fc fe4c 	bl	80022ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800

08005640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	; 0x28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005648:	f107 0314 	add.w	r3, r7, #20
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a17      	ldr	r2, [pc, #92]	; (80056bc <HAL_ADC_MspInit+0x7c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d127      	bne.n	80056b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <HAL_ADC_MspInit+0x80>)
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_ADC_MspInit+0x80>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005670:	6453      	str	r3, [r2, #68]	; 0x44
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_ADC_MspInit+0x80>)
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_ADC_MspInit+0x80>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	4a0e      	ldr	r2, [pc, #56]	; (80056c0 <HAL_ADC_MspInit+0x80>)
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6313      	str	r3, [r2, #48]	; 0x30
 800568e:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <HAL_ADC_MspInit+0x80>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800569a:	2308      	movs	r3, #8
 800569c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800569e:	2303      	movs	r3, #3
 80056a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a6:	f107 0314 	add.w	r3, r7, #20
 80056aa:	4619      	mov	r1, r3
 80056ac:	4805      	ldr	r0, [pc, #20]	; (80056c4 <HAL_ADC_MspInit+0x84>)
 80056ae:	f7fc fe27 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80056b2:	bf00      	nop
 80056b4:	3728      	adds	r7, #40	; 0x28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40012000 	.word	0x40012000
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40020000 	.word	0x40020000

080056c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d0:	f107 0314 	add.w	r3, r7, #20
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a29      	ldr	r2, [pc, #164]	; (800578c <HAL_CAN_MspInit+0xc4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d14b      	bne.n	8005782 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	4b28      	ldr	r3, [pc, #160]	; (8005790 <HAL_CAN_MspInit+0xc8>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a27      	ldr	r2, [pc, #156]	; (8005790 <HAL_CAN_MspInit+0xc8>)
 80056f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b25      	ldr	r3, [pc, #148]	; (8005790 <HAL_CAN_MspInit+0xc8>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	4b21      	ldr	r3, [pc, #132]	; (8005790 <HAL_CAN_MspInit+0xc8>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	4a20      	ldr	r2, [pc, #128]	; (8005790 <HAL_CAN_MspInit+0xc8>)
 8005710:	f043 0308 	orr.w	r3, r3, #8
 8005714:	6313      	str	r3, [r2, #48]	; 0x30
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <HAL_CAN_MspInit+0xc8>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005722:	2303      	movs	r3, #3
 8005724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005726:	2302      	movs	r3, #2
 8005728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572e:	2303      	movs	r3, #3
 8005730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005732:	2309      	movs	r3, #9
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005736:	f107 0314 	add.w	r3, r7, #20
 800573a:	4619      	mov	r1, r3
 800573c:	4815      	ldr	r0, [pc, #84]	; (8005794 <HAL_CAN_MspInit+0xcc>)
 800573e:	f7fc fddf 	bl	8002300 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2100      	movs	r1, #0
 8005746:	2013      	movs	r0, #19
 8005748:	f7fc fda3 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800574c:	2013      	movs	r0, #19
 800574e:	f7fc fdbc 	bl	80022ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8005752:	2200      	movs	r2, #0
 8005754:	2100      	movs	r1, #0
 8005756:	2014      	movs	r0, #20
 8005758:	f7fc fd9b 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800575c:	2014      	movs	r0, #20
 800575e:	f7fc fdb4 	bl	80022ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8005762:	2200      	movs	r2, #0
 8005764:	2100      	movs	r1, #0
 8005766:	2015      	movs	r0, #21
 8005768:	f7fc fd93 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800576c:	2015      	movs	r0, #21
 800576e:	f7fc fdac 	bl	80022ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8005772:	2200      	movs	r2, #0
 8005774:	2100      	movs	r1, #0
 8005776:	2016      	movs	r0, #22
 8005778:	f7fc fd8b 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800577c:	2016      	movs	r0, #22
 800577e:	f7fc fda4 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005782:	bf00      	nop
 8005784:	3728      	adds	r7, #40	; 0x28
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40006400 	.word	0x40006400
 8005790:	40023800 	.word	0x40023800
 8005794:	40020c00 	.word	0x40020c00

08005798 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10d      	bne.n	80057c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_TIM_PWM_MspInit+0x40>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <HAL_TIM_PWM_MspInit+0x40>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <HAL_TIM_PWM_MspInit+0x40>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40023800 	.word	0x40023800

080057dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a0e      	ldr	r2, [pc, #56]	; (8005824 <HAL_TIM_Base_MspInit+0x48>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d115      	bne.n	800581a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <HAL_TIM_Base_MspInit+0x4c>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4a0c      	ldr	r2, [pc, #48]	; (8005828 <HAL_TIM_Base_MspInit+0x4c>)
 80057f8:	f043 0310 	orr.w	r3, r3, #16
 80057fc:	6413      	str	r3, [r2, #64]	; 0x40
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_TIM_Base_MspInit+0x4c>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800580a:	2200      	movs	r2, #0
 800580c:	2100      	movs	r1, #0
 800580e:	2036      	movs	r0, #54	; 0x36
 8005810:	f7fc fd3f 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005814:	2036      	movs	r0, #54	; 0x36
 8005816:	f7fc fd58 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40001000 	.word	0x40001000
 8005828:	40023800 	.word	0x40023800

0800582c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005834:	f107 030c 	add.w	r3, r7, #12
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a12      	ldr	r2, [pc, #72]	; (8005894 <HAL_TIM_MspPostInit+0x68>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d11e      	bne.n	800588c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_TIM_MspPostInit+0x6c>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a10      	ldr	r2, [pc, #64]	; (8005898 <HAL_TIM_MspPostInit+0x6c>)
 8005858:	f043 0310 	orr.w	r3, r3, #16
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <HAL_TIM_MspPostInit+0x6c>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800586a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800586e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005870:	2302      	movs	r3, #2
 8005872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800587c:	2301      	movs	r3, #1
 800587e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	4619      	mov	r1, r3
 8005886:	4805      	ldr	r0, [pc, #20]	; (800589c <HAL_TIM_MspPostInit+0x70>)
 8005888:	f7fc fd3a 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800588c:	bf00      	nop
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40010000 	.word	0x40010000
 8005898:	40023800 	.word	0x40023800
 800589c:	40021000 	.word	0x40021000

080058a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	; 0x38
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	60da      	str	r2, [r3, #12]
 80058b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a4f      	ldr	r2, [pc, #316]	; (80059fc <HAL_UART_MspInit+0x15c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d134      	bne.n	800592c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	4a4d      	ldr	r2, [pc, #308]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80058cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d0:	6413      	str	r3, [r2, #64]	; 0x40
 80058d2:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	623b      	str	r3, [r7, #32]
 80058dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	4a46      	ldr	r2, [pc, #280]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80058e8:	f043 0308 	orr.w	r3, r3, #8
 80058ec:	6313      	str	r3, [r2, #48]	; 0x30
 80058ee:	4b44      	ldr	r3, [pc, #272]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = SPEKTRUM_TX_Pin|SPEKTRUM_RX_Pin;
 80058fa:	2360      	movs	r3, #96	; 0x60
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058fe:	2302      	movs	r3, #2
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005902:	2300      	movs	r3, #0
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005906:	2303      	movs	r3, #3
 8005908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800590a:	2307      	movs	r3, #7
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800590e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005912:	4619      	mov	r1, r3
 8005914:	483b      	ldr	r0, [pc, #236]	; (8005a04 <HAL_UART_MspInit+0x164>)
 8005916:	f7fc fcf3 	bl	8002300 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800591a:	2200      	movs	r2, #0
 800591c:	2101      	movs	r1, #1
 800591e:	2026      	movs	r0, #38	; 0x26
 8005920:	f7fc fcb7 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005924:	2026      	movs	r0, #38	; 0x26
 8005926:	f7fc fcd0 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800592a:	e063      	b.n	80059f4 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a35      	ldr	r2, [pc, #212]	; (8005a08 <HAL_UART_MspInit+0x168>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d12d      	bne.n	8005992 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <HAL_UART_MspInit+0x160>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	4a30      	ldr	r2, [pc, #192]	; (8005a00 <HAL_UART_MspInit+0x160>)
 8005940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005944:	6413      	str	r3, [r2, #64]	; 0x40
 8005946:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <HAL_UART_MspInit+0x160>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <HAL_UART_MspInit+0x160>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	4a29      	ldr	r2, [pc, #164]	; (8005a00 <HAL_UART_MspInit+0x160>)
 800595c:	f043 0308 	orr.w	r3, r3, #8
 8005960:	6313      	str	r3, [r2, #48]	; 0x30
 8005962:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <HAL_UART_MspInit+0x160>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800596e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005974:	2302      	movs	r3, #2
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	2300      	movs	r3, #0
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800597c:	2303      	movs	r3, #3
 800597e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005980:	2307      	movs	r3, #7
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005988:	4619      	mov	r1, r3
 800598a:	481e      	ldr	r0, [pc, #120]	; (8005a04 <HAL_UART_MspInit+0x164>)
 800598c:	f7fc fcb8 	bl	8002300 <HAL_GPIO_Init>
}
 8005990:	e030      	b.n	80059f4 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_UART_MspInit+0x16c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d12b      	bne.n	80059f4 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80059a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80059a6:	f043 0320 	orr.w	r3, r3, #32
 80059aa:	6453      	str	r3, [r2, #68]	; 0x44
 80059ac:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	6313      	str	r3, [r2, #48]	; 0x30
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <HAL_UART_MspInit+0x160>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059d4:	23c0      	movs	r3, #192	; 0xc0
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d8:	2302      	movs	r3, #2
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e0:	2303      	movs	r3, #3
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80059e4:	2308      	movs	r3, #8
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ec:	4619      	mov	r1, r3
 80059ee:	4808      	ldr	r0, [pc, #32]	; (8005a10 <HAL_UART_MspInit+0x170>)
 80059f0:	f7fc fc86 	bl	8002300 <HAL_GPIO_Init>
}
 80059f4:	bf00      	nop
 80059f6:	3738      	adds	r7, #56	; 0x38
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40004400 	.word	0x40004400
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40020c00 	.word	0x40020c00
 8005a08:	40004800 	.word	0x40004800
 8005a0c:	40011400 	.word	0x40011400
 8005a10:	40020800 	.word	0x40020800

08005a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005a18:	e7fe      	b.n	8005a18 <NMI_Handler+0x4>

08005a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a1e:	e7fe      	b.n	8005a1e <HardFault_Handler+0x4>

08005a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a24:	e7fe      	b.n	8005a24 <MemManage_Handler+0x4>

08005a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a2a:	e7fe      	b.n	8005a2a <BusFault_Handler+0x4>

08005a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a30:	e7fe      	b.n	8005a30 <UsageFault_Handler+0x4>

08005a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a52:	bf00      	nop
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a60:	f7fb fb2c 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005a7c:	4802      	ldr	r0, [pc, #8]	; (8005a88 <CAN1_TX_IRQHandler+0x10>)
 8005a7e:	f7fc f8f4 	bl	8001c6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	2000026c 	.word	0x2000026c

08005a8c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005a90:	4802      	ldr	r0, [pc, #8]	; (8005a9c <CAN1_RX0_IRQHandler+0x10>)
 8005a92:	f7fc f8ea 	bl	8001c6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005a96:	bf00      	nop
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000026c 	.word	0x2000026c

08005aa0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005aa4:	4802      	ldr	r0, [pc, #8]	; (8005ab0 <CAN1_RX1_IRQHandler+0x10>)
 8005aa6:	f7fc f8e0 	bl	8001c6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8005aaa:	bf00      	nop
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	2000026c 	.word	0x2000026c

08005ab4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005ab8:	4802      	ldr	r0, [pc, #8]	; (8005ac4 <CAN1_SCE_IRQHandler+0x10>)
 8005aba:	f7fc f8d6 	bl	8001c6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8005abe:	bf00      	nop
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	2000026c 	.word	0x2000026c

08005ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	spektrum_nucleo_irq_handler(&main_app->rc_receiver, SPEKTRUM_UART);
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <USART2_IRQHandler+0x18>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	4904      	ldr	r1, [pc, #16]	; (8005ae4 <USART2_IRQHandler+0x1c>)
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fd3b 	bl	8005550 <spektrum_nucleo_irq_handler>

	// no need to call the default HAL_UART_IRQHandler for USART1
	// as we are handling everything ourselves
	return;
 8005ada:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000510 	.word	0x20000510
 8005ae4:	20000324 	.word	0x20000324

08005ae8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005aec:	4802      	ldr	r0, [pc, #8]	; (8005af8 <TIM6_DAC_IRQHandler+0x10>)
 8005aee:	f7fd fc3d 	bl	800336c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200002dc 	.word	0x200002dc

08005afc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
	return 1;
 8005b00:	2301      	movs	r3, #1
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <_kill>:

int _kill(int pid, int sig) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b16:	f000 f919 	bl	8005d4c <__errno>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2216      	movs	r2, #22
 8005b1e:	601a      	str	r2, [r3, #0]
	return -1;
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <_exit>:

void _exit(int status) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005b34:	f04f 31ff 	mov.w	r1, #4294967295
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ffe7 	bl	8005b0c <_kill>
	while (1) {}        /* Make sure we hang here */
 8005b3e:	e7fe      	b.n	8005b3e <_exit+0x12>

08005b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e00a      	b.n	8005b68 <_read+0x28>
		*ptr++ = __io_getchar();
 8005b52:	f3af 8000 	nop.w
 8005b56:	4601      	mov	r1, r0
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	60ba      	str	r2, [r7, #8]
 8005b5e:	b2ca      	uxtb	r2, r1
 8005b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	3301      	adds	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	dbf0      	blt.n	8005b52 <_read+0x12>
	}

	return len;
 8005b70:	687b      	ldr	r3, [r7, #4]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <_write>:

// see https://electronics.stackexchange.com/questions/206113/how-do-i-use-the-printf-function-on-stm32
// see https://github.com/ARMmbed/mbed-os/tree/master/platform/source/minimal-printf
int _write(int file, char *data, int len) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]

	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d00a      	beq.n	8005ba4 <_write+0x28>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d007      	beq.n	8005ba4 <_write+0x28>
		errno = EBADF;
 8005b94:	f000 f8da 	bl	8005d4c <__errno>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2209      	movs	r2, #9
 8005b9c:	601a      	str	r2, [r3, #0]
		return -1;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	e00f      	b.n	8005bc4 <_write+0x48>
	}

	HAL_StatusTypeDef status = HAL_UART_Transmit(
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	4807      	ldr	r0, [pc, #28]	; (8005bcc <_write+0x50>)
 8005bb0:	f7fe f973 	bl	8003e9a <HAL_UART_Transmit>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	75fb      	strb	r3, [r7, #23]
		len,
		HAL_MAX_DELAY
	);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <_write+0x46>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	e000      	b.n	8005bc4 <_write+0x48>
 8005bc2:	2300      	movs	r3, #0

}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000368 	.word	0x20000368

08005bd0 <_close>:

int _close(int file) {
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	return -1;
 8005bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <_fstat>:


int _fstat(int file, struct stat *st) {
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bf8:	605a      	str	r2, [r3, #4]
	return 0;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <_isatty>:

int _isatty(int file) {
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	return 1;
 8005c10:	2301      	movs	r3, #1
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
	return 0;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <_sbrk+0x5c>)
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <_sbrk+0x60>)
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t *) stack_limit;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <_sbrk+0x64>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <_sbrk+0x64>)
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <_sbrk+0x68>)
 8005c58:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <_sbrk+0x64>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d207      	bcs.n	8005c78 <_sbrk+0x40>
		errno = ENOMEM;
 8005c68:	f000 f870 	bl	8005d4c <__errno>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	220c      	movs	r2, #12
 8005c70:	601a      	str	r2, [r3, #0]
		return (void *) -1;
 8005c72:	f04f 33ff 	mov.w	r3, #4294967295
 8005c76:	e009      	b.n	8005c8c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8005c78:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <_sbrk+0x64>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <_sbrk+0x64>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <_sbrk+0x64>)
 8005c88:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20030000 	.word	0x20030000
 8005c98:	00000400 	.word	0x00000400
 8005c9c:	20000538 	.word	0x20000538
 8005ca0:	20000550 	.word	0x20000550

08005ca4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <SystemInit+0x20>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <SystemInit+0x20>)
 8005cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	e000ed00 	.word	0xe000ed00

08005cc8 <debug_sizeof>:
#include <stdio.h>
#include <string.h>

#include "utils.h"

void debug_sizeof() {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af04      	add	r7, sp, #16
	debug_printf(
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <debug_sizeof+0x28>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6898      	ldr	r0, [r3, #8]
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	9302      	str	r3, [sp, #8]
 8005cd8:	2308      	movs	r3, #8
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	2304      	movs	r3, #4
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	4903      	ldr	r1, [pc, #12]	; (8005cf4 <debug_sizeof+0x2c>)
 8005ce6:	f000 f837 	bl	8005d58 <fiprintf>
		sizeof(long),
		sizeof(long int),
		sizeof(long long),
		sizeof(long long int)
	);
}
 8005cea:	bf00      	nop
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000030 	.word	0x20000030
 8005cf4:	0800a804 	.word	0x0800a804

08005cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005cfc:	480d      	ldr	r0, [pc, #52]	; (8005d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005cfe:	490e      	ldr	r1, [pc, #56]	; (8005d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d00:	4a0e      	ldr	r2, [pc, #56]	; (8005d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d04:	e002      	b.n	8005d0c <LoopCopyDataInit>

08005d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d0a:	3304      	adds	r3, #4

08005d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d10:	d3f9      	bcc.n	8005d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d12:	4a0b      	ldr	r2, [pc, #44]	; (8005d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d14:	4c0b      	ldr	r4, [pc, #44]	; (8005d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d18:	e001      	b.n	8005d1e <LoopFillZerobss>

08005d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d1c:	3204      	adds	r2, #4

08005d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d20:	d3fb      	bcc.n	8005d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005d22:	f7ff ffbf 	bl	8005ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005d26:	f000 f829 	bl	8005d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d2a:	f7fe fe91 	bl	8004a50 <main>
  bx  lr    
 8005d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005d30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d38:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8005d3c:	0800ad78 	.word	0x0800ad78
  ldr r2, =_sbss
 8005d40:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8005d44:	2000054c 	.word	0x2000054c

08005d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d48:	e7fe      	b.n	8005d48 <ADC_IRQHandler>
	...

08005d4c <__errno>:
 8005d4c:	4b01      	ldr	r3, [pc, #4]	; (8005d54 <__errno+0x8>)
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000030 	.word	0x20000030

08005d58 <fiprintf>:
 8005d58:	b40e      	push	{r1, r2, r3}
 8005d5a:	b503      	push	{r0, r1, lr}
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	ab03      	add	r3, sp, #12
 8005d60:	4805      	ldr	r0, [pc, #20]	; (8005d78 <fiprintf+0x20>)
 8005d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d66:	6800      	ldr	r0, [r0, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	f000 f85f 	bl	8005e2c <_vfiprintf_r>
 8005d6e:	b002      	add	sp, #8
 8005d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d74:	b003      	add	sp, #12
 8005d76:	4770      	bx	lr
 8005d78:	20000030 	.word	0x20000030

08005d7c <__libc_init_array>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4d0d      	ldr	r5, [pc, #52]	; (8005db4 <__libc_init_array+0x38>)
 8005d80:	4c0d      	ldr	r4, [pc, #52]	; (8005db8 <__libc_init_array+0x3c>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	2600      	movs	r6, #0
 8005d88:	42a6      	cmp	r6, r4
 8005d8a:	d109      	bne.n	8005da0 <__libc_init_array+0x24>
 8005d8c:	4d0b      	ldr	r5, [pc, #44]	; (8005dbc <__libc_init_array+0x40>)
 8005d8e:	4c0c      	ldr	r4, [pc, #48]	; (8005dc0 <__libc_init_array+0x44>)
 8005d90:	f004 fcf0 	bl	800a774 <_init>
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	2600      	movs	r6, #0
 8005d9a:	42a6      	cmp	r6, r4
 8005d9c:	d105      	bne.n	8005daa <__libc_init_array+0x2e>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da4:	4798      	blx	r3
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7ee      	b.n	8005d88 <__libc_init_array+0xc>
 8005daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dae:	4798      	blx	r3
 8005db0:	3601      	adds	r6, #1
 8005db2:	e7f2      	b.n	8005d9a <__libc_init_array+0x1e>
 8005db4:	0800ad70 	.word	0x0800ad70
 8005db8:	0800ad70 	.word	0x0800ad70
 8005dbc:	0800ad70 	.word	0x0800ad70
 8005dc0:	0800ad74 	.word	0x0800ad74

08005dc4 <__retarget_lock_init_recursive>:
 8005dc4:	4770      	bx	lr

08005dc6 <__retarget_lock_acquire_recursive>:
 8005dc6:	4770      	bx	lr

08005dc8 <__retarget_lock_release_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <memset>:
 8005dca:	4402      	add	r2, r0
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d100      	bne.n	8005dd4 <memset+0xa>
 8005dd2:	4770      	bx	lr
 8005dd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd8:	e7f9      	b.n	8005dce <memset+0x4>

08005dda <__sfputc_r>:
 8005dda:	6893      	ldr	r3, [r2, #8]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	b410      	push	{r4}
 8005de2:	6093      	str	r3, [r2, #8]
 8005de4:	da08      	bge.n	8005df8 <__sfputc_r+0x1e>
 8005de6:	6994      	ldr	r4, [r2, #24]
 8005de8:	42a3      	cmp	r3, r4
 8005dea:	db01      	blt.n	8005df0 <__sfputc_r+0x16>
 8005dec:	290a      	cmp	r1, #10
 8005dee:	d103      	bne.n	8005df8 <__sfputc_r+0x1e>
 8005df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df4:	f001 bf0c 	b.w	8007c10 <__swbuf_r>
 8005df8:	6813      	ldr	r3, [r2, #0]
 8005dfa:	1c58      	adds	r0, r3, #1
 8005dfc:	6010      	str	r0, [r2, #0]
 8005dfe:	7019      	strb	r1, [r3, #0]
 8005e00:	4608      	mov	r0, r1
 8005e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <__sfputs_r>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460f      	mov	r7, r1
 8005e0e:	4614      	mov	r4, r2
 8005e10:	18d5      	adds	r5, r2, r3
 8005e12:	42ac      	cmp	r4, r5
 8005e14:	d101      	bne.n	8005e1a <__sfputs_r+0x12>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e007      	b.n	8005e2a <__sfputs_r+0x22>
 8005e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1e:	463a      	mov	r2, r7
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7ff ffda 	bl	8005dda <__sfputc_r>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d1f3      	bne.n	8005e12 <__sfputs_r+0xa>
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e2c <_vfiprintf_r>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	460d      	mov	r5, r1
 8005e32:	b09d      	sub	sp, #116	; 0x74
 8005e34:	4614      	mov	r4, r2
 8005e36:	4698      	mov	r8, r3
 8005e38:	4606      	mov	r6, r0
 8005e3a:	b118      	cbz	r0, 8005e44 <_vfiprintf_r+0x18>
 8005e3c:	6983      	ldr	r3, [r0, #24]
 8005e3e:	b90b      	cbnz	r3, 8005e44 <_vfiprintf_r+0x18>
 8005e40:	f002 ff3a 	bl	8008cb8 <__sinit>
 8005e44:	4b89      	ldr	r3, [pc, #548]	; (800606c <_vfiprintf_r+0x240>)
 8005e46:	429d      	cmp	r5, r3
 8005e48:	d11b      	bne.n	8005e82 <_vfiprintf_r+0x56>
 8005e4a:	6875      	ldr	r5, [r6, #4]
 8005e4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e4e:	07d9      	lsls	r1, r3, #31
 8005e50:	d405      	bmi.n	8005e5e <_vfiprintf_r+0x32>
 8005e52:	89ab      	ldrh	r3, [r5, #12]
 8005e54:	059a      	lsls	r2, r3, #22
 8005e56:	d402      	bmi.n	8005e5e <_vfiprintf_r+0x32>
 8005e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5a:	f7ff ffb4 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	071b      	lsls	r3, r3, #28
 8005e62:	d501      	bpl.n	8005e68 <_vfiprintf_r+0x3c>
 8005e64:	692b      	ldr	r3, [r5, #16]
 8005e66:	b9eb      	cbnz	r3, 8005ea4 <_vfiprintf_r+0x78>
 8005e68:	4629      	mov	r1, r5
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f001 ff22 	bl	8007cb4 <__swsetup_r>
 8005e70:	b1c0      	cbz	r0, 8005ea4 <_vfiprintf_r+0x78>
 8005e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e74:	07dc      	lsls	r4, r3, #31
 8005e76:	d50e      	bpl.n	8005e96 <_vfiprintf_r+0x6a>
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7c:	b01d      	add	sp, #116	; 0x74
 8005e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e82:	4b7b      	ldr	r3, [pc, #492]	; (8006070 <_vfiprintf_r+0x244>)
 8005e84:	429d      	cmp	r5, r3
 8005e86:	d101      	bne.n	8005e8c <_vfiprintf_r+0x60>
 8005e88:	68b5      	ldr	r5, [r6, #8]
 8005e8a:	e7df      	b.n	8005e4c <_vfiprintf_r+0x20>
 8005e8c:	4b79      	ldr	r3, [pc, #484]	; (8006074 <_vfiprintf_r+0x248>)
 8005e8e:	429d      	cmp	r5, r3
 8005e90:	bf08      	it	eq
 8005e92:	68f5      	ldreq	r5, [r6, #12]
 8005e94:	e7da      	b.n	8005e4c <_vfiprintf_r+0x20>
 8005e96:	89ab      	ldrh	r3, [r5, #12]
 8005e98:	0598      	lsls	r0, r3, #22
 8005e9a:	d4ed      	bmi.n	8005e78 <_vfiprintf_r+0x4c>
 8005e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e9e:	f7ff ff93 	bl	8005dc8 <__retarget_lock_release_recursive>
 8005ea2:	e7e9      	b.n	8005e78 <_vfiprintf_r+0x4c>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb2:	2330      	movs	r3, #48	; 0x30
 8005eb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006078 <_vfiprintf_r+0x24c>
 8005eb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ebc:	f04f 0901 	mov.w	r9, #1
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	469a      	mov	sl, r3
 8005ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec8:	b10a      	cbz	r2, 8005ece <_vfiprintf_r+0xa2>
 8005eca:	2a25      	cmp	r2, #37	; 0x25
 8005ecc:	d1f9      	bne.n	8005ec2 <_vfiprintf_r+0x96>
 8005ece:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed2:	d00b      	beq.n	8005eec <_vfiprintf_r+0xc0>
 8005ed4:	465b      	mov	r3, fp
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	f7ff ff94 	bl	8005e08 <__sfputs_r>
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f000 80aa 	beq.w	800603a <_vfiprintf_r+0x20e>
 8005ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ee8:	445a      	add	r2, fp
 8005eea:	9209      	str	r2, [sp, #36]	; 0x24
 8005eec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80a2 	beq.w	800603a <_vfiprintf_r+0x20e>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f00:	f10a 0a01 	add.w	sl, sl, #1
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	9307      	str	r3, [sp, #28]
 8005f08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f0e:	4654      	mov	r4, sl
 8005f10:	2205      	movs	r2, #5
 8005f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f16:	4858      	ldr	r0, [pc, #352]	; (8006078 <_vfiprintf_r+0x24c>)
 8005f18:	f7fa f972 	bl	8000200 <memchr>
 8005f1c:	9a04      	ldr	r2, [sp, #16]
 8005f1e:	b9d8      	cbnz	r0, 8005f58 <_vfiprintf_r+0x12c>
 8005f20:	06d1      	lsls	r1, r2, #27
 8005f22:	bf44      	itt	mi
 8005f24:	2320      	movmi	r3, #32
 8005f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f2a:	0713      	lsls	r3, r2, #28
 8005f2c:	bf44      	itt	mi
 8005f2e:	232b      	movmi	r3, #43	; 0x2b
 8005f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f34:	f89a 3000 	ldrb.w	r3, [sl]
 8005f38:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3a:	d015      	beq.n	8005f68 <_vfiprintf_r+0x13c>
 8005f3c:	9a07      	ldr	r2, [sp, #28]
 8005f3e:	4654      	mov	r4, sl
 8005f40:	2000      	movs	r0, #0
 8005f42:	f04f 0c0a 	mov.w	ip, #10
 8005f46:	4621      	mov	r1, r4
 8005f48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f4c:	3b30      	subs	r3, #48	; 0x30
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	d94e      	bls.n	8005ff0 <_vfiprintf_r+0x1c4>
 8005f52:	b1b0      	cbz	r0, 8005f82 <_vfiprintf_r+0x156>
 8005f54:	9207      	str	r2, [sp, #28]
 8005f56:	e014      	b.n	8005f82 <_vfiprintf_r+0x156>
 8005f58:	eba0 0308 	sub.w	r3, r0, r8
 8005f5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f60:	4313      	orrs	r3, r2
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	46a2      	mov	sl, r4
 8005f66:	e7d2      	b.n	8005f0e <_vfiprintf_r+0xe2>
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	1d19      	adds	r1, r3, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	9103      	str	r1, [sp, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bfbb      	ittet	lt
 8005f74:	425b      	neglt	r3, r3
 8005f76:	f042 0202 	orrlt.w	r2, r2, #2
 8005f7a:	9307      	strge	r3, [sp, #28]
 8005f7c:	9307      	strlt	r3, [sp, #28]
 8005f7e:	bfb8      	it	lt
 8005f80:	9204      	strlt	r2, [sp, #16]
 8005f82:	7823      	ldrb	r3, [r4, #0]
 8005f84:	2b2e      	cmp	r3, #46	; 0x2e
 8005f86:	d10c      	bne.n	8005fa2 <_vfiprintf_r+0x176>
 8005f88:	7863      	ldrb	r3, [r4, #1]
 8005f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f8c:	d135      	bne.n	8005ffa <_vfiprintf_r+0x1ce>
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	1d1a      	adds	r2, r3, #4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	9203      	str	r2, [sp, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bfb8      	it	lt
 8005f9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f9e:	3402      	adds	r4, #2
 8005fa0:	9305      	str	r3, [sp, #20]
 8005fa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006088 <_vfiprintf_r+0x25c>
 8005fa6:	7821      	ldrb	r1, [r4, #0]
 8005fa8:	2203      	movs	r2, #3
 8005faa:	4650      	mov	r0, sl
 8005fac:	f7fa f928 	bl	8000200 <memchr>
 8005fb0:	b140      	cbz	r0, 8005fc4 <_vfiprintf_r+0x198>
 8005fb2:	2340      	movs	r3, #64	; 0x40
 8005fb4:	eba0 000a 	sub.w	r0, r0, sl
 8005fb8:	fa03 f000 	lsl.w	r0, r3, r0
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	4303      	orrs	r3, r0
 8005fc0:	3401      	adds	r4, #1
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc8:	482c      	ldr	r0, [pc, #176]	; (800607c <_vfiprintf_r+0x250>)
 8005fca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fce:	2206      	movs	r2, #6
 8005fd0:	f7fa f916 	bl	8000200 <memchr>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d03f      	beq.n	8006058 <_vfiprintf_r+0x22c>
 8005fd8:	4b29      	ldr	r3, [pc, #164]	; (8006080 <_vfiprintf_r+0x254>)
 8005fda:	bb1b      	cbnz	r3, 8006024 <_vfiprintf_r+0x1f8>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	3307      	adds	r3, #7
 8005fe0:	f023 0307 	bic.w	r3, r3, #7
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	9303      	str	r3, [sp, #12]
 8005fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fea:	443b      	add	r3, r7
 8005fec:	9309      	str	r3, [sp, #36]	; 0x24
 8005fee:	e767      	b.n	8005ec0 <_vfiprintf_r+0x94>
 8005ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	e7a5      	b.n	8005f46 <_vfiprintf_r+0x11a>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	9305      	str	r3, [sp, #20]
 8006000:	4619      	mov	r1, r3
 8006002:	f04f 0c0a 	mov.w	ip, #10
 8006006:	4620      	mov	r0, r4
 8006008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800600c:	3a30      	subs	r2, #48	; 0x30
 800600e:	2a09      	cmp	r2, #9
 8006010:	d903      	bls.n	800601a <_vfiprintf_r+0x1ee>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0c5      	beq.n	8005fa2 <_vfiprintf_r+0x176>
 8006016:	9105      	str	r1, [sp, #20]
 8006018:	e7c3      	b.n	8005fa2 <_vfiprintf_r+0x176>
 800601a:	fb0c 2101 	mla	r1, ip, r1, r2
 800601e:	4604      	mov	r4, r0
 8006020:	2301      	movs	r3, #1
 8006022:	e7f0      	b.n	8006006 <_vfiprintf_r+0x1da>
 8006024:	ab03      	add	r3, sp, #12
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	462a      	mov	r2, r5
 800602a:	4b16      	ldr	r3, [pc, #88]	; (8006084 <_vfiprintf_r+0x258>)
 800602c:	a904      	add	r1, sp, #16
 800602e:	4630      	mov	r0, r6
 8006030:	f000 f8cc 	bl	80061cc <_printf_float>
 8006034:	4607      	mov	r7, r0
 8006036:	1c78      	adds	r0, r7, #1
 8006038:	d1d6      	bne.n	8005fe8 <_vfiprintf_r+0x1bc>
 800603a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800603c:	07d9      	lsls	r1, r3, #31
 800603e:	d405      	bmi.n	800604c <_vfiprintf_r+0x220>
 8006040:	89ab      	ldrh	r3, [r5, #12]
 8006042:	059a      	lsls	r2, r3, #22
 8006044:	d402      	bmi.n	800604c <_vfiprintf_r+0x220>
 8006046:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006048:	f7ff febe 	bl	8005dc8 <__retarget_lock_release_recursive>
 800604c:	89ab      	ldrh	r3, [r5, #12]
 800604e:	065b      	lsls	r3, r3, #25
 8006050:	f53f af12 	bmi.w	8005e78 <_vfiprintf_r+0x4c>
 8006054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006056:	e711      	b.n	8005e7c <_vfiprintf_r+0x50>
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	462a      	mov	r2, r5
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <_vfiprintf_r+0x258>)
 8006060:	a904      	add	r1, sp, #16
 8006062:	4630      	mov	r0, r6
 8006064:	f000 fb56 	bl	8006714 <_printf_i>
 8006068:	e7e4      	b.n	8006034 <_vfiprintf_r+0x208>
 800606a:	bf00      	nop
 800606c:	0800ab14 	.word	0x0800ab14
 8006070:	0800ab34 	.word	0x0800ab34
 8006074:	0800aaf4 	.word	0x0800aaf4
 8006078:	0800a8c4 	.word	0x0800a8c4
 800607c:	0800a8ce 	.word	0x0800a8ce
 8006080:	080061cd 	.word	0x080061cd
 8006084:	08005e09 	.word	0x08005e09
 8006088:	0800a8ca 	.word	0x0800a8ca

0800608c <__cvt>:
 800608c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006090:	ec55 4b10 	vmov	r4, r5, d0
 8006094:	2d00      	cmp	r5, #0
 8006096:	460e      	mov	r6, r1
 8006098:	4619      	mov	r1, r3
 800609a:	462b      	mov	r3, r5
 800609c:	bfbb      	ittet	lt
 800609e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060a2:	461d      	movlt	r5, r3
 80060a4:	2300      	movge	r3, #0
 80060a6:	232d      	movlt	r3, #45	; 0x2d
 80060a8:	700b      	strb	r3, [r1, #0]
 80060aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060b0:	4691      	mov	r9, r2
 80060b2:	f023 0820 	bic.w	r8, r3, #32
 80060b6:	bfbc      	itt	lt
 80060b8:	4622      	movlt	r2, r4
 80060ba:	4614      	movlt	r4, r2
 80060bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060c0:	d005      	beq.n	80060ce <__cvt+0x42>
 80060c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060c6:	d100      	bne.n	80060ca <__cvt+0x3e>
 80060c8:	3601      	adds	r6, #1
 80060ca:	2102      	movs	r1, #2
 80060cc:	e000      	b.n	80060d0 <__cvt+0x44>
 80060ce:	2103      	movs	r1, #3
 80060d0:	ab03      	add	r3, sp, #12
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	ab02      	add	r3, sp, #8
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	ec45 4b10 	vmov	d0, r4, r5
 80060dc:	4653      	mov	r3, sl
 80060de:	4632      	mov	r2, r6
 80060e0:	f001 fee2 	bl	8007ea8 <_dtoa_r>
 80060e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060e8:	4607      	mov	r7, r0
 80060ea:	d102      	bne.n	80060f2 <__cvt+0x66>
 80060ec:	f019 0f01 	tst.w	r9, #1
 80060f0:	d022      	beq.n	8006138 <__cvt+0xac>
 80060f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060f6:	eb07 0906 	add.w	r9, r7, r6
 80060fa:	d110      	bne.n	800611e <__cvt+0x92>
 80060fc:	783b      	ldrb	r3, [r7, #0]
 80060fe:	2b30      	cmp	r3, #48	; 0x30
 8006100:	d10a      	bne.n	8006118 <__cvt+0x8c>
 8006102:	2200      	movs	r2, #0
 8006104:	2300      	movs	r3, #0
 8006106:	4620      	mov	r0, r4
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa fced 	bl	8000ae8 <__aeabi_dcmpeq>
 800610e:	b918      	cbnz	r0, 8006118 <__cvt+0x8c>
 8006110:	f1c6 0601 	rsb	r6, r6, #1
 8006114:	f8ca 6000 	str.w	r6, [sl]
 8006118:	f8da 3000 	ldr.w	r3, [sl]
 800611c:	4499      	add	r9, r3
 800611e:	2200      	movs	r2, #0
 8006120:	2300      	movs	r3, #0
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	f7fa fcdf 	bl	8000ae8 <__aeabi_dcmpeq>
 800612a:	b108      	cbz	r0, 8006130 <__cvt+0xa4>
 800612c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006130:	2230      	movs	r2, #48	; 0x30
 8006132:	9b03      	ldr	r3, [sp, #12]
 8006134:	454b      	cmp	r3, r9
 8006136:	d307      	bcc.n	8006148 <__cvt+0xbc>
 8006138:	9b03      	ldr	r3, [sp, #12]
 800613a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800613c:	1bdb      	subs	r3, r3, r7
 800613e:	4638      	mov	r0, r7
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	b004      	add	sp, #16
 8006144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	9103      	str	r1, [sp, #12]
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e7f0      	b.n	8006132 <__cvt+0xa6>

08006150 <__exponent>:
 8006150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006152:	4603      	mov	r3, r0
 8006154:	2900      	cmp	r1, #0
 8006156:	bfb8      	it	lt
 8006158:	4249      	neglt	r1, r1
 800615a:	f803 2b02 	strb.w	r2, [r3], #2
 800615e:	bfb4      	ite	lt
 8006160:	222d      	movlt	r2, #45	; 0x2d
 8006162:	222b      	movge	r2, #43	; 0x2b
 8006164:	2909      	cmp	r1, #9
 8006166:	7042      	strb	r2, [r0, #1]
 8006168:	dd2a      	ble.n	80061c0 <__exponent+0x70>
 800616a:	f10d 0407 	add.w	r4, sp, #7
 800616e:	46a4      	mov	ip, r4
 8006170:	270a      	movs	r7, #10
 8006172:	46a6      	mov	lr, r4
 8006174:	460a      	mov	r2, r1
 8006176:	fb91 f6f7 	sdiv	r6, r1, r7
 800617a:	fb07 1516 	mls	r5, r7, r6, r1
 800617e:	3530      	adds	r5, #48	; 0x30
 8006180:	2a63      	cmp	r2, #99	; 0x63
 8006182:	f104 34ff 	add.w	r4, r4, #4294967295
 8006186:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800618a:	4631      	mov	r1, r6
 800618c:	dcf1      	bgt.n	8006172 <__exponent+0x22>
 800618e:	3130      	adds	r1, #48	; 0x30
 8006190:	f1ae 0502 	sub.w	r5, lr, #2
 8006194:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006198:	1c44      	adds	r4, r0, #1
 800619a:	4629      	mov	r1, r5
 800619c:	4561      	cmp	r1, ip
 800619e:	d30a      	bcc.n	80061b6 <__exponent+0x66>
 80061a0:	f10d 0209 	add.w	r2, sp, #9
 80061a4:	eba2 020e 	sub.w	r2, r2, lr
 80061a8:	4565      	cmp	r5, ip
 80061aa:	bf88      	it	hi
 80061ac:	2200      	movhi	r2, #0
 80061ae:	4413      	add	r3, r2
 80061b0:	1a18      	subs	r0, r3, r0
 80061b2:	b003      	add	sp, #12
 80061b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061be:	e7ed      	b.n	800619c <__exponent+0x4c>
 80061c0:	2330      	movs	r3, #48	; 0x30
 80061c2:	3130      	adds	r1, #48	; 0x30
 80061c4:	7083      	strb	r3, [r0, #2]
 80061c6:	70c1      	strb	r1, [r0, #3]
 80061c8:	1d03      	adds	r3, r0, #4
 80061ca:	e7f1      	b.n	80061b0 <__exponent+0x60>

080061cc <_printf_float>:
 80061cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d0:	ed2d 8b02 	vpush	{d8}
 80061d4:	b08d      	sub	sp, #52	; 0x34
 80061d6:	460c      	mov	r4, r1
 80061d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80061dc:	4616      	mov	r6, r2
 80061de:	461f      	mov	r7, r3
 80061e0:	4605      	mov	r5, r0
 80061e2:	f003 f975 	bl	80094d0 <_localeconv_r>
 80061e6:	f8d0 a000 	ldr.w	sl, [r0]
 80061ea:	4650      	mov	r0, sl
 80061ec:	f7fa f800 	bl	80001f0 <strlen>
 80061f0:	2300      	movs	r3, #0
 80061f2:	930a      	str	r3, [sp, #40]	; 0x28
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	9305      	str	r3, [sp, #20]
 80061f8:	f8d8 3000 	ldr.w	r3, [r8]
 80061fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006200:	3307      	adds	r3, #7
 8006202:	f023 0307 	bic.w	r3, r3, #7
 8006206:	f103 0208 	add.w	r2, r3, #8
 800620a:	f8c8 2000 	str.w	r2, [r8]
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006216:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800621a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	f8cd 8018 	str.w	r8, [sp, #24]
 8006224:	ee08 0a10 	vmov	s16, r0
 8006228:	4b9f      	ldr	r3, [pc, #636]	; (80064a8 <_printf_float+0x2dc>)
 800622a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	f7fa fc8b 	bl	8000b4c <__aeabi_dcmpun>
 8006236:	bb88      	cbnz	r0, 800629c <_printf_float+0xd0>
 8006238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800623c:	4b9a      	ldr	r3, [pc, #616]	; (80064a8 <_printf_float+0x2dc>)
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	f7fa fc65 	bl	8000b10 <__aeabi_dcmple>
 8006246:	bb48      	cbnz	r0, 800629c <_printf_float+0xd0>
 8006248:	2200      	movs	r2, #0
 800624a:	2300      	movs	r3, #0
 800624c:	4640      	mov	r0, r8
 800624e:	4649      	mov	r1, r9
 8006250:	f7fa fc54 	bl	8000afc <__aeabi_dcmplt>
 8006254:	b110      	cbz	r0, 800625c <_printf_float+0x90>
 8006256:	232d      	movs	r3, #45	; 0x2d
 8006258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625c:	4b93      	ldr	r3, [pc, #588]	; (80064ac <_printf_float+0x2e0>)
 800625e:	4894      	ldr	r0, [pc, #592]	; (80064b0 <_printf_float+0x2e4>)
 8006260:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006264:	bf94      	ite	ls
 8006266:	4698      	movls	r8, r3
 8006268:	4680      	movhi	r8, r0
 800626a:	2303      	movs	r3, #3
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	9b05      	ldr	r3, [sp, #20]
 8006270:	f023 0204 	bic.w	r2, r3, #4
 8006274:	6022      	str	r2, [r4, #0]
 8006276:	f04f 0900 	mov.w	r9, #0
 800627a:	9700      	str	r7, [sp, #0]
 800627c:	4633      	mov	r3, r6
 800627e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	f000 f9d8 	bl	8006638 <_printf_common>
 8006288:	3001      	adds	r0, #1
 800628a:	f040 8090 	bne.w	80063ae <_printf_float+0x1e2>
 800628e:	f04f 30ff 	mov.w	r0, #4294967295
 8006292:	b00d      	add	sp, #52	; 0x34
 8006294:	ecbd 8b02 	vpop	{d8}
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	4642      	mov	r2, r8
 800629e:	464b      	mov	r3, r9
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7fa fc52 	bl	8000b4c <__aeabi_dcmpun>
 80062a8:	b140      	cbz	r0, 80062bc <_printf_float+0xf0>
 80062aa:	464b      	mov	r3, r9
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfbc      	itt	lt
 80062b0:	232d      	movlt	r3, #45	; 0x2d
 80062b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062b6:	487f      	ldr	r0, [pc, #508]	; (80064b4 <_printf_float+0x2e8>)
 80062b8:	4b7f      	ldr	r3, [pc, #508]	; (80064b8 <_printf_float+0x2ec>)
 80062ba:	e7d1      	b.n	8006260 <_printf_float+0x94>
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80062c2:	9206      	str	r2, [sp, #24]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	d13f      	bne.n	8006348 <_printf_float+0x17c>
 80062c8:	2306      	movs	r3, #6
 80062ca:	6063      	str	r3, [r4, #4]
 80062cc:	9b05      	ldr	r3, [sp, #20]
 80062ce:	6861      	ldr	r1, [r4, #4]
 80062d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062d4:	2300      	movs	r3, #0
 80062d6:	9303      	str	r3, [sp, #12]
 80062d8:	ab0a      	add	r3, sp, #40	; 0x28
 80062da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80062de:	ab09      	add	r3, sp, #36	; 0x24
 80062e0:	ec49 8b10 	vmov	d0, r8, r9
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	6022      	str	r2, [r4, #0]
 80062e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062ec:	4628      	mov	r0, r5
 80062ee:	f7ff fecd 	bl	800608c <__cvt>
 80062f2:	9b06      	ldr	r3, [sp, #24]
 80062f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062f6:	2b47      	cmp	r3, #71	; 0x47
 80062f8:	4680      	mov	r8, r0
 80062fa:	d108      	bne.n	800630e <_printf_float+0x142>
 80062fc:	1cc8      	adds	r0, r1, #3
 80062fe:	db02      	blt.n	8006306 <_printf_float+0x13a>
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	4299      	cmp	r1, r3
 8006304:	dd41      	ble.n	800638a <_printf_float+0x1be>
 8006306:	f1ab 0b02 	sub.w	fp, fp, #2
 800630a:	fa5f fb8b 	uxtb.w	fp, fp
 800630e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006312:	d820      	bhi.n	8006356 <_printf_float+0x18a>
 8006314:	3901      	subs	r1, #1
 8006316:	465a      	mov	r2, fp
 8006318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800631c:	9109      	str	r1, [sp, #36]	; 0x24
 800631e:	f7ff ff17 	bl	8006150 <__exponent>
 8006322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006324:	1813      	adds	r3, r2, r0
 8006326:	2a01      	cmp	r2, #1
 8006328:	4681      	mov	r9, r0
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	dc02      	bgt.n	8006334 <_printf_float+0x168>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	07d2      	lsls	r2, r2, #31
 8006332:	d501      	bpl.n	8006338 <_printf_float+0x16c>
 8006334:	3301      	adds	r3, #1
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800633c:	2b00      	cmp	r3, #0
 800633e:	d09c      	beq.n	800627a <_printf_float+0xae>
 8006340:	232d      	movs	r3, #45	; 0x2d
 8006342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006346:	e798      	b.n	800627a <_printf_float+0xae>
 8006348:	9a06      	ldr	r2, [sp, #24]
 800634a:	2a47      	cmp	r2, #71	; 0x47
 800634c:	d1be      	bne.n	80062cc <_printf_float+0x100>
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1bc      	bne.n	80062cc <_printf_float+0x100>
 8006352:	2301      	movs	r3, #1
 8006354:	e7b9      	b.n	80062ca <_printf_float+0xfe>
 8006356:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800635a:	d118      	bne.n	800638e <_printf_float+0x1c2>
 800635c:	2900      	cmp	r1, #0
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	dd0b      	ble.n	800637a <_printf_float+0x1ae>
 8006362:	6121      	str	r1, [r4, #16]
 8006364:	b913      	cbnz	r3, 800636c <_printf_float+0x1a0>
 8006366:	6822      	ldr	r2, [r4, #0]
 8006368:	07d0      	lsls	r0, r2, #31
 800636a:	d502      	bpl.n	8006372 <_printf_float+0x1a6>
 800636c:	3301      	adds	r3, #1
 800636e:	440b      	add	r3, r1
 8006370:	6123      	str	r3, [r4, #16]
 8006372:	65a1      	str	r1, [r4, #88]	; 0x58
 8006374:	f04f 0900 	mov.w	r9, #0
 8006378:	e7de      	b.n	8006338 <_printf_float+0x16c>
 800637a:	b913      	cbnz	r3, 8006382 <_printf_float+0x1b6>
 800637c:	6822      	ldr	r2, [r4, #0]
 800637e:	07d2      	lsls	r2, r2, #31
 8006380:	d501      	bpl.n	8006386 <_printf_float+0x1ba>
 8006382:	3302      	adds	r3, #2
 8006384:	e7f4      	b.n	8006370 <_printf_float+0x1a4>
 8006386:	2301      	movs	r3, #1
 8006388:	e7f2      	b.n	8006370 <_printf_float+0x1a4>
 800638a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800638e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006390:	4299      	cmp	r1, r3
 8006392:	db05      	blt.n	80063a0 <_printf_float+0x1d4>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	6121      	str	r1, [r4, #16]
 8006398:	07d8      	lsls	r0, r3, #31
 800639a:	d5ea      	bpl.n	8006372 <_printf_float+0x1a6>
 800639c:	1c4b      	adds	r3, r1, #1
 800639e:	e7e7      	b.n	8006370 <_printf_float+0x1a4>
 80063a0:	2900      	cmp	r1, #0
 80063a2:	bfd4      	ite	le
 80063a4:	f1c1 0202 	rsble	r2, r1, #2
 80063a8:	2201      	movgt	r2, #1
 80063aa:	4413      	add	r3, r2
 80063ac:	e7e0      	b.n	8006370 <_printf_float+0x1a4>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	055a      	lsls	r2, r3, #21
 80063b2:	d407      	bmi.n	80063c4 <_printf_float+0x1f8>
 80063b4:	6923      	ldr	r3, [r4, #16]
 80063b6:	4642      	mov	r2, r8
 80063b8:	4631      	mov	r1, r6
 80063ba:	4628      	mov	r0, r5
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	d12c      	bne.n	800641c <_printf_float+0x250>
 80063c2:	e764      	b.n	800628e <_printf_float+0xc2>
 80063c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063c8:	f240 80e0 	bls.w	800658c <_printf_float+0x3c0>
 80063cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063d0:	2200      	movs	r2, #0
 80063d2:	2300      	movs	r3, #0
 80063d4:	f7fa fb88 	bl	8000ae8 <__aeabi_dcmpeq>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d034      	beq.n	8006446 <_printf_float+0x27a>
 80063dc:	4a37      	ldr	r2, [pc, #220]	; (80064bc <_printf_float+0x2f0>)
 80063de:	2301      	movs	r3, #1
 80063e0:	4631      	mov	r1, r6
 80063e2:	4628      	mov	r0, r5
 80063e4:	47b8      	blx	r7
 80063e6:	3001      	adds	r0, #1
 80063e8:	f43f af51 	beq.w	800628e <_printf_float+0xc2>
 80063ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063f0:	429a      	cmp	r2, r3
 80063f2:	db02      	blt.n	80063fa <_printf_float+0x22e>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	07d8      	lsls	r0, r3, #31
 80063f8:	d510      	bpl.n	800641c <_printf_float+0x250>
 80063fa:	ee18 3a10 	vmov	r3, s16
 80063fe:	4652      	mov	r2, sl
 8006400:	4631      	mov	r1, r6
 8006402:	4628      	mov	r0, r5
 8006404:	47b8      	blx	r7
 8006406:	3001      	adds	r0, #1
 8006408:	f43f af41 	beq.w	800628e <_printf_float+0xc2>
 800640c:	f04f 0800 	mov.w	r8, #0
 8006410:	f104 091a 	add.w	r9, r4, #26
 8006414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006416:	3b01      	subs	r3, #1
 8006418:	4543      	cmp	r3, r8
 800641a:	dc09      	bgt.n	8006430 <_printf_float+0x264>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	079b      	lsls	r3, r3, #30
 8006420:	f100 8105 	bmi.w	800662e <_printf_float+0x462>
 8006424:	68e0      	ldr	r0, [r4, #12]
 8006426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006428:	4298      	cmp	r0, r3
 800642a:	bfb8      	it	lt
 800642c:	4618      	movlt	r0, r3
 800642e:	e730      	b.n	8006292 <_printf_float+0xc6>
 8006430:	2301      	movs	r3, #1
 8006432:	464a      	mov	r2, r9
 8006434:	4631      	mov	r1, r6
 8006436:	4628      	mov	r0, r5
 8006438:	47b8      	blx	r7
 800643a:	3001      	adds	r0, #1
 800643c:	f43f af27 	beq.w	800628e <_printf_float+0xc2>
 8006440:	f108 0801 	add.w	r8, r8, #1
 8006444:	e7e6      	b.n	8006414 <_printf_float+0x248>
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	dc39      	bgt.n	80064c0 <_printf_float+0x2f4>
 800644c:	4a1b      	ldr	r2, [pc, #108]	; (80064bc <_printf_float+0x2f0>)
 800644e:	2301      	movs	r3, #1
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	47b8      	blx	r7
 8006456:	3001      	adds	r0, #1
 8006458:	f43f af19 	beq.w	800628e <_printf_float+0xc2>
 800645c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006460:	4313      	orrs	r3, r2
 8006462:	d102      	bne.n	800646a <_printf_float+0x29e>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	d5d8      	bpl.n	800641c <_printf_float+0x250>
 800646a:	ee18 3a10 	vmov	r3, s16
 800646e:	4652      	mov	r2, sl
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f af09 	beq.w	800628e <_printf_float+0xc2>
 800647c:	f04f 0900 	mov.w	r9, #0
 8006480:	f104 0a1a 	add.w	sl, r4, #26
 8006484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006486:	425b      	negs	r3, r3
 8006488:	454b      	cmp	r3, r9
 800648a:	dc01      	bgt.n	8006490 <_printf_float+0x2c4>
 800648c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648e:	e792      	b.n	80063b6 <_printf_float+0x1ea>
 8006490:	2301      	movs	r3, #1
 8006492:	4652      	mov	r2, sl
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	f43f aef7 	beq.w	800628e <_printf_float+0xc2>
 80064a0:	f109 0901 	add.w	r9, r9, #1
 80064a4:	e7ee      	b.n	8006484 <_printf_float+0x2b8>
 80064a6:	bf00      	nop
 80064a8:	7fefffff 	.word	0x7fefffff
 80064ac:	0800a8d5 	.word	0x0800a8d5
 80064b0:	0800a8d9 	.word	0x0800a8d9
 80064b4:	0800a8e1 	.word	0x0800a8e1
 80064b8:	0800a8dd 	.word	0x0800a8dd
 80064bc:	0800a8e5 	.word	0x0800a8e5
 80064c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c4:	429a      	cmp	r2, r3
 80064c6:	bfa8      	it	ge
 80064c8:	461a      	movge	r2, r3
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	4691      	mov	r9, r2
 80064ce:	dc37      	bgt.n	8006540 <_printf_float+0x374>
 80064d0:	f04f 0b00 	mov.w	fp, #0
 80064d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064d8:	f104 021a 	add.w	r2, r4, #26
 80064dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064de:	9305      	str	r3, [sp, #20]
 80064e0:	eba3 0309 	sub.w	r3, r3, r9
 80064e4:	455b      	cmp	r3, fp
 80064e6:	dc33      	bgt.n	8006550 <_printf_float+0x384>
 80064e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064ec:	429a      	cmp	r2, r3
 80064ee:	db3b      	blt.n	8006568 <_printf_float+0x39c>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07da      	lsls	r2, r3, #31
 80064f4:	d438      	bmi.n	8006568 <_printf_float+0x39c>
 80064f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f8:	9a05      	ldr	r2, [sp, #20]
 80064fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064fc:	1a9a      	subs	r2, r3, r2
 80064fe:	eba3 0901 	sub.w	r9, r3, r1
 8006502:	4591      	cmp	r9, r2
 8006504:	bfa8      	it	ge
 8006506:	4691      	movge	r9, r2
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	dc35      	bgt.n	800657a <_printf_float+0x3ae>
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006516:	f104 0a1a 	add.w	sl, r4, #26
 800651a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	eba3 0309 	sub.w	r3, r3, r9
 8006524:	4543      	cmp	r3, r8
 8006526:	f77f af79 	ble.w	800641c <_printf_float+0x250>
 800652a:	2301      	movs	r3, #1
 800652c:	4652      	mov	r2, sl
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	47b8      	blx	r7
 8006534:	3001      	adds	r0, #1
 8006536:	f43f aeaa 	beq.w	800628e <_printf_float+0xc2>
 800653a:	f108 0801 	add.w	r8, r8, #1
 800653e:	e7ec      	b.n	800651a <_printf_float+0x34e>
 8006540:	4613      	mov	r3, r2
 8006542:	4631      	mov	r1, r6
 8006544:	4642      	mov	r2, r8
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	d1c0      	bne.n	80064d0 <_printf_float+0x304>
 800654e:	e69e      	b.n	800628e <_printf_float+0xc2>
 8006550:	2301      	movs	r3, #1
 8006552:	4631      	mov	r1, r6
 8006554:	4628      	mov	r0, r5
 8006556:	9205      	str	r2, [sp, #20]
 8006558:	47b8      	blx	r7
 800655a:	3001      	adds	r0, #1
 800655c:	f43f ae97 	beq.w	800628e <_printf_float+0xc2>
 8006560:	9a05      	ldr	r2, [sp, #20]
 8006562:	f10b 0b01 	add.w	fp, fp, #1
 8006566:	e7b9      	b.n	80064dc <_printf_float+0x310>
 8006568:	ee18 3a10 	vmov	r3, s16
 800656c:	4652      	mov	r2, sl
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	d1be      	bne.n	80064f6 <_printf_float+0x32a>
 8006578:	e689      	b.n	800628e <_printf_float+0xc2>
 800657a:	9a05      	ldr	r2, [sp, #20]
 800657c:	464b      	mov	r3, r9
 800657e:	4442      	add	r2, r8
 8006580:	4631      	mov	r1, r6
 8006582:	4628      	mov	r0, r5
 8006584:	47b8      	blx	r7
 8006586:	3001      	adds	r0, #1
 8006588:	d1c1      	bne.n	800650e <_printf_float+0x342>
 800658a:	e680      	b.n	800628e <_printf_float+0xc2>
 800658c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800658e:	2a01      	cmp	r2, #1
 8006590:	dc01      	bgt.n	8006596 <_printf_float+0x3ca>
 8006592:	07db      	lsls	r3, r3, #31
 8006594:	d538      	bpl.n	8006608 <_printf_float+0x43c>
 8006596:	2301      	movs	r3, #1
 8006598:	4642      	mov	r2, r8
 800659a:	4631      	mov	r1, r6
 800659c:	4628      	mov	r0, r5
 800659e:	47b8      	blx	r7
 80065a0:	3001      	adds	r0, #1
 80065a2:	f43f ae74 	beq.w	800628e <_printf_float+0xc2>
 80065a6:	ee18 3a10 	vmov	r3, s16
 80065aa:	4652      	mov	r2, sl
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	f43f ae6b 	beq.w	800628e <_printf_float+0xc2>
 80065b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	f7fa fa92 	bl	8000ae8 <__aeabi_dcmpeq>
 80065c4:	b9d8      	cbnz	r0, 80065fe <_printf_float+0x432>
 80065c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c8:	f108 0201 	add.w	r2, r8, #1
 80065cc:	3b01      	subs	r3, #1
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	d10e      	bne.n	80065f6 <_printf_float+0x42a>
 80065d8:	e659      	b.n	800628e <_printf_float+0xc2>
 80065da:	2301      	movs	r3, #1
 80065dc:	4652      	mov	r2, sl
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f ae52 	beq.w	800628e <_printf_float+0xc2>
 80065ea:	f108 0801 	add.w	r8, r8, #1
 80065ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f0:	3b01      	subs	r3, #1
 80065f2:	4543      	cmp	r3, r8
 80065f4:	dcf1      	bgt.n	80065da <_printf_float+0x40e>
 80065f6:	464b      	mov	r3, r9
 80065f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065fc:	e6dc      	b.n	80063b8 <_printf_float+0x1ec>
 80065fe:	f04f 0800 	mov.w	r8, #0
 8006602:	f104 0a1a 	add.w	sl, r4, #26
 8006606:	e7f2      	b.n	80065ee <_printf_float+0x422>
 8006608:	2301      	movs	r3, #1
 800660a:	4642      	mov	r2, r8
 800660c:	e7df      	b.n	80065ce <_printf_float+0x402>
 800660e:	2301      	movs	r3, #1
 8006610:	464a      	mov	r2, r9
 8006612:	4631      	mov	r1, r6
 8006614:	4628      	mov	r0, r5
 8006616:	47b8      	blx	r7
 8006618:	3001      	adds	r0, #1
 800661a:	f43f ae38 	beq.w	800628e <_printf_float+0xc2>
 800661e:	f108 0801 	add.w	r8, r8, #1
 8006622:	68e3      	ldr	r3, [r4, #12]
 8006624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006626:	1a5b      	subs	r3, r3, r1
 8006628:	4543      	cmp	r3, r8
 800662a:	dcf0      	bgt.n	800660e <_printf_float+0x442>
 800662c:	e6fa      	b.n	8006424 <_printf_float+0x258>
 800662e:	f04f 0800 	mov.w	r8, #0
 8006632:	f104 0919 	add.w	r9, r4, #25
 8006636:	e7f4      	b.n	8006622 <_printf_float+0x456>

08006638 <_printf_common>:
 8006638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663c:	4616      	mov	r6, r2
 800663e:	4699      	mov	r9, r3
 8006640:	688a      	ldr	r2, [r1, #8]
 8006642:	690b      	ldr	r3, [r1, #16]
 8006644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006648:	4293      	cmp	r3, r2
 800664a:	bfb8      	it	lt
 800664c:	4613      	movlt	r3, r2
 800664e:	6033      	str	r3, [r6, #0]
 8006650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006654:	4607      	mov	r7, r0
 8006656:	460c      	mov	r4, r1
 8006658:	b10a      	cbz	r2, 800665e <_printf_common+0x26>
 800665a:	3301      	adds	r3, #1
 800665c:	6033      	str	r3, [r6, #0]
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	0699      	lsls	r1, r3, #26
 8006662:	bf42      	ittt	mi
 8006664:	6833      	ldrmi	r3, [r6, #0]
 8006666:	3302      	addmi	r3, #2
 8006668:	6033      	strmi	r3, [r6, #0]
 800666a:	6825      	ldr	r5, [r4, #0]
 800666c:	f015 0506 	ands.w	r5, r5, #6
 8006670:	d106      	bne.n	8006680 <_printf_common+0x48>
 8006672:	f104 0a19 	add.w	sl, r4, #25
 8006676:	68e3      	ldr	r3, [r4, #12]
 8006678:	6832      	ldr	r2, [r6, #0]
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	42ab      	cmp	r3, r5
 800667e:	dc26      	bgt.n	80066ce <_printf_common+0x96>
 8006680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006684:	1e13      	subs	r3, r2, #0
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	bf18      	it	ne
 800668a:	2301      	movne	r3, #1
 800668c:	0692      	lsls	r2, r2, #26
 800668e:	d42b      	bmi.n	80066e8 <_printf_common+0xb0>
 8006690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006694:	4649      	mov	r1, r9
 8006696:	4638      	mov	r0, r7
 8006698:	47c0      	blx	r8
 800669a:	3001      	adds	r0, #1
 800669c:	d01e      	beq.n	80066dc <_printf_common+0xa4>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	68e5      	ldr	r5, [r4, #12]
 80066a2:	6832      	ldr	r2, [r6, #0]
 80066a4:	f003 0306 	and.w	r3, r3, #6
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	bf08      	it	eq
 80066ac:	1aad      	subeq	r5, r5, r2
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	6922      	ldr	r2, [r4, #16]
 80066b2:	bf0c      	ite	eq
 80066b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b8:	2500      	movne	r5, #0
 80066ba:	4293      	cmp	r3, r2
 80066bc:	bfc4      	itt	gt
 80066be:	1a9b      	subgt	r3, r3, r2
 80066c0:	18ed      	addgt	r5, r5, r3
 80066c2:	2600      	movs	r6, #0
 80066c4:	341a      	adds	r4, #26
 80066c6:	42b5      	cmp	r5, r6
 80066c8:	d11a      	bne.n	8006700 <_printf_common+0xc8>
 80066ca:	2000      	movs	r0, #0
 80066cc:	e008      	b.n	80066e0 <_printf_common+0xa8>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4652      	mov	r2, sl
 80066d2:	4649      	mov	r1, r9
 80066d4:	4638      	mov	r0, r7
 80066d6:	47c0      	blx	r8
 80066d8:	3001      	adds	r0, #1
 80066da:	d103      	bne.n	80066e4 <_printf_common+0xac>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e4:	3501      	adds	r5, #1
 80066e6:	e7c6      	b.n	8006676 <_printf_common+0x3e>
 80066e8:	18e1      	adds	r1, r4, r3
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	2030      	movs	r0, #48	; 0x30
 80066ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066f2:	4422      	add	r2, r4
 80066f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066fc:	3302      	adds	r3, #2
 80066fe:	e7c7      	b.n	8006690 <_printf_common+0x58>
 8006700:	2301      	movs	r3, #1
 8006702:	4622      	mov	r2, r4
 8006704:	4649      	mov	r1, r9
 8006706:	4638      	mov	r0, r7
 8006708:	47c0      	blx	r8
 800670a:	3001      	adds	r0, #1
 800670c:	d0e6      	beq.n	80066dc <_printf_common+0xa4>
 800670e:	3601      	adds	r6, #1
 8006710:	e7d9      	b.n	80066c6 <_printf_common+0x8e>
	...

08006714 <_printf_i>:
 8006714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	7e0f      	ldrb	r7, [r1, #24]
 800671a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800671c:	2f78      	cmp	r7, #120	; 0x78
 800671e:	4691      	mov	r9, r2
 8006720:	4680      	mov	r8, r0
 8006722:	460c      	mov	r4, r1
 8006724:	469a      	mov	sl, r3
 8006726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800672a:	d807      	bhi.n	800673c <_printf_i+0x28>
 800672c:	2f62      	cmp	r7, #98	; 0x62
 800672e:	d80a      	bhi.n	8006746 <_printf_i+0x32>
 8006730:	2f00      	cmp	r7, #0
 8006732:	f000 80d8 	beq.w	80068e6 <_printf_i+0x1d2>
 8006736:	2f58      	cmp	r7, #88	; 0x58
 8006738:	f000 80a3 	beq.w	8006882 <_printf_i+0x16e>
 800673c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006744:	e03a      	b.n	80067bc <_printf_i+0xa8>
 8006746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800674a:	2b15      	cmp	r3, #21
 800674c:	d8f6      	bhi.n	800673c <_printf_i+0x28>
 800674e:	a101      	add	r1, pc, #4	; (adr r1, 8006754 <_printf_i+0x40>)
 8006750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006754:	080067ad 	.word	0x080067ad
 8006758:	080067c1 	.word	0x080067c1
 800675c:	0800673d 	.word	0x0800673d
 8006760:	0800673d 	.word	0x0800673d
 8006764:	0800673d 	.word	0x0800673d
 8006768:	0800673d 	.word	0x0800673d
 800676c:	080067c1 	.word	0x080067c1
 8006770:	0800673d 	.word	0x0800673d
 8006774:	0800673d 	.word	0x0800673d
 8006778:	0800673d 	.word	0x0800673d
 800677c:	0800673d 	.word	0x0800673d
 8006780:	080068cd 	.word	0x080068cd
 8006784:	080067f1 	.word	0x080067f1
 8006788:	080068af 	.word	0x080068af
 800678c:	0800673d 	.word	0x0800673d
 8006790:	0800673d 	.word	0x0800673d
 8006794:	080068ef 	.word	0x080068ef
 8006798:	0800673d 	.word	0x0800673d
 800679c:	080067f1 	.word	0x080067f1
 80067a0:	0800673d 	.word	0x0800673d
 80067a4:	0800673d 	.word	0x0800673d
 80067a8:	080068b7 	.word	0x080068b7
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	602a      	str	r2, [r5, #0]
 80067b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067bc:	2301      	movs	r3, #1
 80067be:	e0a3      	b.n	8006908 <_printf_i+0x1f4>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	6829      	ldr	r1, [r5, #0]
 80067c4:	0606      	lsls	r6, r0, #24
 80067c6:	f101 0304 	add.w	r3, r1, #4
 80067ca:	d50a      	bpl.n	80067e2 <_printf_i+0xce>
 80067cc:	680e      	ldr	r6, [r1, #0]
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	2e00      	cmp	r6, #0
 80067d2:	da03      	bge.n	80067dc <_printf_i+0xc8>
 80067d4:	232d      	movs	r3, #45	; 0x2d
 80067d6:	4276      	negs	r6, r6
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067dc:	485e      	ldr	r0, [pc, #376]	; (8006958 <_printf_i+0x244>)
 80067de:	230a      	movs	r3, #10
 80067e0:	e019      	b.n	8006816 <_printf_i+0x102>
 80067e2:	680e      	ldr	r6, [r1, #0]
 80067e4:	602b      	str	r3, [r5, #0]
 80067e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067ea:	bf18      	it	ne
 80067ec:	b236      	sxthne	r6, r6
 80067ee:	e7ef      	b.n	80067d0 <_printf_i+0xbc>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	1d19      	adds	r1, r3, #4
 80067f6:	6029      	str	r1, [r5, #0]
 80067f8:	0601      	lsls	r1, r0, #24
 80067fa:	d501      	bpl.n	8006800 <_printf_i+0xec>
 80067fc:	681e      	ldr	r6, [r3, #0]
 80067fe:	e002      	b.n	8006806 <_printf_i+0xf2>
 8006800:	0646      	lsls	r6, r0, #25
 8006802:	d5fb      	bpl.n	80067fc <_printf_i+0xe8>
 8006804:	881e      	ldrh	r6, [r3, #0]
 8006806:	4854      	ldr	r0, [pc, #336]	; (8006958 <_printf_i+0x244>)
 8006808:	2f6f      	cmp	r7, #111	; 0x6f
 800680a:	bf0c      	ite	eq
 800680c:	2308      	moveq	r3, #8
 800680e:	230a      	movne	r3, #10
 8006810:	2100      	movs	r1, #0
 8006812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006816:	6865      	ldr	r5, [r4, #4]
 8006818:	60a5      	str	r5, [r4, #8]
 800681a:	2d00      	cmp	r5, #0
 800681c:	bfa2      	ittt	ge
 800681e:	6821      	ldrge	r1, [r4, #0]
 8006820:	f021 0104 	bicge.w	r1, r1, #4
 8006824:	6021      	strge	r1, [r4, #0]
 8006826:	b90e      	cbnz	r6, 800682c <_printf_i+0x118>
 8006828:	2d00      	cmp	r5, #0
 800682a:	d04d      	beq.n	80068c8 <_printf_i+0x1b4>
 800682c:	4615      	mov	r5, r2
 800682e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006832:	fb03 6711 	mls	r7, r3, r1, r6
 8006836:	5dc7      	ldrb	r7, [r0, r7]
 8006838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800683c:	4637      	mov	r7, r6
 800683e:	42bb      	cmp	r3, r7
 8006840:	460e      	mov	r6, r1
 8006842:	d9f4      	bls.n	800682e <_printf_i+0x11a>
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10b      	bne.n	8006860 <_printf_i+0x14c>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	07de      	lsls	r6, r3, #31
 800684c:	d508      	bpl.n	8006860 <_printf_i+0x14c>
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	6861      	ldr	r1, [r4, #4]
 8006852:	4299      	cmp	r1, r3
 8006854:	bfde      	ittt	le
 8006856:	2330      	movle	r3, #48	; 0x30
 8006858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800685c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006860:	1b52      	subs	r2, r2, r5
 8006862:	6122      	str	r2, [r4, #16]
 8006864:	f8cd a000 	str.w	sl, [sp]
 8006868:	464b      	mov	r3, r9
 800686a:	aa03      	add	r2, sp, #12
 800686c:	4621      	mov	r1, r4
 800686e:	4640      	mov	r0, r8
 8006870:	f7ff fee2 	bl	8006638 <_printf_common>
 8006874:	3001      	adds	r0, #1
 8006876:	d14c      	bne.n	8006912 <_printf_i+0x1fe>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	b004      	add	sp, #16
 800687e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006882:	4835      	ldr	r0, [pc, #212]	; (8006958 <_printf_i+0x244>)
 8006884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006888:	6829      	ldr	r1, [r5, #0]
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006890:	6029      	str	r1, [r5, #0]
 8006892:	061d      	lsls	r5, r3, #24
 8006894:	d514      	bpl.n	80068c0 <_printf_i+0x1ac>
 8006896:	07df      	lsls	r7, r3, #31
 8006898:	bf44      	itt	mi
 800689a:	f043 0320 	orrmi.w	r3, r3, #32
 800689e:	6023      	strmi	r3, [r4, #0]
 80068a0:	b91e      	cbnz	r6, 80068aa <_printf_i+0x196>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	f023 0320 	bic.w	r3, r3, #32
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	2310      	movs	r3, #16
 80068ac:	e7b0      	b.n	8006810 <_printf_i+0xfc>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f043 0320 	orr.w	r3, r3, #32
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	2378      	movs	r3, #120	; 0x78
 80068b8:	4828      	ldr	r0, [pc, #160]	; (800695c <_printf_i+0x248>)
 80068ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068be:	e7e3      	b.n	8006888 <_printf_i+0x174>
 80068c0:	0659      	lsls	r1, r3, #25
 80068c2:	bf48      	it	mi
 80068c4:	b2b6      	uxthmi	r6, r6
 80068c6:	e7e6      	b.n	8006896 <_printf_i+0x182>
 80068c8:	4615      	mov	r5, r2
 80068ca:	e7bb      	b.n	8006844 <_printf_i+0x130>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	6826      	ldr	r6, [r4, #0]
 80068d0:	6961      	ldr	r1, [r4, #20]
 80068d2:	1d18      	adds	r0, r3, #4
 80068d4:	6028      	str	r0, [r5, #0]
 80068d6:	0635      	lsls	r5, r6, #24
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	d501      	bpl.n	80068e0 <_printf_i+0x1cc>
 80068dc:	6019      	str	r1, [r3, #0]
 80068de:	e002      	b.n	80068e6 <_printf_i+0x1d2>
 80068e0:	0670      	lsls	r0, r6, #25
 80068e2:	d5fb      	bpl.n	80068dc <_printf_i+0x1c8>
 80068e4:	8019      	strh	r1, [r3, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	4615      	mov	r5, r2
 80068ec:	e7ba      	b.n	8006864 <_printf_i+0x150>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	1d1a      	adds	r2, r3, #4
 80068f2:	602a      	str	r2, [r5, #0]
 80068f4:	681d      	ldr	r5, [r3, #0]
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	2100      	movs	r1, #0
 80068fa:	4628      	mov	r0, r5
 80068fc:	f7f9 fc80 	bl	8000200 <memchr>
 8006900:	b108      	cbz	r0, 8006906 <_printf_i+0x1f2>
 8006902:	1b40      	subs	r0, r0, r5
 8006904:	6060      	str	r0, [r4, #4]
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	2300      	movs	r3, #0
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006910:	e7a8      	b.n	8006864 <_printf_i+0x150>
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	462a      	mov	r2, r5
 8006916:	4649      	mov	r1, r9
 8006918:	4640      	mov	r0, r8
 800691a:	47d0      	blx	sl
 800691c:	3001      	adds	r0, #1
 800691e:	d0ab      	beq.n	8006878 <_printf_i+0x164>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	079b      	lsls	r3, r3, #30
 8006924:	d413      	bmi.n	800694e <_printf_i+0x23a>
 8006926:	68e0      	ldr	r0, [r4, #12]
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	4298      	cmp	r0, r3
 800692c:	bfb8      	it	lt
 800692e:	4618      	movlt	r0, r3
 8006930:	e7a4      	b.n	800687c <_printf_i+0x168>
 8006932:	2301      	movs	r3, #1
 8006934:	4632      	mov	r2, r6
 8006936:	4649      	mov	r1, r9
 8006938:	4640      	mov	r0, r8
 800693a:	47d0      	blx	sl
 800693c:	3001      	adds	r0, #1
 800693e:	d09b      	beq.n	8006878 <_printf_i+0x164>
 8006940:	3501      	adds	r5, #1
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	9903      	ldr	r1, [sp, #12]
 8006946:	1a5b      	subs	r3, r3, r1
 8006948:	42ab      	cmp	r3, r5
 800694a:	dcf2      	bgt.n	8006932 <_printf_i+0x21e>
 800694c:	e7eb      	b.n	8006926 <_printf_i+0x212>
 800694e:	2500      	movs	r5, #0
 8006950:	f104 0619 	add.w	r6, r4, #25
 8006954:	e7f5      	b.n	8006942 <_printf_i+0x22e>
 8006956:	bf00      	nop
 8006958:	0800a8e7 	.word	0x0800a8e7
 800695c:	0800a8f8 	.word	0x0800a8f8

08006960 <_scanf_float>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b087      	sub	sp, #28
 8006966:	4617      	mov	r7, r2
 8006968:	9303      	str	r3, [sp, #12]
 800696a:	688b      	ldr	r3, [r1, #8]
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006972:	bf83      	ittte	hi
 8006974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006978:	195b      	addhi	r3, r3, r5
 800697a:	9302      	strhi	r3, [sp, #8]
 800697c:	2300      	movls	r3, #0
 800697e:	bf86      	itte	hi
 8006980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006984:	608b      	strhi	r3, [r1, #8]
 8006986:	9302      	strls	r3, [sp, #8]
 8006988:	680b      	ldr	r3, [r1, #0]
 800698a:	468b      	mov	fp, r1
 800698c:	2500      	movs	r5, #0
 800698e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006992:	f84b 3b1c 	str.w	r3, [fp], #28
 8006996:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800699a:	4680      	mov	r8, r0
 800699c:	460c      	mov	r4, r1
 800699e:	465e      	mov	r6, fp
 80069a0:	46aa      	mov	sl, r5
 80069a2:	46a9      	mov	r9, r5
 80069a4:	9501      	str	r5, [sp, #4]
 80069a6:	68a2      	ldr	r2, [r4, #8]
 80069a8:	b152      	cbz	r2, 80069c0 <_scanf_float+0x60>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b4e      	cmp	r3, #78	; 0x4e
 80069b0:	d864      	bhi.n	8006a7c <_scanf_float+0x11c>
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d83c      	bhi.n	8006a30 <_scanf_float+0xd0>
 80069b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80069ba:	b2c8      	uxtb	r0, r1
 80069bc:	280e      	cmp	r0, #14
 80069be:	d93a      	bls.n	8006a36 <_scanf_float+0xd6>
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	d003      	beq.n	80069ce <_scanf_float+0x6e>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d2:	f1ba 0f01 	cmp.w	sl, #1
 80069d6:	f200 8113 	bhi.w	8006c00 <_scanf_float+0x2a0>
 80069da:	455e      	cmp	r6, fp
 80069dc:	f200 8105 	bhi.w	8006bea <_scanf_float+0x28a>
 80069e0:	2501      	movs	r5, #1
 80069e2:	4628      	mov	r0, r5
 80069e4:	b007      	add	sp, #28
 80069e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069ee:	2a0d      	cmp	r2, #13
 80069f0:	d8e6      	bhi.n	80069c0 <_scanf_float+0x60>
 80069f2:	a101      	add	r1, pc, #4	; (adr r1, 80069f8 <_scanf_float+0x98>)
 80069f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069f8:	08006b37 	.word	0x08006b37
 80069fc:	080069c1 	.word	0x080069c1
 8006a00:	080069c1 	.word	0x080069c1
 8006a04:	080069c1 	.word	0x080069c1
 8006a08:	08006b97 	.word	0x08006b97
 8006a0c:	08006b6f 	.word	0x08006b6f
 8006a10:	080069c1 	.word	0x080069c1
 8006a14:	080069c1 	.word	0x080069c1
 8006a18:	08006b45 	.word	0x08006b45
 8006a1c:	080069c1 	.word	0x080069c1
 8006a20:	080069c1 	.word	0x080069c1
 8006a24:	080069c1 	.word	0x080069c1
 8006a28:	080069c1 	.word	0x080069c1
 8006a2c:	08006afd 	.word	0x08006afd
 8006a30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a34:	e7db      	b.n	80069ee <_scanf_float+0x8e>
 8006a36:	290e      	cmp	r1, #14
 8006a38:	d8c2      	bhi.n	80069c0 <_scanf_float+0x60>
 8006a3a:	a001      	add	r0, pc, #4	; (adr r0, 8006a40 <_scanf_float+0xe0>)
 8006a3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a40:	08006aef 	.word	0x08006aef
 8006a44:	080069c1 	.word	0x080069c1
 8006a48:	08006aef 	.word	0x08006aef
 8006a4c:	08006b83 	.word	0x08006b83
 8006a50:	080069c1 	.word	0x080069c1
 8006a54:	08006a9d 	.word	0x08006a9d
 8006a58:	08006ad9 	.word	0x08006ad9
 8006a5c:	08006ad9 	.word	0x08006ad9
 8006a60:	08006ad9 	.word	0x08006ad9
 8006a64:	08006ad9 	.word	0x08006ad9
 8006a68:	08006ad9 	.word	0x08006ad9
 8006a6c:	08006ad9 	.word	0x08006ad9
 8006a70:	08006ad9 	.word	0x08006ad9
 8006a74:	08006ad9 	.word	0x08006ad9
 8006a78:	08006ad9 	.word	0x08006ad9
 8006a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8006a7e:	d809      	bhi.n	8006a94 <_scanf_float+0x134>
 8006a80:	2b60      	cmp	r3, #96	; 0x60
 8006a82:	d8b2      	bhi.n	80069ea <_scanf_float+0x8a>
 8006a84:	2b54      	cmp	r3, #84	; 0x54
 8006a86:	d077      	beq.n	8006b78 <_scanf_float+0x218>
 8006a88:	2b59      	cmp	r3, #89	; 0x59
 8006a8a:	d199      	bne.n	80069c0 <_scanf_float+0x60>
 8006a8c:	2d07      	cmp	r5, #7
 8006a8e:	d197      	bne.n	80069c0 <_scanf_float+0x60>
 8006a90:	2508      	movs	r5, #8
 8006a92:	e029      	b.n	8006ae8 <_scanf_float+0x188>
 8006a94:	2b74      	cmp	r3, #116	; 0x74
 8006a96:	d06f      	beq.n	8006b78 <_scanf_float+0x218>
 8006a98:	2b79      	cmp	r3, #121	; 0x79
 8006a9a:	e7f6      	b.n	8006a8a <_scanf_float+0x12a>
 8006a9c:	6821      	ldr	r1, [r4, #0]
 8006a9e:	05c8      	lsls	r0, r1, #23
 8006aa0:	d51a      	bpl.n	8006ad8 <_scanf_float+0x178>
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006aa8:	6021      	str	r1, [r4, #0]
 8006aaa:	f109 0901 	add.w	r9, r9, #1
 8006aae:	b11b      	cbz	r3, 8006ab8 <_scanf_float+0x158>
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	60a2      	str	r2, [r4, #8]
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	f340 8084 	ble.w	8006bd8 <_scanf_float+0x278>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	e766      	b.n	80069a6 <_scanf_float+0x46>
 8006ad8:	eb1a 0f05 	cmn.w	sl, r5
 8006adc:	f47f af70 	bne.w	80069c0 <_scanf_float+0x60>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	f806 3b01 	strb.w	r3, [r6], #1
 8006aec:	e7e4      	b.n	8006ab8 <_scanf_float+0x158>
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	0610      	lsls	r0, r2, #24
 8006af2:	f57f af65 	bpl.w	80069c0 <_scanf_float+0x60>
 8006af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006afa:	e7f4      	b.n	8006ae6 <_scanf_float+0x186>
 8006afc:	f1ba 0f00 	cmp.w	sl, #0
 8006b00:	d10e      	bne.n	8006b20 <_scanf_float+0x1c0>
 8006b02:	f1b9 0f00 	cmp.w	r9, #0
 8006b06:	d10e      	bne.n	8006b26 <_scanf_float+0x1c6>
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b12:	d108      	bne.n	8006b26 <_scanf_float+0x1c6>
 8006b14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b18:	6022      	str	r2, [r4, #0]
 8006b1a:	f04f 0a01 	mov.w	sl, #1
 8006b1e:	e7e3      	b.n	8006ae8 <_scanf_float+0x188>
 8006b20:	f1ba 0f02 	cmp.w	sl, #2
 8006b24:	d055      	beq.n	8006bd2 <_scanf_float+0x272>
 8006b26:	2d01      	cmp	r5, #1
 8006b28:	d002      	beq.n	8006b30 <_scanf_float+0x1d0>
 8006b2a:	2d04      	cmp	r5, #4
 8006b2c:	f47f af48 	bne.w	80069c0 <_scanf_float+0x60>
 8006b30:	3501      	adds	r5, #1
 8006b32:	b2ed      	uxtb	r5, r5
 8006b34:	e7d8      	b.n	8006ae8 <_scanf_float+0x188>
 8006b36:	f1ba 0f01 	cmp.w	sl, #1
 8006b3a:	f47f af41 	bne.w	80069c0 <_scanf_float+0x60>
 8006b3e:	f04f 0a02 	mov.w	sl, #2
 8006b42:	e7d1      	b.n	8006ae8 <_scanf_float+0x188>
 8006b44:	b97d      	cbnz	r5, 8006b66 <_scanf_float+0x206>
 8006b46:	f1b9 0f00 	cmp.w	r9, #0
 8006b4a:	f47f af3c 	bne.w	80069c6 <_scanf_float+0x66>
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b58:	f47f af39 	bne.w	80069ce <_scanf_float+0x6e>
 8006b5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	2501      	movs	r5, #1
 8006b64:	e7c0      	b.n	8006ae8 <_scanf_float+0x188>
 8006b66:	2d03      	cmp	r5, #3
 8006b68:	d0e2      	beq.n	8006b30 <_scanf_float+0x1d0>
 8006b6a:	2d05      	cmp	r5, #5
 8006b6c:	e7de      	b.n	8006b2c <_scanf_float+0x1cc>
 8006b6e:	2d02      	cmp	r5, #2
 8006b70:	f47f af26 	bne.w	80069c0 <_scanf_float+0x60>
 8006b74:	2503      	movs	r5, #3
 8006b76:	e7b7      	b.n	8006ae8 <_scanf_float+0x188>
 8006b78:	2d06      	cmp	r5, #6
 8006b7a:	f47f af21 	bne.w	80069c0 <_scanf_float+0x60>
 8006b7e:	2507      	movs	r5, #7
 8006b80:	e7b2      	b.n	8006ae8 <_scanf_float+0x188>
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	0591      	lsls	r1, r2, #22
 8006b86:	f57f af1b 	bpl.w	80069c0 <_scanf_float+0x60>
 8006b8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b94:	e7a8      	b.n	8006ae8 <_scanf_float+0x188>
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ba0:	d006      	beq.n	8006bb0 <_scanf_float+0x250>
 8006ba2:	0550      	lsls	r0, r2, #21
 8006ba4:	f57f af0c 	bpl.w	80069c0 <_scanf_float+0x60>
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	f43f af0f 	beq.w	80069ce <_scanf_float+0x6e>
 8006bb0:	0591      	lsls	r1, r2, #22
 8006bb2:	bf58      	it	pl
 8006bb4:	9901      	ldrpl	r1, [sp, #4]
 8006bb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bba:	bf58      	it	pl
 8006bbc:	eba9 0101 	subpl.w	r1, r9, r1
 8006bc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006bc4:	bf58      	it	pl
 8006bc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	f04f 0900 	mov.w	r9, #0
 8006bd0:	e78a      	b.n	8006ae8 <_scanf_float+0x188>
 8006bd2:	f04f 0a03 	mov.w	sl, #3
 8006bd6:	e787      	b.n	8006ae8 <_scanf_float+0x188>
 8006bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bdc:	4639      	mov	r1, r7
 8006bde:	4640      	mov	r0, r8
 8006be0:	4798      	blx	r3
 8006be2:	2800      	cmp	r0, #0
 8006be4:	f43f aedf 	beq.w	80069a6 <_scanf_float+0x46>
 8006be8:	e6ea      	b.n	80069c0 <_scanf_float+0x60>
 8006bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4798      	blx	r3
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	e6ec      	b.n	80069da <_scanf_float+0x7a>
 8006c00:	1e6b      	subs	r3, r5, #1
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	d825      	bhi.n	8006c52 <_scanf_float+0x2f2>
 8006c06:	2d02      	cmp	r5, #2
 8006c08:	d836      	bhi.n	8006c78 <_scanf_float+0x318>
 8006c0a:	455e      	cmp	r6, fp
 8006c0c:	f67f aee8 	bls.w	80069e0 <_scanf_float+0x80>
 8006c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c18:	463a      	mov	r2, r7
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	4798      	blx	r3
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	e7f1      	b.n	8006c0a <_scanf_float+0x2aa>
 8006c26:	9802      	ldr	r0, [sp, #8]
 8006c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c30:	9002      	str	r0, [sp, #8]
 8006c32:	463a      	mov	r2, r7
 8006c34:	4640      	mov	r0, r8
 8006c36:	4798      	blx	r3
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c42:	fa5f fa8a 	uxtb.w	sl, sl
 8006c46:	f1ba 0f02 	cmp.w	sl, #2
 8006c4a:	d1ec      	bne.n	8006c26 <_scanf_float+0x2c6>
 8006c4c:	3d03      	subs	r5, #3
 8006c4e:	b2ed      	uxtb	r5, r5
 8006c50:	1b76      	subs	r6, r6, r5
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	05da      	lsls	r2, r3, #23
 8006c56:	d52f      	bpl.n	8006cb8 <_scanf_float+0x358>
 8006c58:	055b      	lsls	r3, r3, #21
 8006c5a:	d510      	bpl.n	8006c7e <_scanf_float+0x31e>
 8006c5c:	455e      	cmp	r6, fp
 8006c5e:	f67f aebf 	bls.w	80069e0 <_scanf_float+0x80>
 8006c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4798      	blx	r3
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	e7f1      	b.n	8006c5c <_scanf_float+0x2fc>
 8006c78:	46aa      	mov	sl, r5
 8006c7a:	9602      	str	r6, [sp, #8]
 8006c7c:	e7df      	b.n	8006c3e <_scanf_float+0x2de>
 8006c7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	2965      	cmp	r1, #101	; 0x65
 8006c86:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	d00c      	beq.n	8006cac <_scanf_float+0x34c>
 8006c92:	2945      	cmp	r1, #69	; 0x45
 8006c94:	d00a      	beq.n	8006cac <_scanf_float+0x34c>
 8006c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c9a:	463a      	mov	r2, r7
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4798      	blx	r3
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	1eb5      	subs	r5, r6, #2
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4798      	blx	r3
 8006cb6:	462e      	mov	r6, r5
 8006cb8:	6825      	ldr	r5, [r4, #0]
 8006cba:	f015 0510 	ands.w	r5, r5, #16
 8006cbe:	d159      	bne.n	8006d74 <_scanf_float+0x414>
 8006cc0:	7035      	strb	r5, [r6, #0]
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ccc:	d11b      	bne.n	8006d06 <_scanf_float+0x3a6>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	454b      	cmp	r3, r9
 8006cd2:	eba3 0209 	sub.w	r2, r3, r9
 8006cd6:	d123      	bne.n	8006d20 <_scanf_float+0x3c0>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4659      	mov	r1, fp
 8006cdc:	4640      	mov	r0, r8
 8006cde:	f000 ff0d 	bl	8007afc <_strtod_r>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	9b03      	ldr	r3, [sp, #12]
 8006ce6:	f012 0f02 	tst.w	r2, #2
 8006cea:	ec57 6b10 	vmov	r6, r7, d0
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	d021      	beq.n	8006d36 <_scanf_float+0x3d6>
 8006cf2:	9903      	ldr	r1, [sp, #12]
 8006cf4:	1d1a      	adds	r2, r3, #4
 8006cf6:	600a      	str	r2, [r1, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	e9c3 6700 	strd	r6, r7, [r3]
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60e3      	str	r3, [r4, #12]
 8006d04:	e66d      	b.n	80069e2 <_scanf_float+0x82>
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0e5      	beq.n	8006cd8 <_scanf_float+0x378>
 8006d0c:	9905      	ldr	r1, [sp, #20]
 8006d0e:	230a      	movs	r3, #10
 8006d10:	462a      	mov	r2, r5
 8006d12:	3101      	adds	r1, #1
 8006d14:	4640      	mov	r0, r8
 8006d16:	f000 ff79 	bl	8007c0c <_strtol_r>
 8006d1a:	9b04      	ldr	r3, [sp, #16]
 8006d1c:	9e05      	ldr	r6, [sp, #20]
 8006d1e:	1ac2      	subs	r2, r0, r3
 8006d20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d24:	429e      	cmp	r6, r3
 8006d26:	bf28      	it	cs
 8006d28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d2c:	4912      	ldr	r1, [pc, #72]	; (8006d78 <_scanf_float+0x418>)
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 f8a2 	bl	8006e78 <siprintf>
 8006d34:	e7d0      	b.n	8006cd8 <_scanf_float+0x378>
 8006d36:	9903      	ldr	r1, [sp, #12]
 8006d38:	f012 0f04 	tst.w	r2, #4
 8006d3c:	f103 0204 	add.w	r2, r3, #4
 8006d40:	600a      	str	r2, [r1, #0]
 8006d42:	d1d9      	bne.n	8006cf8 <_scanf_float+0x398>
 8006d44:	f8d3 8000 	ldr.w	r8, [r3]
 8006d48:	ee10 2a10 	vmov	r2, s0
 8006d4c:	ee10 0a10 	vmov	r0, s0
 8006d50:	463b      	mov	r3, r7
 8006d52:	4639      	mov	r1, r7
 8006d54:	f7f9 fefa 	bl	8000b4c <__aeabi_dcmpun>
 8006d58:	b128      	cbz	r0, 8006d66 <_scanf_float+0x406>
 8006d5a:	4808      	ldr	r0, [pc, #32]	; (8006d7c <_scanf_float+0x41c>)
 8006d5c:	f000 f886 	bl	8006e6c <nanf>
 8006d60:	ed88 0a00 	vstr	s0, [r8]
 8006d64:	e7cb      	b.n	8006cfe <_scanf_float+0x39e>
 8006d66:	4630      	mov	r0, r6
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7f9 ff4d 	bl	8000c08 <__aeabi_d2f>
 8006d6e:	f8c8 0000 	str.w	r0, [r8]
 8006d72:	e7c4      	b.n	8006cfe <_scanf_float+0x39e>
 8006d74:	2500      	movs	r5, #0
 8006d76:	e634      	b.n	80069e2 <_scanf_float+0x82>
 8006d78:	0800a909 	.word	0x0800a909
 8006d7c:	0800ad67 	.word	0x0800ad67

08006d80 <_puts_r>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	460e      	mov	r6, r1
 8006d84:	4605      	mov	r5, r0
 8006d86:	b118      	cbz	r0, 8006d90 <_puts_r+0x10>
 8006d88:	6983      	ldr	r3, [r0, #24]
 8006d8a:	b90b      	cbnz	r3, 8006d90 <_puts_r+0x10>
 8006d8c:	f001 ff94 	bl	8008cb8 <__sinit>
 8006d90:	69ab      	ldr	r3, [r5, #24]
 8006d92:	68ac      	ldr	r4, [r5, #8]
 8006d94:	b913      	cbnz	r3, 8006d9c <_puts_r+0x1c>
 8006d96:	4628      	mov	r0, r5
 8006d98:	f001 ff8e 	bl	8008cb8 <__sinit>
 8006d9c:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <_puts_r+0xd0>)
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	d120      	bne.n	8006de4 <_puts_r+0x64>
 8006da2:	686c      	ldr	r4, [r5, #4]
 8006da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006da6:	07db      	lsls	r3, r3, #31
 8006da8:	d405      	bmi.n	8006db6 <_puts_r+0x36>
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	0598      	lsls	r0, r3, #22
 8006dae:	d402      	bmi.n	8006db6 <_puts_r+0x36>
 8006db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db2:	f7ff f808 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	0719      	lsls	r1, r3, #28
 8006dba:	d51d      	bpl.n	8006df8 <_puts_r+0x78>
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	b1db      	cbz	r3, 8006df8 <_puts_r+0x78>
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	68a3      	ldr	r3, [r4, #8]
 8006dc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	60a3      	str	r3, [r4, #8]
 8006dcc:	bb39      	cbnz	r1, 8006e1e <_puts_r+0x9e>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	da38      	bge.n	8006e44 <_puts_r+0xc4>
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	210a      	movs	r1, #10
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 ff1a 	bl	8007c10 <__swbuf_r>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d011      	beq.n	8006e04 <_puts_r+0x84>
 8006de0:	250a      	movs	r5, #10
 8006de2:	e011      	b.n	8006e08 <_puts_r+0x88>
 8006de4:	4b1b      	ldr	r3, [pc, #108]	; (8006e54 <_puts_r+0xd4>)
 8006de6:	429c      	cmp	r4, r3
 8006de8:	d101      	bne.n	8006dee <_puts_r+0x6e>
 8006dea:	68ac      	ldr	r4, [r5, #8]
 8006dec:	e7da      	b.n	8006da4 <_puts_r+0x24>
 8006dee:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <_puts_r+0xd8>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	bf08      	it	eq
 8006df4:	68ec      	ldreq	r4, [r5, #12]
 8006df6:	e7d5      	b.n	8006da4 <_puts_r+0x24>
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 ff5a 	bl	8007cb4 <__swsetup_r>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d0dd      	beq.n	8006dc0 <_puts_r+0x40>
 8006e04:	f04f 35ff 	mov.w	r5, #4294967295
 8006e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e0a:	07da      	lsls	r2, r3, #31
 8006e0c:	d405      	bmi.n	8006e1a <_puts_r+0x9a>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	059b      	lsls	r3, r3, #22
 8006e12:	d402      	bmi.n	8006e1a <_puts_r+0x9a>
 8006e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e16:	f7fe ffd7 	bl	8005dc8 <__retarget_lock_release_recursive>
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	da04      	bge.n	8006e2c <_puts_r+0xac>
 8006e22:	69a2      	ldr	r2, [r4, #24]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	dc06      	bgt.n	8006e36 <_puts_r+0xb6>
 8006e28:	290a      	cmp	r1, #10
 8006e2a:	d004      	beq.n	8006e36 <_puts_r+0xb6>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	6022      	str	r2, [r4, #0]
 8006e32:	7019      	strb	r1, [r3, #0]
 8006e34:	e7c5      	b.n	8006dc2 <_puts_r+0x42>
 8006e36:	4622      	mov	r2, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 fee9 	bl	8007c10 <__swbuf_r>
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d1bf      	bne.n	8006dc2 <_puts_r+0x42>
 8006e42:	e7df      	b.n	8006e04 <_puts_r+0x84>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	250a      	movs	r5, #10
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	6022      	str	r2, [r4, #0]
 8006e4c:	701d      	strb	r5, [r3, #0]
 8006e4e:	e7db      	b.n	8006e08 <_puts_r+0x88>
 8006e50:	0800ab14 	.word	0x0800ab14
 8006e54:	0800ab34 	.word	0x0800ab34
 8006e58:	0800aaf4 	.word	0x0800aaf4

08006e5c <puts>:
 8006e5c:	4b02      	ldr	r3, [pc, #8]	; (8006e68 <puts+0xc>)
 8006e5e:	4601      	mov	r1, r0
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f7ff bf8d 	b.w	8006d80 <_puts_r>
 8006e66:	bf00      	nop
 8006e68:	20000030 	.word	0x20000030

08006e6c <nanf>:
 8006e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e74 <nanf+0x8>
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	7fc00000 	.word	0x7fc00000

08006e78 <siprintf>:
 8006e78:	b40e      	push	{r1, r2, r3}
 8006e7a:	b500      	push	{lr}
 8006e7c:	b09c      	sub	sp, #112	; 0x70
 8006e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e80:	9002      	str	r0, [sp, #8]
 8006e82:	9006      	str	r0, [sp, #24]
 8006e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e88:	4809      	ldr	r0, [pc, #36]	; (8006eb0 <siprintf+0x38>)
 8006e8a:	9107      	str	r1, [sp, #28]
 8006e8c:	9104      	str	r1, [sp, #16]
 8006e8e:	4909      	ldr	r1, [pc, #36]	; (8006eb4 <siprintf+0x3c>)
 8006e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e94:	9105      	str	r1, [sp, #20]
 8006e96:	6800      	ldr	r0, [r0, #0]
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	a902      	add	r1, sp, #8
 8006e9c:	f003 fa06 	bl	800a2ac <_svfiprintf_r>
 8006ea0:	9b02      	ldr	r3, [sp, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	b01c      	add	sp, #112	; 0x70
 8006ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eac:	b003      	add	sp, #12
 8006eae:	4770      	bx	lr
 8006eb0:	20000030 	.word	0x20000030
 8006eb4:	ffff0208 	.word	0xffff0208

08006eb8 <sulp>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	ec45 4b10 	vmov	d0, r4, r5
 8006ec2:	4616      	mov	r6, r2
 8006ec4:	f002 ff22 	bl	8009d0c <__ulp>
 8006ec8:	ec51 0b10 	vmov	r0, r1, d0
 8006ecc:	b17e      	cbz	r6, 8006eee <sulp+0x36>
 8006ece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd09      	ble.n	8006eee <sulp+0x36>
 8006eda:	051b      	lsls	r3, r3, #20
 8006edc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ee0:	2400      	movs	r4, #0
 8006ee2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	462b      	mov	r3, r5
 8006eea:	f7f9 fb95 	bl	8000618 <__aeabi_dmul>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}

08006ef0 <_strtod_l>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	ed2d 8b02 	vpush	{d8}
 8006ef8:	b09d      	sub	sp, #116	; 0x74
 8006efa:	461f      	mov	r7, r3
 8006efc:	2300      	movs	r3, #0
 8006efe:	9318      	str	r3, [sp, #96]	; 0x60
 8006f00:	4ba2      	ldr	r3, [pc, #648]	; (800718c <_strtod_l+0x29c>)
 8006f02:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	9305      	str	r3, [sp, #20]
 8006f08:	4604      	mov	r4, r0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	4688      	mov	r8, r1
 8006f0e:	f7f9 f96f 	bl	80001f0 <strlen>
 8006f12:	f04f 0a00 	mov.w	sl, #0
 8006f16:	4605      	mov	r5, r0
 8006f18:	f04f 0b00 	mov.w	fp, #0
 8006f1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	2a2b      	cmp	r2, #43	; 0x2b
 8006f26:	d04e      	beq.n	8006fc6 <_strtod_l+0xd6>
 8006f28:	d83b      	bhi.n	8006fa2 <_strtod_l+0xb2>
 8006f2a:	2a0d      	cmp	r2, #13
 8006f2c:	d834      	bhi.n	8006f98 <_strtod_l+0xa8>
 8006f2e:	2a08      	cmp	r2, #8
 8006f30:	d834      	bhi.n	8006f9c <_strtod_l+0xac>
 8006f32:	2a00      	cmp	r2, #0
 8006f34:	d03e      	beq.n	8006fb4 <_strtod_l+0xc4>
 8006f36:	2300      	movs	r3, #0
 8006f38:	930a      	str	r3, [sp, #40]	; 0x28
 8006f3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006f3c:	7833      	ldrb	r3, [r6, #0]
 8006f3e:	2b30      	cmp	r3, #48	; 0x30
 8006f40:	f040 80b0 	bne.w	80070a4 <_strtod_l+0x1b4>
 8006f44:	7873      	ldrb	r3, [r6, #1]
 8006f46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f4a:	2b58      	cmp	r3, #88	; 0x58
 8006f4c:	d168      	bne.n	8007020 <_strtod_l+0x130>
 8006f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	ab18      	add	r3, sp, #96	; 0x60
 8006f54:	9702      	str	r7, [sp, #8]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	4a8d      	ldr	r2, [pc, #564]	; (8007190 <_strtod_l+0x2a0>)
 8006f5a:	ab19      	add	r3, sp, #100	; 0x64
 8006f5c:	a917      	add	r1, sp, #92	; 0x5c
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f001 ffae 	bl	8008ec0 <__gethex>
 8006f64:	f010 0707 	ands.w	r7, r0, #7
 8006f68:	4605      	mov	r5, r0
 8006f6a:	d005      	beq.n	8006f78 <_strtod_l+0x88>
 8006f6c:	2f06      	cmp	r7, #6
 8006f6e:	d12c      	bne.n	8006fca <_strtod_l+0xda>
 8006f70:	3601      	adds	r6, #1
 8006f72:	2300      	movs	r3, #0
 8006f74:	9617      	str	r6, [sp, #92]	; 0x5c
 8006f76:	930a      	str	r3, [sp, #40]	; 0x28
 8006f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 8590 	bne.w	8007aa0 <_strtod_l+0xbb0>
 8006f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f82:	b1eb      	cbz	r3, 8006fc0 <_strtod_l+0xd0>
 8006f84:	4652      	mov	r2, sl
 8006f86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f8a:	ec43 2b10 	vmov	d0, r2, r3
 8006f8e:	b01d      	add	sp, #116	; 0x74
 8006f90:	ecbd 8b02 	vpop	{d8}
 8006f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f98:	2a20      	cmp	r2, #32
 8006f9a:	d1cc      	bne.n	8006f36 <_strtod_l+0x46>
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006fa0:	e7be      	b.n	8006f20 <_strtod_l+0x30>
 8006fa2:	2a2d      	cmp	r2, #45	; 0x2d
 8006fa4:	d1c7      	bne.n	8006f36 <_strtod_l+0x46>
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1c2      	bne.n	8006f3a <_strtod_l+0x4a>
 8006fb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 856e 	bne.w	8007a9c <_strtod_l+0xbac>
 8006fc0:	4652      	mov	r2, sl
 8006fc2:	465b      	mov	r3, fp
 8006fc4:	e7e1      	b.n	8006f8a <_strtod_l+0x9a>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	e7ee      	b.n	8006fa8 <_strtod_l+0xb8>
 8006fca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006fcc:	b13a      	cbz	r2, 8006fde <_strtod_l+0xee>
 8006fce:	2135      	movs	r1, #53	; 0x35
 8006fd0:	a81a      	add	r0, sp, #104	; 0x68
 8006fd2:	f002 ffa6 	bl	8009f22 <__copybits>
 8006fd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f002 fb65 	bl	80096a8 <_Bfree>
 8006fde:	3f01      	subs	r7, #1
 8006fe0:	2f04      	cmp	r7, #4
 8006fe2:	d806      	bhi.n	8006ff2 <_strtod_l+0x102>
 8006fe4:	e8df f007 	tbb	[pc, r7]
 8006fe8:	1714030a 	.word	0x1714030a
 8006fec:	0a          	.byte	0x0a
 8006fed:	00          	.byte	0x00
 8006fee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006ff2:	0728      	lsls	r0, r5, #28
 8006ff4:	d5c0      	bpl.n	8006f78 <_strtod_l+0x88>
 8006ff6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006ffa:	e7bd      	b.n	8006f78 <_strtod_l+0x88>
 8006ffc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800700a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800700e:	e7f0      	b.n	8006ff2 <_strtod_l+0x102>
 8007010:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007194 <_strtod_l+0x2a4>
 8007014:	e7ed      	b.n	8006ff2 <_strtod_l+0x102>
 8007016:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800701a:	f04f 3aff 	mov.w	sl, #4294967295
 800701e:	e7e8      	b.n	8006ff2 <_strtod_l+0x102>
 8007020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	9217      	str	r2, [sp, #92]	; 0x5c
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b30      	cmp	r3, #48	; 0x30
 800702a:	d0f9      	beq.n	8007020 <_strtod_l+0x130>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0a3      	beq.n	8006f78 <_strtod_l+0x88>
 8007030:	2301      	movs	r3, #1
 8007032:	f04f 0900 	mov.w	r9, #0
 8007036:	9304      	str	r3, [sp, #16]
 8007038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800703a:	9308      	str	r3, [sp, #32]
 800703c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007040:	464f      	mov	r7, r9
 8007042:	220a      	movs	r2, #10
 8007044:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007046:	7806      	ldrb	r6, [r0, #0]
 8007048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800704c:	b2d9      	uxtb	r1, r3
 800704e:	2909      	cmp	r1, #9
 8007050:	d92a      	bls.n	80070a8 <_strtod_l+0x1b8>
 8007052:	9905      	ldr	r1, [sp, #20]
 8007054:	462a      	mov	r2, r5
 8007056:	f003 fa86 	bl	800a566 <strncmp>
 800705a:	b398      	cbz	r0, 80070c4 <_strtod_l+0x1d4>
 800705c:	2000      	movs	r0, #0
 800705e:	4632      	mov	r2, r6
 8007060:	463d      	mov	r5, r7
 8007062:	9005      	str	r0, [sp, #20]
 8007064:	4603      	mov	r3, r0
 8007066:	2a65      	cmp	r2, #101	; 0x65
 8007068:	d001      	beq.n	800706e <_strtod_l+0x17e>
 800706a:	2a45      	cmp	r2, #69	; 0x45
 800706c:	d118      	bne.n	80070a0 <_strtod_l+0x1b0>
 800706e:	b91d      	cbnz	r5, 8007078 <_strtod_l+0x188>
 8007070:	9a04      	ldr	r2, [sp, #16]
 8007072:	4302      	orrs	r2, r0
 8007074:	d09e      	beq.n	8006fb4 <_strtod_l+0xc4>
 8007076:	2500      	movs	r5, #0
 8007078:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800707c:	f108 0201 	add.w	r2, r8, #1
 8007080:	9217      	str	r2, [sp, #92]	; 0x5c
 8007082:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007086:	2a2b      	cmp	r2, #43	; 0x2b
 8007088:	d075      	beq.n	8007176 <_strtod_l+0x286>
 800708a:	2a2d      	cmp	r2, #45	; 0x2d
 800708c:	d07b      	beq.n	8007186 <_strtod_l+0x296>
 800708e:	f04f 0c00 	mov.w	ip, #0
 8007092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007096:	2909      	cmp	r1, #9
 8007098:	f240 8082 	bls.w	80071a0 <_strtod_l+0x2b0>
 800709c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80070a0:	2600      	movs	r6, #0
 80070a2:	e09d      	b.n	80071e0 <_strtod_l+0x2f0>
 80070a4:	2300      	movs	r3, #0
 80070a6:	e7c4      	b.n	8007032 <_strtod_l+0x142>
 80070a8:	2f08      	cmp	r7, #8
 80070aa:	bfd8      	it	le
 80070ac:	9907      	ldrle	r1, [sp, #28]
 80070ae:	f100 0001 	add.w	r0, r0, #1
 80070b2:	bfda      	itte	le
 80070b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80070b8:	9307      	strle	r3, [sp, #28]
 80070ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80070be:	3701      	adds	r7, #1
 80070c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80070c2:	e7bf      	b.n	8007044 <_strtod_l+0x154>
 80070c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070c6:	195a      	adds	r2, r3, r5
 80070c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80070ca:	5d5a      	ldrb	r2, [r3, r5]
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	d037      	beq.n	8007140 <_strtod_l+0x250>
 80070d0:	9005      	str	r0, [sp, #20]
 80070d2:	463d      	mov	r5, r7
 80070d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80070d8:	2b09      	cmp	r3, #9
 80070da:	d912      	bls.n	8007102 <_strtod_l+0x212>
 80070dc:	2301      	movs	r3, #1
 80070de:	e7c2      	b.n	8007066 <_strtod_l+0x176>
 80070e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80070e6:	785a      	ldrb	r2, [r3, #1]
 80070e8:	3001      	adds	r0, #1
 80070ea:	2a30      	cmp	r2, #48	; 0x30
 80070ec:	d0f8      	beq.n	80070e0 <_strtod_l+0x1f0>
 80070ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	f200 84d9 	bhi.w	8007aaa <_strtod_l+0xbba>
 80070f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070fa:	9005      	str	r0, [sp, #20]
 80070fc:	2000      	movs	r0, #0
 80070fe:	9308      	str	r3, [sp, #32]
 8007100:	4605      	mov	r5, r0
 8007102:	3a30      	subs	r2, #48	; 0x30
 8007104:	f100 0301 	add.w	r3, r0, #1
 8007108:	d014      	beq.n	8007134 <_strtod_l+0x244>
 800710a:	9905      	ldr	r1, [sp, #20]
 800710c:	4419      	add	r1, r3
 800710e:	9105      	str	r1, [sp, #20]
 8007110:	462b      	mov	r3, r5
 8007112:	eb00 0e05 	add.w	lr, r0, r5
 8007116:	210a      	movs	r1, #10
 8007118:	4573      	cmp	r3, lr
 800711a:	d113      	bne.n	8007144 <_strtod_l+0x254>
 800711c:	182b      	adds	r3, r5, r0
 800711e:	2b08      	cmp	r3, #8
 8007120:	f105 0501 	add.w	r5, r5, #1
 8007124:	4405      	add	r5, r0
 8007126:	dc1c      	bgt.n	8007162 <_strtod_l+0x272>
 8007128:	9907      	ldr	r1, [sp, #28]
 800712a:	230a      	movs	r3, #10
 800712c:	fb03 2301 	mla	r3, r3, r1, r2
 8007130:	9307      	str	r3, [sp, #28]
 8007132:	2300      	movs	r3, #0
 8007134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007136:	1c51      	adds	r1, r2, #1
 8007138:	9117      	str	r1, [sp, #92]	; 0x5c
 800713a:	7852      	ldrb	r2, [r2, #1]
 800713c:	4618      	mov	r0, r3
 800713e:	e7c9      	b.n	80070d4 <_strtod_l+0x1e4>
 8007140:	4638      	mov	r0, r7
 8007142:	e7d2      	b.n	80070ea <_strtod_l+0x1fa>
 8007144:	2b08      	cmp	r3, #8
 8007146:	dc04      	bgt.n	8007152 <_strtod_l+0x262>
 8007148:	9e07      	ldr	r6, [sp, #28]
 800714a:	434e      	muls	r6, r1
 800714c:	9607      	str	r6, [sp, #28]
 800714e:	3301      	adds	r3, #1
 8007150:	e7e2      	b.n	8007118 <_strtod_l+0x228>
 8007152:	f103 0c01 	add.w	ip, r3, #1
 8007156:	f1bc 0f10 	cmp.w	ip, #16
 800715a:	bfd8      	it	le
 800715c:	fb01 f909 	mulle.w	r9, r1, r9
 8007160:	e7f5      	b.n	800714e <_strtod_l+0x25e>
 8007162:	2d10      	cmp	r5, #16
 8007164:	bfdc      	itt	le
 8007166:	230a      	movle	r3, #10
 8007168:	fb03 2909 	mlale	r9, r3, r9, r2
 800716c:	e7e1      	b.n	8007132 <_strtod_l+0x242>
 800716e:	2300      	movs	r3, #0
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	2301      	movs	r3, #1
 8007174:	e77c      	b.n	8007070 <_strtod_l+0x180>
 8007176:	f04f 0c00 	mov.w	ip, #0
 800717a:	f108 0202 	add.w	r2, r8, #2
 800717e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007180:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007184:	e785      	b.n	8007092 <_strtod_l+0x1a2>
 8007186:	f04f 0c01 	mov.w	ip, #1
 800718a:	e7f6      	b.n	800717a <_strtod_l+0x28a>
 800718c:	0800abbc 	.word	0x0800abbc
 8007190:	0800a910 	.word	0x0800a910
 8007194:	7ff00000 	.word	0x7ff00000
 8007198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800719a:	1c51      	adds	r1, r2, #1
 800719c:	9117      	str	r1, [sp, #92]	; 0x5c
 800719e:	7852      	ldrb	r2, [r2, #1]
 80071a0:	2a30      	cmp	r2, #48	; 0x30
 80071a2:	d0f9      	beq.n	8007198 <_strtod_l+0x2a8>
 80071a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80071a8:	2908      	cmp	r1, #8
 80071aa:	f63f af79 	bhi.w	80070a0 <_strtod_l+0x1b0>
 80071ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80071b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071b4:	9206      	str	r2, [sp, #24]
 80071b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071b8:	1c51      	adds	r1, r2, #1
 80071ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80071bc:	7852      	ldrb	r2, [r2, #1]
 80071be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80071c2:	2e09      	cmp	r6, #9
 80071c4:	d937      	bls.n	8007236 <_strtod_l+0x346>
 80071c6:	9e06      	ldr	r6, [sp, #24]
 80071c8:	1b89      	subs	r1, r1, r6
 80071ca:	2908      	cmp	r1, #8
 80071cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80071d0:	dc02      	bgt.n	80071d8 <_strtod_l+0x2e8>
 80071d2:	4576      	cmp	r6, lr
 80071d4:	bfa8      	it	ge
 80071d6:	4676      	movge	r6, lr
 80071d8:	f1bc 0f00 	cmp.w	ip, #0
 80071dc:	d000      	beq.n	80071e0 <_strtod_l+0x2f0>
 80071de:	4276      	negs	r6, r6
 80071e0:	2d00      	cmp	r5, #0
 80071e2:	d14d      	bne.n	8007280 <_strtod_l+0x390>
 80071e4:	9904      	ldr	r1, [sp, #16]
 80071e6:	4301      	orrs	r1, r0
 80071e8:	f47f aec6 	bne.w	8006f78 <_strtod_l+0x88>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f47f aee1 	bne.w	8006fb4 <_strtod_l+0xc4>
 80071f2:	2a69      	cmp	r2, #105	; 0x69
 80071f4:	d027      	beq.n	8007246 <_strtod_l+0x356>
 80071f6:	dc24      	bgt.n	8007242 <_strtod_l+0x352>
 80071f8:	2a49      	cmp	r2, #73	; 0x49
 80071fa:	d024      	beq.n	8007246 <_strtod_l+0x356>
 80071fc:	2a4e      	cmp	r2, #78	; 0x4e
 80071fe:	f47f aed9 	bne.w	8006fb4 <_strtod_l+0xc4>
 8007202:	499f      	ldr	r1, [pc, #636]	; (8007480 <_strtod_l+0x590>)
 8007204:	a817      	add	r0, sp, #92	; 0x5c
 8007206:	f002 f8b3 	bl	8009370 <__match>
 800720a:	2800      	cmp	r0, #0
 800720c:	f43f aed2 	beq.w	8006fb4 <_strtod_l+0xc4>
 8007210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b28      	cmp	r3, #40	; 0x28
 8007216:	d12d      	bne.n	8007274 <_strtod_l+0x384>
 8007218:	499a      	ldr	r1, [pc, #616]	; (8007484 <_strtod_l+0x594>)
 800721a:	aa1a      	add	r2, sp, #104	; 0x68
 800721c:	a817      	add	r0, sp, #92	; 0x5c
 800721e:	f002 f8bb 	bl	8009398 <__hexnan>
 8007222:	2805      	cmp	r0, #5
 8007224:	d126      	bne.n	8007274 <_strtod_l+0x384>
 8007226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007228:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800722c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007230:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007234:	e6a0      	b.n	8006f78 <_strtod_l+0x88>
 8007236:	210a      	movs	r1, #10
 8007238:	fb01 2e0e 	mla	lr, r1, lr, r2
 800723c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007240:	e7b9      	b.n	80071b6 <_strtod_l+0x2c6>
 8007242:	2a6e      	cmp	r2, #110	; 0x6e
 8007244:	e7db      	b.n	80071fe <_strtod_l+0x30e>
 8007246:	4990      	ldr	r1, [pc, #576]	; (8007488 <_strtod_l+0x598>)
 8007248:	a817      	add	r0, sp, #92	; 0x5c
 800724a:	f002 f891 	bl	8009370 <__match>
 800724e:	2800      	cmp	r0, #0
 8007250:	f43f aeb0 	beq.w	8006fb4 <_strtod_l+0xc4>
 8007254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007256:	498d      	ldr	r1, [pc, #564]	; (800748c <_strtod_l+0x59c>)
 8007258:	3b01      	subs	r3, #1
 800725a:	a817      	add	r0, sp, #92	; 0x5c
 800725c:	9317      	str	r3, [sp, #92]	; 0x5c
 800725e:	f002 f887 	bl	8009370 <__match>
 8007262:	b910      	cbnz	r0, 800726a <_strtod_l+0x37a>
 8007264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007266:	3301      	adds	r3, #1
 8007268:	9317      	str	r3, [sp, #92]	; 0x5c
 800726a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800749c <_strtod_l+0x5ac>
 800726e:	f04f 0a00 	mov.w	sl, #0
 8007272:	e681      	b.n	8006f78 <_strtod_l+0x88>
 8007274:	4886      	ldr	r0, [pc, #536]	; (8007490 <_strtod_l+0x5a0>)
 8007276:	f003 f91b 	bl	800a4b0 <nan>
 800727a:	ec5b ab10 	vmov	sl, fp, d0
 800727e:	e67b      	b.n	8006f78 <_strtod_l+0x88>
 8007280:	9b05      	ldr	r3, [sp, #20]
 8007282:	9807      	ldr	r0, [sp, #28]
 8007284:	1af3      	subs	r3, r6, r3
 8007286:	2f00      	cmp	r7, #0
 8007288:	bf08      	it	eq
 800728a:	462f      	moveq	r7, r5
 800728c:	2d10      	cmp	r5, #16
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	46a8      	mov	r8, r5
 8007292:	bfa8      	it	ge
 8007294:	f04f 0810 	movge.w	r8, #16
 8007298:	f7f9 f944 	bl	8000524 <__aeabi_ui2d>
 800729c:	2d09      	cmp	r5, #9
 800729e:	4682      	mov	sl, r0
 80072a0:	468b      	mov	fp, r1
 80072a2:	dd13      	ble.n	80072cc <_strtod_l+0x3dc>
 80072a4:	4b7b      	ldr	r3, [pc, #492]	; (8007494 <_strtod_l+0x5a4>)
 80072a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80072aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80072ae:	f7f9 f9b3 	bl	8000618 <__aeabi_dmul>
 80072b2:	4682      	mov	sl, r0
 80072b4:	4648      	mov	r0, r9
 80072b6:	468b      	mov	fp, r1
 80072b8:	f7f9 f934 	bl	8000524 <__aeabi_ui2d>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f8 fff2 	bl	80002ac <__adddf3>
 80072c8:	4682      	mov	sl, r0
 80072ca:	468b      	mov	fp, r1
 80072cc:	2d0f      	cmp	r5, #15
 80072ce:	dc38      	bgt.n	8007342 <_strtod_l+0x452>
 80072d0:	9b06      	ldr	r3, [sp, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f43f ae50 	beq.w	8006f78 <_strtod_l+0x88>
 80072d8:	dd24      	ble.n	8007324 <_strtod_l+0x434>
 80072da:	2b16      	cmp	r3, #22
 80072dc:	dc0b      	bgt.n	80072f6 <_strtod_l+0x406>
 80072de:	496d      	ldr	r1, [pc, #436]	; (8007494 <_strtod_l+0x5a4>)
 80072e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072e8:	4652      	mov	r2, sl
 80072ea:	465b      	mov	r3, fp
 80072ec:	f7f9 f994 	bl	8000618 <__aeabi_dmul>
 80072f0:	4682      	mov	sl, r0
 80072f2:	468b      	mov	fp, r1
 80072f4:	e640      	b.n	8006f78 <_strtod_l+0x88>
 80072f6:	9a06      	ldr	r2, [sp, #24]
 80072f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80072fc:	4293      	cmp	r3, r2
 80072fe:	db20      	blt.n	8007342 <_strtod_l+0x452>
 8007300:	4c64      	ldr	r4, [pc, #400]	; (8007494 <_strtod_l+0x5a4>)
 8007302:	f1c5 050f 	rsb	r5, r5, #15
 8007306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800730a:	4652      	mov	r2, sl
 800730c:	465b      	mov	r3, fp
 800730e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007312:	f7f9 f981 	bl	8000618 <__aeabi_dmul>
 8007316:	9b06      	ldr	r3, [sp, #24]
 8007318:	1b5d      	subs	r5, r3, r5
 800731a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800731e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007322:	e7e3      	b.n	80072ec <_strtod_l+0x3fc>
 8007324:	9b06      	ldr	r3, [sp, #24]
 8007326:	3316      	adds	r3, #22
 8007328:	db0b      	blt.n	8007342 <_strtod_l+0x452>
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	1b9e      	subs	r6, r3, r6
 800732e:	4b59      	ldr	r3, [pc, #356]	; (8007494 <_strtod_l+0x5a4>)
 8007330:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007334:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007338:	4650      	mov	r0, sl
 800733a:	4659      	mov	r1, fp
 800733c:	f7f9 fa96 	bl	800086c <__aeabi_ddiv>
 8007340:	e7d6      	b.n	80072f0 <_strtod_l+0x400>
 8007342:	9b06      	ldr	r3, [sp, #24]
 8007344:	eba5 0808 	sub.w	r8, r5, r8
 8007348:	4498      	add	r8, r3
 800734a:	f1b8 0f00 	cmp.w	r8, #0
 800734e:	dd74      	ble.n	800743a <_strtod_l+0x54a>
 8007350:	f018 030f 	ands.w	r3, r8, #15
 8007354:	d00a      	beq.n	800736c <_strtod_l+0x47c>
 8007356:	494f      	ldr	r1, [pc, #316]	; (8007494 <_strtod_l+0x5a4>)
 8007358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800735c:	4652      	mov	r2, sl
 800735e:	465b      	mov	r3, fp
 8007360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007364:	f7f9 f958 	bl	8000618 <__aeabi_dmul>
 8007368:	4682      	mov	sl, r0
 800736a:	468b      	mov	fp, r1
 800736c:	f038 080f 	bics.w	r8, r8, #15
 8007370:	d04f      	beq.n	8007412 <_strtod_l+0x522>
 8007372:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007376:	dd22      	ble.n	80073be <_strtod_l+0x4ce>
 8007378:	2500      	movs	r5, #0
 800737a:	462e      	mov	r6, r5
 800737c:	9507      	str	r5, [sp, #28]
 800737e:	9505      	str	r5, [sp, #20]
 8007380:	2322      	movs	r3, #34	; 0x22
 8007382:	f8df b118 	ldr.w	fp, [pc, #280]	; 800749c <_strtod_l+0x5ac>
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	f04f 0a00 	mov.w	sl, #0
 800738c:	9b07      	ldr	r3, [sp, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f43f adf2 	beq.w	8006f78 <_strtod_l+0x88>
 8007394:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007396:	4620      	mov	r0, r4
 8007398:	f002 f986 	bl	80096a8 <_Bfree>
 800739c:	9905      	ldr	r1, [sp, #20]
 800739e:	4620      	mov	r0, r4
 80073a0:	f002 f982 	bl	80096a8 <_Bfree>
 80073a4:	4631      	mov	r1, r6
 80073a6:	4620      	mov	r0, r4
 80073a8:	f002 f97e 	bl	80096a8 <_Bfree>
 80073ac:	9907      	ldr	r1, [sp, #28]
 80073ae:	4620      	mov	r0, r4
 80073b0:	f002 f97a 	bl	80096a8 <_Bfree>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4620      	mov	r0, r4
 80073b8:	f002 f976 	bl	80096a8 <_Bfree>
 80073bc:	e5dc      	b.n	8006f78 <_strtod_l+0x88>
 80073be:	4b36      	ldr	r3, [pc, #216]	; (8007498 <_strtod_l+0x5a8>)
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	2300      	movs	r3, #0
 80073c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80073c8:	4650      	mov	r0, sl
 80073ca:	4659      	mov	r1, fp
 80073cc:	4699      	mov	r9, r3
 80073ce:	f1b8 0f01 	cmp.w	r8, #1
 80073d2:	dc21      	bgt.n	8007418 <_strtod_l+0x528>
 80073d4:	b10b      	cbz	r3, 80073da <_strtod_l+0x4ea>
 80073d6:	4682      	mov	sl, r0
 80073d8:	468b      	mov	fp, r1
 80073da:	4b2f      	ldr	r3, [pc, #188]	; (8007498 <_strtod_l+0x5a8>)
 80073dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80073e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80073e4:	4652      	mov	r2, sl
 80073e6:	465b      	mov	r3, fp
 80073e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80073ec:	f7f9 f914 	bl	8000618 <__aeabi_dmul>
 80073f0:	4b2a      	ldr	r3, [pc, #168]	; (800749c <_strtod_l+0x5ac>)
 80073f2:	460a      	mov	r2, r1
 80073f4:	400b      	ands	r3, r1
 80073f6:	492a      	ldr	r1, [pc, #168]	; (80074a0 <_strtod_l+0x5b0>)
 80073f8:	428b      	cmp	r3, r1
 80073fa:	4682      	mov	sl, r0
 80073fc:	d8bc      	bhi.n	8007378 <_strtod_l+0x488>
 80073fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007402:	428b      	cmp	r3, r1
 8007404:	bf86      	itte	hi
 8007406:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80074a4 <_strtod_l+0x5b4>
 800740a:	f04f 3aff 	movhi.w	sl, #4294967295
 800740e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007412:	2300      	movs	r3, #0
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	e084      	b.n	8007522 <_strtod_l+0x632>
 8007418:	f018 0f01 	tst.w	r8, #1
 800741c:	d005      	beq.n	800742a <_strtod_l+0x53a>
 800741e:	9b04      	ldr	r3, [sp, #16]
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	f7f9 f8f8 	bl	8000618 <__aeabi_dmul>
 8007428:	2301      	movs	r3, #1
 800742a:	9a04      	ldr	r2, [sp, #16]
 800742c:	3208      	adds	r2, #8
 800742e:	f109 0901 	add.w	r9, r9, #1
 8007432:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007436:	9204      	str	r2, [sp, #16]
 8007438:	e7c9      	b.n	80073ce <_strtod_l+0x4de>
 800743a:	d0ea      	beq.n	8007412 <_strtod_l+0x522>
 800743c:	f1c8 0800 	rsb	r8, r8, #0
 8007440:	f018 020f 	ands.w	r2, r8, #15
 8007444:	d00a      	beq.n	800745c <_strtod_l+0x56c>
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <_strtod_l+0x5a4>)
 8007448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800744c:	4650      	mov	r0, sl
 800744e:	4659      	mov	r1, fp
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 fa0a 	bl	800086c <__aeabi_ddiv>
 8007458:	4682      	mov	sl, r0
 800745a:	468b      	mov	fp, r1
 800745c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007460:	d0d7      	beq.n	8007412 <_strtod_l+0x522>
 8007462:	f1b8 0f1f 	cmp.w	r8, #31
 8007466:	dd1f      	ble.n	80074a8 <_strtod_l+0x5b8>
 8007468:	2500      	movs	r5, #0
 800746a:	462e      	mov	r6, r5
 800746c:	9507      	str	r5, [sp, #28]
 800746e:	9505      	str	r5, [sp, #20]
 8007470:	2322      	movs	r3, #34	; 0x22
 8007472:	f04f 0a00 	mov.w	sl, #0
 8007476:	f04f 0b00 	mov.w	fp, #0
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	e786      	b.n	800738c <_strtod_l+0x49c>
 800747e:	bf00      	nop
 8007480:	0800a8e2 	.word	0x0800a8e2
 8007484:	0800a924 	.word	0x0800a924
 8007488:	0800a8da 	.word	0x0800a8da
 800748c:	0800aa64 	.word	0x0800aa64
 8007490:	0800ad67 	.word	0x0800ad67
 8007494:	0800ac58 	.word	0x0800ac58
 8007498:	0800ac30 	.word	0x0800ac30
 800749c:	7ff00000 	.word	0x7ff00000
 80074a0:	7ca00000 	.word	0x7ca00000
 80074a4:	7fefffff 	.word	0x7fefffff
 80074a8:	f018 0310 	ands.w	r3, r8, #16
 80074ac:	bf18      	it	ne
 80074ae:	236a      	movne	r3, #106	; 0x6a
 80074b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007860 <_strtod_l+0x970>
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	4650      	mov	r0, sl
 80074b8:	4659      	mov	r1, fp
 80074ba:	2300      	movs	r3, #0
 80074bc:	f018 0f01 	tst.w	r8, #1
 80074c0:	d004      	beq.n	80074cc <_strtod_l+0x5dc>
 80074c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80074c6:	f7f9 f8a7 	bl	8000618 <__aeabi_dmul>
 80074ca:	2301      	movs	r3, #1
 80074cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80074d0:	f109 0908 	add.w	r9, r9, #8
 80074d4:	d1f2      	bne.n	80074bc <_strtod_l+0x5cc>
 80074d6:	b10b      	cbz	r3, 80074dc <_strtod_l+0x5ec>
 80074d8:	4682      	mov	sl, r0
 80074da:	468b      	mov	fp, r1
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	b1c3      	cbz	r3, 8007512 <_strtod_l+0x622>
 80074e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80074e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	4659      	mov	r1, fp
 80074ec:	dd11      	ble.n	8007512 <_strtod_l+0x622>
 80074ee:	2b1f      	cmp	r3, #31
 80074f0:	f340 8124 	ble.w	800773c <_strtod_l+0x84c>
 80074f4:	2b34      	cmp	r3, #52	; 0x34
 80074f6:	bfde      	ittt	le
 80074f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80074fc:	f04f 33ff 	movle.w	r3, #4294967295
 8007500:	fa03 f202 	lslle.w	r2, r3, r2
 8007504:	f04f 0a00 	mov.w	sl, #0
 8007508:	bfcc      	ite	gt
 800750a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800750e:	ea02 0b01 	andle.w	fp, r2, r1
 8007512:	2200      	movs	r2, #0
 8007514:	2300      	movs	r3, #0
 8007516:	4650      	mov	r0, sl
 8007518:	4659      	mov	r1, fp
 800751a:	f7f9 fae5 	bl	8000ae8 <__aeabi_dcmpeq>
 800751e:	2800      	cmp	r0, #0
 8007520:	d1a2      	bne.n	8007468 <_strtod_l+0x578>
 8007522:	9b07      	ldr	r3, [sp, #28]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	9908      	ldr	r1, [sp, #32]
 8007528:	462b      	mov	r3, r5
 800752a:	463a      	mov	r2, r7
 800752c:	4620      	mov	r0, r4
 800752e:	f002 f923 	bl	8009778 <__s2b>
 8007532:	9007      	str	r0, [sp, #28]
 8007534:	2800      	cmp	r0, #0
 8007536:	f43f af1f 	beq.w	8007378 <_strtod_l+0x488>
 800753a:	9b05      	ldr	r3, [sp, #20]
 800753c:	1b9e      	subs	r6, r3, r6
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	bfb4      	ite	lt
 8007544:	4633      	movlt	r3, r6
 8007546:	2300      	movge	r3, #0
 8007548:	930c      	str	r3, [sp, #48]	; 0x30
 800754a:	9b06      	ldr	r3, [sp, #24]
 800754c:	2500      	movs	r5, #0
 800754e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007552:	9312      	str	r3, [sp, #72]	; 0x48
 8007554:	462e      	mov	r6, r5
 8007556:	9b07      	ldr	r3, [sp, #28]
 8007558:	4620      	mov	r0, r4
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	f002 f864 	bl	8009628 <_Balloc>
 8007560:	9005      	str	r0, [sp, #20]
 8007562:	2800      	cmp	r0, #0
 8007564:	f43f af0c 	beq.w	8007380 <_strtod_l+0x490>
 8007568:	9b07      	ldr	r3, [sp, #28]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	3202      	adds	r2, #2
 800756e:	f103 010c 	add.w	r1, r3, #12
 8007572:	0092      	lsls	r2, r2, #2
 8007574:	300c      	adds	r0, #12
 8007576:	f002 f82f 	bl	80095d8 <memcpy>
 800757a:	ec4b ab10 	vmov	d0, sl, fp
 800757e:	aa1a      	add	r2, sp, #104	; 0x68
 8007580:	a919      	add	r1, sp, #100	; 0x64
 8007582:	4620      	mov	r0, r4
 8007584:	f002 fc3e 	bl	8009e04 <__d2b>
 8007588:	ec4b ab18 	vmov	d8, sl, fp
 800758c:	9018      	str	r0, [sp, #96]	; 0x60
 800758e:	2800      	cmp	r0, #0
 8007590:	f43f aef6 	beq.w	8007380 <_strtod_l+0x490>
 8007594:	2101      	movs	r1, #1
 8007596:	4620      	mov	r0, r4
 8007598:	f002 f988 	bl	80098ac <__i2b>
 800759c:	4606      	mov	r6, r0
 800759e:	2800      	cmp	r0, #0
 80075a0:	f43f aeee 	beq.w	8007380 <_strtod_l+0x490>
 80075a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075a6:	9904      	ldr	r1, [sp, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfab      	itete	ge
 80075ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80075ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80075b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80075b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80075b6:	bfac      	ite	ge
 80075b8:	eb03 0902 	addge.w	r9, r3, r2
 80075bc:	1ad7      	sublt	r7, r2, r3
 80075be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80075c0:	eba3 0801 	sub.w	r8, r3, r1
 80075c4:	4490      	add	r8, r2
 80075c6:	4ba1      	ldr	r3, [pc, #644]	; (800784c <_strtod_l+0x95c>)
 80075c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80075cc:	4598      	cmp	r8, r3
 80075ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075d2:	f280 80c7 	bge.w	8007764 <_strtod_l+0x874>
 80075d6:	eba3 0308 	sub.w	r3, r3, r8
 80075da:	2b1f      	cmp	r3, #31
 80075dc:	eba2 0203 	sub.w	r2, r2, r3
 80075e0:	f04f 0101 	mov.w	r1, #1
 80075e4:	f300 80b1 	bgt.w	800774a <_strtod_l+0x85a>
 80075e8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ec:	930d      	str	r3, [sp, #52]	; 0x34
 80075ee:	2300      	movs	r3, #0
 80075f0:	9308      	str	r3, [sp, #32]
 80075f2:	eb09 0802 	add.w	r8, r9, r2
 80075f6:	9b04      	ldr	r3, [sp, #16]
 80075f8:	45c1      	cmp	r9, r8
 80075fa:	4417      	add	r7, r2
 80075fc:	441f      	add	r7, r3
 80075fe:	464b      	mov	r3, r9
 8007600:	bfa8      	it	ge
 8007602:	4643      	movge	r3, r8
 8007604:	42bb      	cmp	r3, r7
 8007606:	bfa8      	it	ge
 8007608:	463b      	movge	r3, r7
 800760a:	2b00      	cmp	r3, #0
 800760c:	bfc2      	ittt	gt
 800760e:	eba8 0803 	subgt.w	r8, r8, r3
 8007612:	1aff      	subgt	r7, r7, r3
 8007614:	eba9 0903 	subgt.w	r9, r9, r3
 8007618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800761a:	2b00      	cmp	r3, #0
 800761c:	dd17      	ble.n	800764e <_strtod_l+0x75e>
 800761e:	4631      	mov	r1, r6
 8007620:	461a      	mov	r2, r3
 8007622:	4620      	mov	r0, r4
 8007624:	f002 fa02 	bl	8009a2c <__pow5mult>
 8007628:	4606      	mov	r6, r0
 800762a:	2800      	cmp	r0, #0
 800762c:	f43f aea8 	beq.w	8007380 <_strtod_l+0x490>
 8007630:	4601      	mov	r1, r0
 8007632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007634:	4620      	mov	r0, r4
 8007636:	f002 f94f 	bl	80098d8 <__multiply>
 800763a:	900b      	str	r0, [sp, #44]	; 0x2c
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f ae9f 	beq.w	8007380 <_strtod_l+0x490>
 8007642:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007644:	4620      	mov	r0, r4
 8007646:	f002 f82f 	bl	80096a8 <_Bfree>
 800764a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764c:	9318      	str	r3, [sp, #96]	; 0x60
 800764e:	f1b8 0f00 	cmp.w	r8, #0
 8007652:	f300 808c 	bgt.w	800776e <_strtod_l+0x87e>
 8007656:	9b06      	ldr	r3, [sp, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	dd08      	ble.n	800766e <_strtod_l+0x77e>
 800765c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800765e:	9905      	ldr	r1, [sp, #20]
 8007660:	4620      	mov	r0, r4
 8007662:	f002 f9e3 	bl	8009a2c <__pow5mult>
 8007666:	9005      	str	r0, [sp, #20]
 8007668:	2800      	cmp	r0, #0
 800766a:	f43f ae89 	beq.w	8007380 <_strtod_l+0x490>
 800766e:	2f00      	cmp	r7, #0
 8007670:	dd08      	ble.n	8007684 <_strtod_l+0x794>
 8007672:	9905      	ldr	r1, [sp, #20]
 8007674:	463a      	mov	r2, r7
 8007676:	4620      	mov	r0, r4
 8007678:	f002 fa32 	bl	8009ae0 <__lshift>
 800767c:	9005      	str	r0, [sp, #20]
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f ae7e 	beq.w	8007380 <_strtod_l+0x490>
 8007684:	f1b9 0f00 	cmp.w	r9, #0
 8007688:	dd08      	ble.n	800769c <_strtod_l+0x7ac>
 800768a:	4631      	mov	r1, r6
 800768c:	464a      	mov	r2, r9
 800768e:	4620      	mov	r0, r4
 8007690:	f002 fa26 	bl	8009ae0 <__lshift>
 8007694:	4606      	mov	r6, r0
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f ae72 	beq.w	8007380 <_strtod_l+0x490>
 800769c:	9a05      	ldr	r2, [sp, #20]
 800769e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076a0:	4620      	mov	r0, r4
 80076a2:	f002 faa9 	bl	8009bf8 <__mdiff>
 80076a6:	4605      	mov	r5, r0
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f43f ae69 	beq.w	8007380 <_strtod_l+0x490>
 80076ae:	68c3      	ldr	r3, [r0, #12]
 80076b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b2:	2300      	movs	r3, #0
 80076b4:	60c3      	str	r3, [r0, #12]
 80076b6:	4631      	mov	r1, r6
 80076b8:	f002 fa82 	bl	8009bc0 <__mcmp>
 80076bc:	2800      	cmp	r0, #0
 80076be:	da60      	bge.n	8007782 <_strtod_l+0x892>
 80076c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c2:	ea53 030a 	orrs.w	r3, r3, sl
 80076c6:	f040 8082 	bne.w	80077ce <_strtod_l+0x8de>
 80076ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d17d      	bne.n	80077ce <_strtod_l+0x8de>
 80076d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076d6:	0d1b      	lsrs	r3, r3, #20
 80076d8:	051b      	lsls	r3, r3, #20
 80076da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80076de:	d976      	bls.n	80077ce <_strtod_l+0x8de>
 80076e0:	696b      	ldr	r3, [r5, #20]
 80076e2:	b913      	cbnz	r3, 80076ea <_strtod_l+0x7fa>
 80076e4:	692b      	ldr	r3, [r5, #16]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	dd71      	ble.n	80077ce <_strtod_l+0x8de>
 80076ea:	4629      	mov	r1, r5
 80076ec:	2201      	movs	r2, #1
 80076ee:	4620      	mov	r0, r4
 80076f0:	f002 f9f6 	bl	8009ae0 <__lshift>
 80076f4:	4631      	mov	r1, r6
 80076f6:	4605      	mov	r5, r0
 80076f8:	f002 fa62 	bl	8009bc0 <__mcmp>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	dd66      	ble.n	80077ce <_strtod_l+0x8de>
 8007700:	9904      	ldr	r1, [sp, #16]
 8007702:	4a53      	ldr	r2, [pc, #332]	; (8007850 <_strtod_l+0x960>)
 8007704:	465b      	mov	r3, fp
 8007706:	2900      	cmp	r1, #0
 8007708:	f000 8081 	beq.w	800780e <_strtod_l+0x91e>
 800770c:	ea02 010b 	and.w	r1, r2, fp
 8007710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007714:	dc7b      	bgt.n	800780e <_strtod_l+0x91e>
 8007716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800771a:	f77f aea9 	ble.w	8007470 <_strtod_l+0x580>
 800771e:	4b4d      	ldr	r3, [pc, #308]	; (8007854 <_strtod_l+0x964>)
 8007720:	4650      	mov	r0, sl
 8007722:	4659      	mov	r1, fp
 8007724:	2200      	movs	r2, #0
 8007726:	f7f8 ff77 	bl	8000618 <__aeabi_dmul>
 800772a:	460b      	mov	r3, r1
 800772c:	4303      	orrs	r3, r0
 800772e:	bf08      	it	eq
 8007730:	2322      	moveq	r3, #34	; 0x22
 8007732:	4682      	mov	sl, r0
 8007734:	468b      	mov	fp, r1
 8007736:	bf08      	it	eq
 8007738:	6023      	streq	r3, [r4, #0]
 800773a:	e62b      	b.n	8007394 <_strtod_l+0x4a4>
 800773c:	f04f 32ff 	mov.w	r2, #4294967295
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	ea03 0a0a 	and.w	sl, r3, sl
 8007748:	e6e3      	b.n	8007512 <_strtod_l+0x622>
 800774a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800774e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007752:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007756:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800775a:	fa01 f308 	lsl.w	r3, r1, r8
 800775e:	9308      	str	r3, [sp, #32]
 8007760:	910d      	str	r1, [sp, #52]	; 0x34
 8007762:	e746      	b.n	80075f2 <_strtod_l+0x702>
 8007764:	2300      	movs	r3, #0
 8007766:	9308      	str	r3, [sp, #32]
 8007768:	2301      	movs	r3, #1
 800776a:	930d      	str	r3, [sp, #52]	; 0x34
 800776c:	e741      	b.n	80075f2 <_strtod_l+0x702>
 800776e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007770:	4642      	mov	r2, r8
 8007772:	4620      	mov	r0, r4
 8007774:	f002 f9b4 	bl	8009ae0 <__lshift>
 8007778:	9018      	str	r0, [sp, #96]	; 0x60
 800777a:	2800      	cmp	r0, #0
 800777c:	f47f af6b 	bne.w	8007656 <_strtod_l+0x766>
 8007780:	e5fe      	b.n	8007380 <_strtod_l+0x490>
 8007782:	465f      	mov	r7, fp
 8007784:	d16e      	bne.n	8007864 <_strtod_l+0x974>
 8007786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007788:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800778c:	b342      	cbz	r2, 80077e0 <_strtod_l+0x8f0>
 800778e:	4a32      	ldr	r2, [pc, #200]	; (8007858 <_strtod_l+0x968>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d128      	bne.n	80077e6 <_strtod_l+0x8f6>
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	4651      	mov	r1, sl
 8007798:	b1eb      	cbz	r3, 80077d6 <_strtod_l+0x8e6>
 800779a:	4b2d      	ldr	r3, [pc, #180]	; (8007850 <_strtod_l+0x960>)
 800779c:	403b      	ands	r3, r7
 800779e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077a2:	f04f 32ff 	mov.w	r2, #4294967295
 80077a6:	d819      	bhi.n	80077dc <_strtod_l+0x8ec>
 80077a8:	0d1b      	lsrs	r3, r3, #20
 80077aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077ae:	fa02 f303 	lsl.w	r3, r2, r3
 80077b2:	4299      	cmp	r1, r3
 80077b4:	d117      	bne.n	80077e6 <_strtod_l+0x8f6>
 80077b6:	4b29      	ldr	r3, [pc, #164]	; (800785c <_strtod_l+0x96c>)
 80077b8:	429f      	cmp	r7, r3
 80077ba:	d102      	bne.n	80077c2 <_strtod_l+0x8d2>
 80077bc:	3101      	adds	r1, #1
 80077be:	f43f addf 	beq.w	8007380 <_strtod_l+0x490>
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <_strtod_l+0x960>)
 80077c4:	403b      	ands	r3, r7
 80077c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80077ca:	f04f 0a00 	mov.w	sl, #0
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1a4      	bne.n	800771e <_strtod_l+0x82e>
 80077d4:	e5de      	b.n	8007394 <_strtod_l+0x4a4>
 80077d6:	f04f 33ff 	mov.w	r3, #4294967295
 80077da:	e7ea      	b.n	80077b2 <_strtod_l+0x8c2>
 80077dc:	4613      	mov	r3, r2
 80077de:	e7e8      	b.n	80077b2 <_strtod_l+0x8c2>
 80077e0:	ea53 030a 	orrs.w	r3, r3, sl
 80077e4:	d08c      	beq.n	8007700 <_strtod_l+0x810>
 80077e6:	9b08      	ldr	r3, [sp, #32]
 80077e8:	b1db      	cbz	r3, 8007822 <_strtod_l+0x932>
 80077ea:	423b      	tst	r3, r7
 80077ec:	d0ef      	beq.n	80077ce <_strtod_l+0x8de>
 80077ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f0:	9a04      	ldr	r2, [sp, #16]
 80077f2:	4650      	mov	r0, sl
 80077f4:	4659      	mov	r1, fp
 80077f6:	b1c3      	cbz	r3, 800782a <_strtod_l+0x93a>
 80077f8:	f7ff fb5e 	bl	8006eb8 <sulp>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	ec51 0b18 	vmov	r0, r1, d8
 8007804:	f7f8 fd52 	bl	80002ac <__adddf3>
 8007808:	4682      	mov	sl, r0
 800780a:	468b      	mov	fp, r1
 800780c:	e7df      	b.n	80077ce <_strtod_l+0x8de>
 800780e:	4013      	ands	r3, r2
 8007810:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007814:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007818:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800781c:	f04f 3aff 	mov.w	sl, #4294967295
 8007820:	e7d5      	b.n	80077ce <_strtod_l+0x8de>
 8007822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007824:	ea13 0f0a 	tst.w	r3, sl
 8007828:	e7e0      	b.n	80077ec <_strtod_l+0x8fc>
 800782a:	f7ff fb45 	bl	8006eb8 <sulp>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	ec51 0b18 	vmov	r0, r1, d8
 8007836:	f7f8 fd37 	bl	80002a8 <__aeabi_dsub>
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	4682      	mov	sl, r0
 8007840:	468b      	mov	fp, r1
 8007842:	f7f9 f951 	bl	8000ae8 <__aeabi_dcmpeq>
 8007846:	2800      	cmp	r0, #0
 8007848:	d0c1      	beq.n	80077ce <_strtod_l+0x8de>
 800784a:	e611      	b.n	8007470 <_strtod_l+0x580>
 800784c:	fffffc02 	.word	0xfffffc02
 8007850:	7ff00000 	.word	0x7ff00000
 8007854:	39500000 	.word	0x39500000
 8007858:	000fffff 	.word	0x000fffff
 800785c:	7fefffff 	.word	0x7fefffff
 8007860:	0800a938 	.word	0x0800a938
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	f002 fb28 	bl	8009ebc <__ratio>
 800786c:	ec59 8b10 	vmov	r8, r9, d0
 8007870:	ee10 0a10 	vmov	r0, s0
 8007874:	2200      	movs	r2, #0
 8007876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800787a:	4649      	mov	r1, r9
 800787c:	f7f9 f948 	bl	8000b10 <__aeabi_dcmple>
 8007880:	2800      	cmp	r0, #0
 8007882:	d07a      	beq.n	800797a <_strtod_l+0xa8a>
 8007884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d04a      	beq.n	8007920 <_strtod_l+0xa30>
 800788a:	4b95      	ldr	r3, [pc, #596]	; (8007ae0 <_strtod_l+0xbf0>)
 800788c:	2200      	movs	r2, #0
 800788e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007892:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ae0 <_strtod_l+0xbf0>
 8007896:	f04f 0800 	mov.w	r8, #0
 800789a:	4b92      	ldr	r3, [pc, #584]	; (8007ae4 <_strtod_l+0xbf4>)
 800789c:	403b      	ands	r3, r7
 800789e:	930d      	str	r3, [sp, #52]	; 0x34
 80078a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a2:	4b91      	ldr	r3, [pc, #580]	; (8007ae8 <_strtod_l+0xbf8>)
 80078a4:	429a      	cmp	r2, r3
 80078a6:	f040 80b0 	bne.w	8007a0a <_strtod_l+0xb1a>
 80078aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80078b2:	ec4b ab10 	vmov	d0, sl, fp
 80078b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078ba:	f002 fa27 	bl	8009d0c <__ulp>
 80078be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078c2:	ec53 2b10 	vmov	r2, r3, d0
 80078c6:	f7f8 fea7 	bl	8000618 <__aeabi_dmul>
 80078ca:	4652      	mov	r2, sl
 80078cc:	465b      	mov	r3, fp
 80078ce:	f7f8 fced 	bl	80002ac <__adddf3>
 80078d2:	460b      	mov	r3, r1
 80078d4:	4983      	ldr	r1, [pc, #524]	; (8007ae4 <_strtod_l+0xbf4>)
 80078d6:	4a85      	ldr	r2, [pc, #532]	; (8007aec <_strtod_l+0xbfc>)
 80078d8:	4019      	ands	r1, r3
 80078da:	4291      	cmp	r1, r2
 80078dc:	4682      	mov	sl, r0
 80078de:	d960      	bls.n	80079a2 <_strtod_l+0xab2>
 80078e0:	ee18 3a90 	vmov	r3, s17
 80078e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d104      	bne.n	80078f6 <_strtod_l+0xa06>
 80078ec:	ee18 3a10 	vmov	r3, s16
 80078f0:	3301      	adds	r3, #1
 80078f2:	f43f ad45 	beq.w	8007380 <_strtod_l+0x490>
 80078f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007af8 <_strtod_l+0xc08>
 80078fa:	f04f 3aff 	mov.w	sl, #4294967295
 80078fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007900:	4620      	mov	r0, r4
 8007902:	f001 fed1 	bl	80096a8 <_Bfree>
 8007906:	9905      	ldr	r1, [sp, #20]
 8007908:	4620      	mov	r0, r4
 800790a:	f001 fecd 	bl	80096a8 <_Bfree>
 800790e:	4631      	mov	r1, r6
 8007910:	4620      	mov	r0, r4
 8007912:	f001 fec9 	bl	80096a8 <_Bfree>
 8007916:	4629      	mov	r1, r5
 8007918:	4620      	mov	r0, r4
 800791a:	f001 fec5 	bl	80096a8 <_Bfree>
 800791e:	e61a      	b.n	8007556 <_strtod_l+0x666>
 8007920:	f1ba 0f00 	cmp.w	sl, #0
 8007924:	d11b      	bne.n	800795e <_strtod_l+0xa6e>
 8007926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800792a:	b9f3      	cbnz	r3, 800796a <_strtod_l+0xa7a>
 800792c:	4b6c      	ldr	r3, [pc, #432]	; (8007ae0 <_strtod_l+0xbf0>)
 800792e:	2200      	movs	r2, #0
 8007930:	4640      	mov	r0, r8
 8007932:	4649      	mov	r1, r9
 8007934:	f7f9 f8e2 	bl	8000afc <__aeabi_dcmplt>
 8007938:	b9d0      	cbnz	r0, 8007970 <_strtod_l+0xa80>
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	4b6c      	ldr	r3, [pc, #432]	; (8007af0 <_strtod_l+0xc00>)
 8007940:	2200      	movs	r2, #0
 8007942:	f7f8 fe69 	bl	8000618 <__aeabi_dmul>
 8007946:	4680      	mov	r8, r0
 8007948:	4689      	mov	r9, r1
 800794a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800794e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007952:	9315      	str	r3, [sp, #84]	; 0x54
 8007954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800795c:	e79d      	b.n	800789a <_strtod_l+0x9aa>
 800795e:	f1ba 0f01 	cmp.w	sl, #1
 8007962:	d102      	bne.n	800796a <_strtod_l+0xa7a>
 8007964:	2f00      	cmp	r7, #0
 8007966:	f43f ad83 	beq.w	8007470 <_strtod_l+0x580>
 800796a:	4b62      	ldr	r3, [pc, #392]	; (8007af4 <_strtod_l+0xc04>)
 800796c:	2200      	movs	r2, #0
 800796e:	e78e      	b.n	800788e <_strtod_l+0x99e>
 8007970:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007af0 <_strtod_l+0xc00>
 8007974:	f04f 0800 	mov.w	r8, #0
 8007978:	e7e7      	b.n	800794a <_strtod_l+0xa5a>
 800797a:	4b5d      	ldr	r3, [pc, #372]	; (8007af0 <_strtod_l+0xc00>)
 800797c:	4640      	mov	r0, r8
 800797e:	4649      	mov	r1, r9
 8007980:	2200      	movs	r2, #0
 8007982:	f7f8 fe49 	bl	8000618 <__aeabi_dmul>
 8007986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007988:	4680      	mov	r8, r0
 800798a:	4689      	mov	r9, r1
 800798c:	b933      	cbnz	r3, 800799c <_strtod_l+0xaac>
 800798e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007992:	900e      	str	r0, [sp, #56]	; 0x38
 8007994:	930f      	str	r3, [sp, #60]	; 0x3c
 8007996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800799a:	e7dd      	b.n	8007958 <_strtod_l+0xa68>
 800799c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80079a0:	e7f9      	b.n	8007996 <_strtod_l+0xaa6>
 80079a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1a8      	bne.n	80078fe <_strtod_l+0xa0e>
 80079ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079b2:	0d1b      	lsrs	r3, r3, #20
 80079b4:	051b      	lsls	r3, r3, #20
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d1a1      	bne.n	80078fe <_strtod_l+0xa0e>
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f9 f98b 	bl	8000cd8 <__aeabi_d2lz>
 80079c2:	f7f8 fdfb 	bl	80005bc <__aeabi_l2d>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	f7f8 fc6b 	bl	80002a8 <__aeabi_dsub>
 80079d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079d8:	ea43 030a 	orr.w	r3, r3, sl
 80079dc:	4313      	orrs	r3, r2
 80079de:	4680      	mov	r8, r0
 80079e0:	4689      	mov	r9, r1
 80079e2:	d055      	beq.n	8007a90 <_strtod_l+0xba0>
 80079e4:	a336      	add	r3, pc, #216	; (adr r3, 8007ac0 <_strtod_l+0xbd0>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f9 f887 	bl	8000afc <__aeabi_dcmplt>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f47f acd0 	bne.w	8007394 <_strtod_l+0x4a4>
 80079f4:	a334      	add	r3, pc, #208	; (adr r3, 8007ac8 <_strtod_l+0xbd8>)
 80079f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	f7f9 f89b 	bl	8000b38 <__aeabi_dcmpgt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f43f af7b 	beq.w	80078fe <_strtod_l+0xa0e>
 8007a08:	e4c4      	b.n	8007394 <_strtod_l+0x4a4>
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	b333      	cbz	r3, 8007a5c <_strtod_l+0xb6c>
 8007a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a14:	d822      	bhi.n	8007a5c <_strtod_l+0xb6c>
 8007a16:	a32e      	add	r3, pc, #184	; (adr r3, 8007ad0 <_strtod_l+0xbe0>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	4649      	mov	r1, r9
 8007a20:	f7f9 f876 	bl	8000b10 <__aeabi_dcmple>
 8007a24:	b1a0      	cbz	r0, 8007a50 <_strtod_l+0xb60>
 8007a26:	4649      	mov	r1, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	f7f9 f8cd 	bl	8000bc8 <__aeabi_d2uiz>
 8007a2e:	2801      	cmp	r0, #1
 8007a30:	bf38      	it	cc
 8007a32:	2001      	movcc	r0, #1
 8007a34:	f7f8 fd76 	bl	8000524 <__aeabi_ui2d>
 8007a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	4689      	mov	r9, r1
 8007a3e:	bb23      	cbnz	r3, 8007a8a <_strtod_l+0xb9a>
 8007a40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a44:	9010      	str	r0, [sp, #64]	; 0x40
 8007a46:	9311      	str	r3, [sp, #68]	; 0x44
 8007a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a60:	eeb0 0a48 	vmov.f32	s0, s16
 8007a64:	eef0 0a68 	vmov.f32	s1, s17
 8007a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a6c:	f002 f94e 	bl	8009d0c <__ulp>
 8007a70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a74:	ec53 2b10 	vmov	r2, r3, d0
 8007a78:	f7f8 fdce 	bl	8000618 <__aeabi_dmul>
 8007a7c:	ec53 2b18 	vmov	r2, r3, d8
 8007a80:	f7f8 fc14 	bl	80002ac <__adddf3>
 8007a84:	4682      	mov	sl, r0
 8007a86:	468b      	mov	fp, r1
 8007a88:	e78d      	b.n	80079a6 <_strtod_l+0xab6>
 8007a8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a8e:	e7db      	b.n	8007a48 <_strtod_l+0xb58>
 8007a90:	a311      	add	r3, pc, #68	; (adr r3, 8007ad8 <_strtod_l+0xbe8>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f9 f831 	bl	8000afc <__aeabi_dcmplt>
 8007a9a:	e7b2      	b.n	8007a02 <_strtod_l+0xb12>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	f7ff ba6b 	b.w	8006f80 <_strtod_l+0x90>
 8007aaa:	2a65      	cmp	r2, #101	; 0x65
 8007aac:	f43f ab5f 	beq.w	800716e <_strtod_l+0x27e>
 8007ab0:	2a45      	cmp	r2, #69	; 0x45
 8007ab2:	f43f ab5c 	beq.w	800716e <_strtod_l+0x27e>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f7ff bb94 	b.w	80071e4 <_strtod_l+0x2f4>
 8007abc:	f3af 8000 	nop.w
 8007ac0:	94a03595 	.word	0x94a03595
 8007ac4:	3fdfffff 	.word	0x3fdfffff
 8007ac8:	35afe535 	.word	0x35afe535
 8007acc:	3fe00000 	.word	0x3fe00000
 8007ad0:	ffc00000 	.word	0xffc00000
 8007ad4:	41dfffff 	.word	0x41dfffff
 8007ad8:	94a03595 	.word	0x94a03595
 8007adc:	3fcfffff 	.word	0x3fcfffff
 8007ae0:	3ff00000 	.word	0x3ff00000
 8007ae4:	7ff00000 	.word	0x7ff00000
 8007ae8:	7fe00000 	.word	0x7fe00000
 8007aec:	7c9fffff 	.word	0x7c9fffff
 8007af0:	3fe00000 	.word	0x3fe00000
 8007af4:	bff00000 	.word	0xbff00000
 8007af8:	7fefffff 	.word	0x7fefffff

08007afc <_strtod_r>:
 8007afc:	4b01      	ldr	r3, [pc, #4]	; (8007b04 <_strtod_r+0x8>)
 8007afe:	f7ff b9f7 	b.w	8006ef0 <_strtod_l>
 8007b02:	bf00      	nop
 8007b04:	20000098 	.word	0x20000098

08007b08 <_strtol_l.constprop.0>:
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0e:	d001      	beq.n	8007b14 <_strtol_l.constprop.0+0xc>
 8007b10:	2b24      	cmp	r3, #36	; 0x24
 8007b12:	d906      	bls.n	8007b22 <_strtol_l.constprop.0+0x1a>
 8007b14:	f7fe f91a 	bl	8005d4c <__errno>
 8007b18:	2316      	movs	r3, #22
 8007b1a:	6003      	str	r3, [r0, #0]
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007c08 <_strtol_l.constprop.0+0x100>
 8007b26:	460d      	mov	r5, r1
 8007b28:	462e      	mov	r6, r5
 8007b2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007b32:	f017 0708 	ands.w	r7, r7, #8
 8007b36:	d1f7      	bne.n	8007b28 <_strtol_l.constprop.0+0x20>
 8007b38:	2c2d      	cmp	r4, #45	; 0x2d
 8007b3a:	d132      	bne.n	8007ba2 <_strtol_l.constprop.0+0x9a>
 8007b3c:	782c      	ldrb	r4, [r5, #0]
 8007b3e:	2701      	movs	r7, #1
 8007b40:	1cb5      	adds	r5, r6, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d05b      	beq.n	8007bfe <_strtol_l.constprop.0+0xf6>
 8007b46:	2b10      	cmp	r3, #16
 8007b48:	d109      	bne.n	8007b5e <_strtol_l.constprop.0+0x56>
 8007b4a:	2c30      	cmp	r4, #48	; 0x30
 8007b4c:	d107      	bne.n	8007b5e <_strtol_l.constprop.0+0x56>
 8007b4e:	782c      	ldrb	r4, [r5, #0]
 8007b50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b54:	2c58      	cmp	r4, #88	; 0x58
 8007b56:	d14d      	bne.n	8007bf4 <_strtol_l.constprop.0+0xec>
 8007b58:	786c      	ldrb	r4, [r5, #1]
 8007b5a:	2310      	movs	r3, #16
 8007b5c:	3502      	adds	r5, #2
 8007b5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b62:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b66:	f04f 0c00 	mov.w	ip, #0
 8007b6a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b6e:	4666      	mov	r6, ip
 8007b70:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b78:	f1be 0f09 	cmp.w	lr, #9
 8007b7c:	d816      	bhi.n	8007bac <_strtol_l.constprop.0+0xa4>
 8007b7e:	4674      	mov	r4, lr
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	dd24      	ble.n	8007bce <_strtol_l.constprop.0+0xc6>
 8007b84:	f1bc 0f00 	cmp.w	ip, #0
 8007b88:	db1e      	blt.n	8007bc8 <_strtol_l.constprop.0+0xc0>
 8007b8a:	45b1      	cmp	r9, r6
 8007b8c:	d31c      	bcc.n	8007bc8 <_strtol_l.constprop.0+0xc0>
 8007b8e:	d101      	bne.n	8007b94 <_strtol_l.constprop.0+0x8c>
 8007b90:	45a2      	cmp	sl, r4
 8007b92:	db19      	blt.n	8007bc8 <_strtol_l.constprop.0+0xc0>
 8007b94:	fb06 4603 	mla	r6, r6, r3, r4
 8007b98:	f04f 0c01 	mov.w	ip, #1
 8007b9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ba0:	e7e8      	b.n	8007b74 <_strtol_l.constprop.0+0x6c>
 8007ba2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ba4:	bf04      	itt	eq
 8007ba6:	782c      	ldrbeq	r4, [r5, #0]
 8007ba8:	1cb5      	addeq	r5, r6, #2
 8007baa:	e7ca      	b.n	8007b42 <_strtol_l.constprop.0+0x3a>
 8007bac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007bb0:	f1be 0f19 	cmp.w	lr, #25
 8007bb4:	d801      	bhi.n	8007bba <_strtol_l.constprop.0+0xb2>
 8007bb6:	3c37      	subs	r4, #55	; 0x37
 8007bb8:	e7e2      	b.n	8007b80 <_strtol_l.constprop.0+0x78>
 8007bba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007bbe:	f1be 0f19 	cmp.w	lr, #25
 8007bc2:	d804      	bhi.n	8007bce <_strtol_l.constprop.0+0xc6>
 8007bc4:	3c57      	subs	r4, #87	; 0x57
 8007bc6:	e7db      	b.n	8007b80 <_strtol_l.constprop.0+0x78>
 8007bc8:	f04f 3cff 	mov.w	ip, #4294967295
 8007bcc:	e7e6      	b.n	8007b9c <_strtol_l.constprop.0+0x94>
 8007bce:	f1bc 0f00 	cmp.w	ip, #0
 8007bd2:	da05      	bge.n	8007be0 <_strtol_l.constprop.0+0xd8>
 8007bd4:	2322      	movs	r3, #34	; 0x22
 8007bd6:	6003      	str	r3, [r0, #0]
 8007bd8:	4646      	mov	r6, r8
 8007bda:	b942      	cbnz	r2, 8007bee <_strtol_l.constprop.0+0xe6>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	e79e      	b.n	8007b1e <_strtol_l.constprop.0+0x16>
 8007be0:	b107      	cbz	r7, 8007be4 <_strtol_l.constprop.0+0xdc>
 8007be2:	4276      	negs	r6, r6
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	d0f9      	beq.n	8007bdc <_strtol_l.constprop.0+0xd4>
 8007be8:	f1bc 0f00 	cmp.w	ip, #0
 8007bec:	d000      	beq.n	8007bf0 <_strtol_l.constprop.0+0xe8>
 8007bee:	1e69      	subs	r1, r5, #1
 8007bf0:	6011      	str	r1, [r2, #0]
 8007bf2:	e7f3      	b.n	8007bdc <_strtol_l.constprop.0+0xd4>
 8007bf4:	2430      	movs	r4, #48	; 0x30
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1b1      	bne.n	8007b5e <_strtol_l.constprop.0+0x56>
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	e7af      	b.n	8007b5e <_strtol_l.constprop.0+0x56>
 8007bfe:	2c30      	cmp	r4, #48	; 0x30
 8007c00:	d0a5      	beq.n	8007b4e <_strtol_l.constprop.0+0x46>
 8007c02:	230a      	movs	r3, #10
 8007c04:	e7ab      	b.n	8007b5e <_strtol_l.constprop.0+0x56>
 8007c06:	bf00      	nop
 8007c08:	0800a961 	.word	0x0800a961

08007c0c <_strtol_r>:
 8007c0c:	f7ff bf7c 	b.w	8007b08 <_strtol_l.constprop.0>

08007c10 <__swbuf_r>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	460e      	mov	r6, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	4605      	mov	r5, r0
 8007c18:	b118      	cbz	r0, 8007c22 <__swbuf_r+0x12>
 8007c1a:	6983      	ldr	r3, [r0, #24]
 8007c1c:	b90b      	cbnz	r3, 8007c22 <__swbuf_r+0x12>
 8007c1e:	f001 f84b 	bl	8008cb8 <__sinit>
 8007c22:	4b21      	ldr	r3, [pc, #132]	; (8007ca8 <__swbuf_r+0x98>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d12b      	bne.n	8007c80 <__swbuf_r+0x70>
 8007c28:	686c      	ldr	r4, [r5, #4]
 8007c2a:	69a3      	ldr	r3, [r4, #24]
 8007c2c:	60a3      	str	r3, [r4, #8]
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	071a      	lsls	r2, r3, #28
 8007c32:	d52f      	bpl.n	8007c94 <__swbuf_r+0x84>
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	b36b      	cbz	r3, 8007c94 <__swbuf_r+0x84>
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	6820      	ldr	r0, [r4, #0]
 8007c3c:	1ac0      	subs	r0, r0, r3
 8007c3e:	6963      	ldr	r3, [r4, #20]
 8007c40:	b2f6      	uxtb	r6, r6
 8007c42:	4283      	cmp	r3, r0
 8007c44:	4637      	mov	r7, r6
 8007c46:	dc04      	bgt.n	8007c52 <__swbuf_r+0x42>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 ffa0 	bl	8008b90 <_fflush_r>
 8007c50:	bb30      	cbnz	r0, 8007ca0 <__swbuf_r+0x90>
 8007c52:	68a3      	ldr	r3, [r4, #8]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	60a3      	str	r3, [r4, #8]
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	6022      	str	r2, [r4, #0]
 8007c5e:	701e      	strb	r6, [r3, #0]
 8007c60:	6963      	ldr	r3, [r4, #20]
 8007c62:	3001      	adds	r0, #1
 8007c64:	4283      	cmp	r3, r0
 8007c66:	d004      	beq.n	8007c72 <__swbuf_r+0x62>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	07db      	lsls	r3, r3, #31
 8007c6c:	d506      	bpl.n	8007c7c <__swbuf_r+0x6c>
 8007c6e:	2e0a      	cmp	r6, #10
 8007c70:	d104      	bne.n	8007c7c <__swbuf_r+0x6c>
 8007c72:	4621      	mov	r1, r4
 8007c74:	4628      	mov	r0, r5
 8007c76:	f000 ff8b 	bl	8008b90 <_fflush_r>
 8007c7a:	b988      	cbnz	r0, 8007ca0 <__swbuf_r+0x90>
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <__swbuf_r+0x9c>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d101      	bne.n	8007c8a <__swbuf_r+0x7a>
 8007c86:	68ac      	ldr	r4, [r5, #8]
 8007c88:	e7cf      	b.n	8007c2a <__swbuf_r+0x1a>
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <__swbuf_r+0xa0>)
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	bf08      	it	eq
 8007c90:	68ec      	ldreq	r4, [r5, #12]
 8007c92:	e7ca      	b.n	8007c2a <__swbuf_r+0x1a>
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 f80c 	bl	8007cb4 <__swsetup_r>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d0cb      	beq.n	8007c38 <__swbuf_r+0x28>
 8007ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ca4:	e7ea      	b.n	8007c7c <__swbuf_r+0x6c>
 8007ca6:	bf00      	nop
 8007ca8:	0800ab14 	.word	0x0800ab14
 8007cac:	0800ab34 	.word	0x0800ab34
 8007cb0:	0800aaf4 	.word	0x0800aaf4

08007cb4 <__swsetup_r>:
 8007cb4:	4b32      	ldr	r3, [pc, #200]	; (8007d80 <__swsetup_r+0xcc>)
 8007cb6:	b570      	push	{r4, r5, r6, lr}
 8007cb8:	681d      	ldr	r5, [r3, #0]
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	b125      	cbz	r5, 8007cca <__swsetup_r+0x16>
 8007cc0:	69ab      	ldr	r3, [r5, #24]
 8007cc2:	b913      	cbnz	r3, 8007cca <__swsetup_r+0x16>
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 fff7 	bl	8008cb8 <__sinit>
 8007cca:	4b2e      	ldr	r3, [pc, #184]	; (8007d84 <__swsetup_r+0xd0>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	d10f      	bne.n	8007cf0 <__swsetup_r+0x3c>
 8007cd0:	686c      	ldr	r4, [r5, #4]
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cd8:	0719      	lsls	r1, r3, #28
 8007cda:	d42c      	bmi.n	8007d36 <__swsetup_r+0x82>
 8007cdc:	06dd      	lsls	r5, r3, #27
 8007cde:	d411      	bmi.n	8007d04 <__swsetup_r+0x50>
 8007ce0:	2309      	movs	r3, #9
 8007ce2:	6033      	str	r3, [r6, #0]
 8007ce4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	e03e      	b.n	8007d6e <__swsetup_r+0xba>
 8007cf0:	4b25      	ldr	r3, [pc, #148]	; (8007d88 <__swsetup_r+0xd4>)
 8007cf2:	429c      	cmp	r4, r3
 8007cf4:	d101      	bne.n	8007cfa <__swsetup_r+0x46>
 8007cf6:	68ac      	ldr	r4, [r5, #8]
 8007cf8:	e7eb      	b.n	8007cd2 <__swsetup_r+0x1e>
 8007cfa:	4b24      	ldr	r3, [pc, #144]	; (8007d8c <__swsetup_r+0xd8>)
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	bf08      	it	eq
 8007d00:	68ec      	ldreq	r4, [r5, #12]
 8007d02:	e7e6      	b.n	8007cd2 <__swsetup_r+0x1e>
 8007d04:	0758      	lsls	r0, r3, #29
 8007d06:	d512      	bpl.n	8007d2e <__swsetup_r+0x7a>
 8007d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d0a:	b141      	cbz	r1, 8007d1e <__swsetup_r+0x6a>
 8007d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d10:	4299      	cmp	r1, r3
 8007d12:	d002      	beq.n	8007d1a <__swsetup_r+0x66>
 8007d14:	4630      	mov	r0, r6
 8007d16:	f002 f95f 	bl	8009fd8 <_free_r>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	2300      	movs	r3, #0
 8007d28:	6063      	str	r3, [r4, #4]
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	f043 0308 	orr.w	r3, r3, #8
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	6923      	ldr	r3, [r4, #16]
 8007d38:	b94b      	cbnz	r3, 8007d4e <__swsetup_r+0x9a>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d44:	d003      	beq.n	8007d4e <__swsetup_r+0x9a>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f001 fbeb 	bl	8009524 <__smakebuf_r>
 8007d4e:	89a0      	ldrh	r0, [r4, #12]
 8007d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d54:	f010 0301 	ands.w	r3, r0, #1
 8007d58:	d00a      	beq.n	8007d70 <__swsetup_r+0xbc>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60a3      	str	r3, [r4, #8]
 8007d5e:	6963      	ldr	r3, [r4, #20]
 8007d60:	425b      	negs	r3, r3
 8007d62:	61a3      	str	r3, [r4, #24]
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	b943      	cbnz	r3, 8007d7a <__swsetup_r+0xc6>
 8007d68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d6c:	d1ba      	bne.n	8007ce4 <__swsetup_r+0x30>
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
 8007d70:	0781      	lsls	r1, r0, #30
 8007d72:	bf58      	it	pl
 8007d74:	6963      	ldrpl	r3, [r4, #20]
 8007d76:	60a3      	str	r3, [r4, #8]
 8007d78:	e7f4      	b.n	8007d64 <__swsetup_r+0xb0>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e7f7      	b.n	8007d6e <__swsetup_r+0xba>
 8007d7e:	bf00      	nop
 8007d80:	20000030 	.word	0x20000030
 8007d84:	0800ab14 	.word	0x0800ab14
 8007d88:	0800ab34 	.word	0x0800ab34
 8007d8c:	0800aaf4 	.word	0x0800aaf4

08007d90 <quorem>:
 8007d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	6903      	ldr	r3, [r0, #16]
 8007d96:	690c      	ldr	r4, [r1, #16]
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	f2c0 8081 	blt.w	8007ea2 <quorem+0x112>
 8007da0:	3c01      	subs	r4, #1
 8007da2:	f101 0814 	add.w	r8, r1, #20
 8007da6:	f100 0514 	add.w	r5, r0, #20
 8007daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007db8:	3301      	adds	r3, #1
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007dc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dc8:	d331      	bcc.n	8007e2e <quorem+0x9e>
 8007dca:	f04f 0e00 	mov.w	lr, #0
 8007dce:	4640      	mov	r0, r8
 8007dd0:	46ac      	mov	ip, r5
 8007dd2:	46f2      	mov	sl, lr
 8007dd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dd8:	b293      	uxth	r3, r2
 8007dda:	fb06 e303 	mla	r3, r6, r3, lr
 8007dde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ebaa 0303 	sub.w	r3, sl, r3
 8007de8:	f8dc a000 	ldr.w	sl, [ip]
 8007dec:	0c12      	lsrs	r2, r2, #16
 8007dee:	fa13 f38a 	uxtah	r3, r3, sl
 8007df2:	fb06 e202 	mla	r2, r6, r2, lr
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	9b00      	ldr	r3, [sp, #0]
 8007dfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dfe:	b292      	uxth	r2, r2
 8007e00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e08:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e0c:	4581      	cmp	r9, r0
 8007e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e12:	f84c 3b04 	str.w	r3, [ip], #4
 8007e16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e1a:	d2db      	bcs.n	8007dd4 <quorem+0x44>
 8007e1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e20:	b92b      	cbnz	r3, 8007e2e <quorem+0x9e>
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	3b04      	subs	r3, #4
 8007e26:	429d      	cmp	r5, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	d32e      	bcc.n	8007e8a <quorem+0xfa>
 8007e2c:	613c      	str	r4, [r7, #16]
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f001 fec6 	bl	8009bc0 <__mcmp>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	db24      	blt.n	8007e82 <quorem+0xf2>
 8007e38:	3601      	adds	r6, #1
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f04f 0c00 	mov.w	ip, #0
 8007e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e44:	f8d0 e000 	ldr.w	lr, [r0]
 8007e48:	b293      	uxth	r3, r2
 8007e4a:	ebac 0303 	sub.w	r3, ip, r3
 8007e4e:	0c12      	lsrs	r2, r2, #16
 8007e50:	fa13 f38e 	uxtah	r3, r3, lr
 8007e54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e62:	45c1      	cmp	r9, r8
 8007e64:	f840 3b04 	str.w	r3, [r0], #4
 8007e68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e6c:	d2e8      	bcs.n	8007e40 <quorem+0xb0>
 8007e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e76:	b922      	cbnz	r2, 8007e82 <quorem+0xf2>
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	d30a      	bcc.n	8007e96 <quorem+0x106>
 8007e80:	613c      	str	r4, [r7, #16]
 8007e82:	4630      	mov	r0, r6
 8007e84:	b003      	add	sp, #12
 8007e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	d1cc      	bne.n	8007e2c <quorem+0x9c>
 8007e92:	3c01      	subs	r4, #1
 8007e94:	e7c7      	b.n	8007e26 <quorem+0x96>
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	3b04      	subs	r3, #4
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d1f0      	bne.n	8007e80 <quorem+0xf0>
 8007e9e:	3c01      	subs	r4, #1
 8007ea0:	e7eb      	b.n	8007e7a <quorem+0xea>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7ee      	b.n	8007e84 <quorem+0xf4>
	...

08007ea8 <_dtoa_r>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	ed2d 8b04 	vpush	{d8-d9}
 8007eb0:	ec57 6b10 	vmov	r6, r7, d0
 8007eb4:	b093      	sub	sp, #76	; 0x4c
 8007eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007eb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ebc:	9106      	str	r1, [sp, #24]
 8007ebe:	ee10 aa10 	vmov	sl, s0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ec8:	46bb      	mov	fp, r7
 8007eca:	b975      	cbnz	r5, 8007eea <_dtoa_r+0x42>
 8007ecc:	2010      	movs	r0, #16
 8007ece:	f001 fb69 	bl	80095a4 <malloc>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ed6:	b920      	cbnz	r0, 8007ee2 <_dtoa_r+0x3a>
 8007ed8:	4ba7      	ldr	r3, [pc, #668]	; (8008178 <_dtoa_r+0x2d0>)
 8007eda:	21ea      	movs	r1, #234	; 0xea
 8007edc:	48a7      	ldr	r0, [pc, #668]	; (800817c <_dtoa_r+0x2d4>)
 8007ede:	f002 fb75 	bl	800a5cc <__assert_func>
 8007ee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ee6:	6005      	str	r5, [r0, #0]
 8007ee8:	60c5      	str	r5, [r0, #12]
 8007eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	b151      	cbz	r1, 8007f06 <_dtoa_r+0x5e>
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	604a      	str	r2, [r1, #4]
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4093      	lsls	r3, r2
 8007ef8:	608b      	str	r3, [r1, #8]
 8007efa:	4620      	mov	r0, r4
 8007efc:	f001 fbd4 	bl	80096a8 <_Bfree>
 8007f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	1e3b      	subs	r3, r7, #0
 8007f08:	bfaa      	itet	ge
 8007f0a:	2300      	movge	r3, #0
 8007f0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f10:	f8c8 3000 	strge.w	r3, [r8]
 8007f14:	4b9a      	ldr	r3, [pc, #616]	; (8008180 <_dtoa_r+0x2d8>)
 8007f16:	bfbc      	itt	lt
 8007f18:	2201      	movlt	r2, #1
 8007f1a:	f8c8 2000 	strlt.w	r2, [r8]
 8007f1e:	ea33 030b 	bics.w	r3, r3, fp
 8007f22:	d11b      	bne.n	8007f5c <_dtoa_r+0xb4>
 8007f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f26:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f30:	4333      	orrs	r3, r6
 8007f32:	f000 8592 	beq.w	8008a5a <_dtoa_r+0xbb2>
 8007f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f38:	b963      	cbnz	r3, 8007f54 <_dtoa_r+0xac>
 8007f3a:	4b92      	ldr	r3, [pc, #584]	; (8008184 <_dtoa_r+0x2dc>)
 8007f3c:	e022      	b.n	8007f84 <_dtoa_r+0xdc>
 8007f3e:	4b92      	ldr	r3, [pc, #584]	; (8008188 <_dtoa_r+0x2e0>)
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	3308      	adds	r3, #8
 8007f44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	9801      	ldr	r0, [sp, #4]
 8007f4a:	b013      	add	sp, #76	; 0x4c
 8007f4c:	ecbd 8b04 	vpop	{d8-d9}
 8007f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f54:	4b8b      	ldr	r3, [pc, #556]	; (8008184 <_dtoa_r+0x2dc>)
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	3303      	adds	r3, #3
 8007f5a:	e7f3      	b.n	8007f44 <_dtoa_r+0x9c>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4650      	mov	r0, sl
 8007f62:	4659      	mov	r1, fp
 8007f64:	f7f8 fdc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f68:	ec4b ab19 	vmov	d9, sl, fp
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	b158      	cbz	r0, 8007f88 <_dtoa_r+0xe0>
 8007f70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f72:	2301      	movs	r3, #1
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 856b 	beq.w	8008a54 <_dtoa_r+0xbac>
 8007f7e:	4883      	ldr	r0, [pc, #524]	; (800818c <_dtoa_r+0x2e4>)
 8007f80:	6018      	str	r0, [r3, #0]
 8007f82:	1e43      	subs	r3, r0, #1
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	e7df      	b.n	8007f48 <_dtoa_r+0xa0>
 8007f88:	ec4b ab10 	vmov	d0, sl, fp
 8007f8c:	aa10      	add	r2, sp, #64	; 0x40
 8007f8e:	a911      	add	r1, sp, #68	; 0x44
 8007f90:	4620      	mov	r0, r4
 8007f92:	f001 ff37 	bl	8009e04 <__d2b>
 8007f96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f9a:	ee08 0a10 	vmov	s16, r0
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	f000 8084 	beq.w	80080ac <_dtoa_r+0x204>
 8007fa4:	ee19 3a90 	vmov	r3, s19
 8007fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007fb0:	4656      	mov	r6, sl
 8007fb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007fbe:	4b74      	ldr	r3, [pc, #464]	; (8008190 <_dtoa_r+0x2e8>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	f7f8 f96f 	bl	80002a8 <__aeabi_dsub>
 8007fca:	a365      	add	r3, pc, #404	; (adr r3, 8008160 <_dtoa_r+0x2b8>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 fb22 	bl	8000618 <__aeabi_dmul>
 8007fd4:	a364      	add	r3, pc, #400	; (adr r3, 8008168 <_dtoa_r+0x2c0>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f7f8 f967 	bl	80002ac <__adddf3>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	460f      	mov	r7, r1
 8007fe4:	f7f8 faae 	bl	8000544 <__aeabi_i2d>
 8007fe8:	a361      	add	r3, pc, #388	; (adr r3, 8008170 <_dtoa_r+0x2c8>)
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fb13 	bl	8000618 <__aeabi_dmul>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	f7f8 f957 	bl	80002ac <__adddf3>
 8007ffe:	4606      	mov	r6, r0
 8008000:	460f      	mov	r7, r1
 8008002:	f7f8 fdb9 	bl	8000b78 <__aeabi_d2iz>
 8008006:	2200      	movs	r2, #0
 8008008:	9000      	str	r0, [sp, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 fd74 	bl	8000afc <__aeabi_dcmplt>
 8008014:	b150      	cbz	r0, 800802c <_dtoa_r+0x184>
 8008016:	9800      	ldr	r0, [sp, #0]
 8008018:	f7f8 fa94 	bl	8000544 <__aeabi_i2d>
 800801c:	4632      	mov	r2, r6
 800801e:	463b      	mov	r3, r7
 8008020:	f7f8 fd62 	bl	8000ae8 <__aeabi_dcmpeq>
 8008024:	b910      	cbnz	r0, 800802c <_dtoa_r+0x184>
 8008026:	9b00      	ldr	r3, [sp, #0]
 8008028:	3b01      	subs	r3, #1
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	9b00      	ldr	r3, [sp, #0]
 800802e:	2b16      	cmp	r3, #22
 8008030:	d85a      	bhi.n	80080e8 <_dtoa_r+0x240>
 8008032:	9a00      	ldr	r2, [sp, #0]
 8008034:	4b57      	ldr	r3, [pc, #348]	; (8008194 <_dtoa_r+0x2ec>)
 8008036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	ec51 0b19 	vmov	r0, r1, d9
 8008042:	f7f8 fd5b 	bl	8000afc <__aeabi_dcmplt>
 8008046:	2800      	cmp	r0, #0
 8008048:	d050      	beq.n	80080ec <_dtoa_r+0x244>
 800804a:	9b00      	ldr	r3, [sp, #0]
 800804c:	3b01      	subs	r3, #1
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	2300      	movs	r3, #0
 8008052:	930b      	str	r3, [sp, #44]	; 0x2c
 8008054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008056:	1b5d      	subs	r5, r3, r5
 8008058:	1e6b      	subs	r3, r5, #1
 800805a:	9305      	str	r3, [sp, #20]
 800805c:	bf45      	ittet	mi
 800805e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008062:	9304      	strmi	r3, [sp, #16]
 8008064:	2300      	movpl	r3, #0
 8008066:	2300      	movmi	r3, #0
 8008068:	bf4c      	ite	mi
 800806a:	9305      	strmi	r3, [sp, #20]
 800806c:	9304      	strpl	r3, [sp, #16]
 800806e:	9b00      	ldr	r3, [sp, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	db3d      	blt.n	80080f0 <_dtoa_r+0x248>
 8008074:	9b05      	ldr	r3, [sp, #20]
 8008076:	9a00      	ldr	r2, [sp, #0]
 8008078:	920a      	str	r2, [sp, #40]	; 0x28
 800807a:	4413      	add	r3, r2
 800807c:	9305      	str	r3, [sp, #20]
 800807e:	2300      	movs	r3, #0
 8008080:	9307      	str	r3, [sp, #28]
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	2b09      	cmp	r3, #9
 8008086:	f200 8089 	bhi.w	800819c <_dtoa_r+0x2f4>
 800808a:	2b05      	cmp	r3, #5
 800808c:	bfc4      	itt	gt
 800808e:	3b04      	subgt	r3, #4
 8008090:	9306      	strgt	r3, [sp, #24]
 8008092:	9b06      	ldr	r3, [sp, #24]
 8008094:	f1a3 0302 	sub.w	r3, r3, #2
 8008098:	bfcc      	ite	gt
 800809a:	2500      	movgt	r5, #0
 800809c:	2501      	movle	r5, #1
 800809e:	2b03      	cmp	r3, #3
 80080a0:	f200 8087 	bhi.w	80081b2 <_dtoa_r+0x30a>
 80080a4:	e8df f003 	tbb	[pc, r3]
 80080a8:	59383a2d 	.word	0x59383a2d
 80080ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80080b0:	441d      	add	r5, r3
 80080b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	bfc1      	itttt	gt
 80080ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80080c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80080c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080ca:	bfda      	itte	le
 80080cc:	f1c3 0320 	rsble	r3, r3, #32
 80080d0:	fa06 f003 	lslle.w	r0, r6, r3
 80080d4:	4318      	orrgt	r0, r3
 80080d6:	f7f8 fa25 	bl	8000524 <__aeabi_ui2d>
 80080da:	2301      	movs	r3, #1
 80080dc:	4606      	mov	r6, r0
 80080de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080e2:	3d01      	subs	r5, #1
 80080e4:	930e      	str	r3, [sp, #56]	; 0x38
 80080e6:	e76a      	b.n	8007fbe <_dtoa_r+0x116>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e7b2      	b.n	8008052 <_dtoa_r+0x1aa>
 80080ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80080ee:	e7b1      	b.n	8008054 <_dtoa_r+0x1ac>
 80080f0:	9b04      	ldr	r3, [sp, #16]
 80080f2:	9a00      	ldr	r2, [sp, #0]
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	9304      	str	r3, [sp, #16]
 80080f8:	4253      	negs	r3, r2
 80080fa:	9307      	str	r3, [sp, #28]
 80080fc:	2300      	movs	r3, #0
 80080fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008100:	e7bf      	b.n	8008082 <_dtoa_r+0x1da>
 8008102:	2300      	movs	r3, #0
 8008104:	9308      	str	r3, [sp, #32]
 8008106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	dc55      	bgt.n	80081b8 <_dtoa_r+0x310>
 800810c:	2301      	movs	r3, #1
 800810e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008112:	461a      	mov	r2, r3
 8008114:	9209      	str	r2, [sp, #36]	; 0x24
 8008116:	e00c      	b.n	8008132 <_dtoa_r+0x28a>
 8008118:	2301      	movs	r3, #1
 800811a:	e7f3      	b.n	8008104 <_dtoa_r+0x25c>
 800811c:	2300      	movs	r3, #0
 800811e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008120:	9308      	str	r3, [sp, #32]
 8008122:	9b00      	ldr	r3, [sp, #0]
 8008124:	4413      	add	r3, r2
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	3301      	adds	r3, #1
 800812a:	2b01      	cmp	r3, #1
 800812c:	9303      	str	r3, [sp, #12]
 800812e:	bfb8      	it	lt
 8008130:	2301      	movlt	r3, #1
 8008132:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008134:	2200      	movs	r2, #0
 8008136:	6042      	str	r2, [r0, #4]
 8008138:	2204      	movs	r2, #4
 800813a:	f102 0614 	add.w	r6, r2, #20
 800813e:	429e      	cmp	r6, r3
 8008140:	6841      	ldr	r1, [r0, #4]
 8008142:	d93d      	bls.n	80081c0 <_dtoa_r+0x318>
 8008144:	4620      	mov	r0, r4
 8008146:	f001 fa6f 	bl	8009628 <_Balloc>
 800814a:	9001      	str	r0, [sp, #4]
 800814c:	2800      	cmp	r0, #0
 800814e:	d13b      	bne.n	80081c8 <_dtoa_r+0x320>
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <_dtoa_r+0x2f0>)
 8008152:	4602      	mov	r2, r0
 8008154:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008158:	e6c0      	b.n	8007edc <_dtoa_r+0x34>
 800815a:	2301      	movs	r3, #1
 800815c:	e7df      	b.n	800811e <_dtoa_r+0x276>
 800815e:	bf00      	nop
 8008160:	636f4361 	.word	0x636f4361
 8008164:	3fd287a7 	.word	0x3fd287a7
 8008168:	8b60c8b3 	.word	0x8b60c8b3
 800816c:	3fc68a28 	.word	0x3fc68a28
 8008170:	509f79fb 	.word	0x509f79fb
 8008174:	3fd34413 	.word	0x3fd34413
 8008178:	0800aa6e 	.word	0x0800aa6e
 800817c:	0800aa85 	.word	0x0800aa85
 8008180:	7ff00000 	.word	0x7ff00000
 8008184:	0800aa6a 	.word	0x0800aa6a
 8008188:	0800aa61 	.word	0x0800aa61
 800818c:	0800a8e6 	.word	0x0800a8e6
 8008190:	3ff80000 	.word	0x3ff80000
 8008194:	0800ac58 	.word	0x0800ac58
 8008198:	0800aae0 	.word	0x0800aae0
 800819c:	2501      	movs	r5, #1
 800819e:	2300      	movs	r3, #0
 80081a0:	9306      	str	r3, [sp, #24]
 80081a2:	9508      	str	r5, [sp, #32]
 80081a4:	f04f 33ff 	mov.w	r3, #4294967295
 80081a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	2312      	movs	r3, #18
 80081b0:	e7b0      	b.n	8008114 <_dtoa_r+0x26c>
 80081b2:	2301      	movs	r3, #1
 80081b4:	9308      	str	r3, [sp, #32]
 80081b6:	e7f5      	b.n	80081a4 <_dtoa_r+0x2fc>
 80081b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081be:	e7b8      	b.n	8008132 <_dtoa_r+0x28a>
 80081c0:	3101      	adds	r1, #1
 80081c2:	6041      	str	r1, [r0, #4]
 80081c4:	0052      	lsls	r2, r2, #1
 80081c6:	e7b8      	b.n	800813a <_dtoa_r+0x292>
 80081c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ca:	9a01      	ldr	r2, [sp, #4]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	2b0e      	cmp	r3, #14
 80081d2:	f200 809d 	bhi.w	8008310 <_dtoa_r+0x468>
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	f000 809a 	beq.w	8008310 <_dtoa_r+0x468>
 80081dc:	9b00      	ldr	r3, [sp, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	dd32      	ble.n	8008248 <_dtoa_r+0x3a0>
 80081e2:	4ab7      	ldr	r2, [pc, #732]	; (80084c0 <_dtoa_r+0x618>)
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081f0:	9b00      	ldr	r3, [sp, #0]
 80081f2:	05d8      	lsls	r0, r3, #23
 80081f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80081f8:	d516      	bpl.n	8008228 <_dtoa_r+0x380>
 80081fa:	4bb2      	ldr	r3, [pc, #712]	; (80084c4 <_dtoa_r+0x61c>)
 80081fc:	ec51 0b19 	vmov	r0, r1, d9
 8008200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008204:	f7f8 fb32 	bl	800086c <__aeabi_ddiv>
 8008208:	f007 070f 	and.w	r7, r7, #15
 800820c:	4682      	mov	sl, r0
 800820e:	468b      	mov	fp, r1
 8008210:	2503      	movs	r5, #3
 8008212:	4eac      	ldr	r6, [pc, #688]	; (80084c4 <_dtoa_r+0x61c>)
 8008214:	b957      	cbnz	r7, 800822c <_dtoa_r+0x384>
 8008216:	4642      	mov	r2, r8
 8008218:	464b      	mov	r3, r9
 800821a:	4650      	mov	r0, sl
 800821c:	4659      	mov	r1, fp
 800821e:	f7f8 fb25 	bl	800086c <__aeabi_ddiv>
 8008222:	4682      	mov	sl, r0
 8008224:	468b      	mov	fp, r1
 8008226:	e028      	b.n	800827a <_dtoa_r+0x3d2>
 8008228:	2502      	movs	r5, #2
 800822a:	e7f2      	b.n	8008212 <_dtoa_r+0x36a>
 800822c:	07f9      	lsls	r1, r7, #31
 800822e:	d508      	bpl.n	8008242 <_dtoa_r+0x39a>
 8008230:	4640      	mov	r0, r8
 8008232:	4649      	mov	r1, r9
 8008234:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008238:	f7f8 f9ee 	bl	8000618 <__aeabi_dmul>
 800823c:	3501      	adds	r5, #1
 800823e:	4680      	mov	r8, r0
 8008240:	4689      	mov	r9, r1
 8008242:	107f      	asrs	r7, r7, #1
 8008244:	3608      	adds	r6, #8
 8008246:	e7e5      	b.n	8008214 <_dtoa_r+0x36c>
 8008248:	f000 809b 	beq.w	8008382 <_dtoa_r+0x4da>
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	4f9d      	ldr	r7, [pc, #628]	; (80084c4 <_dtoa_r+0x61c>)
 8008250:	425e      	negs	r6, r3
 8008252:	4b9b      	ldr	r3, [pc, #620]	; (80084c0 <_dtoa_r+0x618>)
 8008254:	f006 020f 	and.w	r2, r6, #15
 8008258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	ec51 0b19 	vmov	r0, r1, d9
 8008264:	f7f8 f9d8 	bl	8000618 <__aeabi_dmul>
 8008268:	1136      	asrs	r6, r6, #4
 800826a:	4682      	mov	sl, r0
 800826c:	468b      	mov	fp, r1
 800826e:	2300      	movs	r3, #0
 8008270:	2502      	movs	r5, #2
 8008272:	2e00      	cmp	r6, #0
 8008274:	d17a      	bne.n	800836c <_dtoa_r+0x4c4>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1d3      	bne.n	8008222 <_dtoa_r+0x37a>
 800827a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8082 	beq.w	8008386 <_dtoa_r+0x4de>
 8008282:	4b91      	ldr	r3, [pc, #580]	; (80084c8 <_dtoa_r+0x620>)
 8008284:	2200      	movs	r2, #0
 8008286:	4650      	mov	r0, sl
 8008288:	4659      	mov	r1, fp
 800828a:	f7f8 fc37 	bl	8000afc <__aeabi_dcmplt>
 800828e:	2800      	cmp	r0, #0
 8008290:	d079      	beq.n	8008386 <_dtoa_r+0x4de>
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d076      	beq.n	8008386 <_dtoa_r+0x4de>
 8008298:	9b02      	ldr	r3, [sp, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	dd36      	ble.n	800830c <_dtoa_r+0x464>
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	4650      	mov	r0, sl
 80082a2:	4659      	mov	r1, fp
 80082a4:	1e5f      	subs	r7, r3, #1
 80082a6:	2200      	movs	r2, #0
 80082a8:	4b88      	ldr	r3, [pc, #544]	; (80084cc <_dtoa_r+0x624>)
 80082aa:	f7f8 f9b5 	bl	8000618 <__aeabi_dmul>
 80082ae:	9e02      	ldr	r6, [sp, #8]
 80082b0:	4682      	mov	sl, r0
 80082b2:	468b      	mov	fp, r1
 80082b4:	3501      	adds	r5, #1
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7f8 f944 	bl	8000544 <__aeabi_i2d>
 80082bc:	4652      	mov	r2, sl
 80082be:	465b      	mov	r3, fp
 80082c0:	f7f8 f9aa 	bl	8000618 <__aeabi_dmul>
 80082c4:	4b82      	ldr	r3, [pc, #520]	; (80084d0 <_dtoa_r+0x628>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	f7f7 fff0 	bl	80002ac <__adddf3>
 80082cc:	46d0      	mov	r8, sl
 80082ce:	46d9      	mov	r9, fp
 80082d0:	4682      	mov	sl, r0
 80082d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d158      	bne.n	800838c <_dtoa_r+0x4e4>
 80082da:	4b7e      	ldr	r3, [pc, #504]	; (80084d4 <_dtoa_r+0x62c>)
 80082dc:	2200      	movs	r2, #0
 80082de:	4640      	mov	r0, r8
 80082e0:	4649      	mov	r1, r9
 80082e2:	f7f7 ffe1 	bl	80002a8 <__aeabi_dsub>
 80082e6:	4652      	mov	r2, sl
 80082e8:	465b      	mov	r3, fp
 80082ea:	4680      	mov	r8, r0
 80082ec:	4689      	mov	r9, r1
 80082ee:	f7f8 fc23 	bl	8000b38 <__aeabi_dcmpgt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f040 8295 	bne.w	8008822 <_dtoa_r+0x97a>
 80082f8:	4652      	mov	r2, sl
 80082fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80082fe:	4640      	mov	r0, r8
 8008300:	4649      	mov	r1, r9
 8008302:	f7f8 fbfb 	bl	8000afc <__aeabi_dcmplt>
 8008306:	2800      	cmp	r0, #0
 8008308:	f040 8289 	bne.w	800881e <_dtoa_r+0x976>
 800830c:	ec5b ab19 	vmov	sl, fp, d9
 8008310:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008312:	2b00      	cmp	r3, #0
 8008314:	f2c0 8148 	blt.w	80085a8 <_dtoa_r+0x700>
 8008318:	9a00      	ldr	r2, [sp, #0]
 800831a:	2a0e      	cmp	r2, #14
 800831c:	f300 8144 	bgt.w	80085a8 <_dtoa_r+0x700>
 8008320:	4b67      	ldr	r3, [pc, #412]	; (80084c0 <_dtoa_r+0x618>)
 8008322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008326:	e9d3 8900 	ldrd	r8, r9, [r3]
 800832a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	f280 80d5 	bge.w	80084dc <_dtoa_r+0x634>
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f300 80d1 	bgt.w	80084dc <_dtoa_r+0x634>
 800833a:	f040 826f 	bne.w	800881c <_dtoa_r+0x974>
 800833e:	4b65      	ldr	r3, [pc, #404]	; (80084d4 <_dtoa_r+0x62c>)
 8008340:	2200      	movs	r2, #0
 8008342:	4640      	mov	r0, r8
 8008344:	4649      	mov	r1, r9
 8008346:	f7f8 f967 	bl	8000618 <__aeabi_dmul>
 800834a:	4652      	mov	r2, sl
 800834c:	465b      	mov	r3, fp
 800834e:	f7f8 fbe9 	bl	8000b24 <__aeabi_dcmpge>
 8008352:	9e03      	ldr	r6, [sp, #12]
 8008354:	4637      	mov	r7, r6
 8008356:	2800      	cmp	r0, #0
 8008358:	f040 8245 	bne.w	80087e6 <_dtoa_r+0x93e>
 800835c:	9d01      	ldr	r5, [sp, #4]
 800835e:	2331      	movs	r3, #49	; 0x31
 8008360:	f805 3b01 	strb.w	r3, [r5], #1
 8008364:	9b00      	ldr	r3, [sp, #0]
 8008366:	3301      	adds	r3, #1
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	e240      	b.n	80087ee <_dtoa_r+0x946>
 800836c:	07f2      	lsls	r2, r6, #31
 800836e:	d505      	bpl.n	800837c <_dtoa_r+0x4d4>
 8008370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008374:	f7f8 f950 	bl	8000618 <__aeabi_dmul>
 8008378:	3501      	adds	r5, #1
 800837a:	2301      	movs	r3, #1
 800837c:	1076      	asrs	r6, r6, #1
 800837e:	3708      	adds	r7, #8
 8008380:	e777      	b.n	8008272 <_dtoa_r+0x3ca>
 8008382:	2502      	movs	r5, #2
 8008384:	e779      	b.n	800827a <_dtoa_r+0x3d2>
 8008386:	9f00      	ldr	r7, [sp, #0]
 8008388:	9e03      	ldr	r6, [sp, #12]
 800838a:	e794      	b.n	80082b6 <_dtoa_r+0x40e>
 800838c:	9901      	ldr	r1, [sp, #4]
 800838e:	4b4c      	ldr	r3, [pc, #304]	; (80084c0 <_dtoa_r+0x618>)
 8008390:	4431      	add	r1, r6
 8008392:	910d      	str	r1, [sp, #52]	; 0x34
 8008394:	9908      	ldr	r1, [sp, #32]
 8008396:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800839a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800839e:	2900      	cmp	r1, #0
 80083a0:	d043      	beq.n	800842a <_dtoa_r+0x582>
 80083a2:	494d      	ldr	r1, [pc, #308]	; (80084d8 <_dtoa_r+0x630>)
 80083a4:	2000      	movs	r0, #0
 80083a6:	f7f8 fa61 	bl	800086c <__aeabi_ddiv>
 80083aa:	4652      	mov	r2, sl
 80083ac:	465b      	mov	r3, fp
 80083ae:	f7f7 ff7b 	bl	80002a8 <__aeabi_dsub>
 80083b2:	9d01      	ldr	r5, [sp, #4]
 80083b4:	4682      	mov	sl, r0
 80083b6:	468b      	mov	fp, r1
 80083b8:	4649      	mov	r1, r9
 80083ba:	4640      	mov	r0, r8
 80083bc:	f7f8 fbdc 	bl	8000b78 <__aeabi_d2iz>
 80083c0:	4606      	mov	r6, r0
 80083c2:	f7f8 f8bf 	bl	8000544 <__aeabi_i2d>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4640      	mov	r0, r8
 80083cc:	4649      	mov	r1, r9
 80083ce:	f7f7 ff6b 	bl	80002a8 <__aeabi_dsub>
 80083d2:	3630      	adds	r6, #48	; 0x30
 80083d4:	f805 6b01 	strb.w	r6, [r5], #1
 80083d8:	4652      	mov	r2, sl
 80083da:	465b      	mov	r3, fp
 80083dc:	4680      	mov	r8, r0
 80083de:	4689      	mov	r9, r1
 80083e0:	f7f8 fb8c 	bl	8000afc <__aeabi_dcmplt>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d163      	bne.n	80084b0 <_dtoa_r+0x608>
 80083e8:	4642      	mov	r2, r8
 80083ea:	464b      	mov	r3, r9
 80083ec:	4936      	ldr	r1, [pc, #216]	; (80084c8 <_dtoa_r+0x620>)
 80083ee:	2000      	movs	r0, #0
 80083f0:	f7f7 ff5a 	bl	80002a8 <__aeabi_dsub>
 80083f4:	4652      	mov	r2, sl
 80083f6:	465b      	mov	r3, fp
 80083f8:	f7f8 fb80 	bl	8000afc <__aeabi_dcmplt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f040 80b5 	bne.w	800856c <_dtoa_r+0x6c4>
 8008402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008404:	429d      	cmp	r5, r3
 8008406:	d081      	beq.n	800830c <_dtoa_r+0x464>
 8008408:	4b30      	ldr	r3, [pc, #192]	; (80084cc <_dtoa_r+0x624>)
 800840a:	2200      	movs	r2, #0
 800840c:	4650      	mov	r0, sl
 800840e:	4659      	mov	r1, fp
 8008410:	f7f8 f902 	bl	8000618 <__aeabi_dmul>
 8008414:	4b2d      	ldr	r3, [pc, #180]	; (80084cc <_dtoa_r+0x624>)
 8008416:	4682      	mov	sl, r0
 8008418:	468b      	mov	fp, r1
 800841a:	4640      	mov	r0, r8
 800841c:	4649      	mov	r1, r9
 800841e:	2200      	movs	r2, #0
 8008420:	f7f8 f8fa 	bl	8000618 <__aeabi_dmul>
 8008424:	4680      	mov	r8, r0
 8008426:	4689      	mov	r9, r1
 8008428:	e7c6      	b.n	80083b8 <_dtoa_r+0x510>
 800842a:	4650      	mov	r0, sl
 800842c:	4659      	mov	r1, fp
 800842e:	f7f8 f8f3 	bl	8000618 <__aeabi_dmul>
 8008432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008434:	9d01      	ldr	r5, [sp, #4]
 8008436:	930f      	str	r3, [sp, #60]	; 0x3c
 8008438:	4682      	mov	sl, r0
 800843a:	468b      	mov	fp, r1
 800843c:	4649      	mov	r1, r9
 800843e:	4640      	mov	r0, r8
 8008440:	f7f8 fb9a 	bl	8000b78 <__aeabi_d2iz>
 8008444:	4606      	mov	r6, r0
 8008446:	f7f8 f87d 	bl	8000544 <__aeabi_i2d>
 800844a:	3630      	adds	r6, #48	; 0x30
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4640      	mov	r0, r8
 8008452:	4649      	mov	r1, r9
 8008454:	f7f7 ff28 	bl	80002a8 <__aeabi_dsub>
 8008458:	f805 6b01 	strb.w	r6, [r5], #1
 800845c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800845e:	429d      	cmp	r5, r3
 8008460:	4680      	mov	r8, r0
 8008462:	4689      	mov	r9, r1
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	d124      	bne.n	80084b4 <_dtoa_r+0x60c>
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <_dtoa_r+0x630>)
 800846c:	4650      	mov	r0, sl
 800846e:	4659      	mov	r1, fp
 8008470:	f7f7 ff1c 	bl	80002ac <__adddf3>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4640      	mov	r0, r8
 800847a:	4649      	mov	r1, r9
 800847c:	f7f8 fb5c 	bl	8000b38 <__aeabi_dcmpgt>
 8008480:	2800      	cmp	r0, #0
 8008482:	d173      	bne.n	800856c <_dtoa_r+0x6c4>
 8008484:	4652      	mov	r2, sl
 8008486:	465b      	mov	r3, fp
 8008488:	4913      	ldr	r1, [pc, #76]	; (80084d8 <_dtoa_r+0x630>)
 800848a:	2000      	movs	r0, #0
 800848c:	f7f7 ff0c 	bl	80002a8 <__aeabi_dsub>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4640      	mov	r0, r8
 8008496:	4649      	mov	r1, r9
 8008498:	f7f8 fb30 	bl	8000afc <__aeabi_dcmplt>
 800849c:	2800      	cmp	r0, #0
 800849e:	f43f af35 	beq.w	800830c <_dtoa_r+0x464>
 80084a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084a4:	1e6b      	subs	r3, r5, #1
 80084a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084ac:	2b30      	cmp	r3, #48	; 0x30
 80084ae:	d0f8      	beq.n	80084a2 <_dtoa_r+0x5fa>
 80084b0:	9700      	str	r7, [sp, #0]
 80084b2:	e049      	b.n	8008548 <_dtoa_r+0x6a0>
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <_dtoa_r+0x624>)
 80084b6:	f7f8 f8af 	bl	8000618 <__aeabi_dmul>
 80084ba:	4680      	mov	r8, r0
 80084bc:	4689      	mov	r9, r1
 80084be:	e7bd      	b.n	800843c <_dtoa_r+0x594>
 80084c0:	0800ac58 	.word	0x0800ac58
 80084c4:	0800ac30 	.word	0x0800ac30
 80084c8:	3ff00000 	.word	0x3ff00000
 80084cc:	40240000 	.word	0x40240000
 80084d0:	401c0000 	.word	0x401c0000
 80084d4:	40140000 	.word	0x40140000
 80084d8:	3fe00000 	.word	0x3fe00000
 80084dc:	9d01      	ldr	r5, [sp, #4]
 80084de:	4656      	mov	r6, sl
 80084e0:	465f      	mov	r7, fp
 80084e2:	4642      	mov	r2, r8
 80084e4:	464b      	mov	r3, r9
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f8 f9bf 	bl	800086c <__aeabi_ddiv>
 80084ee:	f7f8 fb43 	bl	8000b78 <__aeabi_d2iz>
 80084f2:	4682      	mov	sl, r0
 80084f4:	f7f8 f826 	bl	8000544 <__aeabi_i2d>
 80084f8:	4642      	mov	r2, r8
 80084fa:	464b      	mov	r3, r9
 80084fc:	f7f8 f88c 	bl	8000618 <__aeabi_dmul>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800850c:	f7f7 fecc 	bl	80002a8 <__aeabi_dsub>
 8008510:	f805 6b01 	strb.w	r6, [r5], #1
 8008514:	9e01      	ldr	r6, [sp, #4]
 8008516:	9f03      	ldr	r7, [sp, #12]
 8008518:	1bae      	subs	r6, r5, r6
 800851a:	42b7      	cmp	r7, r6
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	d135      	bne.n	800858e <_dtoa_r+0x6e6>
 8008522:	f7f7 fec3 	bl	80002ac <__adddf3>
 8008526:	4642      	mov	r2, r8
 8008528:	464b      	mov	r3, r9
 800852a:	4606      	mov	r6, r0
 800852c:	460f      	mov	r7, r1
 800852e:	f7f8 fb03 	bl	8000b38 <__aeabi_dcmpgt>
 8008532:	b9d0      	cbnz	r0, 800856a <_dtoa_r+0x6c2>
 8008534:	4642      	mov	r2, r8
 8008536:	464b      	mov	r3, r9
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f8 fad4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008540:	b110      	cbz	r0, 8008548 <_dtoa_r+0x6a0>
 8008542:	f01a 0f01 	tst.w	sl, #1
 8008546:	d110      	bne.n	800856a <_dtoa_r+0x6c2>
 8008548:	4620      	mov	r0, r4
 800854a:	ee18 1a10 	vmov	r1, s16
 800854e:	f001 f8ab 	bl	80096a8 <_Bfree>
 8008552:	2300      	movs	r3, #0
 8008554:	9800      	ldr	r0, [sp, #0]
 8008556:	702b      	strb	r3, [r5, #0]
 8008558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800855a:	3001      	adds	r0, #1
 800855c:	6018      	str	r0, [r3, #0]
 800855e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008560:	2b00      	cmp	r3, #0
 8008562:	f43f acf1 	beq.w	8007f48 <_dtoa_r+0xa0>
 8008566:	601d      	str	r5, [r3, #0]
 8008568:	e4ee      	b.n	8007f48 <_dtoa_r+0xa0>
 800856a:	9f00      	ldr	r7, [sp, #0]
 800856c:	462b      	mov	r3, r5
 800856e:	461d      	mov	r5, r3
 8008570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008574:	2a39      	cmp	r2, #57	; 0x39
 8008576:	d106      	bne.n	8008586 <_dtoa_r+0x6de>
 8008578:	9a01      	ldr	r2, [sp, #4]
 800857a:	429a      	cmp	r2, r3
 800857c:	d1f7      	bne.n	800856e <_dtoa_r+0x6c6>
 800857e:	9901      	ldr	r1, [sp, #4]
 8008580:	2230      	movs	r2, #48	; 0x30
 8008582:	3701      	adds	r7, #1
 8008584:	700a      	strb	r2, [r1, #0]
 8008586:	781a      	ldrb	r2, [r3, #0]
 8008588:	3201      	adds	r2, #1
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	e790      	b.n	80084b0 <_dtoa_r+0x608>
 800858e:	4ba6      	ldr	r3, [pc, #664]	; (8008828 <_dtoa_r+0x980>)
 8008590:	2200      	movs	r2, #0
 8008592:	f7f8 f841 	bl	8000618 <__aeabi_dmul>
 8008596:	2200      	movs	r2, #0
 8008598:	2300      	movs	r3, #0
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	f7f8 faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d09d      	beq.n	80084e2 <_dtoa_r+0x63a>
 80085a6:	e7cf      	b.n	8008548 <_dtoa_r+0x6a0>
 80085a8:	9a08      	ldr	r2, [sp, #32]
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	f000 80d7 	beq.w	800875e <_dtoa_r+0x8b6>
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	2a01      	cmp	r2, #1
 80085b4:	f300 80ba 	bgt.w	800872c <_dtoa_r+0x884>
 80085b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	f000 80b2 	beq.w	8008724 <_dtoa_r+0x87c>
 80085c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085c4:	9e07      	ldr	r6, [sp, #28]
 80085c6:	9d04      	ldr	r5, [sp, #16]
 80085c8:	9a04      	ldr	r2, [sp, #16]
 80085ca:	441a      	add	r2, r3
 80085cc:	9204      	str	r2, [sp, #16]
 80085ce:	9a05      	ldr	r2, [sp, #20]
 80085d0:	2101      	movs	r1, #1
 80085d2:	441a      	add	r2, r3
 80085d4:	4620      	mov	r0, r4
 80085d6:	9205      	str	r2, [sp, #20]
 80085d8:	f001 f968 	bl	80098ac <__i2b>
 80085dc:	4607      	mov	r7, r0
 80085de:	2d00      	cmp	r5, #0
 80085e0:	dd0c      	ble.n	80085fc <_dtoa_r+0x754>
 80085e2:	9b05      	ldr	r3, [sp, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dd09      	ble.n	80085fc <_dtoa_r+0x754>
 80085e8:	42ab      	cmp	r3, r5
 80085ea:	9a04      	ldr	r2, [sp, #16]
 80085ec:	bfa8      	it	ge
 80085ee:	462b      	movge	r3, r5
 80085f0:	1ad2      	subs	r2, r2, r3
 80085f2:	9204      	str	r2, [sp, #16]
 80085f4:	9a05      	ldr	r2, [sp, #20]
 80085f6:	1aed      	subs	r5, r5, r3
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	b31b      	cbz	r3, 8008648 <_dtoa_r+0x7a0>
 8008600:	9b08      	ldr	r3, [sp, #32]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80af 	beq.w	8008766 <_dtoa_r+0x8be>
 8008608:	2e00      	cmp	r6, #0
 800860a:	dd13      	ble.n	8008634 <_dtoa_r+0x78c>
 800860c:	4639      	mov	r1, r7
 800860e:	4632      	mov	r2, r6
 8008610:	4620      	mov	r0, r4
 8008612:	f001 fa0b 	bl	8009a2c <__pow5mult>
 8008616:	ee18 2a10 	vmov	r2, s16
 800861a:	4601      	mov	r1, r0
 800861c:	4607      	mov	r7, r0
 800861e:	4620      	mov	r0, r4
 8008620:	f001 f95a 	bl	80098d8 <__multiply>
 8008624:	ee18 1a10 	vmov	r1, s16
 8008628:	4680      	mov	r8, r0
 800862a:	4620      	mov	r0, r4
 800862c:	f001 f83c 	bl	80096a8 <_Bfree>
 8008630:	ee08 8a10 	vmov	s16, r8
 8008634:	9b07      	ldr	r3, [sp, #28]
 8008636:	1b9a      	subs	r2, r3, r6
 8008638:	d006      	beq.n	8008648 <_dtoa_r+0x7a0>
 800863a:	ee18 1a10 	vmov	r1, s16
 800863e:	4620      	mov	r0, r4
 8008640:	f001 f9f4 	bl	8009a2c <__pow5mult>
 8008644:	ee08 0a10 	vmov	s16, r0
 8008648:	2101      	movs	r1, #1
 800864a:	4620      	mov	r0, r4
 800864c:	f001 f92e 	bl	80098ac <__i2b>
 8008650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008652:	2b00      	cmp	r3, #0
 8008654:	4606      	mov	r6, r0
 8008656:	f340 8088 	ble.w	800876a <_dtoa_r+0x8c2>
 800865a:	461a      	mov	r2, r3
 800865c:	4601      	mov	r1, r0
 800865e:	4620      	mov	r0, r4
 8008660:	f001 f9e4 	bl	8009a2c <__pow5mult>
 8008664:	9b06      	ldr	r3, [sp, #24]
 8008666:	2b01      	cmp	r3, #1
 8008668:	4606      	mov	r6, r0
 800866a:	f340 8081 	ble.w	8008770 <_dtoa_r+0x8c8>
 800866e:	f04f 0800 	mov.w	r8, #0
 8008672:	6933      	ldr	r3, [r6, #16]
 8008674:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008678:	6918      	ldr	r0, [r3, #16]
 800867a:	f001 f8c7 	bl	800980c <__hi0bits>
 800867e:	f1c0 0020 	rsb	r0, r0, #32
 8008682:	9b05      	ldr	r3, [sp, #20]
 8008684:	4418      	add	r0, r3
 8008686:	f010 001f 	ands.w	r0, r0, #31
 800868a:	f000 8092 	beq.w	80087b2 <_dtoa_r+0x90a>
 800868e:	f1c0 0320 	rsb	r3, r0, #32
 8008692:	2b04      	cmp	r3, #4
 8008694:	f340 808a 	ble.w	80087ac <_dtoa_r+0x904>
 8008698:	f1c0 001c 	rsb	r0, r0, #28
 800869c:	9b04      	ldr	r3, [sp, #16]
 800869e:	4403      	add	r3, r0
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	9b05      	ldr	r3, [sp, #20]
 80086a4:	4403      	add	r3, r0
 80086a6:	4405      	add	r5, r0
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	9b04      	ldr	r3, [sp, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dd07      	ble.n	80086c0 <_dtoa_r+0x818>
 80086b0:	ee18 1a10 	vmov	r1, s16
 80086b4:	461a      	mov	r2, r3
 80086b6:	4620      	mov	r0, r4
 80086b8:	f001 fa12 	bl	8009ae0 <__lshift>
 80086bc:	ee08 0a10 	vmov	s16, r0
 80086c0:	9b05      	ldr	r3, [sp, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd05      	ble.n	80086d2 <_dtoa_r+0x82a>
 80086c6:	4631      	mov	r1, r6
 80086c8:	461a      	mov	r2, r3
 80086ca:	4620      	mov	r0, r4
 80086cc:	f001 fa08 	bl	8009ae0 <__lshift>
 80086d0:	4606      	mov	r6, r0
 80086d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d06e      	beq.n	80087b6 <_dtoa_r+0x90e>
 80086d8:	ee18 0a10 	vmov	r0, s16
 80086dc:	4631      	mov	r1, r6
 80086de:	f001 fa6f 	bl	8009bc0 <__mcmp>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	da67      	bge.n	80087b6 <_dtoa_r+0x90e>
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	ee18 1a10 	vmov	r1, s16
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	220a      	movs	r2, #10
 80086f2:	2300      	movs	r3, #0
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 fff9 	bl	80096ec <__multadd>
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	ee08 0a10 	vmov	s16, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 81b1 	beq.w	8008a68 <_dtoa_r+0xbc0>
 8008706:	2300      	movs	r3, #0
 8008708:	4639      	mov	r1, r7
 800870a:	220a      	movs	r2, #10
 800870c:	4620      	mov	r0, r4
 800870e:	f000 ffed 	bl	80096ec <__multadd>
 8008712:	9b02      	ldr	r3, [sp, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	4607      	mov	r7, r0
 8008718:	f300 808e 	bgt.w	8008838 <_dtoa_r+0x990>
 800871c:	9b06      	ldr	r3, [sp, #24]
 800871e:	2b02      	cmp	r3, #2
 8008720:	dc51      	bgt.n	80087c6 <_dtoa_r+0x91e>
 8008722:	e089      	b.n	8008838 <_dtoa_r+0x990>
 8008724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800872a:	e74b      	b.n	80085c4 <_dtoa_r+0x71c>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	1e5e      	subs	r6, r3, #1
 8008730:	9b07      	ldr	r3, [sp, #28]
 8008732:	42b3      	cmp	r3, r6
 8008734:	bfbf      	itttt	lt
 8008736:	9b07      	ldrlt	r3, [sp, #28]
 8008738:	9607      	strlt	r6, [sp, #28]
 800873a:	1af2      	sublt	r2, r6, r3
 800873c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800873e:	bfb6      	itet	lt
 8008740:	189b      	addlt	r3, r3, r2
 8008742:	1b9e      	subge	r6, r3, r6
 8008744:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	bfb8      	it	lt
 800874a:	2600      	movlt	r6, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfb7      	itett	lt
 8008750:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008754:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008758:	1a9d      	sublt	r5, r3, r2
 800875a:	2300      	movlt	r3, #0
 800875c:	e734      	b.n	80085c8 <_dtoa_r+0x720>
 800875e:	9e07      	ldr	r6, [sp, #28]
 8008760:	9d04      	ldr	r5, [sp, #16]
 8008762:	9f08      	ldr	r7, [sp, #32]
 8008764:	e73b      	b.n	80085de <_dtoa_r+0x736>
 8008766:	9a07      	ldr	r2, [sp, #28]
 8008768:	e767      	b.n	800863a <_dtoa_r+0x792>
 800876a:	9b06      	ldr	r3, [sp, #24]
 800876c:	2b01      	cmp	r3, #1
 800876e:	dc18      	bgt.n	80087a2 <_dtoa_r+0x8fa>
 8008770:	f1ba 0f00 	cmp.w	sl, #0
 8008774:	d115      	bne.n	80087a2 <_dtoa_r+0x8fa>
 8008776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800877a:	b993      	cbnz	r3, 80087a2 <_dtoa_r+0x8fa>
 800877c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008780:	0d1b      	lsrs	r3, r3, #20
 8008782:	051b      	lsls	r3, r3, #20
 8008784:	b183      	cbz	r3, 80087a8 <_dtoa_r+0x900>
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	3301      	adds	r3, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	9b05      	ldr	r3, [sp, #20]
 800878e:	3301      	adds	r3, #1
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	f04f 0801 	mov.w	r8, #1
 8008796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008798:	2b00      	cmp	r3, #0
 800879a:	f47f af6a 	bne.w	8008672 <_dtoa_r+0x7ca>
 800879e:	2001      	movs	r0, #1
 80087a0:	e76f      	b.n	8008682 <_dtoa_r+0x7da>
 80087a2:	f04f 0800 	mov.w	r8, #0
 80087a6:	e7f6      	b.n	8008796 <_dtoa_r+0x8ee>
 80087a8:	4698      	mov	r8, r3
 80087aa:	e7f4      	b.n	8008796 <_dtoa_r+0x8ee>
 80087ac:	f43f af7d 	beq.w	80086aa <_dtoa_r+0x802>
 80087b0:	4618      	mov	r0, r3
 80087b2:	301c      	adds	r0, #28
 80087b4:	e772      	b.n	800869c <_dtoa_r+0x7f4>
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dc37      	bgt.n	800882c <_dtoa_r+0x984>
 80087bc:	9b06      	ldr	r3, [sp, #24]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	dd34      	ble.n	800882c <_dtoa_r+0x984>
 80087c2:	9b03      	ldr	r3, [sp, #12]
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	9b02      	ldr	r3, [sp, #8]
 80087c8:	b96b      	cbnz	r3, 80087e6 <_dtoa_r+0x93e>
 80087ca:	4631      	mov	r1, r6
 80087cc:	2205      	movs	r2, #5
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 ff8c 	bl	80096ec <__multadd>
 80087d4:	4601      	mov	r1, r0
 80087d6:	4606      	mov	r6, r0
 80087d8:	ee18 0a10 	vmov	r0, s16
 80087dc:	f001 f9f0 	bl	8009bc0 <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	f73f adbb 	bgt.w	800835c <_dtoa_r+0x4b4>
 80087e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e8:	9d01      	ldr	r5, [sp, #4]
 80087ea:	43db      	mvns	r3, r3
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	f04f 0800 	mov.w	r8, #0
 80087f2:	4631      	mov	r1, r6
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 ff57 	bl	80096a8 <_Bfree>
 80087fa:	2f00      	cmp	r7, #0
 80087fc:	f43f aea4 	beq.w	8008548 <_dtoa_r+0x6a0>
 8008800:	f1b8 0f00 	cmp.w	r8, #0
 8008804:	d005      	beq.n	8008812 <_dtoa_r+0x96a>
 8008806:	45b8      	cmp	r8, r7
 8008808:	d003      	beq.n	8008812 <_dtoa_r+0x96a>
 800880a:	4641      	mov	r1, r8
 800880c:	4620      	mov	r0, r4
 800880e:	f000 ff4b 	bl	80096a8 <_Bfree>
 8008812:	4639      	mov	r1, r7
 8008814:	4620      	mov	r0, r4
 8008816:	f000 ff47 	bl	80096a8 <_Bfree>
 800881a:	e695      	b.n	8008548 <_dtoa_r+0x6a0>
 800881c:	2600      	movs	r6, #0
 800881e:	4637      	mov	r7, r6
 8008820:	e7e1      	b.n	80087e6 <_dtoa_r+0x93e>
 8008822:	9700      	str	r7, [sp, #0]
 8008824:	4637      	mov	r7, r6
 8008826:	e599      	b.n	800835c <_dtoa_r+0x4b4>
 8008828:	40240000 	.word	0x40240000
 800882c:	9b08      	ldr	r3, [sp, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 80ca 	beq.w	80089c8 <_dtoa_r+0xb20>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	9302      	str	r3, [sp, #8]
 8008838:	2d00      	cmp	r5, #0
 800883a:	dd05      	ble.n	8008848 <_dtoa_r+0x9a0>
 800883c:	4639      	mov	r1, r7
 800883e:	462a      	mov	r2, r5
 8008840:	4620      	mov	r0, r4
 8008842:	f001 f94d 	bl	8009ae0 <__lshift>
 8008846:	4607      	mov	r7, r0
 8008848:	f1b8 0f00 	cmp.w	r8, #0
 800884c:	d05b      	beq.n	8008906 <_dtoa_r+0xa5e>
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 fee9 	bl	8009628 <_Balloc>
 8008856:	4605      	mov	r5, r0
 8008858:	b928      	cbnz	r0, 8008866 <_dtoa_r+0x9be>
 800885a:	4b87      	ldr	r3, [pc, #540]	; (8008a78 <_dtoa_r+0xbd0>)
 800885c:	4602      	mov	r2, r0
 800885e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008862:	f7ff bb3b 	b.w	8007edc <_dtoa_r+0x34>
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	3202      	adds	r2, #2
 800886a:	0092      	lsls	r2, r2, #2
 800886c:	f107 010c 	add.w	r1, r7, #12
 8008870:	300c      	adds	r0, #12
 8008872:	f000 feb1 	bl	80095d8 <memcpy>
 8008876:	2201      	movs	r2, #1
 8008878:	4629      	mov	r1, r5
 800887a:	4620      	mov	r0, r4
 800887c:	f001 f930 	bl	8009ae0 <__lshift>
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	f103 0901 	add.w	r9, r3, #1
 8008886:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800888a:	4413      	add	r3, r2
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	f00a 0301 	and.w	r3, sl, #1
 8008892:	46b8      	mov	r8, r7
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	4607      	mov	r7, r0
 8008898:	4631      	mov	r1, r6
 800889a:	ee18 0a10 	vmov	r0, s16
 800889e:	f7ff fa77 	bl	8007d90 <quorem>
 80088a2:	4641      	mov	r1, r8
 80088a4:	9002      	str	r0, [sp, #8]
 80088a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088aa:	ee18 0a10 	vmov	r0, s16
 80088ae:	f001 f987 	bl	8009bc0 <__mcmp>
 80088b2:	463a      	mov	r2, r7
 80088b4:	9003      	str	r0, [sp, #12]
 80088b6:	4631      	mov	r1, r6
 80088b8:	4620      	mov	r0, r4
 80088ba:	f001 f99d 	bl	8009bf8 <__mdiff>
 80088be:	68c2      	ldr	r2, [r0, #12]
 80088c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80088c4:	4605      	mov	r5, r0
 80088c6:	bb02      	cbnz	r2, 800890a <_dtoa_r+0xa62>
 80088c8:	4601      	mov	r1, r0
 80088ca:	ee18 0a10 	vmov	r0, s16
 80088ce:	f001 f977 	bl	8009bc0 <__mcmp>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4629      	mov	r1, r5
 80088d6:	4620      	mov	r0, r4
 80088d8:	9207      	str	r2, [sp, #28]
 80088da:	f000 fee5 	bl	80096a8 <_Bfree>
 80088de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80088e2:	ea43 0102 	orr.w	r1, r3, r2
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	430b      	orrs	r3, r1
 80088ea:	464d      	mov	r5, r9
 80088ec:	d10f      	bne.n	800890e <_dtoa_r+0xa66>
 80088ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088f2:	d02a      	beq.n	800894a <_dtoa_r+0xaa2>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd02      	ble.n	8008900 <_dtoa_r+0xa58>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008900:	f88b a000 	strb.w	sl, [fp]
 8008904:	e775      	b.n	80087f2 <_dtoa_r+0x94a>
 8008906:	4638      	mov	r0, r7
 8008908:	e7ba      	b.n	8008880 <_dtoa_r+0x9d8>
 800890a:	2201      	movs	r2, #1
 800890c:	e7e2      	b.n	80088d4 <_dtoa_r+0xa2c>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	db04      	blt.n	800891e <_dtoa_r+0xa76>
 8008914:	9906      	ldr	r1, [sp, #24]
 8008916:	430b      	orrs	r3, r1
 8008918:	9904      	ldr	r1, [sp, #16]
 800891a:	430b      	orrs	r3, r1
 800891c:	d122      	bne.n	8008964 <_dtoa_r+0xabc>
 800891e:	2a00      	cmp	r2, #0
 8008920:	ddee      	ble.n	8008900 <_dtoa_r+0xa58>
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	2201      	movs	r2, #1
 8008928:	4620      	mov	r0, r4
 800892a:	f001 f8d9 	bl	8009ae0 <__lshift>
 800892e:	4631      	mov	r1, r6
 8008930:	ee08 0a10 	vmov	s16, r0
 8008934:	f001 f944 	bl	8009bc0 <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	dc03      	bgt.n	8008944 <_dtoa_r+0xa9c>
 800893c:	d1e0      	bne.n	8008900 <_dtoa_r+0xa58>
 800893e:	f01a 0f01 	tst.w	sl, #1
 8008942:	d0dd      	beq.n	8008900 <_dtoa_r+0xa58>
 8008944:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008948:	d1d7      	bne.n	80088fa <_dtoa_r+0xa52>
 800894a:	2339      	movs	r3, #57	; 0x39
 800894c:	f88b 3000 	strb.w	r3, [fp]
 8008950:	462b      	mov	r3, r5
 8008952:	461d      	mov	r5, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800895a:	2a39      	cmp	r2, #57	; 0x39
 800895c:	d071      	beq.n	8008a42 <_dtoa_r+0xb9a>
 800895e:	3201      	adds	r2, #1
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	e746      	b.n	80087f2 <_dtoa_r+0x94a>
 8008964:	2a00      	cmp	r2, #0
 8008966:	dd07      	ble.n	8008978 <_dtoa_r+0xad0>
 8008968:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800896c:	d0ed      	beq.n	800894a <_dtoa_r+0xaa2>
 800896e:	f10a 0301 	add.w	r3, sl, #1
 8008972:	f88b 3000 	strb.w	r3, [fp]
 8008976:	e73c      	b.n	80087f2 <_dtoa_r+0x94a>
 8008978:	9b05      	ldr	r3, [sp, #20]
 800897a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800897e:	4599      	cmp	r9, r3
 8008980:	d047      	beq.n	8008a12 <_dtoa_r+0xb6a>
 8008982:	ee18 1a10 	vmov	r1, s16
 8008986:	2300      	movs	r3, #0
 8008988:	220a      	movs	r2, #10
 800898a:	4620      	mov	r0, r4
 800898c:	f000 feae 	bl	80096ec <__multadd>
 8008990:	45b8      	cmp	r8, r7
 8008992:	ee08 0a10 	vmov	s16, r0
 8008996:	f04f 0300 	mov.w	r3, #0
 800899a:	f04f 020a 	mov.w	r2, #10
 800899e:	4641      	mov	r1, r8
 80089a0:	4620      	mov	r0, r4
 80089a2:	d106      	bne.n	80089b2 <_dtoa_r+0xb0a>
 80089a4:	f000 fea2 	bl	80096ec <__multadd>
 80089a8:	4680      	mov	r8, r0
 80089aa:	4607      	mov	r7, r0
 80089ac:	f109 0901 	add.w	r9, r9, #1
 80089b0:	e772      	b.n	8008898 <_dtoa_r+0x9f0>
 80089b2:	f000 fe9b 	bl	80096ec <__multadd>
 80089b6:	4639      	mov	r1, r7
 80089b8:	4680      	mov	r8, r0
 80089ba:	2300      	movs	r3, #0
 80089bc:	220a      	movs	r2, #10
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 fe94 	bl	80096ec <__multadd>
 80089c4:	4607      	mov	r7, r0
 80089c6:	e7f1      	b.n	80089ac <_dtoa_r+0xb04>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	9302      	str	r3, [sp, #8]
 80089cc:	9d01      	ldr	r5, [sp, #4]
 80089ce:	ee18 0a10 	vmov	r0, s16
 80089d2:	4631      	mov	r1, r6
 80089d4:	f7ff f9dc 	bl	8007d90 <quorem>
 80089d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089dc:	9b01      	ldr	r3, [sp, #4]
 80089de:	f805 ab01 	strb.w	sl, [r5], #1
 80089e2:	1aea      	subs	r2, r5, r3
 80089e4:	9b02      	ldr	r3, [sp, #8]
 80089e6:	4293      	cmp	r3, r2
 80089e8:	dd09      	ble.n	80089fe <_dtoa_r+0xb56>
 80089ea:	ee18 1a10 	vmov	r1, s16
 80089ee:	2300      	movs	r3, #0
 80089f0:	220a      	movs	r2, #10
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 fe7a 	bl	80096ec <__multadd>
 80089f8:	ee08 0a10 	vmov	s16, r0
 80089fc:	e7e7      	b.n	80089ce <_dtoa_r+0xb26>
 80089fe:	9b02      	ldr	r3, [sp, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	bfc8      	it	gt
 8008a04:	461d      	movgt	r5, r3
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	bfd8      	it	le
 8008a0a:	2501      	movle	r5, #1
 8008a0c:	441d      	add	r5, r3
 8008a0e:	f04f 0800 	mov.w	r8, #0
 8008a12:	ee18 1a10 	vmov	r1, s16
 8008a16:	2201      	movs	r2, #1
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f001 f861 	bl	8009ae0 <__lshift>
 8008a1e:	4631      	mov	r1, r6
 8008a20:	ee08 0a10 	vmov	s16, r0
 8008a24:	f001 f8cc 	bl	8009bc0 <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	dc91      	bgt.n	8008950 <_dtoa_r+0xaa8>
 8008a2c:	d102      	bne.n	8008a34 <_dtoa_r+0xb8c>
 8008a2e:	f01a 0f01 	tst.w	sl, #1
 8008a32:	d18d      	bne.n	8008950 <_dtoa_r+0xaa8>
 8008a34:	462b      	mov	r3, r5
 8008a36:	461d      	mov	r5, r3
 8008a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a3c:	2a30      	cmp	r2, #48	; 0x30
 8008a3e:	d0fa      	beq.n	8008a36 <_dtoa_r+0xb8e>
 8008a40:	e6d7      	b.n	80087f2 <_dtoa_r+0x94a>
 8008a42:	9a01      	ldr	r2, [sp, #4]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d184      	bne.n	8008952 <_dtoa_r+0xaaa>
 8008a48:	9b00      	ldr	r3, [sp, #0]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	2331      	movs	r3, #49	; 0x31
 8008a50:	7013      	strb	r3, [r2, #0]
 8008a52:	e6ce      	b.n	80087f2 <_dtoa_r+0x94a>
 8008a54:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <_dtoa_r+0xbd4>)
 8008a56:	f7ff ba95 	b.w	8007f84 <_dtoa_r+0xdc>
 8008a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f47f aa6e 	bne.w	8007f3e <_dtoa_r+0x96>
 8008a62:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <_dtoa_r+0xbd8>)
 8008a64:	f7ff ba8e 	b.w	8007f84 <_dtoa_r+0xdc>
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dcae      	bgt.n	80089cc <_dtoa_r+0xb24>
 8008a6e:	9b06      	ldr	r3, [sp, #24]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	f73f aea8 	bgt.w	80087c6 <_dtoa_r+0x91e>
 8008a76:	e7a9      	b.n	80089cc <_dtoa_r+0xb24>
 8008a78:	0800aae0 	.word	0x0800aae0
 8008a7c:	0800a8e5 	.word	0x0800a8e5
 8008a80:	0800aa61 	.word	0x0800aa61

08008a84 <__sflush_r>:
 8008a84:	898a      	ldrh	r2, [r1, #12]
 8008a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	0710      	lsls	r0, r2, #28
 8008a8e:	460c      	mov	r4, r1
 8008a90:	d458      	bmi.n	8008b44 <__sflush_r+0xc0>
 8008a92:	684b      	ldr	r3, [r1, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc05      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dc02      	bgt.n	8008aa4 <__sflush_r+0x20>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	d0f9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab0:	682f      	ldr	r7, [r5, #0]
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	d032      	beq.n	8008b1c <__sflush_r+0x98>
 8008ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	075a      	lsls	r2, r3, #29
 8008abc:	d505      	bpl.n	8008aca <__sflush_r+0x46>
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	1ac0      	subs	r0, r0, r3
 8008ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ac4:	b10b      	cbz	r3, 8008aca <__sflush_r+0x46>
 8008ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ac8:	1ac0      	subs	r0, r0, r3
 8008aca:	2300      	movs	r3, #0
 8008acc:	4602      	mov	r2, r0
 8008ace:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad0:	6a21      	ldr	r1, [r4, #32]
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	47b0      	blx	r6
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	d106      	bne.n	8008aea <__sflush_r+0x66>
 8008adc:	6829      	ldr	r1, [r5, #0]
 8008ade:	291d      	cmp	r1, #29
 8008ae0:	d82c      	bhi.n	8008b3c <__sflush_r+0xb8>
 8008ae2:	4a2a      	ldr	r2, [pc, #168]	; (8008b8c <__sflush_r+0x108>)
 8008ae4:	40ca      	lsrs	r2, r1
 8008ae6:	07d6      	lsls	r6, r2, #31
 8008ae8:	d528      	bpl.n	8008b3c <__sflush_r+0xb8>
 8008aea:	2200      	movs	r2, #0
 8008aec:	6062      	str	r2, [r4, #4]
 8008aee:	04d9      	lsls	r1, r3, #19
 8008af0:	6922      	ldr	r2, [r4, #16]
 8008af2:	6022      	str	r2, [r4, #0]
 8008af4:	d504      	bpl.n	8008b00 <__sflush_r+0x7c>
 8008af6:	1c42      	adds	r2, r0, #1
 8008af8:	d101      	bne.n	8008afe <__sflush_r+0x7a>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	b903      	cbnz	r3, 8008b00 <__sflush_r+0x7c>
 8008afe:	6560      	str	r0, [r4, #84]	; 0x54
 8008b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b02:	602f      	str	r7, [r5, #0]
 8008b04:	2900      	cmp	r1, #0
 8008b06:	d0ca      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d002      	beq.n	8008b16 <__sflush_r+0x92>
 8008b10:	4628      	mov	r0, r5
 8008b12:	f001 fa61 	bl	8009fd8 <_free_r>
 8008b16:	2000      	movs	r0, #0
 8008b18:	6360      	str	r0, [r4, #52]	; 0x34
 8008b1a:	e7c1      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b1c:	6a21      	ldr	r1, [r4, #32]
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b0      	blx	r6
 8008b24:	1c41      	adds	r1, r0, #1
 8008b26:	d1c7      	bne.n	8008ab8 <__sflush_r+0x34>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0c4      	beq.n	8008ab8 <__sflush_r+0x34>
 8008b2e:	2b1d      	cmp	r3, #29
 8008b30:	d001      	beq.n	8008b36 <__sflush_r+0xb2>
 8008b32:	2b16      	cmp	r3, #22
 8008b34:	d101      	bne.n	8008b3a <__sflush_r+0xb6>
 8008b36:	602f      	str	r7, [r5, #0]
 8008b38:	e7b1      	b.n	8008a9e <__sflush_r+0x1a>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	e7ad      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b44:	690f      	ldr	r7, [r1, #16]
 8008b46:	2f00      	cmp	r7, #0
 8008b48:	d0a9      	beq.n	8008a9e <__sflush_r+0x1a>
 8008b4a:	0793      	lsls	r3, r2, #30
 8008b4c:	680e      	ldr	r6, [r1, #0]
 8008b4e:	bf08      	it	eq
 8008b50:	694b      	ldreq	r3, [r1, #20]
 8008b52:	600f      	str	r7, [r1, #0]
 8008b54:	bf18      	it	ne
 8008b56:	2300      	movne	r3, #0
 8008b58:	eba6 0807 	sub.w	r8, r6, r7
 8008b5c:	608b      	str	r3, [r1, #8]
 8008b5e:	f1b8 0f00 	cmp.w	r8, #0
 8008b62:	dd9c      	ble.n	8008a9e <__sflush_r+0x1a>
 8008b64:	6a21      	ldr	r1, [r4, #32]
 8008b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b68:	4643      	mov	r3, r8
 8008b6a:	463a      	mov	r2, r7
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	2800      	cmp	r0, #0
 8008b72:	dc06      	bgt.n	8008b82 <__sflush_r+0xfe>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	e78e      	b.n	8008aa0 <__sflush_r+0x1c>
 8008b82:	4407      	add	r7, r0
 8008b84:	eba8 0800 	sub.w	r8, r8, r0
 8008b88:	e7e9      	b.n	8008b5e <__sflush_r+0xda>
 8008b8a:	bf00      	nop
 8008b8c:	20400001 	.word	0x20400001

08008b90 <_fflush_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	690b      	ldr	r3, [r1, #16]
 8008b94:	4605      	mov	r5, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	b913      	cbnz	r3, 8008ba0 <_fflush_r+0x10>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	b118      	cbz	r0, 8008baa <_fflush_r+0x1a>
 8008ba2:	6983      	ldr	r3, [r0, #24]
 8008ba4:	b90b      	cbnz	r3, 8008baa <_fflush_r+0x1a>
 8008ba6:	f000 f887 	bl	8008cb8 <__sinit>
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <_fflush_r+0x6c>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	d11b      	bne.n	8008be8 <_fflush_r+0x58>
 8008bb0:	686c      	ldr	r4, [r5, #4]
 8008bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0ef      	beq.n	8008b9a <_fflush_r+0xa>
 8008bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bbc:	07d0      	lsls	r0, r2, #31
 8008bbe:	d404      	bmi.n	8008bca <_fflush_r+0x3a>
 8008bc0:	0599      	lsls	r1, r3, #22
 8008bc2:	d402      	bmi.n	8008bca <_fflush_r+0x3a>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc6:	f7fd f8fe 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 8008bca:	4628      	mov	r0, r5
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f7ff ff59 	bl	8008a84 <__sflush_r>
 8008bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd4:	07da      	lsls	r2, r3, #31
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	d4e0      	bmi.n	8008b9c <_fflush_r+0xc>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	059b      	lsls	r3, r3, #22
 8008bde:	d4dd      	bmi.n	8008b9c <_fflush_r+0xc>
 8008be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be2:	f7fd f8f1 	bl	8005dc8 <__retarget_lock_release_recursive>
 8008be6:	e7d9      	b.n	8008b9c <_fflush_r+0xc>
 8008be8:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <_fflush_r+0x70>)
 8008bea:	429c      	cmp	r4, r3
 8008bec:	d101      	bne.n	8008bf2 <_fflush_r+0x62>
 8008bee:	68ac      	ldr	r4, [r5, #8]
 8008bf0:	e7df      	b.n	8008bb2 <_fflush_r+0x22>
 8008bf2:	4b04      	ldr	r3, [pc, #16]	; (8008c04 <_fflush_r+0x74>)
 8008bf4:	429c      	cmp	r4, r3
 8008bf6:	bf08      	it	eq
 8008bf8:	68ec      	ldreq	r4, [r5, #12]
 8008bfa:	e7da      	b.n	8008bb2 <_fflush_r+0x22>
 8008bfc:	0800ab14 	.word	0x0800ab14
 8008c00:	0800ab34 	.word	0x0800ab34
 8008c04:	0800aaf4 	.word	0x0800aaf4

08008c08 <std>:
 8008c08:	2300      	movs	r3, #0
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c16:	6083      	str	r3, [r0, #8]
 8008c18:	8181      	strh	r1, [r0, #12]
 8008c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c1c:	81c2      	strh	r2, [r0, #14]
 8008c1e:	6183      	str	r3, [r0, #24]
 8008c20:	4619      	mov	r1, r3
 8008c22:	2208      	movs	r2, #8
 8008c24:	305c      	adds	r0, #92	; 0x5c
 8008c26:	f7fd f8d0 	bl	8005dca <memset>
 8008c2a:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <std+0x38>)
 8008c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <std+0x3c>)
 8008c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <std+0x40>)
 8008c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c36:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <std+0x44>)
 8008c38:	6224      	str	r4, [r4, #32]
 8008c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	bf00      	nop
 8008c40:	0800a4e1 	.word	0x0800a4e1
 8008c44:	0800a503 	.word	0x0800a503
 8008c48:	0800a53b 	.word	0x0800a53b
 8008c4c:	0800a55f 	.word	0x0800a55f

08008c50 <_cleanup_r>:
 8008c50:	4901      	ldr	r1, [pc, #4]	; (8008c58 <_cleanup_r+0x8>)
 8008c52:	f000 b8af 	b.w	8008db4 <_fwalk_reent>
 8008c56:	bf00      	nop
 8008c58:	08008b91 	.word	0x08008b91

08008c5c <__sfmoreglue>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	2268      	movs	r2, #104	; 0x68
 8008c60:	1e4d      	subs	r5, r1, #1
 8008c62:	4355      	muls	r5, r2
 8008c64:	460e      	mov	r6, r1
 8008c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c6a:	f001 fa21 	bl	800a0b0 <_malloc_r>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	b140      	cbz	r0, 8008c84 <__sfmoreglue+0x28>
 8008c72:	2100      	movs	r1, #0
 8008c74:	e9c0 1600 	strd	r1, r6, [r0]
 8008c78:	300c      	adds	r0, #12
 8008c7a:	60a0      	str	r0, [r4, #8]
 8008c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c80:	f7fd f8a3 	bl	8005dca <memset>
 8008c84:	4620      	mov	r0, r4
 8008c86:	bd70      	pop	{r4, r5, r6, pc}

08008c88 <__sfp_lock_acquire>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__sfp_lock_acquire+0x8>)
 8008c8a:	f7fd b89c 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 8008c8e:	bf00      	nop
 8008c90:	2000053d 	.word	0x2000053d

08008c94 <__sfp_lock_release>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__sfp_lock_release+0x8>)
 8008c96:	f7fd b897 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	2000053d 	.word	0x2000053d

08008ca0 <__sinit_lock_acquire>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__sinit_lock_acquire+0x8>)
 8008ca2:	f7fd b890 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	2000053e 	.word	0x2000053e

08008cac <__sinit_lock_release>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__sinit_lock_release+0x8>)
 8008cae:	f7fd b88b 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	2000053e 	.word	0x2000053e

08008cb8 <__sinit>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fff0 	bl	8008ca0 <__sinit_lock_acquire>
 8008cc0:	69a3      	ldr	r3, [r4, #24]
 8008cc2:	b11b      	cbz	r3, 8008ccc <__sinit+0x14>
 8008cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc8:	f7ff bff0 	b.w	8008cac <__sinit_lock_release>
 8008ccc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cd0:	6523      	str	r3, [r4, #80]	; 0x50
 8008cd2:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <__sinit+0x68>)
 8008cd4:	4a13      	ldr	r2, [pc, #76]	; (8008d24 <__sinit+0x6c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cda:	42a3      	cmp	r3, r4
 8008cdc:	bf04      	itt	eq
 8008cde:	2301      	moveq	r3, #1
 8008ce0:	61a3      	streq	r3, [r4, #24]
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f820 	bl	8008d28 <__sfp>
 8008ce8:	6060      	str	r0, [r4, #4]
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 f81c 	bl	8008d28 <__sfp>
 8008cf0:	60a0      	str	r0, [r4, #8]
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 f818 	bl	8008d28 <__sfp>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	60e0      	str	r0, [r4, #12]
 8008cfc:	2104      	movs	r1, #4
 8008cfe:	6860      	ldr	r0, [r4, #4]
 8008d00:	f7ff ff82 	bl	8008c08 <std>
 8008d04:	68a0      	ldr	r0, [r4, #8]
 8008d06:	2201      	movs	r2, #1
 8008d08:	2109      	movs	r1, #9
 8008d0a:	f7ff ff7d 	bl	8008c08 <std>
 8008d0e:	68e0      	ldr	r0, [r4, #12]
 8008d10:	2202      	movs	r2, #2
 8008d12:	2112      	movs	r1, #18
 8008d14:	f7ff ff78 	bl	8008c08 <std>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	61a3      	str	r3, [r4, #24]
 8008d1c:	e7d2      	b.n	8008cc4 <__sinit+0xc>
 8008d1e:	bf00      	nop
 8008d20:	0800a8c0 	.word	0x0800a8c0
 8008d24:	08008c51 	.word	0x08008c51

08008d28 <__sfp>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	f7ff ffac 	bl	8008c88 <__sfp_lock_acquire>
 8008d30:	4b1e      	ldr	r3, [pc, #120]	; (8008dac <__sfp+0x84>)
 8008d32:	681e      	ldr	r6, [r3, #0]
 8008d34:	69b3      	ldr	r3, [r6, #24]
 8008d36:	b913      	cbnz	r3, 8008d3e <__sfp+0x16>
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff ffbd 	bl	8008cb8 <__sinit>
 8008d3e:	3648      	adds	r6, #72	; 0x48
 8008d40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	d503      	bpl.n	8008d50 <__sfp+0x28>
 8008d48:	6833      	ldr	r3, [r6, #0]
 8008d4a:	b30b      	cbz	r3, 8008d90 <__sfp+0x68>
 8008d4c:	6836      	ldr	r6, [r6, #0]
 8008d4e:	e7f7      	b.n	8008d40 <__sfp+0x18>
 8008d50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d54:	b9d5      	cbnz	r5, 8008d8c <__sfp+0x64>
 8008d56:	4b16      	ldr	r3, [pc, #88]	; (8008db0 <__sfp+0x88>)
 8008d58:	60e3      	str	r3, [r4, #12]
 8008d5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d5e:	6665      	str	r5, [r4, #100]	; 0x64
 8008d60:	f7fd f830 	bl	8005dc4 <__retarget_lock_init_recursive>
 8008d64:	f7ff ff96 	bl	8008c94 <__sfp_lock_release>
 8008d68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d70:	6025      	str	r5, [r4, #0]
 8008d72:	61a5      	str	r5, [r4, #24]
 8008d74:	2208      	movs	r2, #8
 8008d76:	4629      	mov	r1, r5
 8008d78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d7c:	f7fd f825 	bl	8005dca <memset>
 8008d80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d88:	4620      	mov	r0, r4
 8008d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d8c:	3468      	adds	r4, #104	; 0x68
 8008d8e:	e7d9      	b.n	8008d44 <__sfp+0x1c>
 8008d90:	2104      	movs	r1, #4
 8008d92:	4638      	mov	r0, r7
 8008d94:	f7ff ff62 	bl	8008c5c <__sfmoreglue>
 8008d98:	4604      	mov	r4, r0
 8008d9a:	6030      	str	r0, [r6, #0]
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1d5      	bne.n	8008d4c <__sfp+0x24>
 8008da0:	f7ff ff78 	bl	8008c94 <__sfp_lock_release>
 8008da4:	230c      	movs	r3, #12
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	e7ee      	b.n	8008d88 <__sfp+0x60>
 8008daa:	bf00      	nop
 8008dac:	0800a8c0 	.word	0x0800a8c0
 8008db0:	ffff0001 	.word	0xffff0001

08008db4 <_fwalk_reent>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	4606      	mov	r6, r0
 8008dba:	4688      	mov	r8, r1
 8008dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dc0:	2700      	movs	r7, #0
 8008dc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dc6:	f1b9 0901 	subs.w	r9, r9, #1
 8008dca:	d505      	bpl.n	8008dd8 <_fwalk_reent+0x24>
 8008dcc:	6824      	ldr	r4, [r4, #0]
 8008dce:	2c00      	cmp	r4, #0
 8008dd0:	d1f7      	bne.n	8008dc2 <_fwalk_reent+0xe>
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd8:	89ab      	ldrh	r3, [r5, #12]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d907      	bls.n	8008dee <_fwalk_reent+0x3a>
 8008dde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008de2:	3301      	adds	r3, #1
 8008de4:	d003      	beq.n	8008dee <_fwalk_reent+0x3a>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4630      	mov	r0, r6
 8008dea:	47c0      	blx	r8
 8008dec:	4307      	orrs	r7, r0
 8008dee:	3568      	adds	r5, #104	; 0x68
 8008df0:	e7e9      	b.n	8008dc6 <_fwalk_reent+0x12>

08008df2 <rshift>:
 8008df2:	6903      	ldr	r3, [r0, #16]
 8008df4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e00:	f100 0414 	add.w	r4, r0, #20
 8008e04:	dd45      	ble.n	8008e92 <rshift+0xa0>
 8008e06:	f011 011f 	ands.w	r1, r1, #31
 8008e0a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e0e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e12:	d10c      	bne.n	8008e2e <rshift+0x3c>
 8008e14:	f100 0710 	add.w	r7, r0, #16
 8008e18:	4629      	mov	r1, r5
 8008e1a:	42b1      	cmp	r1, r6
 8008e1c:	d334      	bcc.n	8008e88 <rshift+0x96>
 8008e1e:	1a9b      	subs	r3, r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	1eea      	subs	r2, r5, #3
 8008e24:	4296      	cmp	r6, r2
 8008e26:	bf38      	it	cc
 8008e28:	2300      	movcc	r3, #0
 8008e2a:	4423      	add	r3, r4
 8008e2c:	e015      	b.n	8008e5a <rshift+0x68>
 8008e2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e32:	f1c1 0820 	rsb	r8, r1, #32
 8008e36:	40cf      	lsrs	r7, r1
 8008e38:	f105 0e04 	add.w	lr, r5, #4
 8008e3c:	46a1      	mov	r9, r4
 8008e3e:	4576      	cmp	r6, lr
 8008e40:	46f4      	mov	ip, lr
 8008e42:	d815      	bhi.n	8008e70 <rshift+0x7e>
 8008e44:	1a9a      	subs	r2, r3, r2
 8008e46:	0092      	lsls	r2, r2, #2
 8008e48:	3a04      	subs	r2, #4
 8008e4a:	3501      	adds	r5, #1
 8008e4c:	42ae      	cmp	r6, r5
 8008e4e:	bf38      	it	cc
 8008e50:	2200      	movcc	r2, #0
 8008e52:	18a3      	adds	r3, r4, r2
 8008e54:	50a7      	str	r7, [r4, r2]
 8008e56:	b107      	cbz	r7, 8008e5a <rshift+0x68>
 8008e58:	3304      	adds	r3, #4
 8008e5a:	1b1a      	subs	r2, r3, r4
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e62:	bf08      	it	eq
 8008e64:	2300      	moveq	r3, #0
 8008e66:	6102      	str	r2, [r0, #16]
 8008e68:	bf08      	it	eq
 8008e6a:	6143      	streq	r3, [r0, #20]
 8008e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e70:	f8dc c000 	ldr.w	ip, [ip]
 8008e74:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e78:	ea4c 0707 	orr.w	r7, ip, r7
 8008e7c:	f849 7b04 	str.w	r7, [r9], #4
 8008e80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e84:	40cf      	lsrs	r7, r1
 8008e86:	e7da      	b.n	8008e3e <rshift+0x4c>
 8008e88:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e8c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e90:	e7c3      	b.n	8008e1a <rshift+0x28>
 8008e92:	4623      	mov	r3, r4
 8008e94:	e7e1      	b.n	8008e5a <rshift+0x68>

08008e96 <__hexdig_fun>:
 8008e96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e9a:	2b09      	cmp	r3, #9
 8008e9c:	d802      	bhi.n	8008ea4 <__hexdig_fun+0xe>
 8008e9e:	3820      	subs	r0, #32
 8008ea0:	b2c0      	uxtb	r0, r0
 8008ea2:	4770      	bx	lr
 8008ea4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	d801      	bhi.n	8008eb0 <__hexdig_fun+0x1a>
 8008eac:	3847      	subs	r0, #71	; 0x47
 8008eae:	e7f7      	b.n	8008ea0 <__hexdig_fun+0xa>
 8008eb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d801      	bhi.n	8008ebc <__hexdig_fun+0x26>
 8008eb8:	3827      	subs	r0, #39	; 0x27
 8008eba:	e7f1      	b.n	8008ea0 <__hexdig_fun+0xa>
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	4770      	bx	lr

08008ec0 <__gethex>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	ed2d 8b02 	vpush	{d8}
 8008ec8:	b089      	sub	sp, #36	; 0x24
 8008eca:	ee08 0a10 	vmov	s16, r0
 8008ece:	9304      	str	r3, [sp, #16]
 8008ed0:	4bb4      	ldr	r3, [pc, #720]	; (80091a4 <__gethex+0x2e4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	468b      	mov	fp, r1
 8008eda:	4690      	mov	r8, r2
 8008edc:	f7f7 f988 	bl	80001f0 <strlen>
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	f8db 2000 	ldr.w	r2, [fp]
 8008ee6:	4403      	add	r3, r0
 8008ee8:	4682      	mov	sl, r0
 8008eea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008eee:	9305      	str	r3, [sp, #20]
 8008ef0:	1c93      	adds	r3, r2, #2
 8008ef2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ef6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008efa:	32fe      	adds	r2, #254	; 0xfe
 8008efc:	18d1      	adds	r1, r2, r3
 8008efe:	461f      	mov	r7, r3
 8008f00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f04:	9100      	str	r1, [sp, #0]
 8008f06:	2830      	cmp	r0, #48	; 0x30
 8008f08:	d0f8      	beq.n	8008efc <__gethex+0x3c>
 8008f0a:	f7ff ffc4 	bl	8008e96 <__hexdig_fun>
 8008f0e:	4604      	mov	r4, r0
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d13a      	bne.n	8008f8a <__gethex+0xca>
 8008f14:	9901      	ldr	r1, [sp, #4]
 8008f16:	4652      	mov	r2, sl
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f001 fb24 	bl	800a566 <strncmp>
 8008f1e:	4605      	mov	r5, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d168      	bne.n	8008ff6 <__gethex+0x136>
 8008f24:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f28:	eb07 060a 	add.w	r6, r7, sl
 8008f2c:	f7ff ffb3 	bl	8008e96 <__hexdig_fun>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d062      	beq.n	8008ffa <__gethex+0x13a>
 8008f34:	4633      	mov	r3, r6
 8008f36:	7818      	ldrb	r0, [r3, #0]
 8008f38:	2830      	cmp	r0, #48	; 0x30
 8008f3a:	461f      	mov	r7, r3
 8008f3c:	f103 0301 	add.w	r3, r3, #1
 8008f40:	d0f9      	beq.n	8008f36 <__gethex+0x76>
 8008f42:	f7ff ffa8 	bl	8008e96 <__hexdig_fun>
 8008f46:	2301      	movs	r3, #1
 8008f48:	fab0 f480 	clz	r4, r0
 8008f4c:	0964      	lsrs	r4, r4, #5
 8008f4e:	4635      	mov	r5, r6
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	463a      	mov	r2, r7
 8008f54:	4616      	mov	r6, r2
 8008f56:	3201      	adds	r2, #1
 8008f58:	7830      	ldrb	r0, [r6, #0]
 8008f5a:	f7ff ff9c 	bl	8008e96 <__hexdig_fun>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d1f8      	bne.n	8008f54 <__gethex+0x94>
 8008f62:	9901      	ldr	r1, [sp, #4]
 8008f64:	4652      	mov	r2, sl
 8008f66:	4630      	mov	r0, r6
 8008f68:	f001 fafd 	bl	800a566 <strncmp>
 8008f6c:	b980      	cbnz	r0, 8008f90 <__gethex+0xd0>
 8008f6e:	b94d      	cbnz	r5, 8008f84 <__gethex+0xc4>
 8008f70:	eb06 050a 	add.w	r5, r6, sl
 8008f74:	462a      	mov	r2, r5
 8008f76:	4616      	mov	r6, r2
 8008f78:	3201      	adds	r2, #1
 8008f7a:	7830      	ldrb	r0, [r6, #0]
 8008f7c:	f7ff ff8b 	bl	8008e96 <__hexdig_fun>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d1f8      	bne.n	8008f76 <__gethex+0xb6>
 8008f84:	1bad      	subs	r5, r5, r6
 8008f86:	00ad      	lsls	r5, r5, #2
 8008f88:	e004      	b.n	8008f94 <__gethex+0xd4>
 8008f8a:	2400      	movs	r4, #0
 8008f8c:	4625      	mov	r5, r4
 8008f8e:	e7e0      	b.n	8008f52 <__gethex+0x92>
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	d1f7      	bne.n	8008f84 <__gethex+0xc4>
 8008f94:	7833      	ldrb	r3, [r6, #0]
 8008f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f9a:	2b50      	cmp	r3, #80	; 0x50
 8008f9c:	d13b      	bne.n	8009016 <__gethex+0x156>
 8008f9e:	7873      	ldrb	r3, [r6, #1]
 8008fa0:	2b2b      	cmp	r3, #43	; 0x2b
 8008fa2:	d02c      	beq.n	8008ffe <__gethex+0x13e>
 8008fa4:	2b2d      	cmp	r3, #45	; 0x2d
 8008fa6:	d02e      	beq.n	8009006 <__gethex+0x146>
 8008fa8:	1c71      	adds	r1, r6, #1
 8008faa:	f04f 0900 	mov.w	r9, #0
 8008fae:	7808      	ldrb	r0, [r1, #0]
 8008fb0:	f7ff ff71 	bl	8008e96 <__hexdig_fun>
 8008fb4:	1e43      	subs	r3, r0, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b18      	cmp	r3, #24
 8008fba:	d82c      	bhi.n	8009016 <__gethex+0x156>
 8008fbc:	f1a0 0210 	sub.w	r2, r0, #16
 8008fc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fc4:	f7ff ff67 	bl	8008e96 <__hexdig_fun>
 8008fc8:	1e43      	subs	r3, r0, #1
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b18      	cmp	r3, #24
 8008fce:	d91d      	bls.n	800900c <__gethex+0x14c>
 8008fd0:	f1b9 0f00 	cmp.w	r9, #0
 8008fd4:	d000      	beq.n	8008fd8 <__gethex+0x118>
 8008fd6:	4252      	negs	r2, r2
 8008fd8:	4415      	add	r5, r2
 8008fda:	f8cb 1000 	str.w	r1, [fp]
 8008fde:	b1e4      	cbz	r4, 800901a <__gethex+0x15a>
 8008fe0:	9b00      	ldr	r3, [sp, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bf14      	ite	ne
 8008fe6:	2700      	movne	r7, #0
 8008fe8:	2706      	moveq	r7, #6
 8008fea:	4638      	mov	r0, r7
 8008fec:	b009      	add	sp, #36	; 0x24
 8008fee:	ecbd 8b02 	vpop	{d8}
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff6:	463e      	mov	r6, r7
 8008ff8:	4625      	mov	r5, r4
 8008ffa:	2401      	movs	r4, #1
 8008ffc:	e7ca      	b.n	8008f94 <__gethex+0xd4>
 8008ffe:	f04f 0900 	mov.w	r9, #0
 8009002:	1cb1      	adds	r1, r6, #2
 8009004:	e7d3      	b.n	8008fae <__gethex+0xee>
 8009006:	f04f 0901 	mov.w	r9, #1
 800900a:	e7fa      	b.n	8009002 <__gethex+0x142>
 800900c:	230a      	movs	r3, #10
 800900e:	fb03 0202 	mla	r2, r3, r2, r0
 8009012:	3a10      	subs	r2, #16
 8009014:	e7d4      	b.n	8008fc0 <__gethex+0x100>
 8009016:	4631      	mov	r1, r6
 8009018:	e7df      	b.n	8008fda <__gethex+0x11a>
 800901a:	1bf3      	subs	r3, r6, r7
 800901c:	3b01      	subs	r3, #1
 800901e:	4621      	mov	r1, r4
 8009020:	2b07      	cmp	r3, #7
 8009022:	dc0b      	bgt.n	800903c <__gethex+0x17c>
 8009024:	ee18 0a10 	vmov	r0, s16
 8009028:	f000 fafe 	bl	8009628 <_Balloc>
 800902c:	4604      	mov	r4, r0
 800902e:	b940      	cbnz	r0, 8009042 <__gethex+0x182>
 8009030:	4b5d      	ldr	r3, [pc, #372]	; (80091a8 <__gethex+0x2e8>)
 8009032:	4602      	mov	r2, r0
 8009034:	21de      	movs	r1, #222	; 0xde
 8009036:	485d      	ldr	r0, [pc, #372]	; (80091ac <__gethex+0x2ec>)
 8009038:	f001 fac8 	bl	800a5cc <__assert_func>
 800903c:	3101      	adds	r1, #1
 800903e:	105b      	asrs	r3, r3, #1
 8009040:	e7ee      	b.n	8009020 <__gethex+0x160>
 8009042:	f100 0914 	add.w	r9, r0, #20
 8009046:	f04f 0b00 	mov.w	fp, #0
 800904a:	f1ca 0301 	rsb	r3, sl, #1
 800904e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009052:	f8cd b000 	str.w	fp, [sp]
 8009056:	9306      	str	r3, [sp, #24]
 8009058:	42b7      	cmp	r7, r6
 800905a:	d340      	bcc.n	80090de <__gethex+0x21e>
 800905c:	9802      	ldr	r0, [sp, #8]
 800905e:	9b00      	ldr	r3, [sp, #0]
 8009060:	f840 3b04 	str.w	r3, [r0], #4
 8009064:	eba0 0009 	sub.w	r0, r0, r9
 8009068:	1080      	asrs	r0, r0, #2
 800906a:	0146      	lsls	r6, r0, #5
 800906c:	6120      	str	r0, [r4, #16]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fbcc 	bl	800980c <__hi0bits>
 8009074:	1a30      	subs	r0, r6, r0
 8009076:	f8d8 6000 	ldr.w	r6, [r8]
 800907a:	42b0      	cmp	r0, r6
 800907c:	dd63      	ble.n	8009146 <__gethex+0x286>
 800907e:	1b87      	subs	r7, r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	4620      	mov	r0, r4
 8009084:	f000 ff70 	bl	8009f68 <__any_on>
 8009088:	4682      	mov	sl, r0
 800908a:	b1a8      	cbz	r0, 80090b8 <__gethex+0x1f8>
 800908c:	1e7b      	subs	r3, r7, #1
 800908e:	1159      	asrs	r1, r3, #5
 8009090:	f003 021f 	and.w	r2, r3, #31
 8009094:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009098:	f04f 0a01 	mov.w	sl, #1
 800909c:	fa0a f202 	lsl.w	r2, sl, r2
 80090a0:	420a      	tst	r2, r1
 80090a2:	d009      	beq.n	80090b8 <__gethex+0x1f8>
 80090a4:	4553      	cmp	r3, sl
 80090a6:	dd05      	ble.n	80090b4 <__gethex+0x1f4>
 80090a8:	1eb9      	subs	r1, r7, #2
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 ff5c 	bl	8009f68 <__any_on>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d145      	bne.n	8009140 <__gethex+0x280>
 80090b4:	f04f 0a02 	mov.w	sl, #2
 80090b8:	4639      	mov	r1, r7
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7ff fe99 	bl	8008df2 <rshift>
 80090c0:	443d      	add	r5, r7
 80090c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090c6:	42ab      	cmp	r3, r5
 80090c8:	da4c      	bge.n	8009164 <__gethex+0x2a4>
 80090ca:	ee18 0a10 	vmov	r0, s16
 80090ce:	4621      	mov	r1, r4
 80090d0:	f000 faea 	bl	80096a8 <_Bfree>
 80090d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090d6:	2300      	movs	r3, #0
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	27a3      	movs	r7, #163	; 0xa3
 80090dc:	e785      	b.n	8008fea <__gethex+0x12a>
 80090de:	1e73      	subs	r3, r6, #1
 80090e0:	9a05      	ldr	r2, [sp, #20]
 80090e2:	9303      	str	r3, [sp, #12]
 80090e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d019      	beq.n	8009120 <__gethex+0x260>
 80090ec:	f1bb 0f20 	cmp.w	fp, #32
 80090f0:	d107      	bne.n	8009102 <__gethex+0x242>
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	9a00      	ldr	r2, [sp, #0]
 80090f6:	f843 2b04 	str.w	r2, [r3], #4
 80090fa:	9302      	str	r3, [sp, #8]
 80090fc:	2300      	movs	r3, #0
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	469b      	mov	fp, r3
 8009102:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009106:	f7ff fec6 	bl	8008e96 <__hexdig_fun>
 800910a:	9b00      	ldr	r3, [sp, #0]
 800910c:	f000 000f 	and.w	r0, r0, #15
 8009110:	fa00 f00b 	lsl.w	r0, r0, fp
 8009114:	4303      	orrs	r3, r0
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	f10b 0b04 	add.w	fp, fp, #4
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	e00d      	b.n	800913c <__gethex+0x27c>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	9a06      	ldr	r2, [sp, #24]
 8009124:	4413      	add	r3, r2
 8009126:	42bb      	cmp	r3, r7
 8009128:	d3e0      	bcc.n	80090ec <__gethex+0x22c>
 800912a:	4618      	mov	r0, r3
 800912c:	9901      	ldr	r1, [sp, #4]
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	4652      	mov	r2, sl
 8009132:	f001 fa18 	bl	800a566 <strncmp>
 8009136:	9b07      	ldr	r3, [sp, #28]
 8009138:	2800      	cmp	r0, #0
 800913a:	d1d7      	bne.n	80090ec <__gethex+0x22c>
 800913c:	461e      	mov	r6, r3
 800913e:	e78b      	b.n	8009058 <__gethex+0x198>
 8009140:	f04f 0a03 	mov.w	sl, #3
 8009144:	e7b8      	b.n	80090b8 <__gethex+0x1f8>
 8009146:	da0a      	bge.n	800915e <__gethex+0x29e>
 8009148:	1a37      	subs	r7, r6, r0
 800914a:	4621      	mov	r1, r4
 800914c:	ee18 0a10 	vmov	r0, s16
 8009150:	463a      	mov	r2, r7
 8009152:	f000 fcc5 	bl	8009ae0 <__lshift>
 8009156:	1bed      	subs	r5, r5, r7
 8009158:	4604      	mov	r4, r0
 800915a:	f100 0914 	add.w	r9, r0, #20
 800915e:	f04f 0a00 	mov.w	sl, #0
 8009162:	e7ae      	b.n	80090c2 <__gethex+0x202>
 8009164:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009168:	42a8      	cmp	r0, r5
 800916a:	dd72      	ble.n	8009252 <__gethex+0x392>
 800916c:	1b45      	subs	r5, r0, r5
 800916e:	42ae      	cmp	r6, r5
 8009170:	dc36      	bgt.n	80091e0 <__gethex+0x320>
 8009172:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009176:	2b02      	cmp	r3, #2
 8009178:	d02a      	beq.n	80091d0 <__gethex+0x310>
 800917a:	2b03      	cmp	r3, #3
 800917c:	d02c      	beq.n	80091d8 <__gethex+0x318>
 800917e:	2b01      	cmp	r3, #1
 8009180:	d11c      	bne.n	80091bc <__gethex+0x2fc>
 8009182:	42ae      	cmp	r6, r5
 8009184:	d11a      	bne.n	80091bc <__gethex+0x2fc>
 8009186:	2e01      	cmp	r6, #1
 8009188:	d112      	bne.n	80091b0 <__gethex+0x2f0>
 800918a:	9a04      	ldr	r2, [sp, #16]
 800918c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	2301      	movs	r3, #1
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	f8c9 3000 	str.w	r3, [r9]
 800919a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800919c:	2762      	movs	r7, #98	; 0x62
 800919e:	601c      	str	r4, [r3, #0]
 80091a0:	e723      	b.n	8008fea <__gethex+0x12a>
 80091a2:	bf00      	nop
 80091a4:	0800abbc 	.word	0x0800abbc
 80091a8:	0800aae0 	.word	0x0800aae0
 80091ac:	0800ab54 	.word	0x0800ab54
 80091b0:	1e71      	subs	r1, r6, #1
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fed8 	bl	8009f68 <__any_on>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d1e6      	bne.n	800918a <__gethex+0x2ca>
 80091bc:	ee18 0a10 	vmov	r0, s16
 80091c0:	4621      	mov	r1, r4
 80091c2:	f000 fa71 	bl	80096a8 <_Bfree>
 80091c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091c8:	2300      	movs	r3, #0
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	2750      	movs	r7, #80	; 0x50
 80091ce:	e70c      	b.n	8008fea <__gethex+0x12a>
 80091d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1f2      	bne.n	80091bc <__gethex+0x2fc>
 80091d6:	e7d8      	b.n	800918a <__gethex+0x2ca>
 80091d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1d5      	bne.n	800918a <__gethex+0x2ca>
 80091de:	e7ed      	b.n	80091bc <__gethex+0x2fc>
 80091e0:	1e6f      	subs	r7, r5, #1
 80091e2:	f1ba 0f00 	cmp.w	sl, #0
 80091e6:	d131      	bne.n	800924c <__gethex+0x38c>
 80091e8:	b127      	cbz	r7, 80091f4 <__gethex+0x334>
 80091ea:	4639      	mov	r1, r7
 80091ec:	4620      	mov	r0, r4
 80091ee:	f000 febb 	bl	8009f68 <__any_on>
 80091f2:	4682      	mov	sl, r0
 80091f4:	117b      	asrs	r3, r7, #5
 80091f6:	2101      	movs	r1, #1
 80091f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80091fc:	f007 071f 	and.w	r7, r7, #31
 8009200:	fa01 f707 	lsl.w	r7, r1, r7
 8009204:	421f      	tst	r7, r3
 8009206:	4629      	mov	r1, r5
 8009208:	4620      	mov	r0, r4
 800920a:	bf18      	it	ne
 800920c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009210:	1b76      	subs	r6, r6, r5
 8009212:	f7ff fdee 	bl	8008df2 <rshift>
 8009216:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800921a:	2702      	movs	r7, #2
 800921c:	f1ba 0f00 	cmp.w	sl, #0
 8009220:	d048      	beq.n	80092b4 <__gethex+0x3f4>
 8009222:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d015      	beq.n	8009256 <__gethex+0x396>
 800922a:	2b03      	cmp	r3, #3
 800922c:	d017      	beq.n	800925e <__gethex+0x39e>
 800922e:	2b01      	cmp	r3, #1
 8009230:	d109      	bne.n	8009246 <__gethex+0x386>
 8009232:	f01a 0f02 	tst.w	sl, #2
 8009236:	d006      	beq.n	8009246 <__gethex+0x386>
 8009238:	f8d9 0000 	ldr.w	r0, [r9]
 800923c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009240:	f01a 0f01 	tst.w	sl, #1
 8009244:	d10e      	bne.n	8009264 <__gethex+0x3a4>
 8009246:	f047 0710 	orr.w	r7, r7, #16
 800924a:	e033      	b.n	80092b4 <__gethex+0x3f4>
 800924c:	f04f 0a01 	mov.w	sl, #1
 8009250:	e7d0      	b.n	80091f4 <__gethex+0x334>
 8009252:	2701      	movs	r7, #1
 8009254:	e7e2      	b.n	800921c <__gethex+0x35c>
 8009256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009258:	f1c3 0301 	rsb	r3, r3, #1
 800925c:	9315      	str	r3, [sp, #84]	; 0x54
 800925e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009260:	2b00      	cmp	r3, #0
 8009262:	d0f0      	beq.n	8009246 <__gethex+0x386>
 8009264:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009268:	f104 0314 	add.w	r3, r4, #20
 800926c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009270:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009274:	f04f 0c00 	mov.w	ip, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f853 2b04 	ldr.w	r2, [r3], #4
 800927e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009282:	d01c      	beq.n	80092be <__gethex+0x3fe>
 8009284:	3201      	adds	r2, #1
 8009286:	6002      	str	r2, [r0, #0]
 8009288:	2f02      	cmp	r7, #2
 800928a:	f104 0314 	add.w	r3, r4, #20
 800928e:	d13f      	bne.n	8009310 <__gethex+0x450>
 8009290:	f8d8 2000 	ldr.w	r2, [r8]
 8009294:	3a01      	subs	r2, #1
 8009296:	42b2      	cmp	r2, r6
 8009298:	d10a      	bne.n	80092b0 <__gethex+0x3f0>
 800929a:	1171      	asrs	r1, r6, #5
 800929c:	2201      	movs	r2, #1
 800929e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092a2:	f006 061f 	and.w	r6, r6, #31
 80092a6:	fa02 f606 	lsl.w	r6, r2, r6
 80092aa:	421e      	tst	r6, r3
 80092ac:	bf18      	it	ne
 80092ae:	4617      	movne	r7, r2
 80092b0:	f047 0720 	orr.w	r7, r7, #32
 80092b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092b6:	601c      	str	r4, [r3, #0]
 80092b8:	9b04      	ldr	r3, [sp, #16]
 80092ba:	601d      	str	r5, [r3, #0]
 80092bc:	e695      	b.n	8008fea <__gethex+0x12a>
 80092be:	4299      	cmp	r1, r3
 80092c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80092c4:	d8d8      	bhi.n	8009278 <__gethex+0x3b8>
 80092c6:	68a3      	ldr	r3, [r4, #8]
 80092c8:	459b      	cmp	fp, r3
 80092ca:	db19      	blt.n	8009300 <__gethex+0x440>
 80092cc:	6861      	ldr	r1, [r4, #4]
 80092ce:	ee18 0a10 	vmov	r0, s16
 80092d2:	3101      	adds	r1, #1
 80092d4:	f000 f9a8 	bl	8009628 <_Balloc>
 80092d8:	4681      	mov	r9, r0
 80092da:	b918      	cbnz	r0, 80092e4 <__gethex+0x424>
 80092dc:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <__gethex+0x488>)
 80092de:	4602      	mov	r2, r0
 80092e0:	2184      	movs	r1, #132	; 0x84
 80092e2:	e6a8      	b.n	8009036 <__gethex+0x176>
 80092e4:	6922      	ldr	r2, [r4, #16]
 80092e6:	3202      	adds	r2, #2
 80092e8:	f104 010c 	add.w	r1, r4, #12
 80092ec:	0092      	lsls	r2, r2, #2
 80092ee:	300c      	adds	r0, #12
 80092f0:	f000 f972 	bl	80095d8 <memcpy>
 80092f4:	4621      	mov	r1, r4
 80092f6:	ee18 0a10 	vmov	r0, s16
 80092fa:	f000 f9d5 	bl	80096a8 <_Bfree>
 80092fe:	464c      	mov	r4, r9
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009308:	6122      	str	r2, [r4, #16]
 800930a:	2201      	movs	r2, #1
 800930c:	615a      	str	r2, [r3, #20]
 800930e:	e7bb      	b.n	8009288 <__gethex+0x3c8>
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	455a      	cmp	r2, fp
 8009314:	dd0b      	ble.n	800932e <__gethex+0x46e>
 8009316:	2101      	movs	r1, #1
 8009318:	4620      	mov	r0, r4
 800931a:	f7ff fd6a 	bl	8008df2 <rshift>
 800931e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009322:	3501      	adds	r5, #1
 8009324:	42ab      	cmp	r3, r5
 8009326:	f6ff aed0 	blt.w	80090ca <__gethex+0x20a>
 800932a:	2701      	movs	r7, #1
 800932c:	e7c0      	b.n	80092b0 <__gethex+0x3f0>
 800932e:	f016 061f 	ands.w	r6, r6, #31
 8009332:	d0fa      	beq.n	800932a <__gethex+0x46a>
 8009334:	4453      	add	r3, sl
 8009336:	f1c6 0620 	rsb	r6, r6, #32
 800933a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800933e:	f000 fa65 	bl	800980c <__hi0bits>
 8009342:	42b0      	cmp	r0, r6
 8009344:	dbe7      	blt.n	8009316 <__gethex+0x456>
 8009346:	e7f0      	b.n	800932a <__gethex+0x46a>
 8009348:	0800aae0 	.word	0x0800aae0

0800934c <L_shift>:
 800934c:	f1c2 0208 	rsb	r2, r2, #8
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	b570      	push	{r4, r5, r6, lr}
 8009354:	f1c2 0620 	rsb	r6, r2, #32
 8009358:	6843      	ldr	r3, [r0, #4]
 800935a:	6804      	ldr	r4, [r0, #0]
 800935c:	fa03 f506 	lsl.w	r5, r3, r6
 8009360:	432c      	orrs	r4, r5
 8009362:	40d3      	lsrs	r3, r2
 8009364:	6004      	str	r4, [r0, #0]
 8009366:	f840 3f04 	str.w	r3, [r0, #4]!
 800936a:	4288      	cmp	r0, r1
 800936c:	d3f4      	bcc.n	8009358 <L_shift+0xc>
 800936e:	bd70      	pop	{r4, r5, r6, pc}

08009370 <__match>:
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	6803      	ldr	r3, [r0, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	b914      	cbnz	r4, 8009382 <__match+0x12>
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	2001      	movs	r0, #1
 8009380:	bd30      	pop	{r4, r5, pc}
 8009382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009386:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800938a:	2d19      	cmp	r5, #25
 800938c:	bf98      	it	ls
 800938e:	3220      	addls	r2, #32
 8009390:	42a2      	cmp	r2, r4
 8009392:	d0f0      	beq.n	8009376 <__match+0x6>
 8009394:	2000      	movs	r0, #0
 8009396:	e7f3      	b.n	8009380 <__match+0x10>

08009398 <__hexnan>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	115e      	asrs	r6, r3, #5
 80093a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093a4:	f013 031f 	ands.w	r3, r3, #31
 80093a8:	b087      	sub	sp, #28
 80093aa:	bf18      	it	ne
 80093ac:	3604      	addne	r6, #4
 80093ae:	2500      	movs	r5, #0
 80093b0:	1f37      	subs	r7, r6, #4
 80093b2:	4690      	mov	r8, r2
 80093b4:	6802      	ldr	r2, [r0, #0]
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	4682      	mov	sl, r0
 80093ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80093be:	46b9      	mov	r9, r7
 80093c0:	463c      	mov	r4, r7
 80093c2:	9502      	str	r5, [sp, #8]
 80093c4:	46ab      	mov	fp, r5
 80093c6:	7851      	ldrb	r1, [r2, #1]
 80093c8:	1c53      	adds	r3, r2, #1
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	b341      	cbz	r1, 8009420 <__hexnan+0x88>
 80093ce:	4608      	mov	r0, r1
 80093d0:	9205      	str	r2, [sp, #20]
 80093d2:	9104      	str	r1, [sp, #16]
 80093d4:	f7ff fd5f 	bl	8008e96 <__hexdig_fun>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d14f      	bne.n	800947c <__hexnan+0xe4>
 80093dc:	9904      	ldr	r1, [sp, #16]
 80093de:	9a05      	ldr	r2, [sp, #20]
 80093e0:	2920      	cmp	r1, #32
 80093e2:	d818      	bhi.n	8009416 <__hexnan+0x7e>
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	459b      	cmp	fp, r3
 80093e8:	dd13      	ble.n	8009412 <__hexnan+0x7a>
 80093ea:	454c      	cmp	r4, r9
 80093ec:	d206      	bcs.n	80093fc <__hexnan+0x64>
 80093ee:	2d07      	cmp	r5, #7
 80093f0:	dc04      	bgt.n	80093fc <__hexnan+0x64>
 80093f2:	462a      	mov	r2, r5
 80093f4:	4649      	mov	r1, r9
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff ffa8 	bl	800934c <L_shift>
 80093fc:	4544      	cmp	r4, r8
 80093fe:	d950      	bls.n	80094a2 <__hexnan+0x10a>
 8009400:	2300      	movs	r3, #0
 8009402:	f1a4 0904 	sub.w	r9, r4, #4
 8009406:	f844 3c04 	str.w	r3, [r4, #-4]
 800940a:	f8cd b008 	str.w	fp, [sp, #8]
 800940e:	464c      	mov	r4, r9
 8009410:	461d      	mov	r5, r3
 8009412:	9a03      	ldr	r2, [sp, #12]
 8009414:	e7d7      	b.n	80093c6 <__hexnan+0x2e>
 8009416:	2929      	cmp	r1, #41	; 0x29
 8009418:	d156      	bne.n	80094c8 <__hexnan+0x130>
 800941a:	3202      	adds	r2, #2
 800941c:	f8ca 2000 	str.w	r2, [sl]
 8009420:	f1bb 0f00 	cmp.w	fp, #0
 8009424:	d050      	beq.n	80094c8 <__hexnan+0x130>
 8009426:	454c      	cmp	r4, r9
 8009428:	d206      	bcs.n	8009438 <__hexnan+0xa0>
 800942a:	2d07      	cmp	r5, #7
 800942c:	dc04      	bgt.n	8009438 <__hexnan+0xa0>
 800942e:	462a      	mov	r2, r5
 8009430:	4649      	mov	r1, r9
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff ff8a 	bl	800934c <L_shift>
 8009438:	4544      	cmp	r4, r8
 800943a:	d934      	bls.n	80094a6 <__hexnan+0x10e>
 800943c:	f1a8 0204 	sub.w	r2, r8, #4
 8009440:	4623      	mov	r3, r4
 8009442:	f853 1b04 	ldr.w	r1, [r3], #4
 8009446:	f842 1f04 	str.w	r1, [r2, #4]!
 800944a:	429f      	cmp	r7, r3
 800944c:	d2f9      	bcs.n	8009442 <__hexnan+0xaa>
 800944e:	1b3b      	subs	r3, r7, r4
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	3304      	adds	r3, #4
 8009456:	3401      	adds	r4, #1
 8009458:	3e03      	subs	r6, #3
 800945a:	42b4      	cmp	r4, r6
 800945c:	bf88      	it	hi
 800945e:	2304      	movhi	r3, #4
 8009460:	4443      	add	r3, r8
 8009462:	2200      	movs	r2, #0
 8009464:	f843 2b04 	str.w	r2, [r3], #4
 8009468:	429f      	cmp	r7, r3
 800946a:	d2fb      	bcs.n	8009464 <__hexnan+0xcc>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	b91b      	cbnz	r3, 8009478 <__hexnan+0xe0>
 8009470:	4547      	cmp	r7, r8
 8009472:	d127      	bne.n	80094c4 <__hexnan+0x12c>
 8009474:	2301      	movs	r3, #1
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	2005      	movs	r0, #5
 800947a:	e026      	b.n	80094ca <__hexnan+0x132>
 800947c:	3501      	adds	r5, #1
 800947e:	2d08      	cmp	r5, #8
 8009480:	f10b 0b01 	add.w	fp, fp, #1
 8009484:	dd06      	ble.n	8009494 <__hexnan+0xfc>
 8009486:	4544      	cmp	r4, r8
 8009488:	d9c3      	bls.n	8009412 <__hexnan+0x7a>
 800948a:	2300      	movs	r3, #0
 800948c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009490:	2501      	movs	r5, #1
 8009492:	3c04      	subs	r4, #4
 8009494:	6822      	ldr	r2, [r4, #0]
 8009496:	f000 000f 	and.w	r0, r0, #15
 800949a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	e7b7      	b.n	8009412 <__hexnan+0x7a>
 80094a2:	2508      	movs	r5, #8
 80094a4:	e7b5      	b.n	8009412 <__hexnan+0x7a>
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0df      	beq.n	800946c <__hexnan+0xd4>
 80094ac:	f04f 32ff 	mov.w	r2, #4294967295
 80094b0:	f1c3 0320 	rsb	r3, r3, #32
 80094b4:	fa22 f303 	lsr.w	r3, r2, r3
 80094b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80094bc:	401a      	ands	r2, r3
 80094be:	f846 2c04 	str.w	r2, [r6, #-4]
 80094c2:	e7d3      	b.n	800946c <__hexnan+0xd4>
 80094c4:	3f04      	subs	r7, #4
 80094c6:	e7d1      	b.n	800946c <__hexnan+0xd4>
 80094c8:	2004      	movs	r0, #4
 80094ca:	b007      	add	sp, #28
 80094cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094d0 <_localeconv_r>:
 80094d0:	4800      	ldr	r0, [pc, #0]	; (80094d4 <_localeconv_r+0x4>)
 80094d2:	4770      	bx	lr
 80094d4:	20000188 	.word	0x20000188

080094d8 <__swhatbuf_r>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	460e      	mov	r6, r1
 80094dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	b096      	sub	sp, #88	; 0x58
 80094e4:	4614      	mov	r4, r2
 80094e6:	461d      	mov	r5, r3
 80094e8:	da08      	bge.n	80094fc <__swhatbuf_r+0x24>
 80094ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	061a      	lsls	r2, r3, #24
 80094f4:	d410      	bmi.n	8009518 <__swhatbuf_r+0x40>
 80094f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094fa:	e00e      	b.n	800951a <__swhatbuf_r+0x42>
 80094fc:	466a      	mov	r2, sp
 80094fe:	f001 f893 	bl	800a628 <_fstat_r>
 8009502:	2800      	cmp	r0, #0
 8009504:	dbf1      	blt.n	80094ea <__swhatbuf_r+0x12>
 8009506:	9a01      	ldr	r2, [sp, #4]
 8009508:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800950c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009510:	425a      	negs	r2, r3
 8009512:	415a      	adcs	r2, r3
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	e7ee      	b.n	80094f6 <__swhatbuf_r+0x1e>
 8009518:	2340      	movs	r3, #64	; 0x40
 800951a:	2000      	movs	r0, #0
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	b016      	add	sp, #88	; 0x58
 8009520:	bd70      	pop	{r4, r5, r6, pc}
	...

08009524 <__smakebuf_r>:
 8009524:	898b      	ldrh	r3, [r1, #12]
 8009526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009528:	079d      	lsls	r5, r3, #30
 800952a:	4606      	mov	r6, r0
 800952c:	460c      	mov	r4, r1
 800952e:	d507      	bpl.n	8009540 <__smakebuf_r+0x1c>
 8009530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	2301      	movs	r3, #1
 800953a:	6163      	str	r3, [r4, #20]
 800953c:	b002      	add	sp, #8
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	ab01      	add	r3, sp, #4
 8009542:	466a      	mov	r2, sp
 8009544:	f7ff ffc8 	bl	80094d8 <__swhatbuf_r>
 8009548:	9900      	ldr	r1, [sp, #0]
 800954a:	4605      	mov	r5, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f000 fdaf 	bl	800a0b0 <_malloc_r>
 8009552:	b948      	cbnz	r0, 8009568 <__smakebuf_r+0x44>
 8009554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009558:	059a      	lsls	r2, r3, #22
 800955a:	d4ef      	bmi.n	800953c <__smakebuf_r+0x18>
 800955c:	f023 0303 	bic.w	r3, r3, #3
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7e3      	b.n	8009530 <__smakebuf_r+0xc>
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <__smakebuf_r+0x7c>)
 800956a:	62b3      	str	r3, [r6, #40]	; 0x28
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	6020      	str	r0, [r4, #0]
 8009570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009574:	81a3      	strh	r3, [r4, #12]
 8009576:	9b00      	ldr	r3, [sp, #0]
 8009578:	6163      	str	r3, [r4, #20]
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	6120      	str	r0, [r4, #16]
 800957e:	b15b      	cbz	r3, 8009598 <__smakebuf_r+0x74>
 8009580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009584:	4630      	mov	r0, r6
 8009586:	f001 f861 	bl	800a64c <_isatty_r>
 800958a:	b128      	cbz	r0, 8009598 <__smakebuf_r+0x74>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f023 0303 	bic.w	r3, r3, #3
 8009592:	f043 0301 	orr.w	r3, r3, #1
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	89a0      	ldrh	r0, [r4, #12]
 800959a:	4305      	orrs	r5, r0
 800959c:	81a5      	strh	r5, [r4, #12]
 800959e:	e7cd      	b.n	800953c <__smakebuf_r+0x18>
 80095a0:	08008c51 	.word	0x08008c51

080095a4 <malloc>:
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <malloc+0xc>)
 80095a6:	4601      	mov	r1, r0
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	f000 bd81 	b.w	800a0b0 <_malloc_r>
 80095ae:	bf00      	nop
 80095b0:	20000030 	.word	0x20000030

080095b4 <__ascii_mbtowc>:
 80095b4:	b082      	sub	sp, #8
 80095b6:	b901      	cbnz	r1, 80095ba <__ascii_mbtowc+0x6>
 80095b8:	a901      	add	r1, sp, #4
 80095ba:	b142      	cbz	r2, 80095ce <__ascii_mbtowc+0x1a>
 80095bc:	b14b      	cbz	r3, 80095d2 <__ascii_mbtowc+0x1e>
 80095be:	7813      	ldrb	r3, [r2, #0]
 80095c0:	600b      	str	r3, [r1, #0]
 80095c2:	7812      	ldrb	r2, [r2, #0]
 80095c4:	1e10      	subs	r0, r2, #0
 80095c6:	bf18      	it	ne
 80095c8:	2001      	movne	r0, #1
 80095ca:	b002      	add	sp, #8
 80095cc:	4770      	bx	lr
 80095ce:	4610      	mov	r0, r2
 80095d0:	e7fb      	b.n	80095ca <__ascii_mbtowc+0x16>
 80095d2:	f06f 0001 	mvn.w	r0, #1
 80095d6:	e7f8      	b.n	80095ca <__ascii_mbtowc+0x16>

080095d8 <memcpy>:
 80095d8:	440a      	add	r2, r1
 80095da:	4291      	cmp	r1, r2
 80095dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e0:	d100      	bne.n	80095e4 <memcpy+0xc>
 80095e2:	4770      	bx	lr
 80095e4:	b510      	push	{r4, lr}
 80095e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ee:	4291      	cmp	r1, r2
 80095f0:	d1f9      	bne.n	80095e6 <memcpy+0xe>
 80095f2:	bd10      	pop	{r4, pc}

080095f4 <memmove>:
 80095f4:	4288      	cmp	r0, r1
 80095f6:	b510      	push	{r4, lr}
 80095f8:	eb01 0402 	add.w	r4, r1, r2
 80095fc:	d902      	bls.n	8009604 <memmove+0x10>
 80095fe:	4284      	cmp	r4, r0
 8009600:	4623      	mov	r3, r4
 8009602:	d807      	bhi.n	8009614 <memmove+0x20>
 8009604:	1e43      	subs	r3, r0, #1
 8009606:	42a1      	cmp	r1, r4
 8009608:	d008      	beq.n	800961c <memmove+0x28>
 800960a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800960e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009612:	e7f8      	b.n	8009606 <memmove+0x12>
 8009614:	4402      	add	r2, r0
 8009616:	4601      	mov	r1, r0
 8009618:	428a      	cmp	r2, r1
 800961a:	d100      	bne.n	800961e <memmove+0x2a>
 800961c:	bd10      	pop	{r4, pc}
 800961e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009626:	e7f7      	b.n	8009618 <memmove+0x24>

08009628 <_Balloc>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	b976      	cbnz	r6, 8009650 <_Balloc+0x28>
 8009632:	2010      	movs	r0, #16
 8009634:	f7ff ffb6 	bl	80095a4 <malloc>
 8009638:	4602      	mov	r2, r0
 800963a:	6260      	str	r0, [r4, #36]	; 0x24
 800963c:	b920      	cbnz	r0, 8009648 <_Balloc+0x20>
 800963e:	4b18      	ldr	r3, [pc, #96]	; (80096a0 <_Balloc+0x78>)
 8009640:	4818      	ldr	r0, [pc, #96]	; (80096a4 <_Balloc+0x7c>)
 8009642:	2166      	movs	r1, #102	; 0x66
 8009644:	f000 ffc2 	bl	800a5cc <__assert_func>
 8009648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800964c:	6006      	str	r6, [r0, #0]
 800964e:	60c6      	str	r6, [r0, #12]
 8009650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009652:	68f3      	ldr	r3, [r6, #12]
 8009654:	b183      	cbz	r3, 8009678 <_Balloc+0x50>
 8009656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800965e:	b9b8      	cbnz	r0, 8009690 <_Balloc+0x68>
 8009660:	2101      	movs	r1, #1
 8009662:	fa01 f605 	lsl.w	r6, r1, r5
 8009666:	1d72      	adds	r2, r6, #5
 8009668:	0092      	lsls	r2, r2, #2
 800966a:	4620      	mov	r0, r4
 800966c:	f000 fc9d 	bl	8009faa <_calloc_r>
 8009670:	b160      	cbz	r0, 800968c <_Balloc+0x64>
 8009672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009676:	e00e      	b.n	8009696 <_Balloc+0x6e>
 8009678:	2221      	movs	r2, #33	; 0x21
 800967a:	2104      	movs	r1, #4
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fc94 	bl	8009faa <_calloc_r>
 8009682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009684:	60f0      	str	r0, [r6, #12]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e4      	bne.n	8009656 <_Balloc+0x2e>
 800968c:	2000      	movs	r0, #0
 800968e:	bd70      	pop	{r4, r5, r6, pc}
 8009690:	6802      	ldr	r2, [r0, #0]
 8009692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009696:	2300      	movs	r3, #0
 8009698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800969c:	e7f7      	b.n	800968e <_Balloc+0x66>
 800969e:	bf00      	nop
 80096a0:	0800aa6e 	.word	0x0800aa6e
 80096a4:	0800abd0 	.word	0x0800abd0

080096a8 <_Bfree>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b976      	cbnz	r6, 80096d0 <_Bfree+0x28>
 80096b2:	2010      	movs	r0, #16
 80096b4:	f7ff ff76 	bl	80095a4 <malloc>
 80096b8:	4602      	mov	r2, r0
 80096ba:	6268      	str	r0, [r5, #36]	; 0x24
 80096bc:	b920      	cbnz	r0, 80096c8 <_Bfree+0x20>
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <_Bfree+0x3c>)
 80096c0:	4809      	ldr	r0, [pc, #36]	; (80096e8 <_Bfree+0x40>)
 80096c2:	218a      	movs	r1, #138	; 0x8a
 80096c4:	f000 ff82 	bl	800a5cc <__assert_func>
 80096c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096cc:	6006      	str	r6, [r0, #0]
 80096ce:	60c6      	str	r6, [r0, #12]
 80096d0:	b13c      	cbz	r4, 80096e2 <_Bfree+0x3a>
 80096d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096d4:	6862      	ldr	r2, [r4, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096dc:	6021      	str	r1, [r4, #0]
 80096de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	0800aa6e 	.word	0x0800aa6e
 80096e8:	0800abd0 	.word	0x0800abd0

080096ec <__multadd>:
 80096ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	690d      	ldr	r5, [r1, #16]
 80096f2:	4607      	mov	r7, r0
 80096f4:	460c      	mov	r4, r1
 80096f6:	461e      	mov	r6, r3
 80096f8:	f101 0c14 	add.w	ip, r1, #20
 80096fc:	2000      	movs	r0, #0
 80096fe:	f8dc 3000 	ldr.w	r3, [ip]
 8009702:	b299      	uxth	r1, r3
 8009704:	fb02 6101 	mla	r1, r2, r1, r6
 8009708:	0c1e      	lsrs	r6, r3, #16
 800970a:	0c0b      	lsrs	r3, r1, #16
 800970c:	fb02 3306 	mla	r3, r2, r6, r3
 8009710:	b289      	uxth	r1, r1
 8009712:	3001      	adds	r0, #1
 8009714:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009718:	4285      	cmp	r5, r0
 800971a:	f84c 1b04 	str.w	r1, [ip], #4
 800971e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009722:	dcec      	bgt.n	80096fe <__multadd+0x12>
 8009724:	b30e      	cbz	r6, 800976a <__multadd+0x7e>
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	42ab      	cmp	r3, r5
 800972a:	dc19      	bgt.n	8009760 <__multadd+0x74>
 800972c:	6861      	ldr	r1, [r4, #4]
 800972e:	4638      	mov	r0, r7
 8009730:	3101      	adds	r1, #1
 8009732:	f7ff ff79 	bl	8009628 <_Balloc>
 8009736:	4680      	mov	r8, r0
 8009738:	b928      	cbnz	r0, 8009746 <__multadd+0x5a>
 800973a:	4602      	mov	r2, r0
 800973c:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <__multadd+0x84>)
 800973e:	480d      	ldr	r0, [pc, #52]	; (8009774 <__multadd+0x88>)
 8009740:	21b5      	movs	r1, #181	; 0xb5
 8009742:	f000 ff43 	bl	800a5cc <__assert_func>
 8009746:	6922      	ldr	r2, [r4, #16]
 8009748:	3202      	adds	r2, #2
 800974a:	f104 010c 	add.w	r1, r4, #12
 800974e:	0092      	lsls	r2, r2, #2
 8009750:	300c      	adds	r0, #12
 8009752:	f7ff ff41 	bl	80095d8 <memcpy>
 8009756:	4621      	mov	r1, r4
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ffa5 	bl	80096a8 <_Bfree>
 800975e:	4644      	mov	r4, r8
 8009760:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009764:	3501      	adds	r5, #1
 8009766:	615e      	str	r6, [r3, #20]
 8009768:	6125      	str	r5, [r4, #16]
 800976a:	4620      	mov	r0, r4
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	0800aae0 	.word	0x0800aae0
 8009774:	0800abd0 	.word	0x0800abd0

08009778 <__s2b>:
 8009778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800977c:	460c      	mov	r4, r1
 800977e:	4615      	mov	r5, r2
 8009780:	461f      	mov	r7, r3
 8009782:	2209      	movs	r2, #9
 8009784:	3308      	adds	r3, #8
 8009786:	4606      	mov	r6, r0
 8009788:	fb93 f3f2 	sdiv	r3, r3, r2
 800978c:	2100      	movs	r1, #0
 800978e:	2201      	movs	r2, #1
 8009790:	429a      	cmp	r2, r3
 8009792:	db09      	blt.n	80097a8 <__s2b+0x30>
 8009794:	4630      	mov	r0, r6
 8009796:	f7ff ff47 	bl	8009628 <_Balloc>
 800979a:	b940      	cbnz	r0, 80097ae <__s2b+0x36>
 800979c:	4602      	mov	r2, r0
 800979e:	4b19      	ldr	r3, [pc, #100]	; (8009804 <__s2b+0x8c>)
 80097a0:	4819      	ldr	r0, [pc, #100]	; (8009808 <__s2b+0x90>)
 80097a2:	21ce      	movs	r1, #206	; 0xce
 80097a4:	f000 ff12 	bl	800a5cc <__assert_func>
 80097a8:	0052      	lsls	r2, r2, #1
 80097aa:	3101      	adds	r1, #1
 80097ac:	e7f0      	b.n	8009790 <__s2b+0x18>
 80097ae:	9b08      	ldr	r3, [sp, #32]
 80097b0:	6143      	str	r3, [r0, #20]
 80097b2:	2d09      	cmp	r5, #9
 80097b4:	f04f 0301 	mov.w	r3, #1
 80097b8:	6103      	str	r3, [r0, #16]
 80097ba:	dd16      	ble.n	80097ea <__s2b+0x72>
 80097bc:	f104 0909 	add.w	r9, r4, #9
 80097c0:	46c8      	mov	r8, r9
 80097c2:	442c      	add	r4, r5
 80097c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097c8:	4601      	mov	r1, r0
 80097ca:	3b30      	subs	r3, #48	; 0x30
 80097cc:	220a      	movs	r2, #10
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ff8c 	bl	80096ec <__multadd>
 80097d4:	45a0      	cmp	r8, r4
 80097d6:	d1f5      	bne.n	80097c4 <__s2b+0x4c>
 80097d8:	f1a5 0408 	sub.w	r4, r5, #8
 80097dc:	444c      	add	r4, r9
 80097de:	1b2d      	subs	r5, r5, r4
 80097e0:	1963      	adds	r3, r4, r5
 80097e2:	42bb      	cmp	r3, r7
 80097e4:	db04      	blt.n	80097f0 <__s2b+0x78>
 80097e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ea:	340a      	adds	r4, #10
 80097ec:	2509      	movs	r5, #9
 80097ee:	e7f6      	b.n	80097de <__s2b+0x66>
 80097f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097f4:	4601      	mov	r1, r0
 80097f6:	3b30      	subs	r3, #48	; 0x30
 80097f8:	220a      	movs	r2, #10
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7ff ff76 	bl	80096ec <__multadd>
 8009800:	e7ee      	b.n	80097e0 <__s2b+0x68>
 8009802:	bf00      	nop
 8009804:	0800aae0 	.word	0x0800aae0
 8009808:	0800abd0 	.word	0x0800abd0

0800980c <__hi0bits>:
 800980c:	0c03      	lsrs	r3, r0, #16
 800980e:	041b      	lsls	r3, r3, #16
 8009810:	b9d3      	cbnz	r3, 8009848 <__hi0bits+0x3c>
 8009812:	0400      	lsls	r0, r0, #16
 8009814:	2310      	movs	r3, #16
 8009816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800981a:	bf04      	itt	eq
 800981c:	0200      	lsleq	r0, r0, #8
 800981e:	3308      	addeq	r3, #8
 8009820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009824:	bf04      	itt	eq
 8009826:	0100      	lsleq	r0, r0, #4
 8009828:	3304      	addeq	r3, #4
 800982a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800982e:	bf04      	itt	eq
 8009830:	0080      	lsleq	r0, r0, #2
 8009832:	3302      	addeq	r3, #2
 8009834:	2800      	cmp	r0, #0
 8009836:	db05      	blt.n	8009844 <__hi0bits+0x38>
 8009838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800983c:	f103 0301 	add.w	r3, r3, #1
 8009840:	bf08      	it	eq
 8009842:	2320      	moveq	r3, #32
 8009844:	4618      	mov	r0, r3
 8009846:	4770      	bx	lr
 8009848:	2300      	movs	r3, #0
 800984a:	e7e4      	b.n	8009816 <__hi0bits+0xa>

0800984c <__lo0bits>:
 800984c:	6803      	ldr	r3, [r0, #0]
 800984e:	f013 0207 	ands.w	r2, r3, #7
 8009852:	4601      	mov	r1, r0
 8009854:	d00b      	beq.n	800986e <__lo0bits+0x22>
 8009856:	07da      	lsls	r2, r3, #31
 8009858:	d423      	bmi.n	80098a2 <__lo0bits+0x56>
 800985a:	0798      	lsls	r0, r3, #30
 800985c:	bf49      	itett	mi
 800985e:	085b      	lsrmi	r3, r3, #1
 8009860:	089b      	lsrpl	r3, r3, #2
 8009862:	2001      	movmi	r0, #1
 8009864:	600b      	strmi	r3, [r1, #0]
 8009866:	bf5c      	itt	pl
 8009868:	600b      	strpl	r3, [r1, #0]
 800986a:	2002      	movpl	r0, #2
 800986c:	4770      	bx	lr
 800986e:	b298      	uxth	r0, r3
 8009870:	b9a8      	cbnz	r0, 800989e <__lo0bits+0x52>
 8009872:	0c1b      	lsrs	r3, r3, #16
 8009874:	2010      	movs	r0, #16
 8009876:	b2da      	uxtb	r2, r3
 8009878:	b90a      	cbnz	r2, 800987e <__lo0bits+0x32>
 800987a:	3008      	adds	r0, #8
 800987c:	0a1b      	lsrs	r3, r3, #8
 800987e:	071a      	lsls	r2, r3, #28
 8009880:	bf04      	itt	eq
 8009882:	091b      	lsreq	r3, r3, #4
 8009884:	3004      	addeq	r0, #4
 8009886:	079a      	lsls	r2, r3, #30
 8009888:	bf04      	itt	eq
 800988a:	089b      	lsreq	r3, r3, #2
 800988c:	3002      	addeq	r0, #2
 800988e:	07da      	lsls	r2, r3, #31
 8009890:	d403      	bmi.n	800989a <__lo0bits+0x4e>
 8009892:	085b      	lsrs	r3, r3, #1
 8009894:	f100 0001 	add.w	r0, r0, #1
 8009898:	d005      	beq.n	80098a6 <__lo0bits+0x5a>
 800989a:	600b      	str	r3, [r1, #0]
 800989c:	4770      	bx	lr
 800989e:	4610      	mov	r0, r2
 80098a0:	e7e9      	b.n	8009876 <__lo0bits+0x2a>
 80098a2:	2000      	movs	r0, #0
 80098a4:	4770      	bx	lr
 80098a6:	2020      	movs	r0, #32
 80098a8:	4770      	bx	lr
	...

080098ac <__i2b>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	460c      	mov	r4, r1
 80098b0:	2101      	movs	r1, #1
 80098b2:	f7ff feb9 	bl	8009628 <_Balloc>
 80098b6:	4602      	mov	r2, r0
 80098b8:	b928      	cbnz	r0, 80098c6 <__i2b+0x1a>
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <__i2b+0x24>)
 80098bc:	4805      	ldr	r0, [pc, #20]	; (80098d4 <__i2b+0x28>)
 80098be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098c2:	f000 fe83 	bl	800a5cc <__assert_func>
 80098c6:	2301      	movs	r3, #1
 80098c8:	6144      	str	r4, [r0, #20]
 80098ca:	6103      	str	r3, [r0, #16]
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop
 80098d0:	0800aae0 	.word	0x0800aae0
 80098d4:	0800abd0 	.word	0x0800abd0

080098d8 <__multiply>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	4691      	mov	r9, r2
 80098de:	690a      	ldr	r2, [r1, #16]
 80098e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	bfb8      	it	lt
 80098e8:	460b      	movlt	r3, r1
 80098ea:	460c      	mov	r4, r1
 80098ec:	bfbc      	itt	lt
 80098ee:	464c      	movlt	r4, r9
 80098f0:	4699      	movlt	r9, r3
 80098f2:	6927      	ldr	r7, [r4, #16]
 80098f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098f8:	68a3      	ldr	r3, [r4, #8]
 80098fa:	6861      	ldr	r1, [r4, #4]
 80098fc:	eb07 060a 	add.w	r6, r7, sl
 8009900:	42b3      	cmp	r3, r6
 8009902:	b085      	sub	sp, #20
 8009904:	bfb8      	it	lt
 8009906:	3101      	addlt	r1, #1
 8009908:	f7ff fe8e 	bl	8009628 <_Balloc>
 800990c:	b930      	cbnz	r0, 800991c <__multiply+0x44>
 800990e:	4602      	mov	r2, r0
 8009910:	4b44      	ldr	r3, [pc, #272]	; (8009a24 <__multiply+0x14c>)
 8009912:	4845      	ldr	r0, [pc, #276]	; (8009a28 <__multiply+0x150>)
 8009914:	f240 115d 	movw	r1, #349	; 0x15d
 8009918:	f000 fe58 	bl	800a5cc <__assert_func>
 800991c:	f100 0514 	add.w	r5, r0, #20
 8009920:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009924:	462b      	mov	r3, r5
 8009926:	2200      	movs	r2, #0
 8009928:	4543      	cmp	r3, r8
 800992a:	d321      	bcc.n	8009970 <__multiply+0x98>
 800992c:	f104 0314 	add.w	r3, r4, #20
 8009930:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009934:	f109 0314 	add.w	r3, r9, #20
 8009938:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800993c:	9202      	str	r2, [sp, #8]
 800993e:	1b3a      	subs	r2, r7, r4
 8009940:	3a15      	subs	r2, #21
 8009942:	f022 0203 	bic.w	r2, r2, #3
 8009946:	3204      	adds	r2, #4
 8009948:	f104 0115 	add.w	r1, r4, #21
 800994c:	428f      	cmp	r7, r1
 800994e:	bf38      	it	cc
 8009950:	2204      	movcc	r2, #4
 8009952:	9201      	str	r2, [sp, #4]
 8009954:	9a02      	ldr	r2, [sp, #8]
 8009956:	9303      	str	r3, [sp, #12]
 8009958:	429a      	cmp	r2, r3
 800995a:	d80c      	bhi.n	8009976 <__multiply+0x9e>
 800995c:	2e00      	cmp	r6, #0
 800995e:	dd03      	ble.n	8009968 <__multiply+0x90>
 8009960:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009964:	2b00      	cmp	r3, #0
 8009966:	d05a      	beq.n	8009a1e <__multiply+0x146>
 8009968:	6106      	str	r6, [r0, #16]
 800996a:	b005      	add	sp, #20
 800996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009970:	f843 2b04 	str.w	r2, [r3], #4
 8009974:	e7d8      	b.n	8009928 <__multiply+0x50>
 8009976:	f8b3 a000 	ldrh.w	sl, [r3]
 800997a:	f1ba 0f00 	cmp.w	sl, #0
 800997e:	d024      	beq.n	80099ca <__multiply+0xf2>
 8009980:	f104 0e14 	add.w	lr, r4, #20
 8009984:	46a9      	mov	r9, r5
 8009986:	f04f 0c00 	mov.w	ip, #0
 800998a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800998e:	f8d9 1000 	ldr.w	r1, [r9]
 8009992:	fa1f fb82 	uxth.w	fp, r2
 8009996:	b289      	uxth	r1, r1
 8009998:	fb0a 110b 	mla	r1, sl, fp, r1
 800999c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099a0:	f8d9 2000 	ldr.w	r2, [r9]
 80099a4:	4461      	add	r1, ip
 80099a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80099ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099b2:	b289      	uxth	r1, r1
 80099b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099b8:	4577      	cmp	r7, lr
 80099ba:	f849 1b04 	str.w	r1, [r9], #4
 80099be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099c2:	d8e2      	bhi.n	800998a <__multiply+0xb2>
 80099c4:	9a01      	ldr	r2, [sp, #4]
 80099c6:	f845 c002 	str.w	ip, [r5, r2]
 80099ca:	9a03      	ldr	r2, [sp, #12]
 80099cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099d0:	3304      	adds	r3, #4
 80099d2:	f1b9 0f00 	cmp.w	r9, #0
 80099d6:	d020      	beq.n	8009a1a <__multiply+0x142>
 80099d8:	6829      	ldr	r1, [r5, #0]
 80099da:	f104 0c14 	add.w	ip, r4, #20
 80099de:	46ae      	mov	lr, r5
 80099e0:	f04f 0a00 	mov.w	sl, #0
 80099e4:	f8bc b000 	ldrh.w	fp, [ip]
 80099e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099ec:	fb09 220b 	mla	r2, r9, fp, r2
 80099f0:	4492      	add	sl, r2
 80099f2:	b289      	uxth	r1, r1
 80099f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80099f8:	f84e 1b04 	str.w	r1, [lr], #4
 80099fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a00:	f8be 1000 	ldrh.w	r1, [lr]
 8009a04:	0c12      	lsrs	r2, r2, #16
 8009a06:	fb09 1102 	mla	r1, r9, r2, r1
 8009a0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a0e:	4567      	cmp	r7, ip
 8009a10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a14:	d8e6      	bhi.n	80099e4 <__multiply+0x10c>
 8009a16:	9a01      	ldr	r2, [sp, #4]
 8009a18:	50a9      	str	r1, [r5, r2]
 8009a1a:	3504      	adds	r5, #4
 8009a1c:	e79a      	b.n	8009954 <__multiply+0x7c>
 8009a1e:	3e01      	subs	r6, #1
 8009a20:	e79c      	b.n	800995c <__multiply+0x84>
 8009a22:	bf00      	nop
 8009a24:	0800aae0 	.word	0x0800aae0
 8009a28:	0800abd0 	.word	0x0800abd0

08009a2c <__pow5mult>:
 8009a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a30:	4615      	mov	r5, r2
 8009a32:	f012 0203 	ands.w	r2, r2, #3
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	d007      	beq.n	8009a4c <__pow5mult+0x20>
 8009a3c:	4c25      	ldr	r4, [pc, #148]	; (8009ad4 <__pow5mult+0xa8>)
 8009a3e:	3a01      	subs	r2, #1
 8009a40:	2300      	movs	r3, #0
 8009a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a46:	f7ff fe51 	bl	80096ec <__multadd>
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	10ad      	asrs	r5, r5, #2
 8009a4e:	d03d      	beq.n	8009acc <__pow5mult+0xa0>
 8009a50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a52:	b97c      	cbnz	r4, 8009a74 <__pow5mult+0x48>
 8009a54:	2010      	movs	r0, #16
 8009a56:	f7ff fda5 	bl	80095a4 <malloc>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a5e:	b928      	cbnz	r0, 8009a6c <__pow5mult+0x40>
 8009a60:	4b1d      	ldr	r3, [pc, #116]	; (8009ad8 <__pow5mult+0xac>)
 8009a62:	481e      	ldr	r0, [pc, #120]	; (8009adc <__pow5mult+0xb0>)
 8009a64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a68:	f000 fdb0 	bl	800a5cc <__assert_func>
 8009a6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a70:	6004      	str	r4, [r0, #0]
 8009a72:	60c4      	str	r4, [r0, #12]
 8009a74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a7c:	b94c      	cbnz	r4, 8009a92 <__pow5mult+0x66>
 8009a7e:	f240 2171 	movw	r1, #625	; 0x271
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7ff ff12 	bl	80098ac <__i2b>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a8e:	4604      	mov	r4, r0
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	f04f 0900 	mov.w	r9, #0
 8009a96:	07eb      	lsls	r3, r5, #31
 8009a98:	d50a      	bpl.n	8009ab0 <__pow5mult+0x84>
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7ff ff1a 	bl	80098d8 <__multiply>
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff fdfd 	bl	80096a8 <_Bfree>
 8009aae:	4647      	mov	r7, r8
 8009ab0:	106d      	asrs	r5, r5, #1
 8009ab2:	d00b      	beq.n	8009acc <__pow5mult+0xa0>
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	b938      	cbnz	r0, 8009ac8 <__pow5mult+0x9c>
 8009ab8:	4622      	mov	r2, r4
 8009aba:	4621      	mov	r1, r4
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff ff0b 	bl	80098d8 <__multiply>
 8009ac2:	6020      	str	r0, [r4, #0]
 8009ac4:	f8c0 9000 	str.w	r9, [r0]
 8009ac8:	4604      	mov	r4, r0
 8009aca:	e7e4      	b.n	8009a96 <__pow5mult+0x6a>
 8009acc:	4638      	mov	r0, r7
 8009ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad2:	bf00      	nop
 8009ad4:	0800ad20 	.word	0x0800ad20
 8009ad8:	0800aa6e 	.word	0x0800aa6e
 8009adc:	0800abd0 	.word	0x0800abd0

08009ae0 <__lshift>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	6849      	ldr	r1, [r1, #4]
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aee:	68a3      	ldr	r3, [r4, #8]
 8009af0:	4607      	mov	r7, r0
 8009af2:	4691      	mov	r9, r2
 8009af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009af8:	f108 0601 	add.w	r6, r8, #1
 8009afc:	42b3      	cmp	r3, r6
 8009afe:	db0b      	blt.n	8009b18 <__lshift+0x38>
 8009b00:	4638      	mov	r0, r7
 8009b02:	f7ff fd91 	bl	8009628 <_Balloc>
 8009b06:	4605      	mov	r5, r0
 8009b08:	b948      	cbnz	r0, 8009b1e <__lshift+0x3e>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	4b2a      	ldr	r3, [pc, #168]	; (8009bb8 <__lshift+0xd8>)
 8009b0e:	482b      	ldr	r0, [pc, #172]	; (8009bbc <__lshift+0xdc>)
 8009b10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b14:	f000 fd5a 	bl	800a5cc <__assert_func>
 8009b18:	3101      	adds	r1, #1
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	e7ee      	b.n	8009afc <__lshift+0x1c>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f100 0114 	add.w	r1, r0, #20
 8009b24:	f100 0210 	add.w	r2, r0, #16
 8009b28:	4618      	mov	r0, r3
 8009b2a:	4553      	cmp	r3, sl
 8009b2c:	db37      	blt.n	8009b9e <__lshift+0xbe>
 8009b2e:	6920      	ldr	r0, [r4, #16]
 8009b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b34:	f104 0314 	add.w	r3, r4, #20
 8009b38:	f019 091f 	ands.w	r9, r9, #31
 8009b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b44:	d02f      	beq.n	8009ba6 <__lshift+0xc6>
 8009b46:	f1c9 0e20 	rsb	lr, r9, #32
 8009b4a:	468a      	mov	sl, r1
 8009b4c:	f04f 0c00 	mov.w	ip, #0
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	fa02 f209 	lsl.w	r2, r2, r9
 8009b56:	ea42 020c 	orr.w	r2, r2, ip
 8009b5a:	f84a 2b04 	str.w	r2, [sl], #4
 8009b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b62:	4298      	cmp	r0, r3
 8009b64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b68:	d8f2      	bhi.n	8009b50 <__lshift+0x70>
 8009b6a:	1b03      	subs	r3, r0, r4
 8009b6c:	3b15      	subs	r3, #21
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	3304      	adds	r3, #4
 8009b74:	f104 0215 	add.w	r2, r4, #21
 8009b78:	4290      	cmp	r0, r2
 8009b7a:	bf38      	it	cc
 8009b7c:	2304      	movcc	r3, #4
 8009b7e:	f841 c003 	str.w	ip, [r1, r3]
 8009b82:	f1bc 0f00 	cmp.w	ip, #0
 8009b86:	d001      	beq.n	8009b8c <__lshift+0xac>
 8009b88:	f108 0602 	add.w	r6, r8, #2
 8009b8c:	3e01      	subs	r6, #1
 8009b8e:	4638      	mov	r0, r7
 8009b90:	612e      	str	r6, [r5, #16]
 8009b92:	4621      	mov	r1, r4
 8009b94:	f7ff fd88 	bl	80096a8 <_Bfree>
 8009b98:	4628      	mov	r0, r5
 8009b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	e7c1      	b.n	8009b2a <__lshift+0x4a>
 8009ba6:	3904      	subs	r1, #4
 8009ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bb0:	4298      	cmp	r0, r3
 8009bb2:	d8f9      	bhi.n	8009ba8 <__lshift+0xc8>
 8009bb4:	e7ea      	b.n	8009b8c <__lshift+0xac>
 8009bb6:	bf00      	nop
 8009bb8:	0800aae0 	.word	0x0800aae0
 8009bbc:	0800abd0 	.word	0x0800abd0

08009bc0 <__mcmp>:
 8009bc0:	b530      	push	{r4, r5, lr}
 8009bc2:	6902      	ldr	r2, [r0, #16]
 8009bc4:	690c      	ldr	r4, [r1, #16]
 8009bc6:	1b12      	subs	r2, r2, r4
 8009bc8:	d10e      	bne.n	8009be8 <__mcmp+0x28>
 8009bca:	f100 0314 	add.w	r3, r0, #20
 8009bce:	3114      	adds	r1, #20
 8009bd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009be0:	42a5      	cmp	r5, r4
 8009be2:	d003      	beq.n	8009bec <__mcmp+0x2c>
 8009be4:	d305      	bcc.n	8009bf2 <__mcmp+0x32>
 8009be6:	2201      	movs	r2, #1
 8009be8:	4610      	mov	r0, r2
 8009bea:	bd30      	pop	{r4, r5, pc}
 8009bec:	4283      	cmp	r3, r0
 8009bee:	d3f3      	bcc.n	8009bd8 <__mcmp+0x18>
 8009bf0:	e7fa      	b.n	8009be8 <__mcmp+0x28>
 8009bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf6:	e7f7      	b.n	8009be8 <__mcmp+0x28>

08009bf8 <__mdiff>:
 8009bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	4606      	mov	r6, r0
 8009c00:	4611      	mov	r1, r2
 8009c02:	4620      	mov	r0, r4
 8009c04:	4690      	mov	r8, r2
 8009c06:	f7ff ffdb 	bl	8009bc0 <__mcmp>
 8009c0a:	1e05      	subs	r5, r0, #0
 8009c0c:	d110      	bne.n	8009c30 <__mdiff+0x38>
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4630      	mov	r0, r6
 8009c12:	f7ff fd09 	bl	8009628 <_Balloc>
 8009c16:	b930      	cbnz	r0, 8009c26 <__mdiff+0x2e>
 8009c18:	4b3a      	ldr	r3, [pc, #232]	; (8009d04 <__mdiff+0x10c>)
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	f240 2132 	movw	r1, #562	; 0x232
 8009c20:	4839      	ldr	r0, [pc, #228]	; (8009d08 <__mdiff+0x110>)
 8009c22:	f000 fcd3 	bl	800a5cc <__assert_func>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c30:	bfa4      	itt	ge
 8009c32:	4643      	movge	r3, r8
 8009c34:	46a0      	movge	r8, r4
 8009c36:	4630      	mov	r0, r6
 8009c38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c3c:	bfa6      	itte	ge
 8009c3e:	461c      	movge	r4, r3
 8009c40:	2500      	movge	r5, #0
 8009c42:	2501      	movlt	r5, #1
 8009c44:	f7ff fcf0 	bl	8009628 <_Balloc>
 8009c48:	b920      	cbnz	r0, 8009c54 <__mdiff+0x5c>
 8009c4a:	4b2e      	ldr	r3, [pc, #184]	; (8009d04 <__mdiff+0x10c>)
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c52:	e7e5      	b.n	8009c20 <__mdiff+0x28>
 8009c54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c58:	6926      	ldr	r6, [r4, #16]
 8009c5a:	60c5      	str	r5, [r0, #12]
 8009c5c:	f104 0914 	add.w	r9, r4, #20
 8009c60:	f108 0514 	add.w	r5, r8, #20
 8009c64:	f100 0e14 	add.w	lr, r0, #20
 8009c68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c70:	f108 0210 	add.w	r2, r8, #16
 8009c74:	46f2      	mov	sl, lr
 8009c76:	2100      	movs	r1, #0
 8009c78:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c80:	fa1f f883 	uxth.w	r8, r3
 8009c84:	fa11 f18b 	uxtah	r1, r1, fp
 8009c88:	0c1b      	lsrs	r3, r3, #16
 8009c8a:	eba1 0808 	sub.w	r8, r1, r8
 8009c8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c96:	fa1f f888 	uxth.w	r8, r8
 8009c9a:	1419      	asrs	r1, r3, #16
 8009c9c:	454e      	cmp	r6, r9
 8009c9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ca2:	f84a 3b04 	str.w	r3, [sl], #4
 8009ca6:	d8e7      	bhi.n	8009c78 <__mdiff+0x80>
 8009ca8:	1b33      	subs	r3, r6, r4
 8009caa:	3b15      	subs	r3, #21
 8009cac:	f023 0303 	bic.w	r3, r3, #3
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	3415      	adds	r4, #21
 8009cb4:	42a6      	cmp	r6, r4
 8009cb6:	bf38      	it	cc
 8009cb8:	2304      	movcc	r3, #4
 8009cba:	441d      	add	r5, r3
 8009cbc:	4473      	add	r3, lr
 8009cbe:	469e      	mov	lr, r3
 8009cc0:	462e      	mov	r6, r5
 8009cc2:	4566      	cmp	r6, ip
 8009cc4:	d30e      	bcc.n	8009ce4 <__mdiff+0xec>
 8009cc6:	f10c 0203 	add.w	r2, ip, #3
 8009cca:	1b52      	subs	r2, r2, r5
 8009ccc:	f022 0203 	bic.w	r2, r2, #3
 8009cd0:	3d03      	subs	r5, #3
 8009cd2:	45ac      	cmp	ip, r5
 8009cd4:	bf38      	it	cc
 8009cd6:	2200      	movcc	r2, #0
 8009cd8:	441a      	add	r2, r3
 8009cda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009cde:	b17b      	cbz	r3, 8009d00 <__mdiff+0x108>
 8009ce0:	6107      	str	r7, [r0, #16]
 8009ce2:	e7a3      	b.n	8009c2c <__mdiff+0x34>
 8009ce4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ce8:	fa11 f288 	uxtah	r2, r1, r8
 8009cec:	1414      	asrs	r4, r2, #16
 8009cee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cf8:	f84e 2b04 	str.w	r2, [lr], #4
 8009cfc:	1421      	asrs	r1, r4, #16
 8009cfe:	e7e0      	b.n	8009cc2 <__mdiff+0xca>
 8009d00:	3f01      	subs	r7, #1
 8009d02:	e7ea      	b.n	8009cda <__mdiff+0xe2>
 8009d04:	0800aae0 	.word	0x0800aae0
 8009d08:	0800abd0 	.word	0x0800abd0

08009d0c <__ulp>:
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	ed8d 0b00 	vstr	d0, [sp]
 8009d12:	9b01      	ldr	r3, [sp, #4]
 8009d14:	4912      	ldr	r1, [pc, #72]	; (8009d60 <__ulp+0x54>)
 8009d16:	4019      	ands	r1, r3
 8009d18:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	dd05      	ble.n	8009d2c <__ulp+0x20>
 8009d20:	2200      	movs	r2, #0
 8009d22:	460b      	mov	r3, r1
 8009d24:	ec43 2b10 	vmov	d0, r2, r3
 8009d28:	b002      	add	sp, #8
 8009d2a:	4770      	bx	lr
 8009d2c:	4249      	negs	r1, r1
 8009d2e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009d32:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009d36:	f04f 0200 	mov.w	r2, #0
 8009d3a:	f04f 0300 	mov.w	r3, #0
 8009d3e:	da04      	bge.n	8009d4a <__ulp+0x3e>
 8009d40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009d44:	fa41 f300 	asr.w	r3, r1, r0
 8009d48:	e7ec      	b.n	8009d24 <__ulp+0x18>
 8009d4a:	f1a0 0114 	sub.w	r1, r0, #20
 8009d4e:	291e      	cmp	r1, #30
 8009d50:	bfda      	itte	le
 8009d52:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009d56:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d5a:	2101      	movgt	r1, #1
 8009d5c:	460a      	mov	r2, r1
 8009d5e:	e7e1      	b.n	8009d24 <__ulp+0x18>
 8009d60:	7ff00000 	.word	0x7ff00000

08009d64 <__b2d>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	6905      	ldr	r5, [r0, #16]
 8009d68:	f100 0714 	add.w	r7, r0, #20
 8009d6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d70:	1f2e      	subs	r6, r5, #4
 8009d72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d76:	4620      	mov	r0, r4
 8009d78:	f7ff fd48 	bl	800980c <__hi0bits>
 8009d7c:	f1c0 0320 	rsb	r3, r0, #32
 8009d80:	280a      	cmp	r0, #10
 8009d82:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009e00 <__b2d+0x9c>
 8009d86:	600b      	str	r3, [r1, #0]
 8009d88:	dc14      	bgt.n	8009db4 <__b2d+0x50>
 8009d8a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d8e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d92:	42b7      	cmp	r7, r6
 8009d94:	ea41 030c 	orr.w	r3, r1, ip
 8009d98:	bf34      	ite	cc
 8009d9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d9e:	2100      	movcs	r1, #0
 8009da0:	3015      	adds	r0, #21
 8009da2:	fa04 f000 	lsl.w	r0, r4, r0
 8009da6:	fa21 f10e 	lsr.w	r1, r1, lr
 8009daa:	ea40 0201 	orr.w	r2, r0, r1
 8009dae:	ec43 2b10 	vmov	d0, r2, r3
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	42b7      	cmp	r7, r6
 8009db6:	bf3a      	itte	cc
 8009db8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009dbc:	f1a5 0608 	subcc.w	r6, r5, #8
 8009dc0:	2100      	movcs	r1, #0
 8009dc2:	380b      	subs	r0, #11
 8009dc4:	d017      	beq.n	8009df6 <__b2d+0x92>
 8009dc6:	f1c0 0c20 	rsb	ip, r0, #32
 8009dca:	fa04 f500 	lsl.w	r5, r4, r0
 8009dce:	42be      	cmp	r6, r7
 8009dd0:	fa21 f40c 	lsr.w	r4, r1, ip
 8009dd4:	ea45 0504 	orr.w	r5, r5, r4
 8009dd8:	bf8c      	ite	hi
 8009dda:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009dde:	2400      	movls	r4, #0
 8009de0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009de4:	fa01 f000 	lsl.w	r0, r1, r0
 8009de8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009dec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009df0:	ea40 0204 	orr.w	r2, r0, r4
 8009df4:	e7db      	b.n	8009dae <__b2d+0x4a>
 8009df6:	ea44 030c 	orr.w	r3, r4, ip
 8009dfa:	460a      	mov	r2, r1
 8009dfc:	e7d7      	b.n	8009dae <__b2d+0x4a>
 8009dfe:	bf00      	nop
 8009e00:	3ff00000 	.word	0x3ff00000

08009e04 <__d2b>:
 8009e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e08:	4689      	mov	r9, r1
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	ec57 6b10 	vmov	r6, r7, d0
 8009e10:	4690      	mov	r8, r2
 8009e12:	f7ff fc09 	bl	8009628 <_Balloc>
 8009e16:	4604      	mov	r4, r0
 8009e18:	b930      	cbnz	r0, 8009e28 <__d2b+0x24>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	4b25      	ldr	r3, [pc, #148]	; (8009eb4 <__d2b+0xb0>)
 8009e1e:	4826      	ldr	r0, [pc, #152]	; (8009eb8 <__d2b+0xb4>)
 8009e20:	f240 310a 	movw	r1, #778	; 0x30a
 8009e24:	f000 fbd2 	bl	800a5cc <__assert_func>
 8009e28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e30:	bb35      	cbnz	r5, 8009e80 <__d2b+0x7c>
 8009e32:	2e00      	cmp	r6, #0
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	d028      	beq.n	8009e8a <__d2b+0x86>
 8009e38:	4668      	mov	r0, sp
 8009e3a:	9600      	str	r6, [sp, #0]
 8009e3c:	f7ff fd06 	bl	800984c <__lo0bits>
 8009e40:	9900      	ldr	r1, [sp, #0]
 8009e42:	b300      	cbz	r0, 8009e86 <__d2b+0x82>
 8009e44:	9a01      	ldr	r2, [sp, #4]
 8009e46:	f1c0 0320 	rsb	r3, r0, #32
 8009e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	40c2      	lsrs	r2, r0
 8009e52:	6163      	str	r3, [r4, #20]
 8009e54:	9201      	str	r2, [sp, #4]
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	61a3      	str	r3, [r4, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2202      	movne	r2, #2
 8009e60:	2201      	moveq	r2, #1
 8009e62:	6122      	str	r2, [r4, #16]
 8009e64:	b1d5      	cbz	r5, 8009e9c <__d2b+0x98>
 8009e66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e6a:	4405      	add	r5, r0
 8009e6c:	f8c9 5000 	str.w	r5, [r9]
 8009e70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e74:	f8c8 0000 	str.w	r0, [r8]
 8009e78:	4620      	mov	r0, r4
 8009e7a:	b003      	add	sp, #12
 8009e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e84:	e7d5      	b.n	8009e32 <__d2b+0x2e>
 8009e86:	6161      	str	r1, [r4, #20]
 8009e88:	e7e5      	b.n	8009e56 <__d2b+0x52>
 8009e8a:	a801      	add	r0, sp, #4
 8009e8c:	f7ff fcde 	bl	800984c <__lo0bits>
 8009e90:	9b01      	ldr	r3, [sp, #4]
 8009e92:	6163      	str	r3, [r4, #20]
 8009e94:	2201      	movs	r2, #1
 8009e96:	6122      	str	r2, [r4, #16]
 8009e98:	3020      	adds	r0, #32
 8009e9a:	e7e3      	b.n	8009e64 <__d2b+0x60>
 8009e9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ea0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ea4:	f8c9 0000 	str.w	r0, [r9]
 8009ea8:	6918      	ldr	r0, [r3, #16]
 8009eaa:	f7ff fcaf 	bl	800980c <__hi0bits>
 8009eae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009eb2:	e7df      	b.n	8009e74 <__d2b+0x70>
 8009eb4:	0800aae0 	.word	0x0800aae0
 8009eb8:	0800abd0 	.word	0x0800abd0

08009ebc <__ratio>:
 8009ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	4688      	mov	r8, r1
 8009ec2:	4669      	mov	r1, sp
 8009ec4:	4681      	mov	r9, r0
 8009ec6:	f7ff ff4d 	bl	8009d64 <__b2d>
 8009eca:	a901      	add	r1, sp, #4
 8009ecc:	4640      	mov	r0, r8
 8009ece:	ec55 4b10 	vmov	r4, r5, d0
 8009ed2:	f7ff ff47 	bl	8009d64 <__b2d>
 8009ed6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009eda:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ede:	eba3 0c02 	sub.w	ip, r3, r2
 8009ee2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009eec:	ec51 0b10 	vmov	r0, r1, d0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bfd6      	itet	le
 8009ef4:	460a      	movle	r2, r1
 8009ef6:	462a      	movgt	r2, r5
 8009ef8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009efc:	468b      	mov	fp, r1
 8009efe:	462f      	mov	r7, r5
 8009f00:	bfd4      	ite	le
 8009f02:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009f06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	ee10 2a10 	vmov	r2, s0
 8009f10:	465b      	mov	r3, fp
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 fcaa 	bl	800086c <__aeabi_ddiv>
 8009f18:	ec41 0b10 	vmov	d0, r0, r1
 8009f1c:	b003      	add	sp, #12
 8009f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f22 <__copybits>:
 8009f22:	3901      	subs	r1, #1
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	1149      	asrs	r1, r1, #5
 8009f28:	6914      	ldr	r4, [r2, #16]
 8009f2a:	3101      	adds	r1, #1
 8009f2c:	f102 0314 	add.w	r3, r2, #20
 8009f30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f38:	1f05      	subs	r5, r0, #4
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	d30c      	bcc.n	8009f58 <__copybits+0x36>
 8009f3e:	1aa3      	subs	r3, r4, r2
 8009f40:	3b11      	subs	r3, #17
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	3211      	adds	r2, #17
 8009f48:	42a2      	cmp	r2, r4
 8009f4a:	bf88      	it	hi
 8009f4c:	2300      	movhi	r3, #0
 8009f4e:	4418      	add	r0, r3
 8009f50:	2300      	movs	r3, #0
 8009f52:	4288      	cmp	r0, r1
 8009f54:	d305      	bcc.n	8009f62 <__copybits+0x40>
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f5c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f60:	e7eb      	b.n	8009f3a <__copybits+0x18>
 8009f62:	f840 3b04 	str.w	r3, [r0], #4
 8009f66:	e7f4      	b.n	8009f52 <__copybits+0x30>

08009f68 <__any_on>:
 8009f68:	f100 0214 	add.w	r2, r0, #20
 8009f6c:	6900      	ldr	r0, [r0, #16]
 8009f6e:	114b      	asrs	r3, r1, #5
 8009f70:	4298      	cmp	r0, r3
 8009f72:	b510      	push	{r4, lr}
 8009f74:	db11      	blt.n	8009f9a <__any_on+0x32>
 8009f76:	dd0a      	ble.n	8009f8e <__any_on+0x26>
 8009f78:	f011 011f 	ands.w	r1, r1, #31
 8009f7c:	d007      	beq.n	8009f8e <__any_on+0x26>
 8009f7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f82:	fa24 f001 	lsr.w	r0, r4, r1
 8009f86:	fa00 f101 	lsl.w	r1, r0, r1
 8009f8a:	428c      	cmp	r4, r1
 8009f8c:	d10b      	bne.n	8009fa6 <__any_on+0x3e>
 8009f8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d803      	bhi.n	8009f9e <__any_on+0x36>
 8009f96:	2000      	movs	r0, #0
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	e7f7      	b.n	8009f8e <__any_on+0x26>
 8009f9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	d0f5      	beq.n	8009f92 <__any_on+0x2a>
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	e7f6      	b.n	8009f98 <__any_on+0x30>

08009faa <_calloc_r>:
 8009faa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fac:	fba1 2402 	umull	r2, r4, r1, r2
 8009fb0:	b94c      	cbnz	r4, 8009fc6 <_calloc_r+0x1c>
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	9201      	str	r2, [sp, #4]
 8009fb6:	f000 f87b 	bl	800a0b0 <_malloc_r>
 8009fba:	9a01      	ldr	r2, [sp, #4]
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	b930      	cbnz	r0, 8009fce <_calloc_r+0x24>
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	b003      	add	sp, #12
 8009fc4:	bd30      	pop	{r4, r5, pc}
 8009fc6:	220c      	movs	r2, #12
 8009fc8:	6002      	str	r2, [r0, #0]
 8009fca:	2500      	movs	r5, #0
 8009fcc:	e7f8      	b.n	8009fc0 <_calloc_r+0x16>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	f7fb fefb 	bl	8005dca <memset>
 8009fd4:	e7f4      	b.n	8009fc0 <_calloc_r+0x16>
	...

08009fd8 <_free_r>:
 8009fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fda:	2900      	cmp	r1, #0
 8009fdc:	d044      	beq.n	800a068 <_free_r+0x90>
 8009fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe2:	9001      	str	r0, [sp, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8009fea:	bfb8      	it	lt
 8009fec:	18e4      	addlt	r4, r4, r3
 8009fee:	f000 fb4f 	bl	800a690 <__malloc_lock>
 8009ff2:	4a1e      	ldr	r2, [pc, #120]	; (800a06c <_free_r+0x94>)
 8009ff4:	9801      	ldr	r0, [sp, #4]
 8009ff6:	6813      	ldr	r3, [r2, #0]
 8009ff8:	b933      	cbnz	r3, 800a008 <_free_r+0x30>
 8009ffa:	6063      	str	r3, [r4, #4]
 8009ffc:	6014      	str	r4, [r2, #0]
 8009ffe:	b003      	add	sp, #12
 800a000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a004:	f000 bb4a 	b.w	800a69c <__malloc_unlock>
 800a008:	42a3      	cmp	r3, r4
 800a00a:	d908      	bls.n	800a01e <_free_r+0x46>
 800a00c:	6825      	ldr	r5, [r4, #0]
 800a00e:	1961      	adds	r1, r4, r5
 800a010:	428b      	cmp	r3, r1
 800a012:	bf01      	itttt	eq
 800a014:	6819      	ldreq	r1, [r3, #0]
 800a016:	685b      	ldreq	r3, [r3, #4]
 800a018:	1949      	addeq	r1, r1, r5
 800a01a:	6021      	streq	r1, [r4, #0]
 800a01c:	e7ed      	b.n	8009ffa <_free_r+0x22>
 800a01e:	461a      	mov	r2, r3
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	b10b      	cbz	r3, 800a028 <_free_r+0x50>
 800a024:	42a3      	cmp	r3, r4
 800a026:	d9fa      	bls.n	800a01e <_free_r+0x46>
 800a028:	6811      	ldr	r1, [r2, #0]
 800a02a:	1855      	adds	r5, r2, r1
 800a02c:	42a5      	cmp	r5, r4
 800a02e:	d10b      	bne.n	800a048 <_free_r+0x70>
 800a030:	6824      	ldr	r4, [r4, #0]
 800a032:	4421      	add	r1, r4
 800a034:	1854      	adds	r4, r2, r1
 800a036:	42a3      	cmp	r3, r4
 800a038:	6011      	str	r1, [r2, #0]
 800a03a:	d1e0      	bne.n	8009ffe <_free_r+0x26>
 800a03c:	681c      	ldr	r4, [r3, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	6053      	str	r3, [r2, #4]
 800a042:	4421      	add	r1, r4
 800a044:	6011      	str	r1, [r2, #0]
 800a046:	e7da      	b.n	8009ffe <_free_r+0x26>
 800a048:	d902      	bls.n	800a050 <_free_r+0x78>
 800a04a:	230c      	movs	r3, #12
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	e7d6      	b.n	8009ffe <_free_r+0x26>
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	1961      	adds	r1, r4, r5
 800a054:	428b      	cmp	r3, r1
 800a056:	bf04      	itt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	bf04      	itt	eq
 800a060:	1949      	addeq	r1, r1, r5
 800a062:	6021      	streq	r1, [r4, #0]
 800a064:	6054      	str	r4, [r2, #4]
 800a066:	e7ca      	b.n	8009ffe <_free_r+0x26>
 800a068:	b003      	add	sp, #12
 800a06a:	bd30      	pop	{r4, r5, pc}
 800a06c:	20000540 	.word	0x20000540

0800a070 <sbrk_aligned>:
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	4e0e      	ldr	r6, [pc, #56]	; (800a0ac <sbrk_aligned+0x3c>)
 800a074:	460c      	mov	r4, r1
 800a076:	6831      	ldr	r1, [r6, #0]
 800a078:	4605      	mov	r5, r0
 800a07a:	b911      	cbnz	r1, 800a082 <sbrk_aligned+0x12>
 800a07c:	f000 fa20 	bl	800a4c0 <_sbrk_r>
 800a080:	6030      	str	r0, [r6, #0]
 800a082:	4621      	mov	r1, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f000 fa1b 	bl	800a4c0 <_sbrk_r>
 800a08a:	1c43      	adds	r3, r0, #1
 800a08c:	d00a      	beq.n	800a0a4 <sbrk_aligned+0x34>
 800a08e:	1cc4      	adds	r4, r0, #3
 800a090:	f024 0403 	bic.w	r4, r4, #3
 800a094:	42a0      	cmp	r0, r4
 800a096:	d007      	beq.n	800a0a8 <sbrk_aligned+0x38>
 800a098:	1a21      	subs	r1, r4, r0
 800a09a:	4628      	mov	r0, r5
 800a09c:	f000 fa10 	bl	800a4c0 <_sbrk_r>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d101      	bne.n	800a0a8 <sbrk_aligned+0x38>
 800a0a4:	f04f 34ff 	mov.w	r4, #4294967295
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	20000544 	.word	0x20000544

0800a0b0 <_malloc_r>:
 800a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b4:	1ccd      	adds	r5, r1, #3
 800a0b6:	f025 0503 	bic.w	r5, r5, #3
 800a0ba:	3508      	adds	r5, #8
 800a0bc:	2d0c      	cmp	r5, #12
 800a0be:	bf38      	it	cc
 800a0c0:	250c      	movcc	r5, #12
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	db01      	blt.n	800a0cc <_malloc_r+0x1c>
 800a0c8:	42a9      	cmp	r1, r5
 800a0ca:	d905      	bls.n	800a0d8 <_malloc_r+0x28>
 800a0cc:	230c      	movs	r3, #12
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d8:	4e2e      	ldr	r6, [pc, #184]	; (800a194 <_malloc_r+0xe4>)
 800a0da:	f000 fad9 	bl	800a690 <__malloc_lock>
 800a0de:	6833      	ldr	r3, [r6, #0]
 800a0e0:	461c      	mov	r4, r3
 800a0e2:	bb34      	cbnz	r4, 800a132 <_malloc_r+0x82>
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f7ff ffc2 	bl	800a070 <sbrk_aligned>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	d14d      	bne.n	800a18e <_malloc_r+0xde>
 800a0f2:	6834      	ldr	r4, [r6, #0]
 800a0f4:	4626      	mov	r6, r4
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	d140      	bne.n	800a17c <_malloc_r+0xcc>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4638      	mov	r0, r7
 800a100:	eb04 0803 	add.w	r8, r4, r3
 800a104:	f000 f9dc 	bl	800a4c0 <_sbrk_r>
 800a108:	4580      	cmp	r8, r0
 800a10a:	d13a      	bne.n	800a182 <_malloc_r+0xd2>
 800a10c:	6821      	ldr	r1, [r4, #0]
 800a10e:	3503      	adds	r5, #3
 800a110:	1a6d      	subs	r5, r5, r1
 800a112:	f025 0503 	bic.w	r5, r5, #3
 800a116:	3508      	adds	r5, #8
 800a118:	2d0c      	cmp	r5, #12
 800a11a:	bf38      	it	cc
 800a11c:	250c      	movcc	r5, #12
 800a11e:	4629      	mov	r1, r5
 800a120:	4638      	mov	r0, r7
 800a122:	f7ff ffa5 	bl	800a070 <sbrk_aligned>
 800a126:	3001      	adds	r0, #1
 800a128:	d02b      	beq.n	800a182 <_malloc_r+0xd2>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	442b      	add	r3, r5
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	e00e      	b.n	800a150 <_malloc_r+0xa0>
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	1b52      	subs	r2, r2, r5
 800a136:	d41e      	bmi.n	800a176 <_malloc_r+0xc6>
 800a138:	2a0b      	cmp	r2, #11
 800a13a:	d916      	bls.n	800a16a <_malloc_r+0xba>
 800a13c:	1961      	adds	r1, r4, r5
 800a13e:	42a3      	cmp	r3, r4
 800a140:	6025      	str	r5, [r4, #0]
 800a142:	bf18      	it	ne
 800a144:	6059      	strne	r1, [r3, #4]
 800a146:	6863      	ldr	r3, [r4, #4]
 800a148:	bf08      	it	eq
 800a14a:	6031      	streq	r1, [r6, #0]
 800a14c:	5162      	str	r2, [r4, r5]
 800a14e:	604b      	str	r3, [r1, #4]
 800a150:	4638      	mov	r0, r7
 800a152:	f104 060b 	add.w	r6, r4, #11
 800a156:	f000 faa1 	bl	800a69c <__malloc_unlock>
 800a15a:	f026 0607 	bic.w	r6, r6, #7
 800a15e:	1d23      	adds	r3, r4, #4
 800a160:	1af2      	subs	r2, r6, r3
 800a162:	d0b6      	beq.n	800a0d2 <_malloc_r+0x22>
 800a164:	1b9b      	subs	r3, r3, r6
 800a166:	50a3      	str	r3, [r4, r2]
 800a168:	e7b3      	b.n	800a0d2 <_malloc_r+0x22>
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	bf0c      	ite	eq
 800a170:	6032      	streq	r2, [r6, #0]
 800a172:	605a      	strne	r2, [r3, #4]
 800a174:	e7ec      	b.n	800a150 <_malloc_r+0xa0>
 800a176:	4623      	mov	r3, r4
 800a178:	6864      	ldr	r4, [r4, #4]
 800a17a:	e7b2      	b.n	800a0e2 <_malloc_r+0x32>
 800a17c:	4634      	mov	r4, r6
 800a17e:	6876      	ldr	r6, [r6, #4]
 800a180:	e7b9      	b.n	800a0f6 <_malloc_r+0x46>
 800a182:	230c      	movs	r3, #12
 800a184:	603b      	str	r3, [r7, #0]
 800a186:	4638      	mov	r0, r7
 800a188:	f000 fa88 	bl	800a69c <__malloc_unlock>
 800a18c:	e7a1      	b.n	800a0d2 <_malloc_r+0x22>
 800a18e:	6025      	str	r5, [r4, #0]
 800a190:	e7de      	b.n	800a150 <_malloc_r+0xa0>
 800a192:	bf00      	nop
 800a194:	20000540 	.word	0x20000540

0800a198 <_realloc_r>:
 800a198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19c:	4680      	mov	r8, r0
 800a19e:	4614      	mov	r4, r2
 800a1a0:	460e      	mov	r6, r1
 800a1a2:	b921      	cbnz	r1, 800a1ae <_realloc_r+0x16>
 800a1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	f7ff bf81 	b.w	800a0b0 <_malloc_r>
 800a1ae:	b92a      	cbnz	r2, 800a1bc <_realloc_r+0x24>
 800a1b0:	f7ff ff12 	bl	8009fd8 <_free_r>
 800a1b4:	4625      	mov	r5, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1bc:	f000 fa74 	bl	800a6a8 <_malloc_usable_size_r>
 800a1c0:	4284      	cmp	r4, r0
 800a1c2:	4607      	mov	r7, r0
 800a1c4:	d802      	bhi.n	800a1cc <_realloc_r+0x34>
 800a1c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1ca:	d812      	bhi.n	800a1f2 <_realloc_r+0x5a>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	f7ff ff6e 	bl	800a0b0 <_malloc_r>
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d0ed      	beq.n	800a1b6 <_realloc_r+0x1e>
 800a1da:	42bc      	cmp	r4, r7
 800a1dc:	4622      	mov	r2, r4
 800a1de:	4631      	mov	r1, r6
 800a1e0:	bf28      	it	cs
 800a1e2:	463a      	movcs	r2, r7
 800a1e4:	f7ff f9f8 	bl	80095d8 <memcpy>
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	f7ff fef4 	bl	8009fd8 <_free_r>
 800a1f0:	e7e1      	b.n	800a1b6 <_realloc_r+0x1e>
 800a1f2:	4635      	mov	r5, r6
 800a1f4:	e7df      	b.n	800a1b6 <_realloc_r+0x1e>

0800a1f6 <__ssputs_r>:
 800a1f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fa:	688e      	ldr	r6, [r1, #8]
 800a1fc:	429e      	cmp	r6, r3
 800a1fe:	4682      	mov	sl, r0
 800a200:	460c      	mov	r4, r1
 800a202:	4690      	mov	r8, r2
 800a204:	461f      	mov	r7, r3
 800a206:	d838      	bhi.n	800a27a <__ssputs_r+0x84>
 800a208:	898a      	ldrh	r2, [r1, #12]
 800a20a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a20e:	d032      	beq.n	800a276 <__ssputs_r+0x80>
 800a210:	6825      	ldr	r5, [r4, #0]
 800a212:	6909      	ldr	r1, [r1, #16]
 800a214:	eba5 0901 	sub.w	r9, r5, r1
 800a218:	6965      	ldr	r5, [r4, #20]
 800a21a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a21e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a222:	3301      	adds	r3, #1
 800a224:	444b      	add	r3, r9
 800a226:	106d      	asrs	r5, r5, #1
 800a228:	429d      	cmp	r5, r3
 800a22a:	bf38      	it	cc
 800a22c:	461d      	movcc	r5, r3
 800a22e:	0553      	lsls	r3, r2, #21
 800a230:	d531      	bpl.n	800a296 <__ssputs_r+0xa0>
 800a232:	4629      	mov	r1, r5
 800a234:	f7ff ff3c 	bl	800a0b0 <_malloc_r>
 800a238:	4606      	mov	r6, r0
 800a23a:	b950      	cbnz	r0, 800a252 <__ssputs_r+0x5c>
 800a23c:	230c      	movs	r3, #12
 800a23e:	f8ca 3000 	str.w	r3, [sl]
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	6921      	ldr	r1, [r4, #16]
 800a254:	464a      	mov	r2, r9
 800a256:	f7ff f9bf 	bl	80095d8 <memcpy>
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	6126      	str	r6, [r4, #16]
 800a268:	6165      	str	r5, [r4, #20]
 800a26a:	444e      	add	r6, r9
 800a26c:	eba5 0509 	sub.w	r5, r5, r9
 800a270:	6026      	str	r6, [r4, #0]
 800a272:	60a5      	str	r5, [r4, #8]
 800a274:	463e      	mov	r6, r7
 800a276:	42be      	cmp	r6, r7
 800a278:	d900      	bls.n	800a27c <__ssputs_r+0x86>
 800a27a:	463e      	mov	r6, r7
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	4632      	mov	r2, r6
 800a280:	4641      	mov	r1, r8
 800a282:	f7ff f9b7 	bl	80095f4 <memmove>
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	1b9b      	subs	r3, r3, r6
 800a28a:	60a3      	str	r3, [r4, #8]
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	4433      	add	r3, r6
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	2000      	movs	r0, #0
 800a294:	e7db      	b.n	800a24e <__ssputs_r+0x58>
 800a296:	462a      	mov	r2, r5
 800a298:	f7ff ff7e 	bl	800a198 <_realloc_r>
 800a29c:	4606      	mov	r6, r0
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d1e1      	bne.n	800a266 <__ssputs_r+0x70>
 800a2a2:	6921      	ldr	r1, [r4, #16]
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	f7ff fe97 	bl	8009fd8 <_free_r>
 800a2aa:	e7c7      	b.n	800a23c <__ssputs_r+0x46>

0800a2ac <_svfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	4698      	mov	r8, r3
 800a2b2:	898b      	ldrh	r3, [r1, #12]
 800a2b4:	061b      	lsls	r3, r3, #24
 800a2b6:	b09d      	sub	sp, #116	; 0x74
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	4614      	mov	r4, r2
 800a2be:	d50e      	bpl.n	800a2de <_svfiprintf_r+0x32>
 800a2c0:	690b      	ldr	r3, [r1, #16]
 800a2c2:	b963      	cbnz	r3, 800a2de <_svfiprintf_r+0x32>
 800a2c4:	2140      	movs	r1, #64	; 0x40
 800a2c6:	f7ff fef3 	bl	800a0b0 <_malloc_r>
 800a2ca:	6028      	str	r0, [r5, #0]
 800a2cc:	6128      	str	r0, [r5, #16]
 800a2ce:	b920      	cbnz	r0, 800a2da <_svfiprintf_r+0x2e>
 800a2d0:	230c      	movs	r3, #12
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	e0d1      	b.n	800a47e <_svfiprintf_r+0x1d2>
 800a2da:	2340      	movs	r3, #64	; 0x40
 800a2dc:	616b      	str	r3, [r5, #20]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e2:	2320      	movs	r3, #32
 800a2e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ec:	2330      	movs	r3, #48	; 0x30
 800a2ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a498 <_svfiprintf_r+0x1ec>
 800a2f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2f6:	f04f 0901 	mov.w	r9, #1
 800a2fa:	4623      	mov	r3, r4
 800a2fc:	469a      	mov	sl, r3
 800a2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a302:	b10a      	cbz	r2, 800a308 <_svfiprintf_r+0x5c>
 800a304:	2a25      	cmp	r2, #37	; 0x25
 800a306:	d1f9      	bne.n	800a2fc <_svfiprintf_r+0x50>
 800a308:	ebba 0b04 	subs.w	fp, sl, r4
 800a30c:	d00b      	beq.n	800a326 <_svfiprintf_r+0x7a>
 800a30e:	465b      	mov	r3, fp
 800a310:	4622      	mov	r2, r4
 800a312:	4629      	mov	r1, r5
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff ff6e 	bl	800a1f6 <__ssputs_r>
 800a31a:	3001      	adds	r0, #1
 800a31c:	f000 80aa 	beq.w	800a474 <_svfiprintf_r+0x1c8>
 800a320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a322:	445a      	add	r2, fp
 800a324:	9209      	str	r2, [sp, #36]	; 0x24
 800a326:	f89a 3000 	ldrb.w	r3, [sl]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 80a2 	beq.w	800a474 <_svfiprintf_r+0x1c8>
 800a330:	2300      	movs	r3, #0
 800a332:	f04f 32ff 	mov.w	r2, #4294967295
 800a336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a33a:	f10a 0a01 	add.w	sl, sl, #1
 800a33e:	9304      	str	r3, [sp, #16]
 800a340:	9307      	str	r3, [sp, #28]
 800a342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a346:	931a      	str	r3, [sp, #104]	; 0x68
 800a348:	4654      	mov	r4, sl
 800a34a:	2205      	movs	r2, #5
 800a34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a350:	4851      	ldr	r0, [pc, #324]	; (800a498 <_svfiprintf_r+0x1ec>)
 800a352:	f7f5 ff55 	bl	8000200 <memchr>
 800a356:	9a04      	ldr	r2, [sp, #16]
 800a358:	b9d8      	cbnz	r0, 800a392 <_svfiprintf_r+0xe6>
 800a35a:	06d0      	lsls	r0, r2, #27
 800a35c:	bf44      	itt	mi
 800a35e:	2320      	movmi	r3, #32
 800a360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a364:	0711      	lsls	r1, r2, #28
 800a366:	bf44      	itt	mi
 800a368:	232b      	movmi	r3, #43	; 0x2b
 800a36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a36e:	f89a 3000 	ldrb.w	r3, [sl]
 800a372:	2b2a      	cmp	r3, #42	; 0x2a
 800a374:	d015      	beq.n	800a3a2 <_svfiprintf_r+0xf6>
 800a376:	9a07      	ldr	r2, [sp, #28]
 800a378:	4654      	mov	r4, sl
 800a37a:	2000      	movs	r0, #0
 800a37c:	f04f 0c0a 	mov.w	ip, #10
 800a380:	4621      	mov	r1, r4
 800a382:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a386:	3b30      	subs	r3, #48	; 0x30
 800a388:	2b09      	cmp	r3, #9
 800a38a:	d94e      	bls.n	800a42a <_svfiprintf_r+0x17e>
 800a38c:	b1b0      	cbz	r0, 800a3bc <_svfiprintf_r+0x110>
 800a38e:	9207      	str	r2, [sp, #28]
 800a390:	e014      	b.n	800a3bc <_svfiprintf_r+0x110>
 800a392:	eba0 0308 	sub.w	r3, r0, r8
 800a396:	fa09 f303 	lsl.w	r3, r9, r3
 800a39a:	4313      	orrs	r3, r2
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	46a2      	mov	sl, r4
 800a3a0:	e7d2      	b.n	800a348 <_svfiprintf_r+0x9c>
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	1d19      	adds	r1, r3, #4
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	9103      	str	r1, [sp, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	bfbb      	ittet	lt
 800a3ae:	425b      	neglt	r3, r3
 800a3b0:	f042 0202 	orrlt.w	r2, r2, #2
 800a3b4:	9307      	strge	r3, [sp, #28]
 800a3b6:	9307      	strlt	r3, [sp, #28]
 800a3b8:	bfb8      	it	lt
 800a3ba:	9204      	strlt	r2, [sp, #16]
 800a3bc:	7823      	ldrb	r3, [r4, #0]
 800a3be:	2b2e      	cmp	r3, #46	; 0x2e
 800a3c0:	d10c      	bne.n	800a3dc <_svfiprintf_r+0x130>
 800a3c2:	7863      	ldrb	r3, [r4, #1]
 800a3c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c6:	d135      	bne.n	800a434 <_svfiprintf_r+0x188>
 800a3c8:	9b03      	ldr	r3, [sp, #12]
 800a3ca:	1d1a      	adds	r2, r3, #4
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	9203      	str	r2, [sp, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	bfb8      	it	lt
 800a3d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3d8:	3402      	adds	r4, #2
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4a8 <_svfiprintf_r+0x1fc>
 800a3e0:	7821      	ldrb	r1, [r4, #0]
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	4650      	mov	r0, sl
 800a3e6:	f7f5 ff0b 	bl	8000200 <memchr>
 800a3ea:	b140      	cbz	r0, 800a3fe <_svfiprintf_r+0x152>
 800a3ec:	2340      	movs	r3, #64	; 0x40
 800a3ee:	eba0 000a 	sub.w	r0, r0, sl
 800a3f2:	fa03 f000 	lsl.w	r0, r3, r0
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	4303      	orrs	r3, r0
 800a3fa:	3401      	adds	r4, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a402:	4826      	ldr	r0, [pc, #152]	; (800a49c <_svfiprintf_r+0x1f0>)
 800a404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a408:	2206      	movs	r2, #6
 800a40a:	f7f5 fef9 	bl	8000200 <memchr>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d038      	beq.n	800a484 <_svfiprintf_r+0x1d8>
 800a412:	4b23      	ldr	r3, [pc, #140]	; (800a4a0 <_svfiprintf_r+0x1f4>)
 800a414:	bb1b      	cbnz	r3, 800a45e <_svfiprintf_r+0x1b2>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	3307      	adds	r3, #7
 800a41a:	f023 0307 	bic.w	r3, r3, #7
 800a41e:	3308      	adds	r3, #8
 800a420:	9303      	str	r3, [sp, #12]
 800a422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a424:	4433      	add	r3, r6
 800a426:	9309      	str	r3, [sp, #36]	; 0x24
 800a428:	e767      	b.n	800a2fa <_svfiprintf_r+0x4e>
 800a42a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a42e:	460c      	mov	r4, r1
 800a430:	2001      	movs	r0, #1
 800a432:	e7a5      	b.n	800a380 <_svfiprintf_r+0xd4>
 800a434:	2300      	movs	r3, #0
 800a436:	3401      	adds	r4, #1
 800a438:	9305      	str	r3, [sp, #20]
 800a43a:	4619      	mov	r1, r3
 800a43c:	f04f 0c0a 	mov.w	ip, #10
 800a440:	4620      	mov	r0, r4
 800a442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a446:	3a30      	subs	r2, #48	; 0x30
 800a448:	2a09      	cmp	r2, #9
 800a44a:	d903      	bls.n	800a454 <_svfiprintf_r+0x1a8>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0c5      	beq.n	800a3dc <_svfiprintf_r+0x130>
 800a450:	9105      	str	r1, [sp, #20]
 800a452:	e7c3      	b.n	800a3dc <_svfiprintf_r+0x130>
 800a454:	fb0c 2101 	mla	r1, ip, r1, r2
 800a458:	4604      	mov	r4, r0
 800a45a:	2301      	movs	r3, #1
 800a45c:	e7f0      	b.n	800a440 <_svfiprintf_r+0x194>
 800a45e:	ab03      	add	r3, sp, #12
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	462a      	mov	r2, r5
 800a464:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <_svfiprintf_r+0x1f8>)
 800a466:	a904      	add	r1, sp, #16
 800a468:	4638      	mov	r0, r7
 800a46a:	f7fb feaf 	bl	80061cc <_printf_float>
 800a46e:	1c42      	adds	r2, r0, #1
 800a470:	4606      	mov	r6, r0
 800a472:	d1d6      	bne.n	800a422 <_svfiprintf_r+0x176>
 800a474:	89ab      	ldrh	r3, [r5, #12]
 800a476:	065b      	lsls	r3, r3, #25
 800a478:	f53f af2c 	bmi.w	800a2d4 <_svfiprintf_r+0x28>
 800a47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a47e:	b01d      	add	sp, #116	; 0x74
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	ab03      	add	r3, sp, #12
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	462a      	mov	r2, r5
 800a48a:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <_svfiprintf_r+0x1f8>)
 800a48c:	a904      	add	r1, sp, #16
 800a48e:	4638      	mov	r0, r7
 800a490:	f7fc f940 	bl	8006714 <_printf_i>
 800a494:	e7eb      	b.n	800a46e <_svfiprintf_r+0x1c2>
 800a496:	bf00      	nop
 800a498:	0800a8c4 	.word	0x0800a8c4
 800a49c:	0800a8ce 	.word	0x0800a8ce
 800a4a0:	080061cd 	.word	0x080061cd
 800a4a4:	0800a1f7 	.word	0x0800a1f7
 800a4a8:	0800a8ca 	.word	0x0800a8ca
 800a4ac:	00000000 	.word	0x00000000

0800a4b0 <nan>:
 800a4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4b8 <nan+0x8>
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	00000000 	.word	0x00000000
 800a4bc:	7ff80000 	.word	0x7ff80000

0800a4c0 <_sbrk_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d06      	ldr	r5, [pc, #24]	; (800a4dc <_sbrk_r+0x1c>)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7fb fbb4 	bl	8005c38 <_sbrk>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_sbrk_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_sbrk_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	20000548 	.word	0x20000548

0800a4e0 <__sread>:
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e8:	f000 f8e6 	bl	800a6b8 <_read_r>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	bfab      	itete	ge
 800a4f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f4:	181b      	addge	r3, r3, r0
 800a4f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4fa:	bfac      	ite	ge
 800a4fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4fe:	81a3      	strhlt	r3, [r4, #12]
 800a500:	bd10      	pop	{r4, pc}

0800a502 <__swrite>:
 800a502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a506:	461f      	mov	r7, r3
 800a508:	898b      	ldrh	r3, [r1, #12]
 800a50a:	05db      	lsls	r3, r3, #23
 800a50c:	4605      	mov	r5, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	4616      	mov	r6, r2
 800a512:	d505      	bpl.n	800a520 <__swrite+0x1e>
 800a514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a518:	2302      	movs	r3, #2
 800a51a:	2200      	movs	r2, #0
 800a51c:	f000 f8a6 	bl	800a66c <_lseek_r>
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a52a:	81a3      	strh	r3, [r4, #12]
 800a52c:	4632      	mov	r2, r6
 800a52e:	463b      	mov	r3, r7
 800a530:	4628      	mov	r0, r5
 800a532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a536:	f000 b837 	b.w	800a5a8 <_write_r>

0800a53a <__sseek>:
 800a53a:	b510      	push	{r4, lr}
 800a53c:	460c      	mov	r4, r1
 800a53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a542:	f000 f893 	bl	800a66c <_lseek_r>
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	bf15      	itete	ne
 800a54c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a54e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a556:	81a3      	strheq	r3, [r4, #12]
 800a558:	bf18      	it	ne
 800a55a:	81a3      	strhne	r3, [r4, #12]
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <__sclose>:
 800a55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a562:	f000 b851 	b.w	800a608 <_close_r>

0800a566 <strncmp>:
 800a566:	b510      	push	{r4, lr}
 800a568:	b17a      	cbz	r2, 800a58a <strncmp+0x24>
 800a56a:	4603      	mov	r3, r0
 800a56c:	3901      	subs	r1, #1
 800a56e:	1884      	adds	r4, r0, r2
 800a570:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a574:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a578:	4290      	cmp	r0, r2
 800a57a:	d101      	bne.n	800a580 <strncmp+0x1a>
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d101      	bne.n	800a584 <strncmp+0x1e>
 800a580:	1a80      	subs	r0, r0, r2
 800a582:	bd10      	pop	{r4, pc}
 800a584:	2800      	cmp	r0, #0
 800a586:	d1f3      	bne.n	800a570 <strncmp+0xa>
 800a588:	e7fa      	b.n	800a580 <strncmp+0x1a>
 800a58a:	4610      	mov	r0, r2
 800a58c:	e7f9      	b.n	800a582 <strncmp+0x1c>

0800a58e <__ascii_wctomb>:
 800a58e:	b149      	cbz	r1, 800a5a4 <__ascii_wctomb+0x16>
 800a590:	2aff      	cmp	r2, #255	; 0xff
 800a592:	bf85      	ittet	hi
 800a594:	238a      	movhi	r3, #138	; 0x8a
 800a596:	6003      	strhi	r3, [r0, #0]
 800a598:	700a      	strbls	r2, [r1, #0]
 800a59a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a59e:	bf98      	it	ls
 800a5a0:	2001      	movls	r0, #1
 800a5a2:	4770      	bx	lr
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4770      	bx	lr

0800a5a8 <_write_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_write_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7fb fae0 	bl	8005b7c <_write>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_write_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_write_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	20000548 	.word	0x20000548

0800a5cc <__assert_func>:
 800a5cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ce:	4614      	mov	r4, r2
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <__assert_func+0x2c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	68d8      	ldr	r0, [r3, #12]
 800a5da:	b14c      	cbz	r4, 800a5f0 <__assert_func+0x24>
 800a5dc:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <__assert_func+0x30>)
 800a5de:	9100      	str	r1, [sp, #0]
 800a5e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5e4:	4906      	ldr	r1, [pc, #24]	; (800a600 <__assert_func+0x34>)
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	f7fb fbb6 	bl	8005d58 <fiprintf>
 800a5ec:	f000 f876 	bl	800a6dc <abort>
 800a5f0:	4b04      	ldr	r3, [pc, #16]	; (800a604 <__assert_func+0x38>)
 800a5f2:	461c      	mov	r4, r3
 800a5f4:	e7f3      	b.n	800a5de <__assert_func+0x12>
 800a5f6:	bf00      	nop
 800a5f8:	20000030 	.word	0x20000030
 800a5fc:	0800ad2c 	.word	0x0800ad2c
 800a600:	0800ad39 	.word	0x0800ad39
 800a604:	0800ad67 	.word	0x0800ad67

0800a608 <_close_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4d06      	ldr	r5, [pc, #24]	; (800a624 <_close_r+0x1c>)
 800a60c:	2300      	movs	r3, #0
 800a60e:	4604      	mov	r4, r0
 800a610:	4608      	mov	r0, r1
 800a612:	602b      	str	r3, [r5, #0]
 800a614:	f7fb fadc 	bl	8005bd0 <_close>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d102      	bne.n	800a622 <_close_r+0x1a>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	b103      	cbz	r3, 800a622 <_close_r+0x1a>
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	20000548 	.word	0x20000548

0800a628 <_fstat_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d07      	ldr	r5, [pc, #28]	; (800a648 <_fstat_r+0x20>)
 800a62c:	2300      	movs	r3, #0
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	f7fb fad7 	bl	8005be8 <_fstat>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d102      	bne.n	800a644 <_fstat_r+0x1c>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	b103      	cbz	r3, 800a644 <_fstat_r+0x1c>
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	bf00      	nop
 800a648:	20000548 	.word	0x20000548

0800a64c <_isatty_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d06      	ldr	r5, [pc, #24]	; (800a668 <_isatty_r+0x1c>)
 800a650:	2300      	movs	r3, #0
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7fb fad6 	bl	8005c08 <_isatty>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_isatty_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_isatty_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	20000548 	.word	0x20000548

0800a66c <_lseek_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	; (800a68c <_lseek_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7fb facf 	bl	8005c1e <_lseek>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_lseek_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_lseek_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	20000548 	.word	0x20000548

0800a690 <__malloc_lock>:
 800a690:	4801      	ldr	r0, [pc, #4]	; (800a698 <__malloc_lock+0x8>)
 800a692:	f7fb bb98 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 800a696:	bf00      	nop
 800a698:	2000053c 	.word	0x2000053c

0800a69c <__malloc_unlock>:
 800a69c:	4801      	ldr	r0, [pc, #4]	; (800a6a4 <__malloc_unlock+0x8>)
 800a69e:	f7fb bb93 	b.w	8005dc8 <__retarget_lock_release_recursive>
 800a6a2:	bf00      	nop
 800a6a4:	2000053c 	.word	0x2000053c

0800a6a8 <_malloc_usable_size_r>:
 800a6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ac:	1f18      	subs	r0, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfbc      	itt	lt
 800a6b2:	580b      	ldrlt	r3, [r1, r0]
 800a6b4:	18c0      	addlt	r0, r0, r3
 800a6b6:	4770      	bx	lr

0800a6b8 <_read_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	; (800a6d8 <_read_r+0x20>)
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7fb fa3a 	bl	8005b40 <_read>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_read_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_read_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20000548 	.word	0x20000548

0800a6dc <abort>:
 800a6dc:	b508      	push	{r3, lr}
 800a6de:	2006      	movs	r0, #6
 800a6e0:	f000 f82c 	bl	800a73c <raise>
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f7fb fa21 	bl	8005b2c <_exit>

0800a6ea <_raise_r>:
 800a6ea:	291f      	cmp	r1, #31
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	460d      	mov	r5, r1
 800a6f2:	d904      	bls.n	800a6fe <_raise_r+0x14>
 800a6f4:	2316      	movs	r3, #22
 800a6f6:	6003      	str	r3, [r0, #0]
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	bd38      	pop	{r3, r4, r5, pc}
 800a6fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a700:	b112      	cbz	r2, 800a708 <_raise_r+0x1e>
 800a702:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a706:	b94b      	cbnz	r3, 800a71c <_raise_r+0x32>
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 f831 	bl	800a770 <_getpid_r>
 800a70e:	462a      	mov	r2, r5
 800a710:	4601      	mov	r1, r0
 800a712:	4620      	mov	r0, r4
 800a714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a718:	f000 b818 	b.w	800a74c <_kill_r>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d00a      	beq.n	800a736 <_raise_r+0x4c>
 800a720:	1c59      	adds	r1, r3, #1
 800a722:	d103      	bne.n	800a72c <_raise_r+0x42>
 800a724:	2316      	movs	r3, #22
 800a726:	6003      	str	r3, [r0, #0]
 800a728:	2001      	movs	r0, #1
 800a72a:	e7e7      	b.n	800a6fc <_raise_r+0x12>
 800a72c:	2400      	movs	r4, #0
 800a72e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a732:	4628      	mov	r0, r5
 800a734:	4798      	blx	r3
 800a736:	2000      	movs	r0, #0
 800a738:	e7e0      	b.n	800a6fc <_raise_r+0x12>
	...

0800a73c <raise>:
 800a73c:	4b02      	ldr	r3, [pc, #8]	; (800a748 <raise+0xc>)
 800a73e:	4601      	mov	r1, r0
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	f7ff bfd2 	b.w	800a6ea <_raise_r>
 800a746:	bf00      	nop
 800a748:	20000030 	.word	0x20000030

0800a74c <_kill_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d07      	ldr	r5, [pc, #28]	; (800a76c <_kill_r+0x20>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	4611      	mov	r1, r2
 800a758:	602b      	str	r3, [r5, #0]
 800a75a:	f7fb f9d7 	bl	8005b0c <_kill>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	d102      	bne.n	800a768 <_kill_r+0x1c>
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	b103      	cbz	r3, 800a768 <_kill_r+0x1c>
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	bd38      	pop	{r3, r4, r5, pc}
 800a76a:	bf00      	nop
 800a76c:	20000548 	.word	0x20000548

0800a770 <_getpid_r>:
 800a770:	f7fb b9c4 	b.w	8005afc <_getpid>

0800a774 <_init>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr

0800a780 <_fini>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	bf00      	nop
 800a784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a786:	bc08      	pop	{r3}
 800a788:	469e      	mov	lr, r3
 800a78a:	4770      	bx	lr
