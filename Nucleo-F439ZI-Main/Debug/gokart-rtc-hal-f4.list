
gokart-rtc-hal-f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800ae28  0800ae28  0001ae28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b668  0800b668  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b668  0800b668  0001b668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b670  0800b670  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b674  0800b674  0001b674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000004ec  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200006cc  200006cc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001870f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003055  00000000  00000000  0003891f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  0003b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f00  00000000  00000000  0003c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002751b  00000000  00000000  0003d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b6f  00000000  00000000  00064dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3c22  00000000  00000000  0007893a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c55c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005920  00000000  00000000  0015c5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ae10 	.word	0x0800ae10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800ae10 	.word	0x0800ae10

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 fcb9 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f004 fdb4 	bl	8005bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fcdf 	bl	8001a3e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 fc99 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000004 	.word	0x20000004
 80010b8:	20000000 	.word	0x20000000

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004
 80010e0:	200001fc 	.word	0x200001fc

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200001fc 	.word	0x200001fc

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e0ed      	b.n	8001332 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f004 fd50 	bl	8005c08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001178:	f7ff ffb4 	bl	80010e4 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800117e:	e012      	b.n	80011a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001180:	f7ff ffb0 	bl	80010e4 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b0a      	cmp	r3, #10
 800118c:	d90b      	bls.n	80011a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2205      	movs	r2, #5
 800119e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0c5      	b.n	8001332 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0e5      	beq.n	8001180 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0202 	bic.w	r2, r2, #2
 80011c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c4:	f7ff ff8e 	bl	80010e4 <HAL_GetTick>
 80011c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ca:	e012      	b.n	80011f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011cc:	f7ff ff8a 	bl	80010e4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b0a      	cmp	r3, #10
 80011d8:	d90b      	bls.n	80011f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2205      	movs	r2, #5
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e09f      	b.n	8001332 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e5      	bne.n	80011cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7e1b      	ldrb	r3, [r3, #24]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d108      	bne.n	800121a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e007      	b.n	800122a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7e5b      	ldrb	r3, [r3, #25]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d108      	bne.n	8001244 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e007      	b.n	8001254 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001252:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7e9b      	ldrb	r3, [r3, #26]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0220 	orr.w	r2, r2, #32
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e007      	b.n	800127e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0220 	bic.w	r2, r2, #32
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7edb      	ldrb	r3, [r3, #27]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d108      	bne.n	8001298 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0210 	bic.w	r2, r2, #16
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e007      	b.n	80012a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0210 	orr.w	r2, r2, #16
 80012a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7f1b      	ldrb	r3, [r3, #28]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d108      	bne.n	80012c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0208 	orr.w	r2, r2, #8
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e007      	b.n	80012d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0208 	bic.w	r2, r2, #8
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7f5b      	ldrb	r3, [r3, #29]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0204 	orr.w	r2, r2, #4
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e007      	b.n	80012fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0204 	bic.w	r2, r2, #4
 80012fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	ea42 0103 	orr.w	r1, r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800133a:	b480      	push	{r7}
 800133c:	b089      	sub	sp, #36	; 0x24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001358:	7ffb      	ldrb	r3, [r7, #31]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d003      	beq.n	8001366 <HAL_CAN_AddTxMessage+0x2c>
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	2b02      	cmp	r3, #2
 8001362:	f040 80b8 	bne.w	80014d6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a0 	beq.w	80014c6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	0e1b      	lsrs	r3, r3, #24
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d907      	bls.n	80013a6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e09e      	b.n	80014e4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10d      	bne.n	80013d4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013c2:	68f9      	ldr	r1, [r7, #12]
 80013c4:	6809      	ldr	r1, [r1, #0]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3318      	adds	r3, #24
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	440b      	add	r3, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e00f      	b.n	80013f4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e4:	68f9      	ldr	r1, [r7, #12]
 80013e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3318      	adds	r3, #24
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	440b      	add	r3, r1
 80013f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3318      	adds	r3, #24
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	440b      	add	r3, r1
 8001404:	3304      	adds	r3, #4
 8001406:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	7d1b      	ldrb	r3, [r3, #20]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d111      	bne.n	8001434 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3318      	adds	r3, #24
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	3304      	adds	r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	6811      	ldr	r1, [r2, #0]
 8001424:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3318      	adds	r3, #24
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	440b      	add	r3, r1
 8001430:	3304      	adds	r3, #4
 8001432:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3307      	adds	r3, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	061a      	lsls	r2, r3, #24
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3306      	adds	r3, #6
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3305      	adds	r3, #5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	4313      	orrs	r3, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	3204      	adds	r2, #4
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4610      	mov	r0, r2
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	6811      	ldr	r1, [r2, #0]
 800145c:	ea43 0200 	orr.w	r2, r3, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	440b      	add	r3, r1
 8001466:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800146a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3303      	adds	r3, #3
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	061a      	lsls	r2, r3, #24
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3302      	adds	r3, #2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	041b      	lsls	r3, r3, #16
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3301      	adds	r3, #1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4313      	orrs	r3, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	4610      	mov	r0, r2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	6811      	ldr	r1, [r2, #0]
 8001492:	ea43 0200 	orr.w	r2, r3, r0
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	440b      	add	r3, r1
 800149c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3318      	adds	r3, #24
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	6811      	ldr	r1, [r2, #0]
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3318      	adds	r3, #24
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	440b      	add	r3, r1
 80014c0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e00e      	b.n	80014e4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e006      	b.n	80014e4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3724      	adds	r7, #36	; 0x24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001502:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d002      	beq.n	8001510 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d11d      	bne.n	800154c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d003      	beq.n	800157e <HAL_CAN_GetRxMessage+0x24>
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b02      	cmp	r3, #2
 800157a:	f040 80f3 	bne.w	8001764 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10e      	bne.n	80015a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d116      	bne.n	80015c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0e7      	b.n	8001772 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0d8      	b.n	8001772 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	331b      	adds	r3, #27
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0204 	and.w	r2, r3, #4
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	331b      	adds	r3, #27
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0d5b      	lsrs	r3, r3, #21
 80015ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	331b      	adds	r3, #27
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	331b      	adds	r3, #27
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0202 	and.w	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	331b      	adds	r3, #27
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	3304      	adds	r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 020f 	and.w	r2, r3, #15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	331b      	adds	r3, #27
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	3304      	adds	r3, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b2da      	uxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	331b      	adds	r3, #27
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4413      	add	r3, r2
 8001662:	3304      	adds	r3, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	0c1b      	lsrs	r3, r3, #16
 8001668:	b29a      	uxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0a1a      	lsrs	r2, r3, #8
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	0c1a      	lsrs	r2, r3, #16
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	3302      	adds	r3, #2
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0e1a      	lsrs	r2, r3, #24
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3303      	adds	r3, #3
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	4413      	add	r3, r2
 80016dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	3304      	adds	r3, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0a1a      	lsrs	r2, r3, #8
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3305      	adds	r3, #5
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0c1a      	lsrs	r2, r3, #16
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	3306      	adds	r3, #6
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0e1a      	lsrs	r2, r3, #24
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3307      	adds	r3, #7
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d108      	bne.n	8001750 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0220 	orr.w	r2, r2, #32
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	e007      	b.n	8001760 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0220 	orr.w	r2, r2, #32
 800175e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e006      	b.n	8001772 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
  }
}
 8001772:	4618      	mov	r0, r3
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001792:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d002      	beq.n	80017a0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d10f      	bne.n	80017c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e005      	b.n	80017c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80017c0:	68fb      	ldr	r3, [r7, #12]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db0b      	blt.n	800185e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	4907      	ldr	r1, [pc, #28]	; (800186c <__NVIC_EnableIRQ+0x38>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db12      	blt.n	80018a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	490a      	ldr	r1, [pc, #40]	; (80018b4 <__NVIC_DisableIRQ+0x44>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	3320      	adds	r3, #32
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800189c:	f3bf 8f4f 	dsb	sy
}
 80018a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018a2:	f3bf 8f6f 	isb	sy
}
 80018a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff05 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff1a 	bl	8001818 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff0d 	bl	8001834 <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff1d 	bl	8001870 <__NVIC_DisableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff94 	bl	8001974 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e177      	b.n	8001d64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8166 	bne.w	8001d5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d005      	beq.n	8001aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d130      	bne.n	8001b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80c0 	beq.w	8001d5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a65      	ldr	r2, [pc, #404]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfa:	4a61      	ldr	r2, [pc, #388]	; (8001d80 <HAL_GPIO_Init+0x328>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_GPIO_Init+0x32c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d037      	beq.n	8001c96 <HAL_GPIO_Init+0x23e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_GPIO_Init+0x330>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d031      	beq.n	8001c92 <HAL_GPIO_Init+0x23a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02b      	beq.n	8001c8e <HAL_GPIO_Init+0x236>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <HAL_GPIO_Init+0x338>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d025      	beq.n	8001c8a <HAL_GPIO_Init+0x232>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a54      	ldr	r2, [pc, #336]	; (8001d94 <HAL_GPIO_Init+0x33c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01f      	beq.n	8001c86 <HAL_GPIO_Init+0x22e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <HAL_GPIO_Init+0x340>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x22a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_GPIO_Init+0x344>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_GPIO_Init+0x348>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_GPIO_Init+0x34c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x21e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	; (8001da8 <HAL_GPIO_Init+0x350>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c6e:	2309      	movs	r3, #9
 8001c70:	e012      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c72:	230a      	movs	r3, #10
 8001c74:	e010      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c76:	2308      	movs	r3, #8
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x328>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a29      	ldr	r2, [pc, #164]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae84 	bls.w	8001a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40022400 	.word	0x40022400
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dcc:	e003      	b.n	8001dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e267      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d075      	beq.n	8001eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e02:	4b88      	ldr	r3, [pc, #544]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d00c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b85      	ldr	r3, [pc, #532]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d112      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	4b7e      	ldr	r3, [pc, #504]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d05b      	beq.n	8001eec <HAL_RCC_OscConfig+0x108>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d157      	bne.n	8001eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e242      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x74>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x98>
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6f      	ldr	r2, [pc, #444]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6c      	ldr	r2, [pc, #432]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e7c:	4b69      	ldr	r3, [pc, #420]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a68      	ldr	r2, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b66      	ldr	r3, [pc, #408]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a65      	ldr	r2, [pc, #404]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f922 	bl	80010e4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f91e 	bl	80010e4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e207      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b5b      	ldr	r3, [pc, #364]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xc0>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f90e 	bl	80010e4 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f90a 	bl	80010e4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1f3      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0xe8>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d063      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001efa:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1c7      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4937      	ldr	r1, [pc, #220]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e03a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f8c3 	bl	80010e4 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f62:	f7ff f8bf 	bl	80010e4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1a8      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4925      	ldr	r1, [pc, #148]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f8a2 	bl	80010e4 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff f89e 	bl	80010e4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e187      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d036      	beq.n	800203c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_RCC_OscConfig+0x248>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f882 	bl	80010e4 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff f87e 	bl	80010e4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e167      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x200>
 8002002:	e01b      	b.n	800203c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x248>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff f86b 	bl	80010e4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	e00e      	b.n	8002030 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002012:	f7ff f867 	bl	80010e4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d907      	bls.n	8002030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e150      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002024:	40023800 	.word	0x40023800
 8002028:	42470000 	.word	0x42470000
 800202c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b88      	ldr	r3, [pc, #544]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ea      	bne.n	8002012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8097 	beq.w	8002178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b81      	ldr	r3, [pc, #516]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a7c      	ldr	r2, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b77      	ldr	r3, [pc, #476]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b74      	ldr	r3, [pc, #464]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a73      	ldr	r2, [pc, #460]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7ff f827 	bl	80010e4 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7ff f823 	bl	80010e4 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e10c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x474>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x2ea>
 80020c0:	4b64      	ldr	r3, [pc, #400]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4a63      	ldr	r2, [pc, #396]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x30c>
 80020d6:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a5e      	ldr	r2, [pc, #376]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a5b      	ldr	r2, [pc, #364]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020f0:	4b58      	ldr	r3, [pc, #352]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a57      	ldr	r2, [pc, #348]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
 80020fc:	4b55      	ldr	r3, [pc, #340]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a54      	ldr	r2, [pc, #336]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d015      	beq.n	800213c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7fe ffe8 	bl	80010e4 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe ffe4 	bl	80010e4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0cb      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0ee      	beq.n	8002118 <HAL_RCC_OscConfig+0x334>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe ffd2 	bl	80010e4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe ffce 	bl	80010e4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0b5      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ee      	bne.n	8002144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	4a38      	ldr	r2, [pc, #224]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80a1 	beq.w	80022c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	d05c      	beq.n	8002248 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d141      	bne.n	800221a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x478>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe ffa2 	bl	80010e4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe ff9e 	bl	80010e4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e087      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	491b      	ldr	r1, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x478>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe ff77 	bl	80010e4 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe ff73 	bl	80010e4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e05c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x416>
 8002218:	e054      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_RCC_OscConfig+0x478>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe ff60 	bl	80010e4 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe ff5c 	bl	80010e4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e045      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_OscConfig+0x470>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x444>
 8002246:	e03d      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e038      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x4ec>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d028      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d121      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d11a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002298:	4293      	cmp	r3, r2
 800229a:	d111      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0cc      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d90c      	bls.n	8002310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800234a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e067      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4934      	ldr	r1, [pc, #208]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fe8e 	bl	80010e4 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fe8a 	bl	80010e4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e04f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20c      	bcs.n	800241c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fdee 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00
 8002490:	40023800 	.word	0x40023800
 8002494:	0800b1a4 	.word	0x0800b1a4
 8002498:	20000008 	.word	0x20000008
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b094      	sub	sp, #80	; 0x50
 80024a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	647b      	str	r3, [r7, #68]	; 0x44
 80024ac:	2300      	movs	r3, #0
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b0:	2300      	movs	r3, #0
 80024b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b8:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x40>
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	f200 80e1 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x3a>
 80024d2:	e0db      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b73      	ldr	r3, [pc, #460]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024d8:	e0db      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80024dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024de:	e0d8      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e0:	4b6f      	ldr	r3, [pc, #444]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	2200      	movs	r2, #0
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
 800250e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002512:	4622      	mov	r2, r4
 8002514:	462b      	mov	r3, r5
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002524:	0150      	lsls	r0, r2, #5
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4621      	mov	r1, r4
 800252c:	1a51      	subs	r1, r2, r1
 800252e:	6139      	str	r1, [r7, #16]
 8002530:	4629      	mov	r1, r5
 8002532:	eb63 0301 	sbc.w	r3, r3, r1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002544:	4659      	mov	r1, fp
 8002546:	018b      	lsls	r3, r1, #6
 8002548:	4651      	mov	r1, sl
 800254a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254e:	4651      	mov	r1, sl
 8002550:	018a      	lsls	r2, r1, #6
 8002552:	4651      	mov	r1, sl
 8002554:	ebb2 0801 	subs.w	r8, r2, r1
 8002558:	4659      	mov	r1, fp
 800255a:	eb63 0901 	sbc.w	r9, r3, r1
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800256e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002572:	4690      	mov	r8, r2
 8002574:	4699      	mov	r9, r3
 8002576:	4623      	mov	r3, r4
 8002578:	eb18 0303 	adds.w	r3, r8, r3
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	462b      	mov	r3, r5
 8002580:	eb49 0303 	adc.w	r3, r9, r3
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002592:	4629      	mov	r1, r5
 8002594:	024b      	lsls	r3, r1, #9
 8002596:	4621      	mov	r1, r4
 8002598:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800259c:	4621      	mov	r1, r4
 800259e:	024a      	lsls	r2, r1, #9
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a6:	2200      	movs	r2, #0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025b0:	f7fe fb7a 	bl	8000ca8 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025bc:	e058      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	2200      	movs	r2, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	4611      	mov	r1, r2
 80025ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025d8:	4642      	mov	r2, r8
 80025da:	464b      	mov	r3, r9
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	0159      	lsls	r1, r3, #5
 80025e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ea:	0150      	lsls	r0, r2, #5
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4641      	mov	r1, r8
 80025f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025f6:	4649      	mov	r1, r9
 80025f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002608:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800260c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002610:	ebb2 040a 	subs.w	r4, r2, sl
 8002614:	eb63 050b 	sbc.w	r5, r3, fp
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	00eb      	lsls	r3, r5, #3
 8002622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002626:	00e2      	lsls	r2, r4, #3
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	4643      	mov	r3, r8
 800262e:	18e3      	adds	r3, r4, r3
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	464b      	mov	r3, r9
 8002634:	eb45 0303 	adc.w	r3, r5, r3
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002646:	4629      	mov	r1, r5
 8002648:	028b      	lsls	r3, r1, #10
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002650:	4621      	mov	r1, r4
 8002652:	028a      	lsls	r2, r1, #10
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265a:	2200      	movs	r2, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	61fa      	str	r2, [r7, #28]
 8002660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002664:	f7fe fb20 	bl	8000ca8 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002694:	4618      	mov	r0, r3
 8002696:	3750      	adds	r7, #80	; 0x50
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	007a1200 	.word	0x007a1200

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000008 	.word	0x20000008

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a9b      	lsrs	r3, r3, #10
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4903      	ldr	r1, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	0800b1b4 	.word	0x0800b1b4

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff ffdc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0b5b      	lsrs	r3, r3, #13
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	0800b1b4 	.word	0x0800b1b4

08002714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e041      	b.n	80027aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f003 fb84 	bl	8005e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f000 fdbc 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d001      	beq.n	80027cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e04e      	b.n	800286a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a23      	ldr	r2, [pc, #140]	; (8002878 <HAL_TIM_Base_Start_IT+0xc4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d022      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x80>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d01d      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x80>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_TIM_Base_Start_IT+0xc8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d018      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x80>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_TIM_Base_Start_IT+0xcc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d013      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x80>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <HAL_TIM_Base_Start_IT+0xd0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00e      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x80>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1b      	ldr	r2, [pc, #108]	; (8002888 <HAL_TIM_Base_Start_IT+0xd4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d009      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x80>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <HAL_TIM_Base_Start_IT+0xd8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d004      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x80>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_TIM_Base_Start_IT+0xdc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d111      	bne.n	8002858 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b06      	cmp	r3, #6
 8002844:	d010      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002856:	e007      	b.n	8002868 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800
 8002884:	40000c00 	.word	0x40000c00
 8002888:	40010400 	.word	0x40010400
 800288c:	40014000 	.word	0x40014000
 8002890:	40001800 	.word	0x40001800

08002894 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_TIM_OC_Start+0x24>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e022      	b.n	80028fe <HAL_TIM_OC_Start+0x6a>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d109      	bne.n	80028d2 <HAL_TIM_OC_Start+0x3e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	2300      	moveq	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	e015      	b.n	80028fe <HAL_TIM_OC_Start+0x6a>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d109      	bne.n	80028ec <HAL_TIM_OC_Start+0x58>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e008      	b.n	80028fe <HAL_TIM_OC_Start+0x6a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07c      	b.n	8002a00 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <HAL_TIM_OC_Start+0x82>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002914:	e013      	b.n	800293e <HAL_TIM_OC_Start+0xaa>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d104      	bne.n	8002926 <HAL_TIM_OC_Start+0x92>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	e00b      	b.n	800293e <HAL_TIM_OC_Start+0xaa>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d104      	bne.n	8002936 <HAL_TIM_OC_Start+0xa2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002934:	e003      	b.n	800293e <HAL_TIM_OC_Start+0xaa>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f001 f83c 	bl	80039c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2d      	ldr	r2, [pc, #180]	; (8002a08 <HAL_TIM_OC_Start+0x174>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_OC_Start+0xcc>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_TIM_OC_Start+0x178>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_TIM_OC_Start+0xd0>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_TIM_OC_Start+0xd2>
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_TIM_OC_Start+0x174>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_TIM_OC_Start+0x136>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d01d      	beq.n	80029ca <HAL_TIM_OC_Start+0x136>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_TIM_OC_Start+0x17c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_TIM_OC_Start+0x136>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	; (8002a14 <HAL_TIM_OC_Start+0x180>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_TIM_OC_Start+0x136>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_TIM_OC_Start+0x184>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIM_OC_Start+0x136>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_TIM_OC_Start+0x178>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_TIM_OC_Start+0x136>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <HAL_TIM_OC_Start+0x188>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_OC_Start+0x136>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <HAL_TIM_OC_Start+0x18c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d111      	bne.n	80029ee <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d010      	beq.n	80029fe <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ec:	e007      	b.n	80029fe <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40000c00 	.word	0x40000c00
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40001800 	.word	0x40001800

08002a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f003 f9dc 	bl	8005e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fc34 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e041      	b.n	8002b58 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f003 f92d 	bl	8005d48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f000 fbe5 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <HAL_TIM_IC_Start_IT+0x1e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e013      	b.n	8002ba6 <HAL_TIM_IC_Start_IT+0x46>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_IC_Start_IT+0x2e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e00b      	b.n	8002ba6 <HAL_TIM_IC_Start_IT+0x46>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d104      	bne.n	8002b9e <HAL_TIM_IC_Start_IT+0x3e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e003      	b.n	8002ba6 <HAL_TIM_IC_Start_IT+0x46>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_TIM_IC_Start_IT+0x58>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e013      	b.n	8002be0 <HAL_TIM_IC_Start_IT+0x80>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d104      	bne.n	8002bc8 <HAL_TIM_IC_Start_IT+0x68>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e00b      	b.n	8002be0 <HAL_TIM_IC_Start_IT+0x80>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d104      	bne.n	8002bd8 <HAL_TIM_IC_Start_IT+0x78>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e003      	b.n	8002be0 <HAL_TIM_IC_Start_IT+0x80>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002be8:	7b7b      	ldrb	r3, [r7, #13]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0cc      	b.n	8002d8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_IC_Start_IT+0xa2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c00:	e013      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0xca>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_IC_Start_IT+0xb2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c10:	e00b      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0xca>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_IC_Start_IT+0xc2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c20:	e003      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0xca>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIM_IC_Start_IT+0xda>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	e013      	b.n	8002c62 <HAL_TIM_IC_Start_IT+0x102>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d104      	bne.n	8002c4a <HAL_TIM_IC_Start_IT+0xea>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c48:	e00b      	b.n	8002c62 <HAL_TIM_IC_Start_IT+0x102>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d104      	bne.n	8002c5a <HAL_TIM_IC_Start_IT+0xfa>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c58:	e003      	b.n	8002c62 <HAL_TIM_IC_Start_IT+0x102>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d841      	bhi.n	8002cec <HAL_TIM_IC_Start_IT+0x18c>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <HAL_TIM_IC_Start_IT+0x110>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002ca5 	.word	0x08002ca5
 8002c74:	08002ced 	.word	0x08002ced
 8002c78:	08002ced 	.word	0x08002ced
 8002c7c:	08002ced 	.word	0x08002ced
 8002c80:	08002cb7 	.word	0x08002cb7
 8002c84:	08002ced 	.word	0x08002ced
 8002c88:	08002ced 	.word	0x08002ced
 8002c8c:	08002ced 	.word	0x08002ced
 8002c90:	08002cc9 	.word	0x08002cc9
 8002c94:	08002ced 	.word	0x08002ced
 8002c98:	08002ced 	.word	0x08002ced
 8002c9c:	08002ced 	.word	0x08002ced
 8002ca0:	08002cdb 	.word	0x08002cdb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0202 	orr.w	r2, r2, #2
 8002cb2:	60da      	str	r2, [r3, #12]
      break;
 8002cb4:	e01d      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0204 	orr.w	r2, r2, #4
 8002cc4:	60da      	str	r2, [r3, #12]
      break;
 8002cc6:	e014      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	60da      	str	r2, [r3, #12]
      break;
 8002cd8:	e00b      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0210 	orr.w	r2, r2, #16
 8002ce8:	60da      	str	r2, [r3, #12]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d148      	bne.n	8002d8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	6839      	ldr	r1, [r7, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fe5f 	bl	80039c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_TIM_IC_Start_IT+0x234>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d18:	d01d      	beq.n	8002d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_TIM_IC_Start_IT+0x238>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_TIM_IC_Start_IT+0x23c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_TIM_IC_Start_IT+0x240>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_TIM_IC_Start_IT+0x244>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_TIM_IC_Start_IT+0x248>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a16      	ldr	r2, [pc, #88]	; (8002dac <HAL_TIM_IC_Start_IT+0x24c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d111      	bne.n	8002d7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d010      	beq.n	8002d8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d78:	e007      	b.n	8002d8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40010400 	.word	0x40010400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40001800 	.word	0x40001800

08002db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0202 	mvn.w	r2, #2
 8002ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f002 fca6 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa3e 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa45 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0204 	mvn.w	r2, #4
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f002 fc7c 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa14 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fa1b 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0208 	mvn.w	r2, #8
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2204      	movs	r2, #4
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f002 fc52 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f9ea 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f9f1 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0210 	mvn.w	r2, #16
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2208      	movs	r2, #8
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f002 fc28 	bl	8005744 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9c0 	bl	800327c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f9c7 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10e      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0201 	mvn.w	r2, #1
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f002 fc2c 	bl	800578c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b80      	cmp	r3, #128	; 0x80
 8002f40:	d10e      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d107      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fdde 	bl	8003b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d10e      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f98c 	bl	80032a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0220 	mvn.w	r2, #32
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fda8 	bl	8003b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_IC_ConfigChannel+0x1e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e088      	b.n	80030f0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f000 fbb8 	bl	8003770 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 020c 	bic.w	r2, r2, #12
 800300e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	619a      	str	r2, [r3, #24]
 8003022:	e060      	b.n	80030e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d11c      	bne.n	8003064 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f000 fc0d 	bl	8003858 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800304c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6999      	ldr	r1, [r3, #24]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	619a      	str	r2, [r3, #24]
 8003062:	e040      	b.n	80030e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b08      	cmp	r3, #8
 8003068:	d11b      	bne.n	80030a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f000 fc2a 	bl	80038d2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 020c 	bic.w	r2, r2, #12
 800308c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69d9      	ldr	r1, [r3, #28]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	61da      	str	r2, [r3, #28]
 80030a0:	e021      	b.n	80030e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d11c      	bne.n	80030e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f000 fc47 	bl	800394a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69d9      	ldr	r1, [r3, #28]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	021a      	lsls	r2, r3, #8
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
 80030e0:	e001      	b.n	80030e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0ae      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	f200 809f 	bhi.w	8003264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003161 	.word	0x08003161
 8003130:	08003265 	.word	0x08003265
 8003134:	08003265 	.word	0x08003265
 8003138:	08003265 	.word	0x08003265
 800313c:	080031a1 	.word	0x080031a1
 8003140:	08003265 	.word	0x08003265
 8003144:	08003265 	.word	0x08003265
 8003148:	08003265 	.word	0x08003265
 800314c:	080031e3 	.word	0x080031e3
 8003150:	08003265 	.word	0x08003265
 8003154:	08003265 	.word	0x08003265
 8003158:	08003265 	.word	0x08003265
 800315c:	08003223 	.word	0x08003223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f952 	bl	8003410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0208 	orr.w	r2, r2, #8
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	619a      	str	r2, [r3, #24]
      break;
 800319e:	e064      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f9a2 	bl	80034f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	021a      	lsls	r2, r3, #8
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]
      break;
 80031e0:	e043      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f9f7 	bl	80035dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0208 	orr.w	r2, r2, #8
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0204 	bic.w	r2, r2, #4
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
      break;
 8003220:	e023      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fa4b 	bl	80036c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	021a      	lsls	r2, r3, #8
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	61da      	str	r2, [r3, #28]
      break;
 8003262:	e002      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7f1b      	ldrb	r3, [r3, #28]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a40      	ldr	r2, [pc, #256]	; (80033e4 <TIM_Base_SetConfig+0x114>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ee:	d00f      	beq.n	8003310 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3d      	ldr	r2, [pc, #244]	; (80033e8 <TIM_Base_SetConfig+0x118>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00b      	beq.n	8003310 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a3c      	ldr	r2, [pc, #240]	; (80033ec <TIM_Base_SetConfig+0x11c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <TIM_Base_SetConfig+0x120>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <TIM_Base_SetConfig+0x124>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d108      	bne.n	8003322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <TIM_Base_SetConfig+0x114>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02b      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d027      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <TIM_Base_SetConfig+0x118>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d023      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <TIM_Base_SetConfig+0x11c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <TIM_Base_SetConfig+0x120>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01b      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <TIM_Base_SetConfig+0x124>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d017      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a28      	ldr	r2, [pc, #160]	; (80033f8 <TIM_Base_SetConfig+0x128>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a27      	ldr	r2, [pc, #156]	; (80033fc <TIM_Base_SetConfig+0x12c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00f      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a26      	ldr	r2, [pc, #152]	; (8003400 <TIM_Base_SetConfig+0x130>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a25      	ldr	r2, [pc, #148]	; (8003404 <TIM_Base_SetConfig+0x134>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a24      	ldr	r2, [pc, #144]	; (8003408 <TIM_Base_SetConfig+0x138>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <TIM_Base_SetConfig+0x13c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <TIM_Base_SetConfig+0x114>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_Base_SetConfig+0xf8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <TIM_Base_SetConfig+0x124>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d103      	bne.n	80033d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	615a      	str	r2, [r3, #20]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800
 80033f0:	40000c00 	.word	0x40000c00
 80033f4:	40010400 	.word	0x40010400
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40014400 	.word	0x40014400
 8003400:	40014800 	.word	0x40014800
 8003404:	40001800 	.word	0x40001800
 8003408:	40001c00 	.word	0x40001c00
 800340c:	40002000 	.word	0x40002000

08003410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f023 0302 	bic.w	r3, r3, #2
 8003458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <TIM_OC1_SetConfig+0xd8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_OC1_SetConfig+0x64>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <TIM_OC1_SetConfig+0xdc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0308 	bic.w	r3, r3, #8
 800347a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <TIM_OC1_SetConfig+0xd8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_OC1_SetConfig+0x8e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <TIM_OC1_SetConfig+0xdc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d111      	bne.n	80034c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	621a      	str	r2, [r3, #32]
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40010400 	.word	0x40010400

080034f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0210 	bic.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0320 	bic.w	r3, r3, #32
 800353a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <TIM_OC2_SetConfig+0xe4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_OC2_SetConfig+0x68>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <TIM_OC2_SetConfig+0xe8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d10d      	bne.n	8003574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <TIM_OC2_SetConfig+0xe4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_OC2_SetConfig+0x94>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <TIM_OC2_SetConfig+0xe8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d113      	bne.n	80035ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40010400 	.word	0x40010400

080035dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0303 	bic.w	r3, r3, #3
 8003612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a21      	ldr	r2, [pc, #132]	; (80036bc <TIM_OC3_SetConfig+0xe0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_OC3_SetConfig+0x66>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <TIM_OC3_SetConfig+0xe4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10d      	bne.n	800365e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800365c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a16      	ldr	r2, [pc, #88]	; (80036bc <TIM_OC3_SetConfig+0xe0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_OC3_SetConfig+0x92>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <TIM_OC3_SetConfig+0xe4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	621a      	str	r2, [r3, #32]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40010000 	.word	0x40010000
 80036c0:	40010400 	.word	0x40010400

080036c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <TIM_OC4_SetConfig+0xa4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC4_SetConfig+0x68>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a11      	ldr	r2, [pc, #68]	; (800376c <TIM_OC4_SetConfig+0xa8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d109      	bne.n	8003740 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000
 800376c:	40010400 	.word	0x40010400

08003770 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a28      	ldr	r2, [pc, #160]	; (800383c <TIM_TI1_SetConfig+0xcc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01b      	beq.n	80037d6 <TIM_TI1_SetConfig+0x66>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d017      	beq.n	80037d6 <TIM_TI1_SetConfig+0x66>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a25      	ldr	r2, [pc, #148]	; (8003840 <TIM_TI1_SetConfig+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_TI1_SetConfig+0x66>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a24      	ldr	r2, [pc, #144]	; (8003844 <TIM_TI1_SetConfig+0xd4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_TI1_SetConfig+0x66>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <TIM_TI1_SetConfig+0xd8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_TI1_SetConfig+0x66>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a22      	ldr	r2, [pc, #136]	; (800384c <TIM_TI1_SetConfig+0xdc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_TI1_SetConfig+0x66>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a21      	ldr	r2, [pc, #132]	; (8003850 <TIM_TI1_SetConfig+0xe0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_TI1_SetConfig+0x66>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <TIM_TI1_SetConfig+0xe4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <TIM_TI1_SetConfig+0x6a>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <TIM_TI1_SetConfig+0x6c>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e003      	b.n	80037fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	b2db      	uxtb	r3, r3
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f023 030a 	bic.w	r3, r3, #10
 8003814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f003 030a 	and.w	r3, r3, #10
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40010400 	.word	0x40010400
 8003850:	40014000 	.word	0x40014000
 8003854:	40001800 	.word	0x40001800

08003858 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0210 	bic.w	r2, r3, #16
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003896:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	031b      	lsls	r3, r3, #12
 800389c:	b29b      	uxth	r3, r3
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	b2db      	uxtb	r3, r3
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003922:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003988:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	031b      	lsls	r3, r3, #12
 800398e:	b29b      	uxth	r3, r3
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800399c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	621a      	str	r2, [r3, #32]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2201      	movs	r2, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	401a      	ands	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	431a      	orrs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e05a      	b.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a21      	ldr	r2, [pc, #132]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d022      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a74:	d01d      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d018      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1b      	ldr	r2, [pc, #108]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a18      	ldr	r2, [pc, #96]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10c      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	40010400 	.word	0x40010400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40001800 	.word	0x40001800

08003b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e03f      	b.n	8003bc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f002 fa12 	bl	8005f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2224      	movs	r2, #36	; 0x24
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f929 	bl	8003dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b08a      	sub	sp, #40	; 0x28
 8003bce:	af02      	add	r7, sp, #8
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d17c      	bne.n	8003ce4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_UART_Transmit+0x2c>
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e075      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Transmit+0x3e>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e06e      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1e:	f7fd fa61 	bl	80010e4 <HAL_GetTick>
 8003c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c38:	d108      	bne.n	8003c4c <HAL_UART_Transmit+0x82>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e003      	b.n	8003c54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c5c:	e02a      	b.n	8003cb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f840 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e036      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3302      	adds	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e007      	b.n	8003ca6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1cf      	bne.n	8003c5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f810 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e006      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b090      	sub	sp, #64	; 0x40
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	e050      	b.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d04c      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0e:	f7fd f9e9 	bl	80010e4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d241      	bcs.n	8003da2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d3e:	637a      	str	r2, [r7, #52]	; 0x34
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d72:	623a      	str	r2, [r7, #32]
 8003d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	69f9      	ldr	r1, [r7, #28]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e00f      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d09f      	beq.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3740      	adds	r7, #64	; 0x40
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b0c0      	sub	sp, #256	; 0x100
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	68d9      	ldr	r1, [r3, #12]
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	ea40 0301 	orr.w	r3, r0, r1
 8003df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e24:	f021 010c 	bic.w	r1, r1, #12
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e32:	430b      	orrs	r3, r1
 8003e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	6999      	ldr	r1, [r3, #24]
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	ea40 0301 	orr.w	r3, r0, r1
 8003e52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b8f      	ldr	r3, [pc, #572]	; (8004098 <UART_SetConfig+0x2cc>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d005      	beq.n	8003e6c <UART_SetConfig+0xa0>
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b8d      	ldr	r3, [pc, #564]	; (800409c <UART_SetConfig+0x2d0>)
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d104      	bne.n	8003e76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7fe fc3e 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003e70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e74:	e003      	b.n	8003e7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e76:	f7fe fc25 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8003e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e88:	f040 810c 	bne.w	80040a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	1891      	adds	r1, r2, r2
 8003ea4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ea6:	415b      	adcs	r3, r3
 8003ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003eae:	4621      	mov	r1, r4
 8003eb0:	eb12 0801 	adds.w	r8, r2, r1
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	eb43 0901 	adc.w	r9, r3, r1
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ece:	4690      	mov	r8, r2
 8003ed0:	4699      	mov	r9, r3
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	eb18 0303 	adds.w	r3, r8, r3
 8003ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003edc:	462b      	mov	r3, r5
 8003ede:	eb49 0303 	adc.w	r3, r9, r3
 8003ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003efa:	460b      	mov	r3, r1
 8003efc:	18db      	adds	r3, r3, r3
 8003efe:	653b      	str	r3, [r7, #80]	; 0x50
 8003f00:	4613      	mov	r3, r2
 8003f02:	eb42 0303 	adc.w	r3, r2, r3
 8003f06:	657b      	str	r3, [r7, #84]	; 0x54
 8003f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f10:	f7fc feca 	bl	8000ca8 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4b61      	ldr	r3, [pc, #388]	; (80040a0 <UART_SetConfig+0x2d4>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	011c      	lsls	r4, r3, #4
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f44:	4641      	mov	r1, r8
 8003f46:	eb12 0a01 	adds.w	sl, r2, r1
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f64:	4692      	mov	sl, r2
 8003f66:	469b      	mov	fp, r3
 8003f68:	4643      	mov	r3, r8
 8003f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f72:	464b      	mov	r3, r9
 8003f74:	eb4b 0303 	adc.w	r3, fp, r3
 8003f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f90:	460b      	mov	r3, r1
 8003f92:	18db      	adds	r3, r3, r3
 8003f94:	643b      	str	r3, [r7, #64]	; 0x40
 8003f96:	4613      	mov	r3, r2
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fa6:	f7fc fe7f 	bl	8000ca8 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <UART_SetConfig+0x2d4>)
 8003fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2264      	movs	r2, #100	; 0x64
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	1acb      	subs	r3, r1, r3
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <UART_SetConfig+0x2d4>)
 8003fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fd4:	441c      	add	r4, r3
 8003fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fe8:	4642      	mov	r2, r8
 8003fea:	464b      	mov	r3, r9
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ff8:	4641      	mov	r1, r8
 8003ffa:	1851      	adds	r1, r2, r1
 8003ffc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ffe:	4649      	mov	r1, r9
 8004000:	414b      	adcs	r3, r1
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004010:	4659      	mov	r1, fp
 8004012:	00cb      	lsls	r3, r1, #3
 8004014:	4651      	mov	r1, sl
 8004016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401a:	4651      	mov	r1, sl
 800401c:	00ca      	lsls	r2, r1, #3
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	4603      	mov	r3, r0
 8004024:	4642      	mov	r2, r8
 8004026:	189b      	adds	r3, r3, r2
 8004028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800402c:	464b      	mov	r3, r9
 800402e:	460a      	mov	r2, r1
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004044:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800404c:	460b      	mov	r3, r1
 800404e:	18db      	adds	r3, r3, r3
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
 8004052:	4613      	mov	r3, r2
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800405e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004062:	f7fc fe21 	bl	8000ca8 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <UART_SetConfig+0x2d4>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	2164      	movs	r1, #100	; 0x64
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	3332      	adds	r3, #50	; 0x32
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <UART_SetConfig+0x2d4>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 0207 	and.w	r2, r3, #7
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4422      	add	r2, r4
 8004092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004094:	e105      	b.n	80042a2 <UART_SetConfig+0x4d6>
 8004096:	bf00      	nop
 8004098:	40011000 	.word	0x40011000
 800409c:	40011400 	.word	0x40011400
 80040a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040b6:	4642      	mov	r2, r8
 80040b8:	464b      	mov	r3, r9
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	6239      	str	r1, [r7, #32]
 80040be:	415b      	adcs	r3, r3
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
 80040c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040c6:	4641      	mov	r1, r8
 80040c8:	1854      	adds	r4, r2, r1
 80040ca:	4649      	mov	r1, r9
 80040cc:	eb43 0501 	adc.w	r5, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	00eb      	lsls	r3, r5, #3
 80040da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040de:	00e2      	lsls	r2, r4, #3
 80040e0:	4614      	mov	r4, r2
 80040e2:	461d      	mov	r5, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	18e3      	adds	r3, r4, r3
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040ec:	464b      	mov	r3, r9
 80040ee:	eb45 0303 	adc.w	r3, r5, r3
 80040f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004112:	4629      	mov	r1, r5
 8004114:	008b      	lsls	r3, r1, #2
 8004116:	4621      	mov	r1, r4
 8004118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411c:	4621      	mov	r1, r4
 800411e:	008a      	lsls	r2, r1, #2
 8004120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004124:	f7fc fdc0 	bl	8000ca8 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4b60      	ldr	r3, [pc, #384]	; (80042b0 <UART_SetConfig+0x4e4>)
 800412e:	fba3 2302 	umull	r2, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	011c      	lsls	r4, r3, #4
 8004136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	61b9      	str	r1, [r7, #24]
 8004150:	415b      	adcs	r3, r3
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	6139      	str	r1, [r7, #16]
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800418c:	464b      	mov	r3, r9
 800418e:	460a      	mov	r2, r1
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80041a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041b0:	4649      	mov	r1, r9
 80041b2:	008b      	lsls	r3, r1, #2
 80041b4:	4641      	mov	r1, r8
 80041b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ba:	4641      	mov	r1, r8
 80041bc:	008a      	lsls	r2, r1, #2
 80041be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041c2:	f7fc fd71 	bl	8000ca8 <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4b39      	ldr	r3, [pc, #228]	; (80042b0 <UART_SetConfig+0x4e4>)
 80041cc:	fba3 1302 	umull	r1, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	2164      	movs	r1, #100	; 0x64
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	3332      	adds	r3, #50	; 0x32
 80041de:	4a34      	ldr	r2, [pc, #208]	; (80042b0 <UART_SetConfig+0x4e4>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ea:	441c      	add	r4, r3
 80041ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f0:	2200      	movs	r2, #0
 80041f2:	673b      	str	r3, [r7, #112]	; 0x70
 80041f4:	677a      	str	r2, [r7, #116]	; 0x74
 80041f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041fa:	4642      	mov	r2, r8
 80041fc:	464b      	mov	r3, r9
 80041fe:	1891      	adds	r1, r2, r2
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	415b      	adcs	r3, r3
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420a:	4641      	mov	r1, r8
 800420c:	1851      	adds	r1, r2, r1
 800420e:	6039      	str	r1, [r7, #0]
 8004210:	4649      	mov	r1, r9
 8004212:	414b      	adcs	r3, r1
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004222:	4659      	mov	r1, fp
 8004224:	00cb      	lsls	r3, r1, #3
 8004226:	4651      	mov	r1, sl
 8004228:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422c:	4651      	mov	r1, sl
 800422e:	00ca      	lsls	r2, r1, #3
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	4603      	mov	r3, r0
 8004236:	4642      	mov	r2, r8
 8004238:	189b      	adds	r3, r3, r2
 800423a:	66bb      	str	r3, [r7, #104]	; 0x68
 800423c:	464b      	mov	r3, r9
 800423e:	460a      	mov	r2, r1
 8004240:	eb42 0303 	adc.w	r3, r2, r3
 8004244:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	663b      	str	r3, [r7, #96]	; 0x60
 8004250:	667a      	str	r2, [r7, #100]	; 0x64
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800425e:	4649      	mov	r1, r9
 8004260:	008b      	lsls	r3, r1, #2
 8004262:	4641      	mov	r1, r8
 8004264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004268:	4641      	mov	r1, r8
 800426a:	008a      	lsls	r2, r1, #2
 800426c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004270:	f7fc fd1a 	bl	8000ca8 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <UART_SetConfig+0x4e4>)
 800427a:	fba3 1302 	umull	r1, r3, r3, r2
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2164      	movs	r1, #100	; 0x64
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	3332      	adds	r3, #50	; 0x32
 800428c:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <UART_SetConfig+0x4e4>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4422      	add	r2, r4
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	bf00      	nop
 80042a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop
 80042b0:	51eb851f 	.word	0x51eb851f

080042b4 <app_control_loop>:

	return output_shifted_to_min;

}

void app_control_loop(app_state_t *app) {
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b08e      	sub	sp, #56	; 0x38
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

	// runs as a par of HAL_TIM_PeriodElapsedCallback (i.e., in an interrupt context)

	double desired_speed = app->brake_unlocked
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80042c2:	b2db      	uxtb	r3, r3
						   ? (
							   app->autonomous
							   ? app->control_command.velocity // m/s
							   : app->manual_command.velocity // m/s
						   )
						   : 0.0;
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d012      	beq.n	80042ee <app_control_loop+0x3a>
							   app->autonomous
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80042ce:	b2db      	uxtb	r3, r3
							   : app->manual_command.velocity // m/s
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <app_control_loop+0x28>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80042da:	e002      	b.n	80042e2 <app_control_loop+0x2e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
						   : 0.0;
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc f940 	bl	8000568 <__aeabi_f2d>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	e003      	b.n	80042f6 <app_control_loop+0x42>
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
	double desired_speed = app->brake_unlocked
 80042f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	app->last_desired_speed = desired_speed;
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004300:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110

	// maximal speed clamping
	if (desired_speed > MAX_speed) {
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	4b9f      	ldr	r3, [pc, #636]	; (8004588 <app_control_loop+0x2d4>)
 800430a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800430e:	f7fc fc13 	bl	8000b38 <__aeabi_dcmpgt>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <app_control_loop+0x6e>
		desired_speed = MAX_speed;
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	4b9a      	ldr	r3, [pc, #616]	; (8004588 <app_control_loop+0x2d4>)
 800431e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if (desired_speed < 0.0) {
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800432e:	f7fc fbe5 	bl	8000afc <__aeabi_dcmplt>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <app_control_loop+0x90>
		desired_speed = 0.0;
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	double error = desired_speed - app->speed_sensor.speed;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800434a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800434e:	f7fb ffab 	bl	80002a8 <__aeabi_dsub>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	e9c7 2308 	strd	r2, r3, [r7, #32]

	app->last_error = error;
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004360:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220

	double brake_torque = 0.0;
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// if (desired_speed < app->speed_sensor.speed - 1.3) {
	// 	brake_torque = BRAKE_TORQUE_OFFSET + error * BRAKE_KP;
	// 	if (brake_torque > MAX_BRAKE_TORQUE) { brake_torque = MAX_BRAKE_TORQUE; }
	// }

	app->sum_of_errors += error;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8004376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800437a:	f7fb ff97 	bl	80002ac <__adddf3>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218

	double pwm_double = error * KP + app->sum_of_errors * KI + (error - app->last_error) * KD;
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	4b7f      	ldr	r3, [pc, #508]	; (800458c <app_control_loop+0x2d8>)
 800438e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004392:	f7fc f941 	bl	8000618 <__aeabi_dmul>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4614      	mov	r4, r2
 800439c:	461d      	mov	r5, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	f7fc f934 	bl	8000618 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fb ff78 	bl	80002ac <__adddf3>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4614      	mov	r4, r2
 80043c2:	461d      	mov	r5, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	e9d3 2388 	ldrd	r2, r3, [r3, #544]	; 0x220
 80043ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80043ce:	f7fb ff6b 	bl	80002a8 <__aeabi_dsub>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	f7fc f919 	bl	8000618 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fb ff5d 	bl	80002ac <__adddf3>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	app->last_pwm_double = pwm_double;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004400:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230

	int pwm = (int) pwm_double;
 8004404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004408:	f7fc fbb6 	bl	8000b78 <__aeabi_d2iz>
 800440c:	4603      	mov	r3, r0
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c

	// clamping and anti windup
	if (pwm > THROTTLE_PWM_MAX) {
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004416:	4293      	cmp	r3, r2
 8004418:	dd0f      	ble.n	800443a <app_control_loop+0x186>
		pwm = THROTTLE_PWM_MAX;
 800441a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
		app->sum_of_errors -= error;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 8004426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800442a:	f7fb ff3d 	bl	80002a8 <__aeabi_dsub>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 8004438:	e010      	b.n	800445c <app_control_loop+0x1a8>
	} else if (pwm < THROTTLE_PWM_MIN) {
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	2b00      	cmp	r3, #0
 800443e:	da0d      	bge.n	800445c <app_control_loop+0x1a8>
		pwm = THROTTLE_PWM_MIN;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
		app->sum_of_errors -= error;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	; 0x218
 800444a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800444e:	f7fb ff2b 	bl	80002a8 <__aeabi_dsub>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
	}

	app->last_error = error;
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220

	// OUTPUTS:

	// contactor
	if (app->brake_unlocked) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <app_control_loop+0x1ca>
		HAL_GPIO_WritePin(CONTACTOR_RELAY_GPIO_Port, CONTACTOR_RELAY_Pin, GPIO_PIN_SET);
 8004472:	2201      	movs	r2, #1
 8004474:	2108      	movs	r1, #8
 8004476:	4846      	ldr	r0, [pc, #280]	; (8004590 <app_control_loop+0x2dc>)
 8004478:	f7fd fc9a 	bl	8001db0 <HAL_GPIO_WritePin>
 800447c:	e008      	b.n	8004490 <app_control_loop+0x1dc>
	} else {
		// turn engine off
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800447e:	4b45      	ldr	r3, [pc, #276]	; (8004594 <app_control_loop+0x2e0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2200      	movs	r2, #0
 8004484:	635a      	str	r2, [r3, #52]	; 0x34
		// turn contactor off
		HAL_GPIO_WritePin(CONTACTOR_RELAY_GPIO_Port, CONTACTOR_RELAY_Pin, GPIO_PIN_RESET);
 8004486:	2200      	movs	r2, #0
 8004488:	2108      	movs	r1, #8
 800448a:	4841      	ldr	r0, [pc, #260]	; (8004590 <app_control_loop+0x2dc>)
 800448c:	f7fd fc90 	bl	8001db0 <HAL_GPIO_WritePin>
	}

	// PWM throttle output
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8004490:	4b40      	ldr	r3, [pc, #256]	; (8004594 <app_control_loop+0x2e0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004496:	635a      	str	r2, [r3, #52]	; 0x34
	app->last_pwm = pwm;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

	// braking current output
	double final_braking_current = app->brake_unlocked ? brake_torque : MAX_BRAKE_TORQUE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <app_control_loop+0x1fe>
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	e002      	b.n	80044b8 <app_control_loop+0x204>
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	4b38      	ldr	r3, [pc, #224]	; (8004598 <app_control_loop+0x2e4>)
 80044b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	app->tx_vesc_set_current.data.current = htonl((int32_t) (final_braking_current * 1000));
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	4b36      	ldr	r3, [pc, #216]	; (800459c <app_control_loop+0x2e8>)
 80044c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044c6:	f7fc f8a7 	bl	8000618 <__aeabi_dmul>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	f7fc fb51 	bl	8000b78 <__aeabi_d2iz>
 80044d6:	4603      	mov	r3, r0
 80044d8:	ba1b      	rev	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	can_send(&app->can_state, &app->tx_vesc_set_current.header, (uint8_t *) &app->tx_vesc_set_current.data);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044f4:	461a      	mov	r2, r3
 80044f6:	f000 fb32 	bl	8004b5e <can_send>
	app->last_brake_current = final_braking_current;
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004500:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228

	// app->tx_vesc_set_rpm.data.rpm = htonl(1000);
	// can_send(&app->can_state, &app->tx_vesc_set_rpm.header, (uint8_t *) &app->tx_vesc_set_rpm.data);

	// update tx_steering_command
	if (app->autonomous) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d006      	beq.n	800451e <app_control_loop+0x26a>
		app->tx_steering_command.data.steering_angle = app->control_command.steering_angle;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 800451c:	e005      	b.n	800452a <app_control_loop+0x276>
		// debug_printf("%f" nl, app->control_command.steering_angle);
	} else {
		app->tx_steering_command.data.steering_angle = app->manual_command.steering_angle;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	}

	// tx_control_feedback
	app->tx_control_feedback.data.velocity = (float) app->speed_sensor.speed;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fb68 	bl	8000c08 <__aeabi_d2f>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	app->tx_control_feedback.data.steering_angle = app->rx_steering_feedback->data.steering_angle;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

	// send steering command and feedback on CAN
	can_send(&app->can_state, &app->tx_steering_command.header, (uint8_t *) &app->tx_steering_command.data);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 71d2 	add.w	r1, r3, #420	; 0x1a4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004560:	461a      	mov	r2, r3
 8004562:	f000 fafc 	bl	8004b5e <can_send>
	can_send(&app->can_state, &app->tx_control_feedback.header, (uint8_t *) &app->tx_control_feedback.data);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 71e0 	add.w	r1, r3, #448	; 0x1c0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004578:	461a      	mov	r2, r3
 800457a:	f000 faf0 	bl	8004b5e <can_send>

}
 800457e:	bf00      	nop
 8004580:	3738      	adds	r7, #56	; 0x38
 8004582:	46bd      	mov	sp, r7
 8004584:	bdb0      	pop	{r4, r5, r7, pc}
 8004586:	bf00      	nop
 8004588:	40200000 	.word	0x40200000
 800458c:	407f4000 	.word	0x407f4000
 8004590:	40021800 	.word	0x40021800
 8004594:	20000298 	.word	0x20000298
 8004598:	40510000 	.word	0x40510000
 800459c:	408f4000 	.word	0x408f4000

080045a0 <convert_channels_to_commands>:
#define JOY_THROTTLE_INDEX 2
#define JOY_STEERING_INDEX 3
#define JOY_EMK_INDEX 4
#define JOY_MODE_INDEX 5

static void convert_channels_to_commands(app_state_t *app) {
 80045a0:	b480      	push	{r7}
 80045a2:	b08d      	sub	sp, #52	; 0x34
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

	int joy_throttle = app->rc_receiver_state.channels[JOY_THROTTLE_INDEX].servo_position;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	int joy_steering = app->rc_receiver_state.channels[JOY_STEERING_INDEX].servo_position;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
	int joy_emk = app->rc_receiver_state.channels[JOY_EMK_INDEX].servo_position;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
	int joy_mode = app->rc_receiver_state.channels[JOY_MODE_INDEX].servo_position;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80045c6:	623b      	str	r3, [r7, #32]

	int joy_throttle_shifted = joy_throttle - 1024;
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80045ce:	61fb      	str	r3, [r7, #28]
	int joy_throttle_range = 1706 - 1024;
 80045d0:	f240 23aa 	movw	r3, #682	; 0x2aa
 80045d4:	61bb      	str	r3, [r7, #24]
	int velocity_range = 8;
 80045d6:	2308      	movs	r3, #8
 80045d8:	617b      	str	r3, [r7, #20]

	app->manual_command.velocity = num_max(0.0, (float) (joy_throttle_shifted * velocity_range)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004600:	d502      	bpl.n	8004608 <convert_channels_to_commands+0x68>
 8004602:	eddf 7a28 	vldr	s15, [pc, #160]	; 80046a4 <convert_channels_to_commands+0x104>
 8004606:	e00e      	b.n	8004626 <convert_channels_to_commands+0x86>
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	edc3 7a93 	vstr	s15, [r3, #588]	; 0x24c
												/ (float) joy_throttle_range);

	float joy_steering_shifted = (float) joy_steering - 342;
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004636:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80046a8 <convert_channels_to_commands+0x108>
 800463a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800463e:	edc7 7a04 	vstr	s15, [r7, #16]
	float joy_steering_range = 1706 - 342;
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <convert_channels_to_commands+0x10c>)
 8004644:	60fb      	str	r3, [r7, #12]
	float steering_range = 1.3f;
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <convert_channels_to_commands+0x110>)
 8004648:	60bb      	str	r3, [r7, #8]

	app->manual_command.steering_angle = ((joy_steering_shifted * steering_range) / joy_steering_range) - 0.65f;
 800464a:	ed97 7a04 	vldr	s14, [r7, #16]
 800464e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004652:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004656:	ed97 7a03 	vldr	s14, [r7, #12]
 800465a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800465e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80046b4 <convert_channels_to_commands+0x114>
 8004662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	edc3 7a92 	vstr	s15, [r3, #584]	; 0x248
	// app->manual_command.steering_angle *= -1.0f;

	app->brake_unlocked = joy_emk < 500;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004672:	4293      	cmp	r3, r2
 8004674:	bfd4      	ite	le
 8004676:	2301      	movle	r3, #1
 8004678:	2300      	movgt	r3, #0
 800467a:	b2da      	uxtb	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
	app->autonomous = joy_mode < 1000;
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004688:	4293      	cmp	r3, r2
 800468a:	bfd4      	ite	le
 800468c:	2301      	movle	r3, #1
 800468e:	2300      	movgt	r3, #0
 8004690:	b2da      	uxtb	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

//	debug_printf(joy_throttle);

}
 8004698:	bf00      	nop
 800469a:	3734      	adds	r7, #52	; 0x34
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	00000000 	.word	0x00000000
 80046a8:	43ab0000 	.word	0x43ab0000
 80046ac:	44aa8000 	.word	0x44aa8000
 80046b0:	3fa66666 	.word	0x3fa66666
 80046b4:	3f266666 	.word	0x3f266666

080046b8 <handle_spektrum_msg>:

static void handle_spektrum_msg(const spektrum_internal_msg_t *msg, void *context) {
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]

	app_state_t *app = (app_state_t *) context;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	60fb      	str	r3, [r7, #12]

	spektrum_msg_to_state(msg, &app->rc_receiver_state, (long) HAL_GetTick());
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f103 0494 	add.w	r4, r3, #148	; 0x94
 80046cc:	f7fc fd0a 	bl	80010e4 <HAL_GetTick>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4621      	mov	r1, r4
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f001 f8dd 	bl	8005896 <spektrum_msg_to_state>

	if (app->num_rc_readings < 5) {
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	dc07      	bgt.n	80046f6 <handle_spektrum_msg+0x3e>
		app->num_rc_readings++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		return;
 80046f4:	e006      	b.n	8004704 <handle_spektrum_msg+0x4c>
	}

	// convert to commands
	convert_channels_to_commands(app);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ff52 	bl	80045a0 <convert_channels_to_commands>
	// 	HAL_GPIO_WritePin(CONTACTOR_RELAY_GPIO_Port, CONTACTOR_RELAY_Pin, GPIO_PIN_SET);
	// } else {
	// 	HAL_GPIO_WritePin(CONTACTOR_RELAY_GPIO_Port, CONTACTOR_RELAY_Pin, GPIO_PIN_RESET);
	// }

	app->flag_update_ui = 1u;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250

}
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}

0800470a <app_input_loop>:

void app_input_loop(app_state_t *app) {
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]

	int n = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
	while (can_receive(
 8004716:	e01e      	b.n	8004756 <app_input_loop+0x4c>
		CAN_RX_FIFO0,
		&app->rx_msg.header,
		app->rx_msg.data
	) == HAL_OK && n < 3) {

		if (app->rx_msg.header.ExtId == CAN_MSG_EID_CONTROL_COMMAND) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800471e:	2b07      	cmp	r3, #7
 8004720:	d10a      	bne.n	8004738 <app_input_loop+0x2e>
			app->control_command = app->rx_control_command->data;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800472e:	321c      	adds	r2, #28
 8004730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004734:	e883 0003 	stmia.w	r3, {r0, r1}
		}

		if (app->rx_msg.header.ExtId == CAN_MSG_EID_STEERING_FEEDBACK) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800473e:	2b03      	cmp	r3, #3
 8004740:	d106      	bne.n	8004750 <app_input_loop+0x46>
			app->tx_control_feedback.data.steering_angle = app->rx_steering_feedback->data.steering_angle;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		}

		n++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
	while (can_receive(
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 72bc 	add.w	r2, r3, #376	; 0x178
		app->rx_msg.data
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f503 73ca 	add.w	r3, r3, #404	; 0x194
	while (can_receive(
 8004768:	2100      	movs	r1, #0
 800476a:	f000 fa7a 	bl	8004c62 <can_receive>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <app_input_loop+0x70>
	) == HAL_OK && n < 3) {
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b02      	cmp	r3, #2
 8004778:	ddce      	ble.n	8004718 <app_input_loop+0xe>

	}

}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <app_debug_loop>:

void app_debug_loop(app_state_t *app) {
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
	app->print_debug_info_flag = 1u;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <app_setup_can>:

static void app_setup_can(app_state_t *app) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08e      	sub	sp, #56	; 0x38
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	// float *value2_ptr = (float *) data2;
	//
	// float value1 = *value1_ptr;
	// float value2 = *value2_ptr;

	can_state_t *can = &app->can_state;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34

	can_init("CAN1", can, &hcan1);
 80047b0:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <app_setup_can+0x88>)
 80047b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047b4:	481d      	ldr	r0, [pc, #116]	; (800482c <app_setup_can+0x8c>)
 80047b6:	f000 f9bd 	bl	8004b34 <can_init>

	can_prepare_tx(
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80047c0:	2204      	movs	r2, #4
 80047c2:	2101      	movs	r1, #1
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa2b 	bl	8004c20 <can_prepare_tx>
		&app->tx_steering_command.header,
		CAN_MSG_EID_STEERING_COMMAND,
		sizeof(msg_steering_command_t)
	);

	can_prepare_tx(
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80047d0:	2208      	movs	r2, #8
 80047d2:	210f      	movs	r1, #15
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fa23 	bl	8004c20 <can_prepare_tx>
		&app->tx_control_feedback.header,
		CAN_MSG_EID_CONTROL_FEEDBACK,
		sizeof(msg_control_feedback_t)
	);

	can_prepare_tx(
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80047e0:	2204      	movs	r2, #4
 80047e2:	f240 111b 	movw	r1, #283	; 0x11b
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fa1a 	bl	8004c20 <can_prepare_tx>
		&app->tx_vesc_set_current.header,
		GET_VESC_SET_CURRENT_COMMAND_ID(VESC_ID),
		sizeof(msg_vesc_set_current_t)
	);

	can_prepare_tx(
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047f2:	2204      	movs	r2, #4
 80047f4:	f240 311b 	movw	r1, #795	; 0x31b
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fa11 	bl	8004c20 <can_prepare_tx>

	// setup CAN hardware filters
	// using one filter bank with mode id mask and all-zeros mask
	// (to receive all messages)
	CAN_FilterTypeDef filter;
	memset(&filter, 0, sizeof(filter));
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	2228      	movs	r2, #40	; 0x28
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f001 fe13 	bl	8006432 <memset>
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
	filter.FilterBank = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	623b      	str	r3, [r7, #32]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8004814:	2300      	movs	r3, #0
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8004818:	2301      	movs	r3, #1
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterActivation = CAN_FILTER_ENABLE;
 800481c:	2301      	movs	r3, #1
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
//		Error_Handler();
//	}

//	can_start(&app->can_state);

}
 8004820:	bf00      	nop
 8004822:	3738      	adds	r7, #56	; 0x38
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000200 	.word	0x20000200
 800482c:	0800ae28 	.word	0x0800ae28

08004830 <app_init>:

void app_init(app_state_t *app) {
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	app->rx_control_command = (rx_control_command_t *) &app->rx_msg;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	app->rx_steering_feedback = (rx_steering_feedback_t *) &app->rx_msg;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	0000      	movs	r0, r0
	...

08004860 <app_run>:

void app_run(app_state_t *app) {
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	b097      	sub	sp, #92	; 0x5c
 8004866:	af0a      	add	r7, sp, #40	; 0x28
 8004868:	6078      	str	r0, [r7, #4]

	// STARTUP

	printf(red_bold("------------------------------") nl);
 800486a:	489d      	ldr	r0, [pc, #628]	; (8004ae0 <app_run+0x280>)
 800486c:	f002 fe42 	bl	80074f4 <puts>
	printf(MAIN "waiting..." nl);
 8004870:	489c      	ldr	r0, [pc, #624]	; (8004ae4 <app_run+0x284>)
 8004872:	f002 fe3f 	bl	80074f4 <puts>
	debug_sizeof();
 8004876:	f001 fd5b 	bl	8006330 <debug_sizeof>

	// add a delay to ensure all external peripherals correctly start up
	// and start providing correct data
	HAL_Delay(100);
 800487a:	2064      	movs	r0, #100	; 0x64
 800487c:	f7fc fc3e 	bl	80010fc <HAL_Delay>

	printf(MAIN "starting..." nl);
 8004880:	4899      	ldr	r0, [pc, #612]	; (8004ae8 <app_run+0x288>)
 8004882:	f002 fe37 	bl	80074f4 <puts>

	// start PWM (initial value is 0/500)
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8004886:	2100      	movs	r1, #0
 8004888:	4898      	ldr	r0, [pc, #608]	; (8004aec <app_run+0x28c>)
 800488a:	f7fe f803 	bl	8002894 <HAL_TIM_OC_Start>
	// example: set PWM duty cycle to 60 % (300/500)
	// __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 300);

	speed_sensor_init(&app->speed_sensor, WHEEL_RADIUS, NUMBER_OF_MAGNETS);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004894:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8004ad0 <app_run+0x270>
 8004898:	ed9f 0b8f 	vldr	d0, [pc, #572]	; 8004ad8 <app_run+0x278>
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fe67 	bl	8005570 <speed_sensor_init>
	speed_sensor_start();
 80048a2:	f000 ff93 	bl	80057cc <speed_sensor_start>

	spektrum_nucleo_state_t *rc_receiver = &app->rc_receiver;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	spektrum_nucleo_init(rc_receiver);
 80048aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048ac:	f001 f857 	bl	800595e <spektrum_nucleo_init>
	spektrum_nucleo_start_receiving(SPEKTRUM_UART);
 80048b0:	488f      	ldr	r0, [pc, #572]	; (8004af0 <app_run+0x290>)
 80048b2:	f001 f91d 	bl	8005af0 <spektrum_nucleo_start_receiving>
	rc_receiver->msg_handler = handle_spektrum_msg;
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	4a8e      	ldr	r2, [pc, #568]	; (8004af4 <app_run+0x294>)
 80048ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	rc_receiver->msg_handler_context = app;
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	// ui_show(app);

	app_setup_can(app);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff ff6a 	bl	80047a0 <app_setup_can>

	scheduler_start();
 80048cc:	f000 fe3c 	bl	8005548 <scheduler_start>

	printf(MAIN "startup done, running..." nl);
 80048d0:	4889      	ldr	r0, [pc, #548]	; (8004af8 <app_run+0x298>)
 80048d2:	f002 fe0f 	bl	80074f4 <puts>

	int debug_uart_rx;

	while (true) {

		if ((debug_uart_rx = Debug_UART_Get_Byte()) != -1) {
 80048d6:	f000 f9e5 	bl	8004ca4 <Debug_UART_Get_Byte>
 80048da:	62b8      	str	r0, [r7, #40]	; 0x28
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d006      	beq.n	80048f2 <app_run+0x92>

			// reset stats
			if (debug_uart_rx == 'r') {
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	2b72      	cmp	r3, #114	; 0x72
 80048e8:	d103      	bne.n	80048f2 <app_run+0x92>
				// reset counters
				// TODO
				app->print_debug_info_flag = 1u;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
			}

		}

		if (app->print_debug_info_flag) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80c7 	beq.w	8004a8c <app_run+0x22c>

			app->print_debug_info_flag = 0u;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

			uint32_t current_ts = HAL_GetTick();
 8004906:	f7fc fbed 	bl	80010e4 <HAL_GetTick>
 800490a:	6278      	str	r0, [r7, #36]	; 0x24
			if (app->last_debug_print_ts != 0) {
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <app_run+0xd2>
				uint32_t diff = current_ts - app->last_debug_print_ts;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	623b      	str	r3, [r7, #32]
				debug_printf("last debug print %lu ms ago" nl, diff);
 8004922:	4b76      	ldr	r3, [pc, #472]	; (8004afc <app_run+0x29c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	4975      	ldr	r1, [pc, #468]	; (8004b00 <app_run+0x2a0>)
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fd47 	bl	80063c0 <fiprintf>
			}
			app->last_debug_print_ts = current_ts;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

			debug_printf(
 800493a:	4b70      	ldr	r3, [pc, #448]	; (8004afc <app_run+0x29c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6898      	ldr	r0, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 800494c:	496d      	ldr	r1, [pc, #436]	; (8004b04 <app_run+0x2a4>)
 800494e:	f001 fd37 	bl	80063c0 <fiprintf>
				MAIN "last control_loop_period = %lu, last input_loop_period = %lu" nl,
				app->control_loop_period, app->input_loop_period
			);

			debug_printf(
 8004952:	4b6a      	ldr	r3, [pc, #424]	; (8004afc <app_run+0x29c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689c      	ldr	r4, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	f8d1 10bc 	ldr.w	r1, [r1, #188]	; 0xbc
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800497c:	9003      	str	r0, [sp, #12]
 800497e:	9102      	str	r1, [sp, #8]
 8004980:	9201      	str	r2, [sp, #4]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	4633      	mov	r3, r6
 8004986:	462a      	mov	r2, r5
 8004988:	495f      	ldr	r1, [pc, #380]	; (8004b08 <app_run+0x2a8>)
 800498a:	4620      	mov	r0, r4
 800498c:	f001 fd18 	bl	80063c0 <fiprintf>
				app->rc_receiver_state.channels[3].servo_position,
				app->rc_receiver_state.channels[4].servo_position,
				app->rc_receiver_state.channels[5].servo_position
			);

			debug_printf(
 8004990:	4b5a      	ldr	r3, [pc, #360]	; (8004afc <app_run+0x29c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6898      	ldr	r0, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <app_run+0x146>
 80049a2:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <app_run+0x2ac>)
 80049a4:	e000      	b.n	80049a8 <app_run+0x148>
 80049a6:	4a5a      	ldr	r2, [pc, #360]	; (8004b10 <app_run+0x2b0>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <app_run+0x158>
 80049b4:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <app_run+0x2b4>)
 80049b6:	e000      	b.n	80049ba <app_run+0x15a>
 80049b8:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <app_run+0x2b8>)
 80049ba:	4958      	ldr	r1, [pc, #352]	; (8004b1c <app_run+0x2bc>)
 80049bc:	f001 fd00 	bl	80063c0 <fiprintf>
				"RC: mode=%s emergency_brake=%s" nl,
				app->autonomous ? "AUTONOMOUS" : "MANUAL",
				app->brake_unlocked ? "OFF" : "ON"
			);

			debug_printf(
 80049c0:	4b4e      	ldr	r3, [pc, #312]	; (8004afc <app_run+0x29c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689e      	ldr	r6, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fb fdcb 	bl	8000568 <__aeabi_f2d>
 80049d2:	4604      	mov	r4, r0
 80049d4:	460d      	mov	r5, r1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fdc3 	bl	8000568 <__aeabi_f2d>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	e9cd 2300 	strd	r2, r3, [sp]
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	494c      	ldr	r1, [pc, #304]	; (8004b20 <app_run+0x2c0>)
 80049f0:	4630      	mov	r0, r6
 80049f2:	f001 fce5 	bl	80063c0 <fiprintf>
				"AUTONOMOUS input: angle = %f vel = %f " nl,
				app->control_command.steering_angle,
				app->control_command.velocity
			);

			debug_printf(
 80049f6:	4b41      	ldr	r3, [pc, #260]	; (8004afc <app_run+0x29c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689e      	ldr	r6, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fb fdb0 	bl	8000568 <__aeabi_f2d>
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fb fda8 	bl	8000568 <__aeabi_f2d>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	e9cd 2300 	strd	r2, r3, [sp]
 8004a20:	4622      	mov	r2, r4
 8004a22:	462b      	mov	r3, r5
 8004a24:	493f      	ldr	r1, [pc, #252]	; (8004b24 <app_run+0x2c4>)
 8004a26:	4630      	mov	r0, r6
 8004a28:	f001 fcca 	bl	80063c0 <fiprintf>
				"MANUAL input: angle = %f vel = %f " nl,
				app->manual_command.steering_angle,
				app->manual_command.velocity
			);

			debug_printf(
 8004a2c:	4b33      	ldr	r3, [pc, #204]	; (8004afc <app_run+0x29c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	e9d3 ab44 	ldrd	sl, fp, [r3, #272]	; 0x110
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	ed91 7b8a 	vldr	d7, [r1, #552]	; 0x228
 8004a46:	687c      	ldr	r4, [r7, #4]
 8004a48:	f8d4 6238 	ldr.w	r6, [r4, #568]	; 0x238
 8004a4c:	687c      	ldr	r4, [r7, #4]
 8004a4e:	e9d4 4588 	ldrd	r4, r5, [r4, #544]	; 0x220
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	e9d1 898c 	ldrd	r8, r9, [r1, #560]	; 0x230
 8004a58:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8004a5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a60:	9604      	str	r6, [sp, #16]
 8004a62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004a66:	e9cd 2300 	strd	r2, r3, [sp]
 8004a6a:	4652      	mov	r2, sl
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	492e      	ldr	r1, [pc, #184]	; (8004b28 <app_run+0x2c8>)
 8004a70:	f001 fca6 	bl	80063c0 <fiprintf>
				app->last_pwm,
				app->last_error,
				app->last_pwm_double
			);

			printf(MAIN);
 8004a74:	482d      	ldr	r0, [pc, #180]	; (8004b2c <app_run+0x2cc>)
 8004a76:	f002 fcb7 	bl	80073e8 <iprintf>
			can_print_error_state(&app->can_state);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f89b 	bl	8004bbc <can_print_error_state>

			printf(nl);
 8004a86:	482a      	ldr	r0, [pc, #168]	; (8004b30 <app_run+0x2d0>)
 8004a88:	f002 fd34 	bl	80074f4 <puts>

		}

		if (app->speed_sensor.new_data) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d017      	beq.n	8004ac6 <app_run+0x266>

			uint32_t time_diff;
			double rpm, speed;

			HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 8004a96:	201b      	movs	r0, #27
 8004a98:	f7fc ffc3 	bl	8001a22 <HAL_NVIC_DisableIRQ>
			time_diff = app->speed_sensor.time_diff;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004aa2:	61fb      	str	r3, [r7, #28]
			rpm = app->speed_sensor.rpm;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8004aaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
			speed = app->speed_sensor.speed;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8004ab4:	e9c7 2302 	strd	r2, r3, [r7, #8]
			app->speed_sensor.new_data = 0u;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004ac0:	201b      	movs	r0, #27
 8004ac2:	f7fc ffa0 	bl	8001a06 <HAL_NVIC_EnableIRQ>
			// }

		}

		// delay for better visualization
		HAL_Delay(1000);
 8004ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aca:	f7fc fb17 	bl	80010fc <HAL_Delay>
		if ((debug_uart_rx = Debug_UART_Get_Byte()) != -1) {
 8004ace:	e702      	b.n	80048d6 <app_run+0x76>
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	40240000 	.word	0x40240000
 8004ad8:	ba5e353f 	.word	0xba5e353f
 8004adc:	3fc20c49 	.word	0x3fc20c49
 8004ae0:	0800ae30 	.word	0x0800ae30
 8004ae4:	0800ae5c 	.word	0x0800ae5c
 8004ae8:	0800ae80 	.word	0x0800ae80
 8004aec:	20000298 	.word	0x20000298
 8004af0:	200003b8 	.word	0x200003b8
 8004af4:	080046b9 	.word	0x080046b9
 8004af8:	0800aea4 	.word	0x0800aea4
 8004afc:	2000000c 	.word	0x2000000c
 8004b00:	0800aed4 	.word	0x0800aed4
 8004b04:	0800aef4 	.word	0x0800aef4
 8004b08:	0800af48 	.word	0x0800af48
 8004b0c:	0800af60 	.word	0x0800af60
 8004b10:	0800af6c 	.word	0x0800af6c
 8004b14:	0800af74 	.word	0x0800af74
 8004b18:	0800af78 	.word	0x0800af78
 8004b1c:	0800af7c 	.word	0x0800af7c
 8004b20:	0800afa0 	.word	0x0800afa0
 8004b24:	0800afcc 	.word	0x0800afcc
 8004b28:	0800aff4 	.word	0x0800aff4
 8004b2c:	0800b054 	.word	0x0800b054
 8004b30:	0800b06c 	.word	0x0800b06c

08004b34 <can_init>:
		printf(" %02x", data[i]);
	}
	printf(nl);
}

void can_init(const char *name, can_state_t *state, CAN_HandleTypeDef *hcan) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
	memset(state, 0, sizeof(can_state_t));
 8004b40:	2218      	movs	r2, #24
 8004b42:	2100      	movs	r1, #0
 8004b44:	68b8      	ldr	r0, [r7, #8]
 8004b46:	f001 fc74 	bl	8006432 <memset>
	state->name = name;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]
	state->hcan = hcan;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	605a      	str	r2, [r3, #4]
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <can_send>:
	if (HAL_CAN_Start(state->hcan) != HAL_OK) {
		Error_Handler();
	}
}

HAL_StatusTypeDef can_send(can_state_t *state, CAN_TxHeaderTypeDef *header, uint8_t *data) {
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b088      	sub	sp, #32
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]

	uint32_t tx_mailbox_number;
	uint32_t num_free_tx_mailboxes;
	HAL_StatusTypeDef result;

	num_free_tx_mailboxes = HAL_CAN_GetTxMailboxesFreeLevel(state->hcan);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc fcbe 	bl	80014f0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8004b74:	61f8      	str	r0, [r7, #28]

	if (num_free_tx_mailboxes == 0) {
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <can_send+0x2c>
		state->num_tx_overruns++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	609a      	str	r2, [r3, #8]
		return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e014      	b.n	8004bb4 <can_send+0x56>
	}

	result = HAL_CAN_AddTxMessage(state->hcan, header, data, &tx_mailbox_number);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6858      	ldr	r0, [r3, #4]
 8004b8e:	f107 0314 	add.w	r3, r7, #20
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	f7fc fbd0 	bl	800133a <HAL_CAN_AddTxMessage>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	76fb      	strb	r3, [r7, #27]

	if (result != HAL_OK) {
 8004b9e:	7efb      	ldrb	r3, [r7, #27]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <can_send+0x54>
		state->num_tx_queuing_failures++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	60da      	str	r2, [r3, #12]
		return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <can_send+0x56>
	}

	return HAL_OK;
 8004bb2:	2300      	movs	r3, #0

}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <can_print_error_state>:

void can_print_error_state(can_state_t *state) {
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b08d      	sub	sp, #52	; 0x34
 8004bc0:	af06      	add	r7, sp, #24
 8004bc2:	6078      	str	r0, [r7, #4]
	uint32_t esr = state->hcan->Instance->ESR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	617b      	str	r3, [r7, #20]
	uint32_t rec = (esr & CAN_ESR_REC_Msk) >> CAN_ESR_REC_Pos;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	0e1b      	lsrs	r3, r3, #24
 8004bd2:	613b      	str	r3, [r7, #16]
	uint32_t tec = (esr & CAN_ESR_TEC_Msk) >> CAN_ESR_TEC_Pos;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	60fb      	str	r3, [r7, #12]
	uint32_t lec = (esr & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	60bb      	str	r3, [r7, #8]
	printf(
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681c      	ldr	r4, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68d2      	ldr	r2, [r2, #12]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	6909      	ldr	r1, [r1, #16]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	6940      	ldr	r0, [r0, #20]
 8004bfa:	9004      	str	r0, [sp, #16]
 8004bfc:	9103      	str	r1, [sp, #12]
 8004bfe:	9202      	str	r2, [sp, #8]
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4803      	ldr	r0, [pc, #12]	; (8004c1c <can_print_error_state+0x60>)
 8004c0e:	f002 fbeb 	bl	80073e8 <iprintf>
		"[%s] TX=%lu RX=%lu LAST=%lu Tovr=%lu Tqe=%lu Ttf=%lu Rovr=%lu" nl,
		state->name, tec, rec, lec,
		state->num_tx_overruns, state->num_tx_queuing_failures, state->num_tx_transmission_failures,
		state->num_rx_overruns
	);
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd90      	pop	{r4, r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	0800b0c0 	.word	0x0800b0c0

08004c20 <can_prepare_tx>:

void can_prepare_tx(CAN_TxHeaderTypeDef *header, uint32_t extended_id, uint32_t data_length) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
	memset(header, 0, sizeof(CAN_TxHeaderTypeDef));
 8004c2c:	2218      	movs	r2, #24
 8004c2e:	2100      	movs	r1, #0
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f001 fbfe 	bl	8006432 <memset>
	header->StdId = 0u;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
	header->ExtId = extended_id;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	605a      	str	r2, [r3, #4]
	header->IDE = CAN_ID_EXT;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2204      	movs	r2, #4
 8004c46:	609a      	str	r2, [r3, #8]
	header->RTR = CAN_RTR_DATA;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60da      	str	r2, [r3, #12]
	header->DLC = data_length;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	611a      	str	r2, [r3, #16]
	header->TransmitGlobalTime = DISABLE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	751a      	strb	r2, [r3, #20]
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <can_receive>:

HAL_StatusTypeDef can_receive(can_state_t *state, uint32_t rx_fifo, CAN_RxHeaderTypeDef *header, uint8_t *data) {
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]

	HAL_StatusTypeDef result;

	uint32_t rx_mailbox_fill_level = HAL_CAN_GetRxFifoFillLevel(state->hcan, rx_fifo);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fc fd81 	bl	800177e <HAL_CAN_GetRxFifoFillLevel>
 8004c7c:	6178      	str	r0, [r7, #20]

	// printf("[%s][receive] RX FIFO %lu fill level = %lu" nl, state->name, rx_fifo, rx_mailbox_fill_level);

	if (rx_mailbox_fill_level == 0) {
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <can_receive+0x26>
		return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e009      	b.n	8004c9c <can_receive+0x3a>
	}

	result = HAL_CAN_GetRxMessage(state->hcan, rx_fifo, header, data);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6858      	ldr	r0, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	f7fc fc62 	bl	800155a <HAL_CAN_GetRxMessage>
 8004c96:	4603      	mov	r3, r0
 8004c98:	74fb      	strb	r3, [r7, #19]
	// 		red_bold("[%s][receive] getting msg from RX mailbox failed (r=%d e=%lu)") nl,
	// 		state->name, result, state->hcan->ErrorCode
	// 	);
	// }

	return result;
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]

}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <Debug_UART_Get_Byte>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int Debug_UART_Get_Byte() {
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
	if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == SET) {
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <Debug_UART_Get_Byte+0x2c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d104      	bne.n	8004cc0 <Debug_UART_Get_Byte+0x1c>
		return (uint8_t) (huart3.Instance->DR & (uint8_t) 0x00FF);
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <Debug_UART_Get_Byte+0x2c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e001      	b.n	8004cc4 <Debug_UART_Get_Byte+0x20>
	}
	return -1;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	200003fc 	.word	0x200003fc

08004cd4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004cd8:	f7fc f99e 	bl	8001018 <HAL_Init>

	// OpenOCD (debugger) configures clock in a way that is incompatible with SystemClock_Config function
	// see https://www.eevblog.com/forum/microcontrollers/stm32-clock-gets-modified-when-debugger-is-connected/
	// Workaround:
	//   Disable PLL and switch to HSI (8 MHz), correct PLL setting will take place inside SystemClock_Config()
	if ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL) {
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <main+0x74>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d10c      	bne.n	8004d02 <main+0x2e>
		RCC->CFGR &= (uint32_t) (~RCC_CFGR_SW);
 8004ce8:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <main+0x74>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <main+0x74>)
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	6093      	str	r3, [r2, #8]
		while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 8004cf4:	bf00      	nop
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <main+0x74>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f9      	bne.n	8004cf6 <main+0x22>
	}

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004d02:	f000 f827 	bl	8004d54 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004d06:	f000 fa91 	bl	800522c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8004d0a:	f000 fa65 	bl	80051d8 <MX_USART3_UART_Init>
	MX_CAN1_Init();
 8004d0e:	f000 f88b 	bl	8004e28 <MX_CAN1_Init>
	MX_CAN2_Init();
 8004d12:	f000 f8c1 	bl	8004e98 <MX_CAN2_Init>
	MX_TIM1_Init();
 8004d16:	f000 f8f7 	bl	8004f08 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8004d1a:	f000 fa33 	bl	8005184 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8004d1e:	f000 f949 	bl	8004fb4 <MX_TIM2_Init>
	MX_TIM6_Init();
 8004d22:	f000 f99f 	bl	8005064 <MX_TIM6_Init>
	MX_TIM7_Init();
 8004d26:	f000 f9d3 	bl	80050d0 <MX_TIM7_Init>
	MX_TIM11_Init();
 8004d2a:	f000 fa07 	bl	800513c <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	main_app = &app;
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <main+0x78>)
 8004d30:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <main+0x7c>)
 8004d32:	601a      	str	r2, [r3, #0]

	app_init(&app);
 8004d34:	4806      	ldr	r0, [pc, #24]	; (8004d50 <main+0x7c>)
 8004d36:	f7ff fd7b 	bl	8004830 <app_init>

	app_run(&app);
 8004d3a:	4805      	ldr	r0, [pc, #20]	; (8004d50 <main+0x7c>)
 8004d3c:	f7ff fd90 	bl	8004860 <app_run>
 8004d40:	2300      	movs	r3, #0
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	200006b0 	.word	0x200006b0
 8004d50:	20000440 	.word	0x20000440

08004d54 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b094      	sub	sp, #80	; 0x50
 8004d58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d5a:	f107 0320 	add.w	r3, r7, #32
 8004d5e:	2230      	movs	r2, #48	; 0x30
 8004d60:	2100      	movs	r1, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 fb65 	bl	8006432 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d68:	f107 030c 	add.w	r3, r7, #12
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <SystemClock_Config+0xcc>)
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <SystemClock_Config+0xcc>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6413      	str	r3, [r2, #64]	; 0x40
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <SystemClock_Config+0xcc>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d94:	2300      	movs	r3, #0
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <SystemClock_Config+0xd0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <SystemClock_Config+0xd0>)
 8004d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <SystemClock_Config+0xd0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004db4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004dc8:	23a8      	movs	r3, #168	; 0xa8
 8004dca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004dd0:	2307      	movs	r3, #7
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004dd4:	f107 0320 	add.w	r3, r7, #32
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fd f803 	bl	8001de4 <HAL_RCC_OscConfig>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <SystemClock_Config+0x94>
		Error_Handler();
 8004de4:	f000 fb40 	bl	8005468 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004de8:	230f      	movs	r3, #15
 8004dea:	60fb      	str	r3, [r7, #12]
								  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dec:	2302      	movs	r3, #2
 8004dee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004df4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004df8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dfe:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	2105      	movs	r1, #5
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd fa64 	bl	80022d4 <HAL_RCC_ClockConfig>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <SystemClock_Config+0xc2>
		Error_Handler();
 8004e12:	f000 fb29 	bl	8005468 <Error_Handler>
	}
}
 8004e16:	bf00      	nop
 8004e18:	3750      	adds	r7, #80	; 0x50
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40007000 	.word	0x40007000

08004e28 <MX_CAN1_Init>:
/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8004e2c:	4b18      	ldr	r3, [pc, #96]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e2e:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <MX_CAN1_Init+0x6c>)
 8004e30:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 21;
 8004e32:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e34:	2215      	movs	r2, #21
 8004e36:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e44:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e48:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8004e4c:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e50:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8004e54:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004e6e:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8004e7a:	4805      	ldr	r0, [pc, #20]	; (8004e90 <MX_CAN1_Init+0x68>)
 8004e7c:	f7fc f962 	bl	8001144 <HAL_CAN_Init>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <MX_CAN1_Init+0x62>
		Error_Handler();
 8004e86:	f000 faef 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000200 	.word	0x20000200
 8004e94:	40006400 	.word	0x40006400

08004e98 <MX_CAN2_Init>:
/**
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004e9e:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <MX_CAN2_Init+0x6c>)
 8004ea0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 21;
 8004ea2:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004ea4:	2215      	movs	r2, #21
 8004ea6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8004eae:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004eb4:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004eb8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8004ebc:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_6TQ;
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004ec0:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8004ec4:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8004ec6:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8004eea:	4805      	ldr	r0, [pc, #20]	; (8004f00 <MX_CAN2_Init+0x68>)
 8004eec:	f7fc f92a 	bl	8001144 <HAL_CAN_Init>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <MX_CAN2_Init+0x62>
		Error_Handler();
 8004ef6:	f000 fab7 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000228 	.word	0x20000228
 8004f04:	40006800 	.word	0x40006800

08004f08 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f0e:	f107 0310 	add.w	r3, r7, #16
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8004f18:	463b      	mov	r3, r7
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f26:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <MX_TIM1_Init+0xa8>)
 8004f28:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 167;
 8004f2a:	4b20      	ldr	r3, [pc, #128]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f2c:	22a7      	movs	r2, #167	; 0xa7
 8004f2e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f30:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f3c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f3e:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f4a:	4b18      	ldr	r3, [pc, #96]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8004f50:	4816      	ldr	r0, [pc, #88]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f52:	f7fd fdb6 	bl	8002ac2 <HAL_TIM_IC_Init>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_TIM1_Init+0x58>
		Error_Handler();
 8004f5c:	f000 fa84 	bl	8005468 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004f68:	f107 0310 	add.w	r3, r7, #16
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	480f      	ldr	r0, [pc, #60]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f70:	f7fe fd4e 	bl	8003a10 <HAL_TIMEx_MasterConfigSynchronization>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_TIM1_Init+0x76>
		Error_Handler();
 8004f7a:	f000 fa75 	bl	8005468 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004f82:	2301      	movs	r3, #1
 8004f84:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004f8e:	463b      	mov	r3, r7
 8004f90:	2200      	movs	r2, #0
 8004f92:	4619      	mov	r1, r3
 8004f94:	4805      	ldr	r0, [pc, #20]	; (8004fac <MX_TIM1_Init+0xa4>)
 8004f96:	f7fe f813 	bl	8002fc0 <HAL_TIM_IC_ConfigChannel>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8004fa0:	f000 fa62 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000250 	.word	0x20000250
 8004fb0:	40010000 	.word	0x40010000

08004fb4 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	; 0x28
 8004fb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fba:	f107 0320 	add.w	r3, r7, #32
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8004fc4:	1d3b      	adds	r3, r7, #4
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	609a      	str	r2, [r3, #8]
 8004fce:	60da      	str	r2, [r3, #12]
 8004fd0:	611a      	str	r2, [r3, #16]
 8004fd2:	615a      	str	r2, [r3, #20]
 8004fd4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004fd6:	4b22      	ldr	r3, [pc, #136]	; (8005060 <MX_TIM2_Init+0xac>)
 8004fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fdc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8004fde:	4b20      	ldr	r3, [pc, #128]	; (8005060 <MX_TIM2_Init+0xac>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <MX_TIM2_Init+0xac>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 40000;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <MX_TIM2_Init+0xac>)
 8004fec:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004ff0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <MX_TIM2_Init+0xac>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <MX_TIM2_Init+0xac>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8004ffe:	4818      	ldr	r0, [pc, #96]	; (8005060 <MX_TIM2_Init+0xac>)
 8005000:	f7fd fd10 	bl	8002a24 <HAL_TIM_PWM_Init>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <MX_TIM2_Init+0x5a>
		Error_Handler();
 800500a:	f000 fa2d 	bl	8005468 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800500e:	2300      	movs	r3, #0
 8005010:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8005016:	f107 0320 	add.w	r3, r7, #32
 800501a:	4619      	mov	r1, r3
 800501c:	4810      	ldr	r0, [pc, #64]	; (8005060 <MX_TIM2_Init+0xac>)
 800501e:	f7fe fcf7 	bl	8003a10 <HAL_TIMEx_MasterConfigSynchronization>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <MX_TIM2_Init+0x78>
		Error_Handler();
 8005028:	f000 fa1e 	bl	8005468 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800502c:	2360      	movs	r3, #96	; 0x60
 800502e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	2200      	movs	r2, #0
 8005040:	4619      	mov	r1, r3
 8005042:	4807      	ldr	r0, [pc, #28]	; (8005060 <MX_TIM2_Init+0xac>)
 8005044:	f7fe f858 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <MX_TIM2_Init+0x9e>
		Error_Handler();
 800504e:	f000 fa0b 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8005052:	4803      	ldr	r0, [pc, #12]	; (8005060 <MX_TIM2_Init+0xac>)
 8005054:	f000 ff5c 	bl	8005f10 <HAL_TIM_MspPostInit>

}
 8005058:	bf00      	nop
 800505a:	3728      	adds	r7, #40	; 0x28
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000298 	.word	0x20000298

08005064 <MX_TIM6_Init>:
/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800506a:	463b      	mov	r3, r7
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <MX_TIM6_Init+0x64>)
 8005074:	4a15      	ldr	r2, [pc, #84]	; (80050cc <MX_TIM6_Init+0x68>)
 8005076:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 8399;
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <MX_TIM6_Init+0x64>)
 800507a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800507e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <MX_TIM6_Init+0x64>)
 8005082:	2200      	movs	r2, #0
 8005084:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 5000;
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <MX_TIM6_Init+0x64>)
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800508e:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <MX_TIM6_Init+0x64>)
 8005090:	2200      	movs	r2, #0
 8005092:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8005094:	480c      	ldr	r0, [pc, #48]	; (80050c8 <MX_TIM6_Init+0x64>)
 8005096:	f7fd fb3d 	bl	8002714 <HAL_TIM_Base_Init>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_TIM6_Init+0x40>
		Error_Handler();
 80050a0:	f000 f9e2 	bl	8005468 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050a4:	2300      	movs	r3, #0
 80050a6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80050ac:	463b      	mov	r3, r7
 80050ae:	4619      	mov	r1, r3
 80050b0:	4805      	ldr	r0, [pc, #20]	; (80050c8 <MX_TIM6_Init+0x64>)
 80050b2:	f7fe fcad 	bl	8003a10 <HAL_TIMEx_MasterConfigSynchronization>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <MX_TIM6_Init+0x5c>
		Error_Handler();
 80050bc:	f000 f9d4 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	200002e0 	.word	0x200002e0
 80050cc:	40001000 	.word	0x40001000

080050d0 <MX_TIM7_Init>:
/**
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050d6:	463b      	mov	r3, r7
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <MX_TIM7_Init+0x64>)
 80050e0:	4a15      	ldr	r2, [pc, #84]	; (8005138 <MX_TIM7_Init+0x68>)
 80050e2:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 83;
 80050e4:	4b13      	ldr	r3, [pc, #76]	; (8005134 <MX_TIM7_Init+0x64>)
 80050e6:	2253      	movs	r2, #83	; 0x53
 80050e8:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <MX_TIM7_Init+0x64>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000;
 80050f0:	4b10      	ldr	r3, [pc, #64]	; (8005134 <MX_TIM7_Init+0x64>)
 80050f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80050f6:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f8:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <MX_TIM7_Init+0x64>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80050fe:	480d      	ldr	r0, [pc, #52]	; (8005134 <MX_TIM7_Init+0x64>)
 8005100:	f7fd fb08 	bl	8002714 <HAL_TIM_Base_Init>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <MX_TIM7_Init+0x3e>
		Error_Handler();
 800510a:	f000 f9ad 	bl	8005468 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8005116:	463b      	mov	r3, r7
 8005118:	4619      	mov	r1, r3
 800511a:	4806      	ldr	r0, [pc, #24]	; (8005134 <MX_TIM7_Init+0x64>)
 800511c:	f7fe fc78 	bl	8003a10 <HAL_TIMEx_MasterConfigSynchronization>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_TIM7_Init+0x5a>
		Error_Handler();
 8005126:	f000 f99f 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000328 	.word	0x20000328
 8005138:	40001400 	.word	0x40001400

0800513c <MX_TIM11_Init>:
/**
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void) {
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <MX_TIM11_Init+0x40>)
 8005142:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <MX_TIM11_Init+0x44>)
 8005144:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 167;
 8005146:	4b0d      	ldr	r3, [pc, #52]	; (800517c <MX_TIM11_Init+0x40>)
 8005148:	22a7      	movs	r2, #167	; 0xa7
 800514a:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <MX_TIM11_Init+0x40>)
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 10000;
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <MX_TIM11_Init+0x40>)
 8005154:	f242 7210 	movw	r2, #10000	; 0x2710
 8005158:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800515a:	4b08      	ldr	r3, [pc, #32]	; (800517c <MX_TIM11_Init+0x40>)
 800515c:	2200      	movs	r2, #0
 800515e:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <MX_TIM11_Init+0x40>)
 8005162:	2200      	movs	r2, #0
 8005164:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8005166:	4805      	ldr	r0, [pc, #20]	; (800517c <MX_TIM11_Init+0x40>)
 8005168:	f7fd fad4 	bl	8002714 <HAL_TIM_Base_Init>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <MX_TIM11_Init+0x3a>
		Error_Handler();
 8005172:	f000 f979 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000370 	.word	0x20000370
 8005180:	40014800 	.word	0x40014800

08005184 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005188:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 800518a:	4a12      	ldr	r2, [pc, #72]	; (80051d4 <MX_USART2_UART_Init+0x50>)
 800518c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800518e:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 8005190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005194:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 8005198:	2200      	movs	r2, #0
 800519a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 800519e:	2200      	movs	r2, #0
 80051a0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80051a2:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_RX;
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 80051aa:	2204      	movs	r2, #4
 80051ac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80051ba:	4805      	ldr	r0, [pc, #20]	; (80051d0 <MX_USART2_UART_Init+0x4c>)
 80051bc:	f7fe fcb8 	bl	8003b30 <HAL_UART_Init>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80051c6:	f000 f94f 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200003b8 	.word	0x200003b8
 80051d4:	40004400 	.word	0x40004400

080051d8 <MX_USART3_UART_Init>:
/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80051dc:	4b11      	ldr	r3, [pc, #68]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <MX_USART3_UART_Init+0x50>)
 80051e0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 80051e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051e8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 80051fe:	220c      	movs	r2, #12
 8005200:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 800520a:	2200      	movs	r2, #0
 800520c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800520e:	4805      	ldr	r0, [pc, #20]	; (8005224 <MX_USART3_UART_Init+0x4c>)
 8005210:	f7fe fc8e 	bl	8003b30 <HAL_UART_Init>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800521a:	f000 f925 	bl	8005468 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200003fc 	.word	0x200003fc
 8005228:	40004800 	.word	0x40004800

0800522c <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	; 0x30
 8005230:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005232:	f107 031c 	add.w	r3, r7, #28
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	609a      	str	r2, [r3, #8]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	4b83      	ldr	r3, [pc, #524]	; (8005454 <MX_GPIO_Init+0x228>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	4a82      	ldr	r2, [pc, #520]	; (8005454 <MX_GPIO_Init+0x228>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6313      	str	r3, [r2, #48]	; 0x30
 8005252:	4b80      	ldr	r3, [pc, #512]	; (8005454 <MX_GPIO_Init+0x228>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	4b7c      	ldr	r3, [pc, #496]	; (8005454 <MX_GPIO_Init+0x228>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	4a7b      	ldr	r2, [pc, #492]	; (8005454 <MX_GPIO_Init+0x228>)
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	6313      	str	r3, [r2, #48]	; 0x30
 800526e:	4b79      	ldr	r3, [pc, #484]	; (8005454 <MX_GPIO_Init+0x228>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	4b75      	ldr	r3, [pc, #468]	; (8005454 <MX_GPIO_Init+0x228>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	4a74      	ldr	r2, [pc, #464]	; (8005454 <MX_GPIO_Init+0x228>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6313      	str	r3, [r2, #48]	; 0x30
 800528a:	4b72      	ldr	r3, [pc, #456]	; (8005454 <MX_GPIO_Init+0x228>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	4b6e      	ldr	r3, [pc, #440]	; (8005454 <MX_GPIO_Init+0x228>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	4a6d      	ldr	r2, [pc, #436]	; (8005454 <MX_GPIO_Init+0x228>)
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	6313      	str	r3, [r2, #48]	; 0x30
 80052a6:	4b6b      	ldr	r3, [pc, #428]	; (8005454 <MX_GPIO_Init+0x228>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	4b67      	ldr	r3, [pc, #412]	; (8005454 <MX_GPIO_Init+0x228>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	4a66      	ldr	r2, [pc, #408]	; (8005454 <MX_GPIO_Init+0x228>)
 80052bc:	f043 0310 	orr.w	r3, r3, #16
 80052c0:	6313      	str	r3, [r2, #48]	; 0x30
 80052c2:	4b64      	ldr	r3, [pc, #400]	; (8005454 <MX_GPIO_Init+0x228>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	4b60      	ldr	r3, [pc, #384]	; (8005454 <MX_GPIO_Init+0x228>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	4a5f      	ldr	r2, [pc, #380]	; (8005454 <MX_GPIO_Init+0x228>)
 80052d8:	f043 0308 	orr.w	r3, r3, #8
 80052dc:	6313      	str	r3, [r2, #48]	; 0x30
 80052de:	4b5d      	ldr	r3, [pc, #372]	; (8005454 <MX_GPIO_Init+0x228>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80052ea:	2300      	movs	r3, #0
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4b59      	ldr	r3, [pc, #356]	; (8005454 <MX_GPIO_Init+0x228>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	4a58      	ldr	r2, [pc, #352]	; (8005454 <MX_GPIO_Init+0x228>)
 80052f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f8:	6313      	str	r3, [r2, #48]	; 0x30
 80052fa:	4b56      	ldr	r3, [pc, #344]	; (8005454 <MX_GPIO_Init+0x228>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8005306:	2200      	movs	r2, #0
 8005308:	f244 0181 	movw	r1, #16513	; 0x4081
 800530c:	4852      	ldr	r0, [pc, #328]	; (8005458 <MX_GPIO_Init+0x22c>)
 800530e:	f7fc fd4f 	bl	8001db0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, CONTACTOR_RELAY_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005312:	2200      	movs	r2, #0
 8005314:	2148      	movs	r1, #72	; 0x48
 8005316:	4851      	ldr	r0, [pc, #324]	; (800545c <MX_GPIO_Init+0x230>)
 8005318:	f7fc fd4a 	bl	8001db0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800531c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005320:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005322:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005326:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005328:	2300      	movs	r3, #0
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800532c:	f107 031c 	add.w	r3, r7, #28
 8005330:	4619      	mov	r1, r3
 8005332:	484b      	ldr	r0, [pc, #300]	; (8005460 <MX_GPIO_Init+0x234>)
 8005334:	f7fc fb90 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8005338:	2332      	movs	r3, #50	; 0x32
 800533a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005344:	2303      	movs	r3, #3
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005348:	230b      	movs	r3, #11
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800534c:	f107 031c 	add.w	r3, r7, #28
 8005350:	4619      	mov	r1, r3
 8005352:	4843      	ldr	r0, [pc, #268]	; (8005460 <MX_GPIO_Init+0x234>)
 8005354:	f7fc fb80 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8005358:	2386      	movs	r3, #134	; 0x86
 800535a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005364:	2303      	movs	r3, #3
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005368:	230b      	movs	r3, #11
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536c:	f107 031c 	add.w	r3, r7, #28
 8005370:	4619      	mov	r1, r3
 8005372:	483c      	ldr	r0, [pc, #240]	; (8005464 <MX_GPIO_Init+0x238>)
 8005374:	f7fc fb70 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8005378:	f244 0381 	movw	r3, #16513	; 0x4081
 800537c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800537e:	2301      	movs	r3, #1
 8005380:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	2300      	movs	r3, #0
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005386:	2300      	movs	r3, #0
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538a:	f107 031c 	add.w	r3, r7, #28
 800538e:	4619      	mov	r1, r3
 8005390:	4831      	ldr	r0, [pc, #196]	; (8005458 <MX_GPIO_Init+0x22c>)
 8005392:	f7fc fb61 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539c:	2302      	movs	r3, #2
 800539e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a4:	2303      	movs	r3, #3
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053a8:	230b      	movs	r3, #11
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80053ac:	f107 031c 	add.w	r3, r7, #28
 80053b0:	4619      	mov	r1, r3
 80053b2:	4829      	ldr	r0, [pc, #164]	; (8005458 <MX_GPIO_Init+0x22c>)
 80053b4:	f7fc fb50 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONTACTOR_RELAY_Pin USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = CONTACTOR_RELAY_Pin | USB_PowerSwitchOn_Pin;
 80053b8:	2348      	movs	r3, #72	; 0x48
 80053ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053bc:	2301      	movs	r3, #1
 80053be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c4:	2300      	movs	r3, #0
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053c8:	f107 031c 	add.w	r3, r7, #28
 80053cc:	4619      	mov	r1, r3
 80053ce:	4823      	ldr	r0, [pc, #140]	; (800545c <MX_GPIO_Init+0x230>)
 80053d0:	f7fc fb42 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053d8:	2300      	movs	r3, #0
 80053da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80053e0:	f107 031c 	add.w	r3, r7, #28
 80053e4:	4619      	mov	r1, r3
 80053e6:	481d      	ldr	r0, [pc, #116]	; (800545c <MX_GPIO_Init+0x230>)
 80053e8:	f7fc fb36 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80053ec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80053f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f2:	2302      	movs	r3, #2
 80053f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053fa:	2303      	movs	r3, #3
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80053fe:	230a      	movs	r3, #10
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005402:	f107 031c 	add.w	r3, r7, #28
 8005406:	4619      	mov	r1, r3
 8005408:	4816      	ldr	r0, [pc, #88]	; (8005464 <MX_GPIO_Init+0x238>)
 800540a:	f7fc fb25 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800540e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005412:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005414:	2300      	movs	r3, #0
 8005416:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	2300      	movs	r3, #0
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800541c:	f107 031c 	add.w	r3, r7, #28
 8005420:	4619      	mov	r1, r3
 8005422:	4810      	ldr	r0, [pc, #64]	; (8005464 <MX_GPIO_Init+0x238>)
 8005424:	f7fc fb18 	bl	8001a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8005428:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800542c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542e:	2302      	movs	r3, #2
 8005430:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005436:	2303      	movs	r3, #3
 8005438:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800543a:	230b      	movs	r3, #11
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800543e:	f107 031c 	add.w	r3, r7, #28
 8005442:	4619      	mov	r1, r3
 8005444:	4805      	ldr	r0, [pc, #20]	; (800545c <MX_GPIO_Init+0x230>)
 8005446:	f7fc fb07 	bl	8001a58 <HAL_GPIO_Init>

}
 800544a:	bf00      	nop
 800544c:	3730      	adds	r7, #48	; 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023800 	.word	0x40023800
 8005458:	40020400 	.word	0x40020400
 800545c:	40021800 	.word	0x40021800
 8005460:	40020800 	.word	0x40020800
 8005464:	40020000 	.word	0x40020000

08005468 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800546c:	b672      	cpsid	i
}
 800546e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8005470:	2201      	movs	r2, #1
 8005472:	2101      	movs	r1, #1
 8005474:	4807      	ldr	r0, [pc, #28]	; (8005494 <Error_Handler+0x2c>)
 8005476:	f7fc fc9b 	bl	8001db0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800547a:	2201      	movs	r2, #1
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	4805      	ldr	r0, [pc, #20]	; (8005494 <Error_Handler+0x2c>)
 8005480:	f7fc fc96 	bl	8001db0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8005484:	2201      	movs	r2, #1
 8005486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800548a:	4802      	ldr	r0, [pc, #8]	; (8005494 <Error_Handler+0x2c>)
 800548c:	f7fc fc90 	bl	8001db0 <HAL_GPIO_WritePin>
	while (1) {
 8005490:	e7fe      	b.n	8005490 <Error_Handler+0x28>
 8005492:	bf00      	nop
 8005494:	40020400 	.word	0x40020400

08005498 <scheduler_irq>:
#include "app.h"

void scheduler_irq(TIM_HandleTypeDef *htim) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

	uint32_t current_ts = HAL_GetTick();
 80054a0:	f7fb fe20 	bl	80010e4 <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]

	if (htim == &htim11) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a23      	ldr	r2, [pc, #140]	; (8005538 <scheduler_irq+0xa0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d119      	bne.n	80054e2 <scheduler_irq+0x4a>

		if (main_app->control_loop_last_ts != 0) {
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <scheduler_irq+0xa4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <scheduler_irq+0x36>
			main_app->control_loop_period = current_ts - main_app->control_loop_last_ts;
 80054ba:	4b20      	ldr	r3, [pc, #128]	; (800553c <scheduler_irq+0xa4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <scheduler_irq+0xa4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	1a8a      	subs	r2, r1, r2
 80054ca:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		}
		main_app->control_loop_last_ts = current_ts;
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <scheduler_irq+0xa4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260

		app_control_loop(main_app);
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <scheduler_irq+0xa4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe fee9 	bl	80042b4 <app_control_loop>
	}

	if (htim == &htim7) {
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a16      	ldr	r2, [pc, #88]	; (8005540 <scheduler_irq+0xa8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d119      	bne.n	800551e <scheduler_irq+0x86>

		if (main_app->input_loop_last_ts != 0) {
 80054ea:	4b14      	ldr	r3, [pc, #80]	; (800553c <scheduler_irq+0xa4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <scheduler_irq+0x72>
			main_app->input_loop_period = current_ts - main_app->input_loop_last_ts;
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <scheduler_irq+0xa4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <scheduler_irq+0xa4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68f9      	ldr	r1, [r7, #12]
 8005504:	1a8a      	subs	r2, r1, r2
 8005506:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		}
		main_app->input_loop_last_ts = current_ts;
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <scheduler_irq+0xa4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

		app_input_loop(main_app);
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <scheduler_irq+0xa4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff f8f6 	bl	800470a <app_input_loop>
	}

	if (htim == &htim6) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a08      	ldr	r2, [pc, #32]	; (8005544 <scheduler_irq+0xac>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d104      	bne.n	8005530 <scheduler_irq+0x98>
		app_debug_loop(main_app);
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <scheduler_irq+0xa4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff f929 	bl	8004782 <app_debug_loop>
	}

}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20000370 	.word	0x20000370
 800553c:	200006b0 	.word	0x200006b0
 8005540:	20000328 	.word	0x20000328
 8005544:	200002e0 	.word	0x200002e0

08005548 <scheduler_start>:

void scheduler_start() {
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0

	// control loop

	HAL_TIM_Base_Start_IT(&htim11);
 800554c:	4805      	ldr	r0, [pc, #20]	; (8005564 <scheduler_start+0x1c>)
 800554e:	f7fd f931 	bl	80027b4 <HAL_TIM_Base_Start_IT>

	// input loop (sensor + CAN)

	HAL_TIM_Base_Start_IT(&htim7);
 8005552:	4805      	ldr	r0, [pc, #20]	; (8005568 <scheduler_start+0x20>)
 8005554:	f7fd f92e 	bl	80027b4 <HAL_TIM_Base_Start_IT>

	// debug loop (blocking printing)

	HAL_TIM_Base_Start_IT(&htim6);
 8005558:	4804      	ldr	r0, [pc, #16]	; (800556c <scheduler_start+0x24>)
 800555a:	f7fd f92b 	bl	80027b4 <HAL_TIM_Base_Start_IT>

}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000370 	.word	0x20000370
 8005568:	20000328 	.word	0x20000328
 800556c:	200002e0 	.word	0x200002e0

08005570 <speed_sensor_init>:

void speed_sensor_init(
	speed_sensor_state_t *state,
	double wheel_radius,
	double number_of_magnets
) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6178      	str	r0, [r7, #20]
 8005578:	ed87 0b02 	vstr	d0, [r7, #8]
 800557c:	ed87 1b00 	vstr	d1, [r7]

	state->wheel_radius = wheel_radius;
 8005580:	6979      	ldr	r1, [r7, #20]
 8005582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005586:	e9c1 2300 	strd	r2, r3, [r1]
	state->number_of_magnets = number_of_magnets;
 800558a:	6979      	ldr	r1, [r7, #20]
 800558c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005590:	e9c1 2302 	strd	r2, r3, [r1, #8]

	state->angular_distance = 2.0 * M_PI / state->number_of_magnets;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800559a:	a11f      	add	r1, pc, #124	; (adr r1, 8005618 <speed_sensor_init+0xa8>)
 800559c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a0:	f7fb f964 	bl	800086c <__aeabi_ddiv>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	6979      	ldr	r1, [r7, #20]
 80055aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	state->linear_distance = state->angular_distance * state->wheel_radius;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f7fb f82d 	bl	8000618 <__aeabi_dmul>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	6979      	ldr	r1, [r7, #20]
 80055c4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	state->prev_time_within_period = 0u;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	621a      	str	r2, [r3, #32]
	state->num_of_overruns = 0u;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2200      	movs	r2, #0
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

	state->time_diff = 0u;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
	state->new_data = 0u;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	62da      	str	r2, [r3, #44]	; 0x2c
	state->speed = 0.0;
 80055e0:	6979      	ldr	r1, [r7, #20]
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	state->rpm = 0.0;
 80055ee:	6979      	ldr	r1, [r7, #20]
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	state->angular_speed = 0.0;
 80055fc:	6979      	ldr	r1, [r7, #20]
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

}
 800560a:	bf00      	nop
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	f3af 8000 	nop.w
 8005618:	54442d18 	.word	0x54442d18
 800561c:	401921fb 	.word	0x401921fb

08005620 <speed_sensor_tim_input_capture_handler>:

void speed_sensor_tim_input_capture_handler(speed_sensor_state_t *state, uint32_t time_within_period, uint32_t period) {
 8005620:	b5b0      	push	{r4, r5, r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]

	state->time_diff = time_within_period + (state->num_of_overruns * period) - state->prev_time_within_period;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	fb03 f202 	mul.w	r2, r3, r2
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	441a      	add	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	629a      	str	r2, [r3, #40]	; 0x28

	state->prev_time_within_period = time_within_period;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	621a      	str	r2, [r3, #32]
	state->num_of_overruns = 0u;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	625a      	str	r2, [r3, #36]	; 0x24
	state->new_data = 1u;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	62da      	str	r2, [r3, #44]	; 0x2c

	state->angular_speed = state->angular_distance / state->time_diff; // [rad/us]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	4618      	mov	r0, r3
 8005662:	f7fa ff5f 	bl	8000524 <__aeabi_ui2d>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4620      	mov	r0, r4
 800566c:	4629      	mov	r1, r5
 800566e:	f7fb f8fd 	bl	800086c <__aeabi_ddiv>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	state->rpm = state->angular_speed * 1000000.0 / 2.0 / M_PI * 60.0; // [rot/min]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005682:	a323      	add	r3, pc, #140	; (adr r3, 8005710 <speed_sensor_tim_input_capture_handler+0xf0>)
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fa ffc6 	bl	8000618 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800569c:	f7fb f8e6 	bl	800086c <__aeabi_ddiv>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4610      	mov	r0, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	a31c      	add	r3, pc, #112	; (adr r3, 800571c <speed_sensor_tim_input_capture_handler+0xfc>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fb f8dd 	bl	800086c <__aeabi_ddiv>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <speed_sensor_tim_input_capture_handler+0xf8>)
 80056c0:	f7fa ffaa 	bl	8000618 <__aeabi_dmul>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	68f9      	ldr	r1, [r7, #12]
 80056ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	state->speed = state->linear_distance / state->time_diff * 1000000.0;  // [m/s]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fa ff23 	bl	8000524 <__aeabi_ui2d>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4620      	mov	r0, r4
 80056e4:	4629      	mov	r1, r5
 80056e6:	f7fb f8c1 	bl	800086c <__aeabi_ddiv>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	a307      	add	r3, pc, #28	; (adr r3, 8005710 <speed_sensor_tim_input_capture_handler+0xf0>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa ff8e 	bl	8000618 <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	68f9      	ldr	r1, [r7, #12]
 8005702:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bdb0      	pop	{r4, r5, r7, pc}
 800570e:	bf00      	nop
 8005710:	00000000 	.word	0x00000000
 8005714:	412e8480 	.word	0x412e8480
 8005718:	404e0000 	.word	0x404e0000
 800571c:	54442d18 	.word	0x54442d18
 8005720:	400921fb 	.word	0x400921fb

08005724 <speed_sensor_tim_period_elapsed_handler>:

void speed_sensor_tim_period_elapsed_handler(speed_sensor_state_t *state) {
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	state->num_of_overruns++;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_TIM_IC_CaptureCallback>:
#include "app.h"
#include "speed_sensor.h"

extern TIM_HandleTypeDef htim1;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

	if (htim == &htim1) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <HAL_TIM_IC_CaptureCallback+0x40>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d113      	bne.n	800577c <HAL_TIM_IC_CaptureCallback+0x38>
		if (HAL_TIM_GetActiveChannel(&htim1) == HAL_TIM_ACTIVE_CHANNEL_1) {
 8005754:	480b      	ldr	r0, [pc, #44]	; (8005784 <HAL_TIM_IC_CaptureCallback+0x40>)
 8005756:	f7fd fdaf 	bl	80032b8 <HAL_TIM_GetActiveChannel>
 800575a:	4603      	mov	r3, r0
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10d      	bne.n	800577c <HAL_TIM_IC_CaptureCallback+0x38>

			uint32_t time_within_period = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8005760:	4b08      	ldr	r3, [pc, #32]	; (8005784 <HAL_TIM_IC_CaptureCallback+0x40>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	60fb      	str	r3, [r7, #12]
			// uint32_t time_within_period = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);

			speed_sensor_tim_input_capture_handler(&main_app->speed_sensor, time_within_period, htim1.Init.Period);
 8005768:	4b07      	ldr	r3, [pc, #28]	; (8005788 <HAL_TIM_IC_CaptureCallback+0x44>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005770:	4a04      	ldr	r2, [pc, #16]	; (8005784 <HAL_TIM_IC_CaptureCallback+0x40>)
 8005772:	68d2      	ldr	r2, [r2, #12]
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ff52 	bl	8005620 <speed_sensor_tim_input_capture_handler>

		}
	}

}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000250 	.word	0x20000250
 8005788:	200006b0 	.word	0x200006b0

0800578c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

	if (htim == &htim1) {
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a0b      	ldr	r2, [pc, #44]	; (80057c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10c      	bne.n	80057b6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
 800579c:	201b      	movs	r0, #27
 800579e:	f7fc f940 	bl	8001a22 <HAL_NVIC_DisableIRQ>
		speed_sensor_tim_period_elapsed_handler(&main_app->speed_sensor);
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff ffba 	bl	8005724 <speed_sensor_tim_period_elapsed_handler>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80057b0:	201b      	movs	r0, #27
 80057b2:	f7fc f928 	bl	8001a06 <HAL_NVIC_EnableIRQ>
	}

	scheduler_irq(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fe6e 	bl	8005498 <scheduler_irq>

}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000250 	.word	0x20000250
 80057c8:	200006b0 	.word	0x200006b0

080057cc <speed_sensor_start>:

void speed_sensor_start() {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0

	// start TIM1
	// this basically just calls __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE) and __HAL_TIM_ENABLE(&htim1)
	HAL_TIM_Base_Start_IT(&htim1);
 80057d0:	4804      	ldr	r0, [pc, #16]	; (80057e4 <speed_sensor_start+0x18>)
 80057d2:	f7fc ffef 	bl	80027b4 <HAL_TIM_Base_Start_IT>
	// enables TIM_IT_CC1
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80057d6:	2100      	movs	r1, #0
 80057d8:	4802      	ldr	r0, [pc, #8]	; (80057e4 <speed_sensor_start+0x18>)
 80057da:	f7fd f9c1 	bl	8002b60 <HAL_TIM_IC_Start_IT>

}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000250 	.word	0x20000250

080057e8 <spektrum_packet_to_msg>:
	"Aux_5",
	"Aux_6",
	"Aux_7",
};

void spektrum_packet_to_msg(spektrum_internal_packet_t *packet, spektrum_internal_msg_t *msg) {
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
	msg->fades = packet->fades;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	701a      	strb	r2, [r3, #0]
	msg->system = packet->system;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	785a      	ldrb	r2, [r3, #1]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 7; ++i) {
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e03c      	b.n	8005882 <spektrum_packet_to_msg+0x9a>
		uint16_t value = ntohs(packet->servo[i]);
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	4413      	add	r3, r2
 8005810:	885b      	ldrh	r3, [r3, #2]
 8005812:	b29b      	uxth	r3, r3
 8005814:	ba5b      	rev16	r3, r3
 8005816:	827b      	strh	r3, [r7, #18]
		spektrum_channel_data_t *servo = &msg->data[i];
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	4413      	add	r3, r2
 8005826:	3304      	adds	r3, #4
 8005828:	60fb      	str	r3, [r7, #12]
		if (packet->system == SPEKTRUM_SYSTEM_22MS_1024_DSM2) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d10e      	bne.n	8005850 <spektrum_packet_to_msg+0x68>
			servo->servo_phase = false;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]
			servo->channel_id = (SPEKTRUM_MASK_1024_CHANNEL_ID & value) >> 10u;
 8005838:	8a7b      	ldrh	r3, [r7, #18]
 800583a:	0a9b      	lsrs	r3, r3, #10
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	605a      	str	r2, [r3, #4]
			servo->servo_position = SPEKTRUM_MASK_1024_SERVO_POS & value;
 8005844:	8a7b      	ldrh	r3, [r7, #18]
 8005846:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	e015      	b.n	800587c <spektrum_packet_to_msg+0x94>
		} else {
			// else 2048
			servo->servo_phase = 0x8000u & value;
 8005850:	8a7b      	ldrh	r3, [r7, #18]
 8005852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	b2da      	uxtb	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	701a      	strb	r2, [r3, #0]
			servo->channel_id = (SPEKTRUM_MASK_2048_CHANNEL_ID & value) >> 11u;
 8005864:	8a7b      	ldrh	r3, [r7, #18]
 8005866:	0adb      	lsrs	r3, r3, #11
 8005868:	b29b      	uxth	r3, r3
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]
			servo->servo_position = SPEKTRUM_MASK_2048_SERVO_POS & value;
 8005872:	8a7b      	ldrh	r3, [r7, #18]
 8005874:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 7; ++i) {
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	3301      	adds	r3, #1
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b06      	cmp	r3, #6
 8005886:	ddbf      	ble.n	8005808 <spektrum_packet_to_msg+0x20>
		}
	}
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <spektrum_msg_to_state>:

	}

}

void spektrum_msg_to_state(const spektrum_internal_msg_t *msg, spektrum_state_t *state, long current_time) {
 8005896:	b480      	push	{r7}
 8005898:	b089      	sub	sp, #36	; 0x24
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]

	state->fades = msg->fades;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	701a      	strb	r2, [r3, #0]
	state->system = msg->system;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	785a      	ldrb	r2, [r3, #1]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	705a      	strb	r2, [r3, #1]

	if (state->last_msg_ts > 0) {
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	dd0c      	ble.n	80058d4 <spektrum_msg_to_state+0x3e>
		long delay = current_time - state->last_msg_ts;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	61bb      	str	r3, [r7, #24]
		if (delay > state->max_msg_delay) {
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	dd02      	ble.n	80058d4 <spektrum_msg_to_state+0x3e>
			state->max_msg_delay = delay;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	671a      	str	r2, [r3, #112]	; 0x70
		}
	}

	state->connected = true;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	state->last_msg_ts = current_time;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	66da      	str	r2, [r3, #108]	; 0x6c

	for (int i = 0; i < SPEKTRUM_NUM_MSG_CHANNELS; ++i) {
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	e030      	b.n	800594a <spektrum_msg_to_state+0xb4>
		const spektrum_channel_data_t *channel = &msg->data[i];
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	4613      	mov	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	3304      	adds	r3, #4
 80058f8:	617b      	str	r3, [r7, #20]
		if (channel->channel_id == SPEKTRUM_CHANNEL_LAST) {
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	d01f      	beq.n	8005942 <spektrum_msg_to_state+0xac>
			// skip the special channel that is used as the end of the data section of the packet
			continue;
		}
		if (channel->channel_id < 0 || channel->channel_id >= SPEKTRUM_NUM_STD_CHANNELS) {
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	db03      	blt.n	8005912 <spektrum_msg_to_state+0x7c>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b0b      	cmp	r3, #11
 8005910:	dd05      	ble.n	800591e <spektrum_msg_to_state+0x88>
			state->num_unexpected_channels++;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	669a      	str	r2, [r3, #104]	; 0x68
			continue;
 800591c:	e012      	b.n	8005944 <spektrum_msg_to_state+0xae>
		}
		state->channels[channel->channel_id].servo_phase = channel->servo_phase;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	7811      	ldrb	r1, [r2, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4413      	add	r3, r2
 800592c:	460a      	mov	r2, r1
 800592e:	711a      	strb	r2, [r3, #4]
		state->channels[channel->channel_id].servo_position = channel->servo_position;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	6892      	ldr	r2, [r2, #8]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	440b      	add	r3, r1
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	e000      	b.n	8005944 <spektrum_msg_to_state+0xae>
			continue;
 8005942:	bf00      	nop
	for (int i = 0; i < SPEKTRUM_NUM_MSG_CHANNELS; ++i) {
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b06      	cmp	r3, #6
 800594e:	ddcb      	ble.n	80058e8 <spektrum_msg_to_state+0x52>
	}

}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <spektrum_nucleo_init>:
#include <string.h>
#include "spektrum_nucleo.h"

void spektrum_nucleo_init(spektrum_nucleo_state_t *state) {
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
	memset(state, 0, sizeof(spektrum_nucleo_state_t));
 8005966:	2294      	movs	r2, #148	; 0x94
 8005968:	2100      	movs	r1, #0
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fd61 	bl	8006432 <memset>
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <spektrum_nucleo_reset_receiver>:

void spektrum_nucleo_reset_receiver(spektrum_nucleo_state_t *state, bool full) {
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
	state->num_lost_bytes += state->buffer_size;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598c:	441a      	add	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	67da      	str	r2, [r3, #124]	; 0x7c
	state->buffer_size = 0;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	615a      	str	r2, [r3, #20]
	if (full) {
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <spektrum_nucleo_reset_receiver+0x2c>
		state->receiver_state = UNINITIALIZED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
	}
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <spektrum_nucleo_process_packet>:

static void spektrum_nucleo_process_packet(spektrum_nucleo_state_t *state) {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

	// check packet structure first
	uint8_t system = state->packet.system;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	789b      	ldrb	r3, [r3, #2]
 80059bc:	73fb      	strb	r3, [r7, #15]
	if (
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d013      	beq.n	80059ec <spektrum_nucleo_process_packet+0x3c>
		system != SPEKTRUM_SYSTEM_22MS_1024_DSM2
		&& system != SPEKTRUM_SYSTEM_11MS_2048_DSM2
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b12      	cmp	r3, #18
 80059c8:	d010      	beq.n	80059ec <spektrum_nucleo_process_packet+0x3c>
		&& system != SPEKTRUM_SYSTEM_22MS_2048_DSMS
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2ba2      	cmp	r3, #162	; 0xa2
 80059ce:	d00d      	beq.n	80059ec <spektrum_nucleo_process_packet+0x3c>
		&& system != SPEKTRUM_SYSTEM_11MS_2048_DSMX
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2bb2      	cmp	r3, #178	; 0xb2
 80059d4:	d00a      	beq.n	80059ec <spektrum_nucleo_process_packet+0x3c>
		) {
		state->num_invalid_packets++;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		state->buffer_size = 0;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	615a      	str	r2, [r3, #20]
		return;
 80059ea:	e015      	b.n	8005a18 <spektrum_nucleo_process_packet+0x68>
	// TODO: It seems that the last channel (servo) data are always 0xFFFF. We can check that.

	// packet okay

	// parse it
	spektrum_packet_to_msg(&state->packet, &state->msg);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3318      	adds	r3, #24
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f7ff fef6 	bl	80057e8 <spektrum_packet_to_msg>

	state->msg_handler(&state->msg, state->msg_handler_context);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	f102 0018 	add.w	r0, r2, #24
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4798      	blx	r3

	// reset buffer
	state->buffer_size = 0;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	615a      	str	r2, [r3, #20]

}
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <spektrum_nucleo_handle_overrun>:

void spektrum_nucleo_handle_overrun(spektrum_nucleo_state_t *state) {
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
	state->num_overruns++;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	spektrum_nucleo_reset_receiver(state, true);
 8005a34:	2101      	movs	r1, #1
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff ff9e 	bl	8005978 <spektrum_nucleo_reset_receiver>
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <spektrum_nucleo_handle_byte>:

void spektrum_nucleo_handle_byte(spektrum_nucleo_state_t *state, uint8_t data) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]

	if (state->receiver_state == EXPECTING_DELAY) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d105      	bne.n	8005a66 <spektrum_nucleo_handle_byte+0x22>
		state->num_lost_bytes++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	67da      	str	r2, [r3, #124]	; 0x7c
		return;
 8005a64:	e01d      	b.n	8005aa2 <spektrum_nucleo_handle_byte+0x5e>
	}

	if (state->receiver_state == UNINITIALIZED) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <spektrum_nucleo_handle_byte+0x32>
		state->receiver_state = RECEIVING_PACKET;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
	}

	uint8_t *buffer = (uint8_t *) &state->packet;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]

	buffer[state->buffer_size++] = data;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	1c59      	adds	r1, r3, #1
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6151      	str	r1, [r2, #20]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	701a      	strb	r2, [r3, #0]

	if (state->buffer_size == sizeof(spektrum_internal_packet_t)) {
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	2b10      	cmp	r3, #16
 8005a94:	d105      	bne.n	8005aa2 <spektrum_nucleo_handle_byte+0x5e>
		spektrum_nucleo_process_packet(state);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff ff8a 	bl	80059b0 <spektrum_nucleo_process_packet>
		state->receiver_state = EXPECTING_DELAY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	701a      	strb	r2, [r3, #0]
	}

}
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <spektrum_nucleo_handle_idle>:

void spektrum_nucleo_handle_idle(spektrum_nucleo_state_t *state, uint32_t ts) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]

	state->uart_idle_it_last_ts = ts;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	679a      	str	r2, [r3, #120]	; 0x78
	state->uart_idle_it_count += 1u;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	675a      	str	r2, [r3, #116]	; 0x74

	if (state->receiver_state == RECEIVING_PACKET) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10b      	bne.n	8005ae4 <spektrum_nucleo_handle_idle+0x3c>
		state->num_lost_packets += 1u;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		spektrum_nucleo_reset_receiver(state, false);
 8005ada:	2100      	movs	r1, #0
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ff4b 	bl	8005978 <spektrum_nucleo_reset_receiver>
		return;
 8005ae2:	e002      	b.n	8005aea <spektrum_nucleo_handle_idle+0x42>
	}

	state->receiver_state = RECEIVING_PACKET;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]

}
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <spektrum_nucleo_start_receiving>:
	state->num_lost_packets = 0u;
	state->num_invalid_packets = 0u;
	state->num_overruns = 0u;
}

void spektrum_nucleo_start_receiving(UART_HandleTypeDef *huart) {
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	// __HAL_UART_ENABLE_IT(huart, UART_IT_ORE); TODO
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0210 	orr.w	r2, r2, #16
 8005b06:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0220 	orr.w	r2, r2, #32
 8005b16:	60da      	str	r2, [r3, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <spektrum_nucleo_irq_handler>:
	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
	__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
	// __HAL_UART_DISABLE_IT(huart, UART_IT_ORE); TODO
}

void spektrum_nucleo_irq_handler(spektrum_nucleo_state_t *state, UART_HandleTypeDef *huart) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d10e      	bne.n	8005b5a <spektrum_nucleo_irq_handler+0x36>
		__HAL_UART_CLEAR_OREFLAG(huart);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]
		spektrum_nucleo_handle_overrun(state);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff ff63 	bl	8005a1e <spektrum_nucleo_handle_overrun>
		return;
 8005b58:	e02a      	b.n	8005bb0 <spektrum_nucleo_irq_handler+0x8c>
	}

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) == SET) {
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d109      	bne.n	8005b7c <spektrum_nucleo_irq_handler+0x58>
		uint8_t data = (uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	75fb      	strb	r3, [r7, #23]
		spektrum_nucleo_handle_byte(state, data);
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff65 	bl	8005a44 <spektrum_nucleo_handle_byte>
		return;
 8005b7a:	e019      	b.n	8005bb0 <spektrum_nucleo_irq_handler+0x8c>
	}

	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET) {
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b10      	cmp	r3, #16
 8005b88:	d112      	bne.n	8005bb0 <spektrum_nucleo_irq_handler+0x8c>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
		spektrum_nucleo_handle_idle(state, HAL_GetTick());
 8005ba0:	f7fb faa0 	bl	80010e4 <HAL_GetTick>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ff7d 	bl	8005aa8 <spektrum_nucleo_handle_idle>
		return;
 8005bae:	bf00      	nop
	}

};
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

/**
* Initializes the Global MSP.
*/
void HAL_MspInit(void) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <HAL_MspInit+0x4c>)
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	4a0f      	ldr	r2, [pc, #60]	; (8005c04 <HAL_MspInit+0x4c>)
 8005bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005bce:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <HAL_MspInit+0x4c>)
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <HAL_MspInit+0x4c>)
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <HAL_MspInit+0x4c>)
 8005be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_MspInit+0x4c>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40023800 	.word	0x40023800

08005c08 <HAL_CAN_MspInit>:
* @brief CAN MSP Initialization
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08c      	sub	sp, #48	; 0x30
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c10:	f107 031c 	add.w	r3, r7, #28
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	611a      	str	r2, [r3, #16]
	if (hcan->Instance == CAN1) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a42      	ldr	r2, [pc, #264]	; (8005d30 <HAL_CAN_MspInit+0x128>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d135      	bne.n	8005c96 <HAL_CAN_MspInit+0x8e>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 8005c2a:	4b42      	ldr	r3, [pc, #264]	; (8005d34 <HAL_CAN_MspInit+0x12c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	4a40      	ldr	r2, [pc, #256]	; (8005d34 <HAL_CAN_MspInit+0x12c>)
 8005c32:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8005c34:	4b3f      	ldr	r3, [pc, #252]	; (8005d34 <HAL_CAN_MspInit+0x12c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10d      	bne.n	8005c58 <HAL_CAN_MspInit+0x50>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	4b3d      	ldr	r3, [pc, #244]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	4a3c      	ldr	r2, [pc, #240]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4c:	4b3a      	ldr	r3, [pc, #232]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	4a35      	ldr	r2, [pc, #212]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005c62:	f043 0308 	orr.w	r3, r3, #8
 8005c66:	6313      	str	r3, [r2, #48]	; 0x30
 8005c68:	4b33      	ldr	r3, [pc, #204]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		PD0     ------> CAN1_RX
		PD1     ------> CAN1_TX
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8005c74:	2303      	movs	r3, #3
 8005c76:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c80:	2303      	movs	r3, #3
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005c84:	2309      	movs	r3, #9
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c88:	f107 031c 	add.w	r3, r7, #28
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	482b      	ldr	r0, [pc, #172]	; (8005d3c <HAL_CAN_MspInit+0x134>)
 8005c90:	f7fb fee2 	bl	8001a58 <HAL_GPIO_Init>
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}

}
 8005c94:	e047      	b.n	8005d26 <HAL_CAN_MspInit+0x11e>
	} else if (hcan->Instance == CAN2) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a29      	ldr	r2, [pc, #164]	; (8005d40 <HAL_CAN_MspInit+0x138>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d142      	bne.n	8005d26 <HAL_CAN_MspInit+0x11e>
		__HAL_RCC_CAN2_CLK_ENABLE();
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	4a23      	ldr	r2, [pc, #140]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005caa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cae:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb0:	4b21      	ldr	r3, [pc, #132]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 8005cbc:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_CAN_MspInit+0x12c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <HAL_CAN_MspInit+0x12c>)
 8005cc4:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <HAL_CAN_MspInit+0x12c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10d      	bne.n	8005cea <HAL_CAN_MspInit+0xe2>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005cd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005cf4:	f043 0302 	orr.w	r3, r3, #2
 8005cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfa:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <HAL_CAN_MspInit+0x130>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8005d06:	2360      	movs	r3, #96	; 0x60
 8005d08:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d12:	2303      	movs	r3, #3
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8005d16:	2309      	movs	r3, #9
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d1a:	f107 031c 	add.w	r3, r7, #28
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4808      	ldr	r0, [pc, #32]	; (8005d44 <HAL_CAN_MspInit+0x13c>)
 8005d22:	f7fb fe99 	bl	8001a58 <HAL_GPIO_Init>
}
 8005d26:	bf00      	nop
 8005d28:	3730      	adds	r7, #48	; 0x30
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40006400 	.word	0x40006400
 8005d34:	200006b4 	.word	0x200006b4
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40020c00 	.word	0x40020c00
 8005d40:	40006800 	.word	0x40006800
 8005d44:	40020400 	.word	0x40020400

08005d48 <HAL_TIM_IC_MspInit>:
* @brief TIM_IC MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim_ic) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
	if (htim_ic->Instance == TIM1) {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <HAL_TIM_IC_MspInit+0xb4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d144      	bne.n	8005df4 <HAL_TIM_IC_MspInit+0xac>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <HAL_TIM_IC_MspInit+0xb8>)
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	4a23      	ldr	r2, [pc, #140]	; (8005e00 <HAL_TIM_IC_MspInit+0xb8>)
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	6453      	str	r3, [r2, #68]	; 0x44
 8005d7a:	4b21      	ldr	r3, [pc, #132]	; (8005e00 <HAL_TIM_IC_MspInit+0xb8>)
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <HAL_TIM_IC_MspInit+0xb8>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <HAL_TIM_IC_MspInit+0xb8>)
 8005d90:	f043 0310 	orr.w	r3, r3, #16
 8005d94:	6313      	str	r3, [r2, #48]	; 0x30
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <HAL_TIM_IC_MspInit+0xb8>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
		/**TIM1 GPIO Configuration
		PE9     ------> TIM1_CH1
		*/
		GPIO_InitStruct.Pin = SPEED_SENSOR_PULSE_Pin;
 8005da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005da6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da8:	2302      	movs	r3, #2
 8005daa:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db0:	2300      	movs	r3, #0
 8005db2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005db4:	2301      	movs	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(SPEED_SENSOR_PULSE_GPIO_Port, &GPIO_InitStruct);
 8005db8:	f107 0314 	add.w	r3, r7, #20
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4811      	ldr	r0, [pc, #68]	; (8005e04 <HAL_TIM_IC_MspInit+0xbc>)
 8005dc0:	f7fb fe4a 	bl	8001a58 <HAL_GPIO_Init>

		/* TIM1 interrupt Init */
		HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2103      	movs	r1, #3
 8005dc8:	2019      	movs	r0, #25
 8005dca:	f7fb fe00 	bl	80019ce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005dce:	2019      	movs	r0, #25
 8005dd0:	f7fb fe19 	bl	8001a06 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	201a      	movs	r0, #26
 8005dda:	f7fb fdf8 	bl	80019ce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005dde:	201a      	movs	r0, #26
 8005de0:	f7fb fe11 	bl	8001a06 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8005de4:	2200      	movs	r2, #0
 8005de6:	2102      	movs	r1, #2
 8005de8:	201b      	movs	r0, #27
 8005dea:	f7fb fdf0 	bl	80019ce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005dee:	201b      	movs	r0, #27
 8005df0:	f7fb fe09 	bl	8001a06 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}

}
 8005df4:	bf00      	nop
 8005df6:	3728      	adds	r7, #40	; 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40023800 	.word	0x40023800
 8005e04:	40021000 	.word	0x40021000

08005e08 <HAL_TIM_PWM_MspInit>:
* @brief TIM_PWM MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim_pwm) {
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	if (htim_pwm->Instance == TIM2) {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e18:	d10d      	bne.n	8005e36 <HAL_TIM_PWM_MspInit+0x2e>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	6413      	str	r3, [r2, #64]	; 0x40
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40023800 	.word	0x40023800

08005e48 <HAL_TIM_Base_MspInit>:
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM6) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <HAL_TIM_Base_MspInit+0xb8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d116      	bne.n	8005e88 <HAL_TIM_Base_MspInit+0x40>
		/* USER CODE BEGIN TIM6_MspInit 0 */

		/* USER CODE END TIM6_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM6_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	4b29      	ldr	r3, [pc, #164]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005e64:	f043 0310 	orr.w	r3, r3, #16
 8005e68:	6413      	str	r3, [r2, #64]	; 0x40
 8005e6a:	4b26      	ldr	r3, [pc, #152]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	697b      	ldr	r3, [r7, #20]
		/* TIM6 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8005e76:	2200      	movs	r2, #0
 8005e78:	2105      	movs	r1, #5
 8005e7a:	2036      	movs	r0, #54	; 0x36
 8005e7c:	f7fb fda7 	bl	80019ce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005e80:	2036      	movs	r0, #54	; 0x36
 8005e82:	f7fb fdc0 	bl	8001a06 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM11_MspInit 1 */

		/* USER CODE END TIM11_MspInit 1 */
	}

}
 8005e86:	e036      	b.n	8005ef6 <HAL_TIM_Base_MspInit+0xae>
	} else if (htim_base->Instance == TIM7) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1e      	ldr	r2, [pc, #120]	; (8005f08 <HAL_TIM_Base_MspInit+0xc0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d116      	bne.n	8005ec0 <HAL_TIM_Base_MspInit+0x78>
		__HAL_RCC_TIM7_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005e9c:	f043 0320 	orr.w	r3, r3, #32
 8005ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea2:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2104      	movs	r1, #4
 8005eb2:	2037      	movs	r0, #55	; 0x37
 8005eb4:	f7fb fd8b 	bl	80019ce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005eb8:	2037      	movs	r0, #55	; 0x37
 8005eba:	f7fb fda4 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 8005ebe:	e01a      	b.n	8005ef6 <HAL_TIM_Base_MspInit+0xae>
	} else if (htim_base->Instance == TIM11) {
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <HAL_TIM_Base_MspInit+0xc4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d115      	bne.n	8005ef6 <HAL_TIM_Base_MspInit+0xae>
		__HAL_RCC_TIM11_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_TIM_Base_MspInit+0xbc>)
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	201a      	movs	r0, #26
 8005eec:	f7fb fd6f 	bl	80019ce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005ef0:	201a      	movs	r0, #26
 8005ef2:	f7fb fd88 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40001000 	.word	0x40001000
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40001400 	.word	0x40001400
 8005f0c:	40014800 	.word	0x40014800

08005f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f18:	f107 030c 	add.w	r3, r7, #12
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	611a      	str	r2, [r3, #16]
	if (htim->Instance == TIM2) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d11d      	bne.n	8005f6e <HAL_TIM_MspPostInit+0x5e>
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <HAL_TIM_MspPostInit+0x68>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	4a0f      	ldr	r2, [pc, #60]	; (8005f78 <HAL_TIM_MspPostInit+0x68>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	6313      	str	r3, [r2, #48]	; 0x30
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <HAL_TIM_MspPostInit+0x68>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
		/**TIM2 GPIO Configuration
		PA5     ------> TIM2_CH1
		*/
		GPIO_InitStruct.Pin = THROTTLE_PWM_Pin;
 8005f4e:	2320      	movs	r3, #32
 8005f50:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f52:	2302      	movs	r3, #2
 8005f54:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(THROTTLE_PWM_GPIO_Port, &GPIO_InitStruct);
 8005f62:	f107 030c 	add.w	r3, r7, #12
 8005f66:	4619      	mov	r1, r3
 8005f68:	4804      	ldr	r0, [pc, #16]	; (8005f7c <HAL_TIM_MspPostInit+0x6c>)
 8005f6a:	f7fb fd75 	bl	8001a58 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}

}
 8005f6e:	bf00      	nop
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	40020000 	.word	0x40020000

08005f80 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f88:	f107 031c 	add.w	r3, r7, #28
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART2) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a36      	ldr	r2, [pc, #216]	; (8006078 <HAL_UART_MspInit+0xf8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d134      	bne.n	800600c <HAL_UART_MspInit+0x8c>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	4b35      	ldr	r3, [pc, #212]	; (800607c <HAL_UART_MspInit+0xfc>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4a34      	ldr	r2, [pc, #208]	; (800607c <HAL_UART_MspInit+0xfc>)
 8005fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb2:	4b32      	ldr	r3, [pc, #200]	; (800607c <HAL_UART_MspInit+0xfc>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	; (800607c <HAL_UART_MspInit+0xfc>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4a2d      	ldr	r2, [pc, #180]	; (800607c <HAL_UART_MspInit+0xfc>)
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fce:	4b2b      	ldr	r3, [pc, #172]	; (800607c <HAL_UART_MspInit+0xfc>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	697b      	ldr	r3, [r7, #20]
		/**USART2 GPIO Configuration
		PD5     ------> USART2_TX
		PD6     ------> USART2_RX
		*/
		GPIO_InitStruct.Pin = SPEKTRUM_TX_Pin | SPEKTRUM_RX_Pin;
 8005fda:	2360      	movs	r3, #96	; 0x60
 8005fdc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fea:	2307      	movs	r3, #7
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fee:	f107 031c 	add.w	r3, r7, #28
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4822      	ldr	r0, [pc, #136]	; (8006080 <HAL_UART_MspInit+0x100>)
 8005ff6:	f7fb fd2f 	bl	8001a58 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	2026      	movs	r0, #38	; 0x26
 8006000:	f7fb fce5 	bl	80019ce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006004:	2026      	movs	r0, #38	; 0x26
 8006006:	f7fb fcfe 	bl	8001a06 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 800600a:	e031      	b.n	8006070 <HAL_UART_MspInit+0xf0>
	} else if (huart->Instance == USART3) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <HAL_UART_MspInit+0x104>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d12c      	bne.n	8006070 <HAL_UART_MspInit+0xf0>
		__HAL_RCC_USART3_CLK_ENABLE();
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	4b18      	ldr	r3, [pc, #96]	; (800607c <HAL_UART_MspInit+0xfc>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	4a17      	ldr	r2, [pc, #92]	; (800607c <HAL_UART_MspInit+0xfc>)
 8006020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006024:	6413      	str	r3, [r2, #64]	; 0x40
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <HAL_UART_MspInit+0xfc>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	4b11      	ldr	r3, [pc, #68]	; (800607c <HAL_UART_MspInit+0xfc>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	4a10      	ldr	r2, [pc, #64]	; (800607c <HAL_UART_MspInit+0xfc>)
 800603c:	f043 0308 	orr.w	r3, r3, #8
 8006040:	6313      	str	r3, [r2, #48]	; 0x30
 8006042:	4b0e      	ldr	r3, [pc, #56]	; (800607c <HAL_UART_MspInit+0xfc>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 800604e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006052:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006054:	2302      	movs	r3, #2
 8006056:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006058:	2300      	movs	r3, #0
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800605c:	2303      	movs	r3, #3
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006060:	2307      	movs	r3, #7
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006064:	f107 031c 	add.w	r3, r7, #28
 8006068:	4619      	mov	r1, r3
 800606a:	4805      	ldr	r0, [pc, #20]	; (8006080 <HAL_UART_MspInit+0x100>)
 800606c:	f7fb fcf4 	bl	8001a58 <HAL_GPIO_Init>
}
 8006070:	bf00      	nop
 8006072:	3730      	adds	r7, #48	; 0x30
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40004400 	.word	0x40004400
 800607c:	40023800 	.word	0x40023800
 8006080:	40020c00 	.word	0x40020c00
 8006084:	40004800 	.word	0x40004800

08006088 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800608c:	e7fe      	b.n	800608c <NMI_Handler+0x4>

0800608e <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void) {
 800608e:	b480      	push	{r7}
 8006090:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8006092:	e7fe      	b.n	8006092 <HardFault_Handler+0x4>

08006094 <MemManage_Handler>:
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void) {
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8006098:	e7fe      	b.n	8006098 <MemManage_Handler+0x4>

0800609a <BusFault_Handler>:
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void) {
 800609a:	b480      	push	{r7}
 800609c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800609e:	e7fe      	b.n	800609e <BusFault_Handler+0x4>

080060a0 <UsageFault_Handler>:
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void) {
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80060a4:	e7fe      	b.n	80060a4 <UsageFault_Handler+0x4>

080060a6 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void) {
 80060a6:	b480      	push	{r7}
 80060a8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void) {
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void) {
 80060c2:	b480      	push	{r7}
 80060c4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80060c6:	bf00      	nop
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80060d4:	f7fa fff2 	bl	80010bc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}

080060dc <TIM1_UP_TIM10_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80060e0:	4802      	ldr	r0, [pc, #8]	; (80060ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80060e2:	f7fc fe65 	bl	8002db0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000250 	.word	0x20000250

080060f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

	/* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80060f4:	4803      	ldr	r0, [pc, #12]	; (8006104 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80060f6:	f7fc fe5b 	bl	8002db0 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim11);
 80060fa:	4803      	ldr	r0, [pc, #12]	; (8006108 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80060fc:	f7fc fe58 	bl	8002db0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

	/* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006100:	bf00      	nop
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000250 	.word	0x20000250
 8006108:	20000370 	.word	0x20000370

0800610c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_CC_IRQn 0 */

	/* USER CODE END TIM1_CC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8006110:	4802      	ldr	r0, [pc, #8]	; (800611c <TIM1_CC_IRQHandler+0x10>)
 8006112:	f7fc fe4d 	bl	8002db0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_CC_IRQn 1 */

	/* USER CODE END TIM1_CC_IRQn 1 */
}
 8006116:	bf00      	nop
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000250 	.word	0x20000250

08006120 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void) {
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	spektrum_nucleo_irq_handler(&main_app->rc_receiver, SPEKTRUM_UART);
 8006124:	4b03      	ldr	r3, [pc, #12]	; (8006134 <USART2_IRQHandler+0x14>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4903      	ldr	r1, [pc, #12]	; (8006138 <USART2_IRQHandler+0x18>)
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fcfa 	bl	8005b24 <spektrum_nucleo_irq_handler>

	// no need to call the default HAL_UART_IRQHandler for USART1
	// as we are handling everything ourselves
	return;
 8006130:	bf00      	nop
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200006b0 	.word	0x200006b0
 8006138:	200003b8 	.word	0x200003b8

0800613c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void) {
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8006140:	4802      	ldr	r0, [pc, #8]	; (800614c <TIM6_DAC_IRQHandler+0x10>)
 8006142:	f7fc fe35 	bl	8002db0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006146:	bf00      	nop
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	200002e0 	.word	0x200002e0

08006150 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void) {
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 8006154:	4802      	ldr	r0, [pc, #8]	; (8006160 <TIM7_IRQHandler+0x10>)
 8006156:	f7fc fe2b 	bl	8002db0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000328 	.word	0x20000328

08006164 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
	return 1;
 8006168:	2301      	movs	r3, #1
}
 800616a:	4618      	mov	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <_kill>:

int _kill(int pid, int sig) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800617e:	f000 f919 	bl	80063b4 <__errno>
 8006182:	4603      	mov	r3, r0
 8006184:	2216      	movs	r2, #22
 8006186:	601a      	str	r2, [r3, #0]
	return -1;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <_exit>:

void _exit(int status) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800619c:	f04f 31ff 	mov.w	r1, #4294967295
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ffe7 	bl	8006174 <_kill>
	while (1) {}        /* Make sure we hang here */
 80061a6:	e7fe      	b.n	80061a6 <_exit+0x12>

080061a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e00a      	b.n	80061d0 <_read+0x28>
		*ptr++ = __io_getchar();
 80061ba:	f3af 8000 	nop.w
 80061be:	4601      	mov	r1, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	60ba      	str	r2, [r7, #8]
 80061c6:	b2ca      	uxtb	r2, r1
 80061c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	3301      	adds	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	dbf0      	blt.n	80061ba <_read+0x12>
	}

	return len;
 80061d8:	687b      	ldr	r3, [r7, #4]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <_write>:

// see https://electronics.stackexchange.com/questions/206113/how-do-i-use-the-printf-function-on-stm32
// see https://github.com/ARMmbed/mbed-os/tree/master/platform/source/minimal-printf
int _write(int file, char *data, int len) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]

	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d00a      	beq.n	800620c <_write+0x28>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d007      	beq.n	800620c <_write+0x28>
		errno = EBADF;
 80061fc:	f000 f8da 	bl	80063b4 <__errno>
 8006200:	4603      	mov	r3, r0
 8006202:	2209      	movs	r2, #9
 8006204:	601a      	str	r2, [r3, #0]
		return -1;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295
 800620a:	e00f      	b.n	800622c <_write+0x48>
	}

	HAL_StatusTypeDef status = HAL_UART_Transmit(
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	b29a      	uxth	r2, r3
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4807      	ldr	r0, [pc, #28]	; (8006234 <_write+0x50>)
 8006218:	f7fd fcd7 	bl	8003bca <HAL_UART_Transmit>
 800621c:	4603      	mov	r3, r0
 800621e:	75fb      	strb	r3, [r7, #23]
		len,
		HAL_MAX_DELAY
	);

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len : 0);
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <_write+0x46>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	e000      	b.n	800622c <_write+0x48>
 800622a:	2300      	movs	r3, #0

}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200003fc 	.word	0x200003fc

08006238 <_close>:

int _close(int file) {
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	return -1;
 8006240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <_fstat>:


int _fstat(int file, struct stat *st) {
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006260:	605a      	str	r2, [r3, #4]
	return 0;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <_isatty>:

int _isatty(int file) {
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	return 1;
 8006278:	2301      	movs	r3, #1
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
	return 0;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80062a8:	4a14      	ldr	r2, [pc, #80]	; (80062fc <_sbrk+0x5c>)
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <_sbrk+0x60>)
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t *) stack_limit;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80062b4:	4b13      	ldr	r3, [pc, #76]	; (8006304 <_sbrk+0x64>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <_sbrk+0x64>)
 80062be:	4a12      	ldr	r2, [pc, #72]	; (8006308 <_sbrk+0x68>)
 80062c0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80062c2:	4b10      	ldr	r3, [pc, #64]	; (8006304 <_sbrk+0x64>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d207      	bcs.n	80062e0 <_sbrk+0x40>
		errno = ENOMEM;
 80062d0:	f000 f870 	bl	80063b4 <__errno>
 80062d4:	4603      	mov	r3, r0
 80062d6:	220c      	movs	r2, #12
 80062d8:	601a      	str	r2, [r3, #0]
		return (void *) -1;
 80062da:	f04f 33ff 	mov.w	r3, #4294967295
 80062de:	e009      	b.n	80062f4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80062e0:	4b08      	ldr	r3, [pc, #32]	; (8006304 <_sbrk+0x64>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80062e6:	4b07      	ldr	r3, [pc, #28]	; (8006304 <_sbrk+0x64>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4413      	add	r3, r2
 80062ee:	4a05      	ldr	r2, [pc, #20]	; (8006304 <_sbrk+0x64>)
 80062f0:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80062f2:	68fb      	ldr	r3, [r7, #12]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20030000 	.word	0x20030000
 8006300:	00000400 	.word	0x00000400
 8006304:	200006b8 	.word	0x200006b8
 8006308:	200006d0 	.word	0x200006d0

0800630c <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <SystemInit+0x20>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	4a05      	ldr	r2, [pc, #20]	; (800632c <SystemInit+0x20>)
 8006318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800631c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	e000ed00 	.word	0xe000ed00

08006330 <debug_sizeof>:
#include <stdio.h>
#include <string.h>

#include "utils.h"

void debug_sizeof() {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af04      	add	r7, sp, #16
	debug_printf(
 8006336:	4b08      	ldr	r3, [pc, #32]	; (8006358 <debug_sizeof+0x28>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6898      	ldr	r0, [r3, #8]
 800633c:	2308      	movs	r3, #8
 800633e:	9302      	str	r3, [sp, #8]
 8006340:	2308      	movs	r3, #8
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	2304      	movs	r3, #4
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2304      	movs	r3, #4
 800634a:	2204      	movs	r2, #4
 800634c:	4903      	ldr	r1, [pc, #12]	; (800635c <debug_sizeof+0x2c>)
 800634e:	f000 f837 	bl	80063c0 <fiprintf>
		sizeof(long),
		sizeof(long int),
		sizeof(long long),
		sizeof(long long int)
	);
}
 8006352:	bf00      	nop
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2000000c 	.word	0x2000000c
 800635c:	0800b100 	.word	0x0800b100

08006360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006364:	480d      	ldr	r0, [pc, #52]	; (800639c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006366:	490e      	ldr	r1, [pc, #56]	; (80063a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006368:	4a0e      	ldr	r2, [pc, #56]	; (80063a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800636a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800636c:	e002      	b.n	8006374 <LoopCopyDataInit>

0800636e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800636e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006372:	3304      	adds	r3, #4

08006374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006378:	d3f9      	bcc.n	800636e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800637a:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800637c:	4c0b      	ldr	r4, [pc, #44]	; (80063ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800637e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006380:	e001      	b.n	8006386 <LoopFillZerobss>

08006382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006384:	3204      	adds	r2, #4

08006386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006388:	d3fb      	bcc.n	8006382 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800638a:	f7ff ffbf 	bl	800630c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800638e:	f000 f829 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006392:	f7fe fc9f 	bl	8004cd4 <main>
  bx  lr    
 8006396:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006398:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800639c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063a0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80063a4:	0800b678 	.word	0x0800b678
  ldr r2, =_sbss
 80063a8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80063ac:	200006cc 	.word	0x200006cc

080063b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063b0:	e7fe      	b.n	80063b0 <ADC_IRQHandler>
	...

080063b4 <__errno>:
 80063b4:	4b01      	ldr	r3, [pc, #4]	; (80063bc <__errno+0x8>)
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	2000000c 	.word	0x2000000c

080063c0 <fiprintf>:
 80063c0:	b40e      	push	{r1, r2, r3}
 80063c2:	b503      	push	{r0, r1, lr}
 80063c4:	4601      	mov	r1, r0
 80063c6:	ab03      	add	r3, sp, #12
 80063c8:	4805      	ldr	r0, [pc, #20]	; (80063e0 <fiprintf+0x20>)
 80063ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ce:	6800      	ldr	r0, [r0, #0]
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	f000 f85f 	bl	8006494 <_vfiprintf_r>
 80063d6:	b002      	add	sp, #8
 80063d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063dc:	b003      	add	sp, #12
 80063de:	4770      	bx	lr
 80063e0:	2000000c 	.word	0x2000000c

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	; (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	; (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	; (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	; (8006428 <__libc_init_array+0x44>)
 80063f8:	f004 fd0a 	bl	800ae10 <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	0800b670 	.word	0x0800b670
 8006420:	0800b670 	.word	0x0800b670
 8006424:	0800b670 	.word	0x0800b670
 8006428:	0800b674 	.word	0x0800b674

0800642c <__retarget_lock_init_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_acquire_recursive>:
 800642e:	4770      	bx	lr

08006430 <__retarget_lock_release_recursive>:
 8006430:	4770      	bx	lr

08006432 <memset>:
 8006432:	4402      	add	r2, r0
 8006434:	4603      	mov	r3, r0
 8006436:	4293      	cmp	r3, r2
 8006438:	d100      	bne.n	800643c <memset+0xa>
 800643a:	4770      	bx	lr
 800643c:	f803 1b01 	strb.w	r1, [r3], #1
 8006440:	e7f9      	b.n	8006436 <memset+0x4>

08006442 <__sfputc_r>:
 8006442:	6893      	ldr	r3, [r2, #8]
 8006444:	3b01      	subs	r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	b410      	push	{r4}
 800644a:	6093      	str	r3, [r2, #8]
 800644c:	da08      	bge.n	8006460 <__sfputc_r+0x1e>
 800644e:	6994      	ldr	r4, [r2, #24]
 8006450:	42a3      	cmp	r3, r4
 8006452:	db01      	blt.n	8006458 <__sfputc_r+0x16>
 8006454:	290a      	cmp	r1, #10
 8006456:	d103      	bne.n	8006460 <__sfputc_r+0x1e>
 8006458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800645c:	f001 bf24 	b.w	80082a8 <__swbuf_r>
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	1c58      	adds	r0, r3, #1
 8006464:	6010      	str	r0, [r2, #0]
 8006466:	7019      	strb	r1, [r3, #0]
 8006468:	4608      	mov	r0, r1
 800646a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800646e:	4770      	bx	lr

08006470 <__sfputs_r>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	4614      	mov	r4, r2
 8006478:	18d5      	adds	r5, r2, r3
 800647a:	42ac      	cmp	r4, r5
 800647c:	d101      	bne.n	8006482 <__sfputs_r+0x12>
 800647e:	2000      	movs	r0, #0
 8006480:	e007      	b.n	8006492 <__sfputs_r+0x22>
 8006482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006486:	463a      	mov	r2, r7
 8006488:	4630      	mov	r0, r6
 800648a:	f7ff ffda 	bl	8006442 <__sfputc_r>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d1f3      	bne.n	800647a <__sfputs_r+0xa>
 8006492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006494 <_vfiprintf_r>:
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	460d      	mov	r5, r1
 800649a:	b09d      	sub	sp, #116	; 0x74
 800649c:	4614      	mov	r4, r2
 800649e:	4698      	mov	r8, r3
 80064a0:	4606      	mov	r6, r0
 80064a2:	b118      	cbz	r0, 80064ac <_vfiprintf_r+0x18>
 80064a4:	6983      	ldr	r3, [r0, #24]
 80064a6:	b90b      	cbnz	r3, 80064ac <_vfiprintf_r+0x18>
 80064a8:	f002 ff66 	bl	8009378 <__sinit>
 80064ac:	4b89      	ldr	r3, [pc, #548]	; (80066d4 <_vfiprintf_r+0x240>)
 80064ae:	429d      	cmp	r5, r3
 80064b0:	d11b      	bne.n	80064ea <_vfiprintf_r+0x56>
 80064b2:	6875      	ldr	r5, [r6, #4]
 80064b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064b6:	07d9      	lsls	r1, r3, #31
 80064b8:	d405      	bmi.n	80064c6 <_vfiprintf_r+0x32>
 80064ba:	89ab      	ldrh	r3, [r5, #12]
 80064bc:	059a      	lsls	r2, r3, #22
 80064be:	d402      	bmi.n	80064c6 <_vfiprintf_r+0x32>
 80064c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064c2:	f7ff ffb4 	bl	800642e <__retarget_lock_acquire_recursive>
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	071b      	lsls	r3, r3, #28
 80064ca:	d501      	bpl.n	80064d0 <_vfiprintf_r+0x3c>
 80064cc:	692b      	ldr	r3, [r5, #16]
 80064ce:	b9eb      	cbnz	r3, 800650c <_vfiprintf_r+0x78>
 80064d0:	4629      	mov	r1, r5
 80064d2:	4630      	mov	r0, r6
 80064d4:	f001 ff4c 	bl	8008370 <__swsetup_r>
 80064d8:	b1c0      	cbz	r0, 800650c <_vfiprintf_r+0x78>
 80064da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064dc:	07dc      	lsls	r4, r3, #31
 80064de:	d50e      	bpl.n	80064fe <_vfiprintf_r+0x6a>
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	b01d      	add	sp, #116	; 0x74
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	4b7b      	ldr	r3, [pc, #492]	; (80066d8 <_vfiprintf_r+0x244>)
 80064ec:	429d      	cmp	r5, r3
 80064ee:	d101      	bne.n	80064f4 <_vfiprintf_r+0x60>
 80064f0:	68b5      	ldr	r5, [r6, #8]
 80064f2:	e7df      	b.n	80064b4 <_vfiprintf_r+0x20>
 80064f4:	4b79      	ldr	r3, [pc, #484]	; (80066dc <_vfiprintf_r+0x248>)
 80064f6:	429d      	cmp	r5, r3
 80064f8:	bf08      	it	eq
 80064fa:	68f5      	ldreq	r5, [r6, #12]
 80064fc:	e7da      	b.n	80064b4 <_vfiprintf_r+0x20>
 80064fe:	89ab      	ldrh	r3, [r5, #12]
 8006500:	0598      	lsls	r0, r3, #22
 8006502:	d4ed      	bmi.n	80064e0 <_vfiprintf_r+0x4c>
 8006504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006506:	f7ff ff93 	bl	8006430 <__retarget_lock_release_recursive>
 800650a:	e7e9      	b.n	80064e0 <_vfiprintf_r+0x4c>
 800650c:	2300      	movs	r3, #0
 800650e:	9309      	str	r3, [sp, #36]	; 0x24
 8006510:	2320      	movs	r3, #32
 8006512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006516:	f8cd 800c 	str.w	r8, [sp, #12]
 800651a:	2330      	movs	r3, #48	; 0x30
 800651c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80066e0 <_vfiprintf_r+0x24c>
 8006520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006524:	f04f 0901 	mov.w	r9, #1
 8006528:	4623      	mov	r3, r4
 800652a:	469a      	mov	sl, r3
 800652c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006530:	b10a      	cbz	r2, 8006536 <_vfiprintf_r+0xa2>
 8006532:	2a25      	cmp	r2, #37	; 0x25
 8006534:	d1f9      	bne.n	800652a <_vfiprintf_r+0x96>
 8006536:	ebba 0b04 	subs.w	fp, sl, r4
 800653a:	d00b      	beq.n	8006554 <_vfiprintf_r+0xc0>
 800653c:	465b      	mov	r3, fp
 800653e:	4622      	mov	r2, r4
 8006540:	4629      	mov	r1, r5
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff ff94 	bl	8006470 <__sfputs_r>
 8006548:	3001      	adds	r0, #1
 800654a:	f000 80aa 	beq.w	80066a2 <_vfiprintf_r+0x20e>
 800654e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006550:	445a      	add	r2, fp
 8006552:	9209      	str	r2, [sp, #36]	; 0x24
 8006554:	f89a 3000 	ldrb.w	r3, [sl]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80a2 	beq.w	80066a2 <_vfiprintf_r+0x20e>
 800655e:	2300      	movs	r3, #0
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006568:	f10a 0a01 	add.w	sl, sl, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006574:	931a      	str	r3, [sp, #104]	; 0x68
 8006576:	4654      	mov	r4, sl
 8006578:	2205      	movs	r2, #5
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657e:	4858      	ldr	r0, [pc, #352]	; (80066e0 <_vfiprintf_r+0x24c>)
 8006580:	f7f9 fe3e 	bl	8000200 <memchr>
 8006584:	9a04      	ldr	r2, [sp, #16]
 8006586:	b9d8      	cbnz	r0, 80065c0 <_vfiprintf_r+0x12c>
 8006588:	06d1      	lsls	r1, r2, #27
 800658a:	bf44      	itt	mi
 800658c:	2320      	movmi	r3, #32
 800658e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006592:	0713      	lsls	r3, r2, #28
 8006594:	bf44      	itt	mi
 8006596:	232b      	movmi	r3, #43	; 0x2b
 8006598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659c:	f89a 3000 	ldrb.w	r3, [sl]
 80065a0:	2b2a      	cmp	r3, #42	; 0x2a
 80065a2:	d015      	beq.n	80065d0 <_vfiprintf_r+0x13c>
 80065a4:	9a07      	ldr	r2, [sp, #28]
 80065a6:	4654      	mov	r4, sl
 80065a8:	2000      	movs	r0, #0
 80065aa:	f04f 0c0a 	mov.w	ip, #10
 80065ae:	4621      	mov	r1, r4
 80065b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b4:	3b30      	subs	r3, #48	; 0x30
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d94e      	bls.n	8006658 <_vfiprintf_r+0x1c4>
 80065ba:	b1b0      	cbz	r0, 80065ea <_vfiprintf_r+0x156>
 80065bc:	9207      	str	r2, [sp, #28]
 80065be:	e014      	b.n	80065ea <_vfiprintf_r+0x156>
 80065c0:	eba0 0308 	sub.w	r3, r0, r8
 80065c4:	fa09 f303 	lsl.w	r3, r9, r3
 80065c8:	4313      	orrs	r3, r2
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	46a2      	mov	sl, r4
 80065ce:	e7d2      	b.n	8006576 <_vfiprintf_r+0xe2>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	1d19      	adds	r1, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9103      	str	r1, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfbb      	ittet	lt
 80065dc:	425b      	neglt	r3, r3
 80065de:	f042 0202 	orrlt.w	r2, r2, #2
 80065e2:	9307      	strge	r3, [sp, #28]
 80065e4:	9307      	strlt	r3, [sp, #28]
 80065e6:	bfb8      	it	lt
 80065e8:	9204      	strlt	r2, [sp, #16]
 80065ea:	7823      	ldrb	r3, [r4, #0]
 80065ec:	2b2e      	cmp	r3, #46	; 0x2e
 80065ee:	d10c      	bne.n	800660a <_vfiprintf_r+0x176>
 80065f0:	7863      	ldrb	r3, [r4, #1]
 80065f2:	2b2a      	cmp	r3, #42	; 0x2a
 80065f4:	d135      	bne.n	8006662 <_vfiprintf_r+0x1ce>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	1d1a      	adds	r2, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9203      	str	r2, [sp, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfb8      	it	lt
 8006602:	f04f 33ff 	movlt.w	r3, #4294967295
 8006606:	3402      	adds	r4, #2
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066f0 <_vfiprintf_r+0x25c>
 800660e:	7821      	ldrb	r1, [r4, #0]
 8006610:	2203      	movs	r2, #3
 8006612:	4650      	mov	r0, sl
 8006614:	f7f9 fdf4 	bl	8000200 <memchr>
 8006618:	b140      	cbz	r0, 800662c <_vfiprintf_r+0x198>
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	eba0 000a 	sub.w	r0, r0, sl
 8006620:	fa03 f000 	lsl.w	r0, r3, r0
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	4303      	orrs	r3, r0
 8006628:	3401      	adds	r4, #1
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006630:	482c      	ldr	r0, [pc, #176]	; (80066e4 <_vfiprintf_r+0x250>)
 8006632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006636:	2206      	movs	r2, #6
 8006638:	f7f9 fde2 	bl	8000200 <memchr>
 800663c:	2800      	cmp	r0, #0
 800663e:	d03f      	beq.n	80066c0 <_vfiprintf_r+0x22c>
 8006640:	4b29      	ldr	r3, [pc, #164]	; (80066e8 <_vfiprintf_r+0x254>)
 8006642:	bb1b      	cbnz	r3, 800668c <_vfiprintf_r+0x1f8>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	3307      	adds	r3, #7
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	3308      	adds	r3, #8
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006652:	443b      	add	r3, r7
 8006654:	9309      	str	r3, [sp, #36]	; 0x24
 8006656:	e767      	b.n	8006528 <_vfiprintf_r+0x94>
 8006658:	fb0c 3202 	mla	r2, ip, r2, r3
 800665c:	460c      	mov	r4, r1
 800665e:	2001      	movs	r0, #1
 8006660:	e7a5      	b.n	80065ae <_vfiprintf_r+0x11a>
 8006662:	2300      	movs	r3, #0
 8006664:	3401      	adds	r4, #1
 8006666:	9305      	str	r3, [sp, #20]
 8006668:	4619      	mov	r1, r3
 800666a:	f04f 0c0a 	mov.w	ip, #10
 800666e:	4620      	mov	r0, r4
 8006670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006674:	3a30      	subs	r2, #48	; 0x30
 8006676:	2a09      	cmp	r2, #9
 8006678:	d903      	bls.n	8006682 <_vfiprintf_r+0x1ee>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0c5      	beq.n	800660a <_vfiprintf_r+0x176>
 800667e:	9105      	str	r1, [sp, #20]
 8006680:	e7c3      	b.n	800660a <_vfiprintf_r+0x176>
 8006682:	fb0c 2101 	mla	r1, ip, r1, r2
 8006686:	4604      	mov	r4, r0
 8006688:	2301      	movs	r3, #1
 800668a:	e7f0      	b.n	800666e <_vfiprintf_r+0x1da>
 800668c:	ab03      	add	r3, sp, #12
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	462a      	mov	r2, r5
 8006692:	4b16      	ldr	r3, [pc, #88]	; (80066ec <_vfiprintf_r+0x258>)
 8006694:	a904      	add	r1, sp, #16
 8006696:	4630      	mov	r0, r6
 8006698:	f000 f8cc 	bl	8006834 <_printf_float>
 800669c:	4607      	mov	r7, r0
 800669e:	1c78      	adds	r0, r7, #1
 80066a0:	d1d6      	bne.n	8006650 <_vfiprintf_r+0x1bc>
 80066a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a4:	07d9      	lsls	r1, r3, #31
 80066a6:	d405      	bmi.n	80066b4 <_vfiprintf_r+0x220>
 80066a8:	89ab      	ldrh	r3, [r5, #12]
 80066aa:	059a      	lsls	r2, r3, #22
 80066ac:	d402      	bmi.n	80066b4 <_vfiprintf_r+0x220>
 80066ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066b0:	f7ff febe 	bl	8006430 <__retarget_lock_release_recursive>
 80066b4:	89ab      	ldrh	r3, [r5, #12]
 80066b6:	065b      	lsls	r3, r3, #25
 80066b8:	f53f af12 	bmi.w	80064e0 <_vfiprintf_r+0x4c>
 80066bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066be:	e711      	b.n	80064e4 <_vfiprintf_r+0x50>
 80066c0:	ab03      	add	r3, sp, #12
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <_vfiprintf_r+0x258>)
 80066c8:	a904      	add	r1, sp, #16
 80066ca:	4630      	mov	r0, r6
 80066cc:	f000 fb56 	bl	8006d7c <_printf_i>
 80066d0:	e7e4      	b.n	800669c <_vfiprintf_r+0x208>
 80066d2:	bf00      	nop
 80066d4:	0800b414 	.word	0x0800b414
 80066d8:	0800b434 	.word	0x0800b434
 80066dc:	0800b3f4 	.word	0x0800b3f4
 80066e0:	0800b1c0 	.word	0x0800b1c0
 80066e4:	0800b1ca 	.word	0x0800b1ca
 80066e8:	08006835 	.word	0x08006835
 80066ec:	08006471 	.word	0x08006471
 80066f0:	0800b1c6 	.word	0x0800b1c6

080066f4 <__cvt>:
 80066f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f8:	ec55 4b10 	vmov	r4, r5, d0
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	460e      	mov	r6, r1
 8006700:	4619      	mov	r1, r3
 8006702:	462b      	mov	r3, r5
 8006704:	bfbb      	ittet	lt
 8006706:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800670a:	461d      	movlt	r5, r3
 800670c:	2300      	movge	r3, #0
 800670e:	232d      	movlt	r3, #45	; 0x2d
 8006710:	700b      	strb	r3, [r1, #0]
 8006712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006714:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006718:	4691      	mov	r9, r2
 800671a:	f023 0820 	bic.w	r8, r3, #32
 800671e:	bfbc      	itt	lt
 8006720:	4622      	movlt	r2, r4
 8006722:	4614      	movlt	r4, r2
 8006724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006728:	d005      	beq.n	8006736 <__cvt+0x42>
 800672a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800672e:	d100      	bne.n	8006732 <__cvt+0x3e>
 8006730:	3601      	adds	r6, #1
 8006732:	2102      	movs	r1, #2
 8006734:	e000      	b.n	8006738 <__cvt+0x44>
 8006736:	2103      	movs	r1, #3
 8006738:	ab03      	add	r3, sp, #12
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	ab02      	add	r3, sp, #8
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	ec45 4b10 	vmov	d0, r4, r5
 8006744:	4653      	mov	r3, sl
 8006746:	4632      	mov	r2, r6
 8006748:	f001 ff0e 	bl	8008568 <_dtoa_r>
 800674c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006750:	4607      	mov	r7, r0
 8006752:	d102      	bne.n	800675a <__cvt+0x66>
 8006754:	f019 0f01 	tst.w	r9, #1
 8006758:	d022      	beq.n	80067a0 <__cvt+0xac>
 800675a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800675e:	eb07 0906 	add.w	r9, r7, r6
 8006762:	d110      	bne.n	8006786 <__cvt+0x92>
 8006764:	783b      	ldrb	r3, [r7, #0]
 8006766:	2b30      	cmp	r3, #48	; 0x30
 8006768:	d10a      	bne.n	8006780 <__cvt+0x8c>
 800676a:	2200      	movs	r2, #0
 800676c:	2300      	movs	r3, #0
 800676e:	4620      	mov	r0, r4
 8006770:	4629      	mov	r1, r5
 8006772:	f7fa f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006776:	b918      	cbnz	r0, 8006780 <__cvt+0x8c>
 8006778:	f1c6 0601 	rsb	r6, r6, #1
 800677c:	f8ca 6000 	str.w	r6, [sl]
 8006780:	f8da 3000 	ldr.w	r3, [sl]
 8006784:	4499      	add	r9, r3
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	4620      	mov	r0, r4
 800678c:	4629      	mov	r1, r5
 800678e:	f7fa f9ab 	bl	8000ae8 <__aeabi_dcmpeq>
 8006792:	b108      	cbz	r0, 8006798 <__cvt+0xa4>
 8006794:	f8cd 900c 	str.w	r9, [sp, #12]
 8006798:	2230      	movs	r2, #48	; 0x30
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	454b      	cmp	r3, r9
 800679e:	d307      	bcc.n	80067b0 <__cvt+0xbc>
 80067a0:	9b03      	ldr	r3, [sp, #12]
 80067a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067a4:	1bdb      	subs	r3, r3, r7
 80067a6:	4638      	mov	r0, r7
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	b004      	add	sp, #16
 80067ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b0:	1c59      	adds	r1, r3, #1
 80067b2:	9103      	str	r1, [sp, #12]
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e7f0      	b.n	800679a <__cvt+0xa6>

080067b8 <__exponent>:
 80067b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ba:	4603      	mov	r3, r0
 80067bc:	2900      	cmp	r1, #0
 80067be:	bfb8      	it	lt
 80067c0:	4249      	neglt	r1, r1
 80067c2:	f803 2b02 	strb.w	r2, [r3], #2
 80067c6:	bfb4      	ite	lt
 80067c8:	222d      	movlt	r2, #45	; 0x2d
 80067ca:	222b      	movge	r2, #43	; 0x2b
 80067cc:	2909      	cmp	r1, #9
 80067ce:	7042      	strb	r2, [r0, #1]
 80067d0:	dd2a      	ble.n	8006828 <__exponent+0x70>
 80067d2:	f10d 0407 	add.w	r4, sp, #7
 80067d6:	46a4      	mov	ip, r4
 80067d8:	270a      	movs	r7, #10
 80067da:	46a6      	mov	lr, r4
 80067dc:	460a      	mov	r2, r1
 80067de:	fb91 f6f7 	sdiv	r6, r1, r7
 80067e2:	fb07 1516 	mls	r5, r7, r6, r1
 80067e6:	3530      	adds	r5, #48	; 0x30
 80067e8:	2a63      	cmp	r2, #99	; 0x63
 80067ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80067ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067f2:	4631      	mov	r1, r6
 80067f4:	dcf1      	bgt.n	80067da <__exponent+0x22>
 80067f6:	3130      	adds	r1, #48	; 0x30
 80067f8:	f1ae 0502 	sub.w	r5, lr, #2
 80067fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006800:	1c44      	adds	r4, r0, #1
 8006802:	4629      	mov	r1, r5
 8006804:	4561      	cmp	r1, ip
 8006806:	d30a      	bcc.n	800681e <__exponent+0x66>
 8006808:	f10d 0209 	add.w	r2, sp, #9
 800680c:	eba2 020e 	sub.w	r2, r2, lr
 8006810:	4565      	cmp	r5, ip
 8006812:	bf88      	it	hi
 8006814:	2200      	movhi	r2, #0
 8006816:	4413      	add	r3, r2
 8006818:	1a18      	subs	r0, r3, r0
 800681a:	b003      	add	sp, #12
 800681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006822:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006826:	e7ed      	b.n	8006804 <__exponent+0x4c>
 8006828:	2330      	movs	r3, #48	; 0x30
 800682a:	3130      	adds	r1, #48	; 0x30
 800682c:	7083      	strb	r3, [r0, #2]
 800682e:	70c1      	strb	r1, [r0, #3]
 8006830:	1d03      	adds	r3, r0, #4
 8006832:	e7f1      	b.n	8006818 <__exponent+0x60>

08006834 <_printf_float>:
 8006834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	ed2d 8b02 	vpush	{d8}
 800683c:	b08d      	sub	sp, #52	; 0x34
 800683e:	460c      	mov	r4, r1
 8006840:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006844:	4616      	mov	r6, r2
 8006846:	461f      	mov	r7, r3
 8006848:	4605      	mov	r5, r0
 800684a:	f003 f9a1 	bl	8009b90 <_localeconv_r>
 800684e:	f8d0 a000 	ldr.w	sl, [r0]
 8006852:	4650      	mov	r0, sl
 8006854:	f7f9 fccc 	bl	80001f0 <strlen>
 8006858:	2300      	movs	r3, #0
 800685a:	930a      	str	r3, [sp, #40]	; 0x28
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	9305      	str	r3, [sp, #20]
 8006860:	f8d8 3000 	ldr.w	r3, [r8]
 8006864:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006868:	3307      	adds	r3, #7
 800686a:	f023 0307 	bic.w	r3, r3, #7
 800686e:	f103 0208 	add.w	r2, r3, #8
 8006872:	f8c8 2000 	str.w	r2, [r8]
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800687e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006886:	9307      	str	r3, [sp, #28]
 8006888:	f8cd 8018 	str.w	r8, [sp, #24]
 800688c:	ee08 0a10 	vmov	s16, r0
 8006890:	4b9f      	ldr	r3, [pc, #636]	; (8006b10 <_printf_float+0x2dc>)
 8006892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006896:	f04f 32ff 	mov.w	r2, #4294967295
 800689a:	f7fa f957 	bl	8000b4c <__aeabi_dcmpun>
 800689e:	bb88      	cbnz	r0, 8006904 <_printf_float+0xd0>
 80068a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068a4:	4b9a      	ldr	r3, [pc, #616]	; (8006b10 <_printf_float+0x2dc>)
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	f7fa f931 	bl	8000b10 <__aeabi_dcmple>
 80068ae:	bb48      	cbnz	r0, 8006904 <_printf_float+0xd0>
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4640      	mov	r0, r8
 80068b6:	4649      	mov	r1, r9
 80068b8:	f7fa f920 	bl	8000afc <__aeabi_dcmplt>
 80068bc:	b110      	cbz	r0, 80068c4 <_printf_float+0x90>
 80068be:	232d      	movs	r3, #45	; 0x2d
 80068c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c4:	4b93      	ldr	r3, [pc, #588]	; (8006b14 <_printf_float+0x2e0>)
 80068c6:	4894      	ldr	r0, [pc, #592]	; (8006b18 <_printf_float+0x2e4>)
 80068c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068cc:	bf94      	ite	ls
 80068ce:	4698      	movls	r8, r3
 80068d0:	4680      	movhi	r8, r0
 80068d2:	2303      	movs	r3, #3
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	9b05      	ldr	r3, [sp, #20]
 80068d8:	f023 0204 	bic.w	r2, r3, #4
 80068dc:	6022      	str	r2, [r4, #0]
 80068de:	f04f 0900 	mov.w	r9, #0
 80068e2:	9700      	str	r7, [sp, #0]
 80068e4:	4633      	mov	r3, r6
 80068e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80068e8:	4621      	mov	r1, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f9d8 	bl	8006ca0 <_printf_common>
 80068f0:	3001      	adds	r0, #1
 80068f2:	f040 8090 	bne.w	8006a16 <_printf_float+0x1e2>
 80068f6:	f04f 30ff 	mov.w	r0, #4294967295
 80068fa:	b00d      	add	sp, #52	; 0x34
 80068fc:	ecbd 8b02 	vpop	{d8}
 8006900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7fa f91e 	bl	8000b4c <__aeabi_dcmpun>
 8006910:	b140      	cbz	r0, 8006924 <_printf_float+0xf0>
 8006912:	464b      	mov	r3, r9
 8006914:	2b00      	cmp	r3, #0
 8006916:	bfbc      	itt	lt
 8006918:	232d      	movlt	r3, #45	; 0x2d
 800691a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800691e:	487f      	ldr	r0, [pc, #508]	; (8006b1c <_printf_float+0x2e8>)
 8006920:	4b7f      	ldr	r3, [pc, #508]	; (8006b20 <_printf_float+0x2ec>)
 8006922:	e7d1      	b.n	80068c8 <_printf_float+0x94>
 8006924:	6863      	ldr	r3, [r4, #4]
 8006926:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800692a:	9206      	str	r2, [sp, #24]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	d13f      	bne.n	80069b0 <_printf_float+0x17c>
 8006930:	2306      	movs	r3, #6
 8006932:	6063      	str	r3, [r4, #4]
 8006934:	9b05      	ldr	r3, [sp, #20]
 8006936:	6861      	ldr	r1, [r4, #4]
 8006938:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800693c:	2300      	movs	r3, #0
 800693e:	9303      	str	r3, [sp, #12]
 8006940:	ab0a      	add	r3, sp, #40	; 0x28
 8006942:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006946:	ab09      	add	r3, sp, #36	; 0x24
 8006948:	ec49 8b10 	vmov	d0, r8, r9
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006954:	4628      	mov	r0, r5
 8006956:	f7ff fecd 	bl	80066f4 <__cvt>
 800695a:	9b06      	ldr	r3, [sp, #24]
 800695c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800695e:	2b47      	cmp	r3, #71	; 0x47
 8006960:	4680      	mov	r8, r0
 8006962:	d108      	bne.n	8006976 <_printf_float+0x142>
 8006964:	1cc8      	adds	r0, r1, #3
 8006966:	db02      	blt.n	800696e <_printf_float+0x13a>
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	4299      	cmp	r1, r3
 800696c:	dd41      	ble.n	80069f2 <_printf_float+0x1be>
 800696e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006972:	fa5f fb8b 	uxtb.w	fp, fp
 8006976:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800697a:	d820      	bhi.n	80069be <_printf_float+0x18a>
 800697c:	3901      	subs	r1, #1
 800697e:	465a      	mov	r2, fp
 8006980:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006984:	9109      	str	r1, [sp, #36]	; 0x24
 8006986:	f7ff ff17 	bl	80067b8 <__exponent>
 800698a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800698c:	1813      	adds	r3, r2, r0
 800698e:	2a01      	cmp	r2, #1
 8006990:	4681      	mov	r9, r0
 8006992:	6123      	str	r3, [r4, #16]
 8006994:	dc02      	bgt.n	800699c <_printf_float+0x168>
 8006996:	6822      	ldr	r2, [r4, #0]
 8006998:	07d2      	lsls	r2, r2, #31
 800699a:	d501      	bpl.n	80069a0 <_printf_float+0x16c>
 800699c:	3301      	adds	r3, #1
 800699e:	6123      	str	r3, [r4, #16]
 80069a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d09c      	beq.n	80068e2 <_printf_float+0xae>
 80069a8:	232d      	movs	r3, #45	; 0x2d
 80069aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ae:	e798      	b.n	80068e2 <_printf_float+0xae>
 80069b0:	9a06      	ldr	r2, [sp, #24]
 80069b2:	2a47      	cmp	r2, #71	; 0x47
 80069b4:	d1be      	bne.n	8006934 <_printf_float+0x100>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1bc      	bne.n	8006934 <_printf_float+0x100>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e7b9      	b.n	8006932 <_printf_float+0xfe>
 80069be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069c2:	d118      	bne.n	80069f6 <_printf_float+0x1c2>
 80069c4:	2900      	cmp	r1, #0
 80069c6:	6863      	ldr	r3, [r4, #4]
 80069c8:	dd0b      	ble.n	80069e2 <_printf_float+0x1ae>
 80069ca:	6121      	str	r1, [r4, #16]
 80069cc:	b913      	cbnz	r3, 80069d4 <_printf_float+0x1a0>
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	07d0      	lsls	r0, r2, #31
 80069d2:	d502      	bpl.n	80069da <_printf_float+0x1a6>
 80069d4:	3301      	adds	r3, #1
 80069d6:	440b      	add	r3, r1
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	65a1      	str	r1, [r4, #88]	; 0x58
 80069dc:	f04f 0900 	mov.w	r9, #0
 80069e0:	e7de      	b.n	80069a0 <_printf_float+0x16c>
 80069e2:	b913      	cbnz	r3, 80069ea <_printf_float+0x1b6>
 80069e4:	6822      	ldr	r2, [r4, #0]
 80069e6:	07d2      	lsls	r2, r2, #31
 80069e8:	d501      	bpl.n	80069ee <_printf_float+0x1ba>
 80069ea:	3302      	adds	r3, #2
 80069ec:	e7f4      	b.n	80069d8 <_printf_float+0x1a4>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e7f2      	b.n	80069d8 <_printf_float+0x1a4>
 80069f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f8:	4299      	cmp	r1, r3
 80069fa:	db05      	blt.n	8006a08 <_printf_float+0x1d4>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	6121      	str	r1, [r4, #16]
 8006a00:	07d8      	lsls	r0, r3, #31
 8006a02:	d5ea      	bpl.n	80069da <_printf_float+0x1a6>
 8006a04:	1c4b      	adds	r3, r1, #1
 8006a06:	e7e7      	b.n	80069d8 <_printf_float+0x1a4>
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	bfd4      	ite	le
 8006a0c:	f1c1 0202 	rsble	r2, r1, #2
 8006a10:	2201      	movgt	r2, #1
 8006a12:	4413      	add	r3, r2
 8006a14:	e7e0      	b.n	80069d8 <_printf_float+0x1a4>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	055a      	lsls	r2, r3, #21
 8006a1a:	d407      	bmi.n	8006a2c <_printf_float+0x1f8>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	4642      	mov	r2, r8
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	d12c      	bne.n	8006a84 <_printf_float+0x250>
 8006a2a:	e764      	b.n	80068f6 <_printf_float+0xc2>
 8006a2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a30:	f240 80e0 	bls.w	8006bf4 <_printf_float+0x3c0>
 8006a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f7fa f854 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d034      	beq.n	8006aae <_printf_float+0x27a>
 8006a44:	4a37      	ldr	r2, [pc, #220]	; (8006b24 <_printf_float+0x2f0>)
 8006a46:	2301      	movs	r3, #1
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f af51 	beq.w	80068f6 <_printf_float+0xc2>
 8006a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	db02      	blt.n	8006a62 <_printf_float+0x22e>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	07d8      	lsls	r0, r3, #31
 8006a60:	d510      	bpl.n	8006a84 <_printf_float+0x250>
 8006a62:	ee18 3a10 	vmov	r3, s16
 8006a66:	4652      	mov	r2, sl
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	47b8      	blx	r7
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f af41 	beq.w	80068f6 <_printf_float+0xc2>
 8006a74:	f04f 0800 	mov.w	r8, #0
 8006a78:	f104 091a 	add.w	r9, r4, #26
 8006a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	4543      	cmp	r3, r8
 8006a82:	dc09      	bgt.n	8006a98 <_printf_float+0x264>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	079b      	lsls	r3, r3, #30
 8006a88:	f100 8105 	bmi.w	8006c96 <_printf_float+0x462>
 8006a8c:	68e0      	ldr	r0, [r4, #12]
 8006a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a90:	4298      	cmp	r0, r3
 8006a92:	bfb8      	it	lt
 8006a94:	4618      	movlt	r0, r3
 8006a96:	e730      	b.n	80068fa <_printf_float+0xc6>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	464a      	mov	r2, r9
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f43f af27 	beq.w	80068f6 <_printf_float+0xc2>
 8006aa8:	f108 0801 	add.w	r8, r8, #1
 8006aac:	e7e6      	b.n	8006a7c <_printf_float+0x248>
 8006aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dc39      	bgt.n	8006b28 <_printf_float+0x2f4>
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <_printf_float+0x2f0>)
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f af19 	beq.w	80068f6 <_printf_float+0xc2>
 8006ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	d102      	bne.n	8006ad2 <_printf_float+0x29e>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07d9      	lsls	r1, r3, #31
 8006ad0:	d5d8      	bpl.n	8006a84 <_printf_float+0x250>
 8006ad2:	ee18 3a10 	vmov	r3, s16
 8006ad6:	4652      	mov	r2, sl
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f af09 	beq.w	80068f6 <_printf_float+0xc2>
 8006ae4:	f04f 0900 	mov.w	r9, #0
 8006ae8:	f104 0a1a 	add.w	sl, r4, #26
 8006aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aee:	425b      	negs	r3, r3
 8006af0:	454b      	cmp	r3, r9
 8006af2:	dc01      	bgt.n	8006af8 <_printf_float+0x2c4>
 8006af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af6:	e792      	b.n	8006a1e <_printf_float+0x1ea>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4652      	mov	r2, sl
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f aef7 	beq.w	80068f6 <_printf_float+0xc2>
 8006b08:	f109 0901 	add.w	r9, r9, #1
 8006b0c:	e7ee      	b.n	8006aec <_printf_float+0x2b8>
 8006b0e:	bf00      	nop
 8006b10:	7fefffff 	.word	0x7fefffff
 8006b14:	0800b1d1 	.word	0x0800b1d1
 8006b18:	0800b1d5 	.word	0x0800b1d5
 8006b1c:	0800b1dd 	.word	0x0800b1dd
 8006b20:	0800b1d9 	.word	0x0800b1d9
 8006b24:	0800b1e1 	.word	0x0800b1e1
 8006b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	bfa8      	it	ge
 8006b30:	461a      	movge	r2, r3
 8006b32:	2a00      	cmp	r2, #0
 8006b34:	4691      	mov	r9, r2
 8006b36:	dc37      	bgt.n	8006ba8 <_printf_float+0x374>
 8006b38:	f04f 0b00 	mov.w	fp, #0
 8006b3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b40:	f104 021a 	add.w	r2, r4, #26
 8006b44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	eba3 0309 	sub.w	r3, r3, r9
 8006b4c:	455b      	cmp	r3, fp
 8006b4e:	dc33      	bgt.n	8006bb8 <_printf_float+0x384>
 8006b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b54:	429a      	cmp	r2, r3
 8006b56:	db3b      	blt.n	8006bd0 <_printf_float+0x39c>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	07da      	lsls	r2, r3, #31
 8006b5c:	d438      	bmi.n	8006bd0 <_printf_float+0x39c>
 8006b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b60:	9a05      	ldr	r2, [sp, #20]
 8006b62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b64:	1a9a      	subs	r2, r3, r2
 8006b66:	eba3 0901 	sub.w	r9, r3, r1
 8006b6a:	4591      	cmp	r9, r2
 8006b6c:	bfa8      	it	ge
 8006b6e:	4691      	movge	r9, r2
 8006b70:	f1b9 0f00 	cmp.w	r9, #0
 8006b74:	dc35      	bgt.n	8006be2 <_printf_float+0x3ae>
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b7e:	f104 0a1a 	add.w	sl, r4, #26
 8006b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	eba3 0309 	sub.w	r3, r3, r9
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	f77f af79 	ble.w	8006a84 <_printf_float+0x250>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4652      	mov	r2, sl
 8006b96:	4631      	mov	r1, r6
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b8      	blx	r7
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	f43f aeaa 	beq.w	80068f6 <_printf_float+0xc2>
 8006ba2:	f108 0801 	add.w	r8, r8, #1
 8006ba6:	e7ec      	b.n	8006b82 <_printf_float+0x34e>
 8006ba8:	4613      	mov	r3, r2
 8006baa:	4631      	mov	r1, r6
 8006bac:	4642      	mov	r2, r8
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d1c0      	bne.n	8006b38 <_printf_float+0x304>
 8006bb6:	e69e      	b.n	80068f6 <_printf_float+0xc2>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	9205      	str	r2, [sp, #20]
 8006bc0:	47b8      	blx	r7
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f43f ae97 	beq.w	80068f6 <_printf_float+0xc2>
 8006bc8:	9a05      	ldr	r2, [sp, #20]
 8006bca:	f10b 0b01 	add.w	fp, fp, #1
 8006bce:	e7b9      	b.n	8006b44 <_printf_float+0x310>
 8006bd0:	ee18 3a10 	vmov	r3, s16
 8006bd4:	4652      	mov	r2, sl
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d1be      	bne.n	8006b5e <_printf_float+0x32a>
 8006be0:	e689      	b.n	80068f6 <_printf_float+0xc2>
 8006be2:	9a05      	ldr	r2, [sp, #20]
 8006be4:	464b      	mov	r3, r9
 8006be6:	4442      	add	r2, r8
 8006be8:	4631      	mov	r1, r6
 8006bea:	4628      	mov	r0, r5
 8006bec:	47b8      	blx	r7
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d1c1      	bne.n	8006b76 <_printf_float+0x342>
 8006bf2:	e680      	b.n	80068f6 <_printf_float+0xc2>
 8006bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf6:	2a01      	cmp	r2, #1
 8006bf8:	dc01      	bgt.n	8006bfe <_printf_float+0x3ca>
 8006bfa:	07db      	lsls	r3, r3, #31
 8006bfc:	d538      	bpl.n	8006c70 <_printf_float+0x43c>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4642      	mov	r2, r8
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f43f ae74 	beq.w	80068f6 <_printf_float+0xc2>
 8006c0e:	ee18 3a10 	vmov	r3, s16
 8006c12:	4652      	mov	r2, sl
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f ae6b 	beq.w	80068f6 <_printf_float+0xc2>
 8006c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c24:	2200      	movs	r2, #0
 8006c26:	2300      	movs	r3, #0
 8006c28:	f7f9 ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c2c:	b9d8      	cbnz	r0, 8006c66 <_printf_float+0x432>
 8006c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c30:	f108 0201 	add.w	r2, r8, #1
 8006c34:	3b01      	subs	r3, #1
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d10e      	bne.n	8006c5e <_printf_float+0x42a>
 8006c40:	e659      	b.n	80068f6 <_printf_float+0xc2>
 8006c42:	2301      	movs	r3, #1
 8006c44:	4652      	mov	r2, sl
 8006c46:	4631      	mov	r1, r6
 8006c48:	4628      	mov	r0, r5
 8006c4a:	47b8      	blx	r7
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	f43f ae52 	beq.w	80068f6 <_printf_float+0xc2>
 8006c52:	f108 0801 	add.w	r8, r8, #1
 8006c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	4543      	cmp	r3, r8
 8006c5c:	dcf1      	bgt.n	8006c42 <_printf_float+0x40e>
 8006c5e:	464b      	mov	r3, r9
 8006c60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c64:	e6dc      	b.n	8006a20 <_printf_float+0x1ec>
 8006c66:	f04f 0800 	mov.w	r8, #0
 8006c6a:	f104 0a1a 	add.w	sl, r4, #26
 8006c6e:	e7f2      	b.n	8006c56 <_printf_float+0x422>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4642      	mov	r2, r8
 8006c74:	e7df      	b.n	8006c36 <_printf_float+0x402>
 8006c76:	2301      	movs	r3, #1
 8006c78:	464a      	mov	r2, r9
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	47b8      	blx	r7
 8006c80:	3001      	adds	r0, #1
 8006c82:	f43f ae38 	beq.w	80068f6 <_printf_float+0xc2>
 8006c86:	f108 0801 	add.w	r8, r8, #1
 8006c8a:	68e3      	ldr	r3, [r4, #12]
 8006c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c8e:	1a5b      	subs	r3, r3, r1
 8006c90:	4543      	cmp	r3, r8
 8006c92:	dcf0      	bgt.n	8006c76 <_printf_float+0x442>
 8006c94:	e6fa      	b.n	8006a8c <_printf_float+0x258>
 8006c96:	f04f 0800 	mov.w	r8, #0
 8006c9a:	f104 0919 	add.w	r9, r4, #25
 8006c9e:	e7f4      	b.n	8006c8a <_printf_float+0x456>

08006ca0 <_printf_common>:
 8006ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	4699      	mov	r9, r3
 8006ca8:	688a      	ldr	r2, [r1, #8]
 8006caa:	690b      	ldr	r3, [r1, #16]
 8006cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	bfb8      	it	lt
 8006cb4:	4613      	movlt	r3, r2
 8006cb6:	6033      	str	r3, [r6, #0]
 8006cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	b10a      	cbz	r2, 8006cc6 <_printf_common+0x26>
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	6033      	str	r3, [r6, #0]
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	0699      	lsls	r1, r3, #26
 8006cca:	bf42      	ittt	mi
 8006ccc:	6833      	ldrmi	r3, [r6, #0]
 8006cce:	3302      	addmi	r3, #2
 8006cd0:	6033      	strmi	r3, [r6, #0]
 8006cd2:	6825      	ldr	r5, [r4, #0]
 8006cd4:	f015 0506 	ands.w	r5, r5, #6
 8006cd8:	d106      	bne.n	8006ce8 <_printf_common+0x48>
 8006cda:	f104 0a19 	add.w	sl, r4, #25
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	6832      	ldr	r2, [r6, #0]
 8006ce2:	1a9b      	subs	r3, r3, r2
 8006ce4:	42ab      	cmp	r3, r5
 8006ce6:	dc26      	bgt.n	8006d36 <_printf_common+0x96>
 8006ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cec:	1e13      	subs	r3, r2, #0
 8006cee:	6822      	ldr	r2, [r4, #0]
 8006cf0:	bf18      	it	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	0692      	lsls	r2, r2, #26
 8006cf6:	d42b      	bmi.n	8006d50 <_printf_common+0xb0>
 8006cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	4638      	mov	r0, r7
 8006d00:	47c0      	blx	r8
 8006d02:	3001      	adds	r0, #1
 8006d04:	d01e      	beq.n	8006d44 <_printf_common+0xa4>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	68e5      	ldr	r5, [r4, #12]
 8006d0a:	6832      	ldr	r2, [r6, #0]
 8006d0c:	f003 0306 	and.w	r3, r3, #6
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	bf08      	it	eq
 8006d14:	1aad      	subeq	r5, r5, r2
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	6922      	ldr	r2, [r4, #16]
 8006d1a:	bf0c      	ite	eq
 8006d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d20:	2500      	movne	r5, #0
 8006d22:	4293      	cmp	r3, r2
 8006d24:	bfc4      	itt	gt
 8006d26:	1a9b      	subgt	r3, r3, r2
 8006d28:	18ed      	addgt	r5, r5, r3
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	341a      	adds	r4, #26
 8006d2e:	42b5      	cmp	r5, r6
 8006d30:	d11a      	bne.n	8006d68 <_printf_common+0xc8>
 8006d32:	2000      	movs	r0, #0
 8006d34:	e008      	b.n	8006d48 <_printf_common+0xa8>
 8006d36:	2301      	movs	r3, #1
 8006d38:	4652      	mov	r2, sl
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	47c0      	blx	r8
 8006d40:	3001      	adds	r0, #1
 8006d42:	d103      	bne.n	8006d4c <_printf_common+0xac>
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4c:	3501      	adds	r5, #1
 8006d4e:	e7c6      	b.n	8006cde <_printf_common+0x3e>
 8006d50:	18e1      	adds	r1, r4, r3
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	2030      	movs	r0, #48	; 0x30
 8006d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d5a:	4422      	add	r2, r4
 8006d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d64:	3302      	adds	r3, #2
 8006d66:	e7c7      	b.n	8006cf8 <_printf_common+0x58>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	4638      	mov	r0, r7
 8006d70:	47c0      	blx	r8
 8006d72:	3001      	adds	r0, #1
 8006d74:	d0e6      	beq.n	8006d44 <_printf_common+0xa4>
 8006d76:	3601      	adds	r6, #1
 8006d78:	e7d9      	b.n	8006d2e <_printf_common+0x8e>
	...

08006d7c <_printf_i>:
 8006d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	7e0f      	ldrb	r7, [r1, #24]
 8006d82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d84:	2f78      	cmp	r7, #120	; 0x78
 8006d86:	4691      	mov	r9, r2
 8006d88:	4680      	mov	r8, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	469a      	mov	sl, r3
 8006d8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d92:	d807      	bhi.n	8006da4 <_printf_i+0x28>
 8006d94:	2f62      	cmp	r7, #98	; 0x62
 8006d96:	d80a      	bhi.n	8006dae <_printf_i+0x32>
 8006d98:	2f00      	cmp	r7, #0
 8006d9a:	f000 80d8 	beq.w	8006f4e <_printf_i+0x1d2>
 8006d9e:	2f58      	cmp	r7, #88	; 0x58
 8006da0:	f000 80a3 	beq.w	8006eea <_printf_i+0x16e>
 8006da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dac:	e03a      	b.n	8006e24 <_printf_i+0xa8>
 8006dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006db2:	2b15      	cmp	r3, #21
 8006db4:	d8f6      	bhi.n	8006da4 <_printf_i+0x28>
 8006db6:	a101      	add	r1, pc, #4	; (adr r1, 8006dbc <_printf_i+0x40>)
 8006db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dbc:	08006e15 	.word	0x08006e15
 8006dc0:	08006e29 	.word	0x08006e29
 8006dc4:	08006da5 	.word	0x08006da5
 8006dc8:	08006da5 	.word	0x08006da5
 8006dcc:	08006da5 	.word	0x08006da5
 8006dd0:	08006da5 	.word	0x08006da5
 8006dd4:	08006e29 	.word	0x08006e29
 8006dd8:	08006da5 	.word	0x08006da5
 8006ddc:	08006da5 	.word	0x08006da5
 8006de0:	08006da5 	.word	0x08006da5
 8006de4:	08006da5 	.word	0x08006da5
 8006de8:	08006f35 	.word	0x08006f35
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	08006f17 	.word	0x08006f17
 8006df4:	08006da5 	.word	0x08006da5
 8006df8:	08006da5 	.word	0x08006da5
 8006dfc:	08006f57 	.word	0x08006f57
 8006e00:	08006da5 	.word	0x08006da5
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006da5 	.word	0x08006da5
 8006e0c:	08006da5 	.word	0x08006da5
 8006e10:	08006f1f 	.word	0x08006f1f
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	1d1a      	adds	r2, r3, #4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	602a      	str	r2, [r5, #0]
 8006e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0a3      	b.n	8006f70 <_printf_i+0x1f4>
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	6829      	ldr	r1, [r5, #0]
 8006e2c:	0606      	lsls	r6, r0, #24
 8006e2e:	f101 0304 	add.w	r3, r1, #4
 8006e32:	d50a      	bpl.n	8006e4a <_printf_i+0xce>
 8006e34:	680e      	ldr	r6, [r1, #0]
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	2e00      	cmp	r6, #0
 8006e3a:	da03      	bge.n	8006e44 <_printf_i+0xc8>
 8006e3c:	232d      	movs	r3, #45	; 0x2d
 8006e3e:	4276      	negs	r6, r6
 8006e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e44:	485e      	ldr	r0, [pc, #376]	; (8006fc0 <_printf_i+0x244>)
 8006e46:	230a      	movs	r3, #10
 8006e48:	e019      	b.n	8006e7e <_printf_i+0x102>
 8006e4a:	680e      	ldr	r6, [r1, #0]
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e52:	bf18      	it	ne
 8006e54:	b236      	sxthne	r6, r6
 8006e56:	e7ef      	b.n	8006e38 <_printf_i+0xbc>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	1d19      	adds	r1, r3, #4
 8006e5e:	6029      	str	r1, [r5, #0]
 8006e60:	0601      	lsls	r1, r0, #24
 8006e62:	d501      	bpl.n	8006e68 <_printf_i+0xec>
 8006e64:	681e      	ldr	r6, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <_printf_i+0xf2>
 8006e68:	0646      	lsls	r6, r0, #25
 8006e6a:	d5fb      	bpl.n	8006e64 <_printf_i+0xe8>
 8006e6c:	881e      	ldrh	r6, [r3, #0]
 8006e6e:	4854      	ldr	r0, [pc, #336]	; (8006fc0 <_printf_i+0x244>)
 8006e70:	2f6f      	cmp	r7, #111	; 0x6f
 8006e72:	bf0c      	ite	eq
 8006e74:	2308      	moveq	r3, #8
 8006e76:	230a      	movne	r3, #10
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e7e:	6865      	ldr	r5, [r4, #4]
 8006e80:	60a5      	str	r5, [r4, #8]
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	bfa2      	ittt	ge
 8006e86:	6821      	ldrge	r1, [r4, #0]
 8006e88:	f021 0104 	bicge.w	r1, r1, #4
 8006e8c:	6021      	strge	r1, [r4, #0]
 8006e8e:	b90e      	cbnz	r6, 8006e94 <_printf_i+0x118>
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	d04d      	beq.n	8006f30 <_printf_i+0x1b4>
 8006e94:	4615      	mov	r5, r2
 8006e96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006e9e:	5dc7      	ldrb	r7, [r0, r7]
 8006ea0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ea4:	4637      	mov	r7, r6
 8006ea6:	42bb      	cmp	r3, r7
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	d9f4      	bls.n	8006e96 <_printf_i+0x11a>
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d10b      	bne.n	8006ec8 <_printf_i+0x14c>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	07de      	lsls	r6, r3, #31
 8006eb4:	d508      	bpl.n	8006ec8 <_printf_i+0x14c>
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	6861      	ldr	r1, [r4, #4]
 8006eba:	4299      	cmp	r1, r3
 8006ebc:	bfde      	ittt	le
 8006ebe:	2330      	movle	r3, #48	; 0x30
 8006ec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ec8:	1b52      	subs	r2, r2, r5
 8006eca:	6122      	str	r2, [r4, #16]
 8006ecc:	f8cd a000 	str.w	sl, [sp]
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	aa03      	add	r2, sp, #12
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7ff fee2 	bl	8006ca0 <_printf_common>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d14c      	bne.n	8006f7a <_printf_i+0x1fe>
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	b004      	add	sp, #16
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	4835      	ldr	r0, [pc, #212]	; (8006fc0 <_printf_i+0x244>)
 8006eec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ef0:	6829      	ldr	r1, [r5, #0]
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ef8:	6029      	str	r1, [r5, #0]
 8006efa:	061d      	lsls	r5, r3, #24
 8006efc:	d514      	bpl.n	8006f28 <_printf_i+0x1ac>
 8006efe:	07df      	lsls	r7, r3, #31
 8006f00:	bf44      	itt	mi
 8006f02:	f043 0320 	orrmi.w	r3, r3, #32
 8006f06:	6023      	strmi	r3, [r4, #0]
 8006f08:	b91e      	cbnz	r6, 8006f12 <_printf_i+0x196>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	f023 0320 	bic.w	r3, r3, #32
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	2310      	movs	r3, #16
 8006f14:	e7b0      	b.n	8006e78 <_printf_i+0xfc>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	f043 0320 	orr.w	r3, r3, #32
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	2378      	movs	r3, #120	; 0x78
 8006f20:	4828      	ldr	r0, [pc, #160]	; (8006fc4 <_printf_i+0x248>)
 8006f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f26:	e7e3      	b.n	8006ef0 <_printf_i+0x174>
 8006f28:	0659      	lsls	r1, r3, #25
 8006f2a:	bf48      	it	mi
 8006f2c:	b2b6      	uxthmi	r6, r6
 8006f2e:	e7e6      	b.n	8006efe <_printf_i+0x182>
 8006f30:	4615      	mov	r5, r2
 8006f32:	e7bb      	b.n	8006eac <_printf_i+0x130>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	6826      	ldr	r6, [r4, #0]
 8006f38:	6961      	ldr	r1, [r4, #20]
 8006f3a:	1d18      	adds	r0, r3, #4
 8006f3c:	6028      	str	r0, [r5, #0]
 8006f3e:	0635      	lsls	r5, r6, #24
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	d501      	bpl.n	8006f48 <_printf_i+0x1cc>
 8006f44:	6019      	str	r1, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <_printf_i+0x1d2>
 8006f48:	0670      	lsls	r0, r6, #25
 8006f4a:	d5fb      	bpl.n	8006f44 <_printf_i+0x1c8>
 8006f4c:	8019      	strh	r1, [r3, #0]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6123      	str	r3, [r4, #16]
 8006f52:	4615      	mov	r5, r2
 8006f54:	e7ba      	b.n	8006ecc <_printf_i+0x150>
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	1d1a      	adds	r2, r3, #4
 8006f5a:	602a      	str	r2, [r5, #0]
 8006f5c:	681d      	ldr	r5, [r3, #0]
 8006f5e:	6862      	ldr	r2, [r4, #4]
 8006f60:	2100      	movs	r1, #0
 8006f62:	4628      	mov	r0, r5
 8006f64:	f7f9 f94c 	bl	8000200 <memchr>
 8006f68:	b108      	cbz	r0, 8006f6e <_printf_i+0x1f2>
 8006f6a:	1b40      	subs	r0, r0, r5
 8006f6c:	6060      	str	r0, [r4, #4]
 8006f6e:	6863      	ldr	r3, [r4, #4]
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	2300      	movs	r3, #0
 8006f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f78:	e7a8      	b.n	8006ecc <_printf_i+0x150>
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4649      	mov	r1, r9
 8006f80:	4640      	mov	r0, r8
 8006f82:	47d0      	blx	sl
 8006f84:	3001      	adds	r0, #1
 8006f86:	d0ab      	beq.n	8006ee0 <_printf_i+0x164>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	079b      	lsls	r3, r3, #30
 8006f8c:	d413      	bmi.n	8006fb6 <_printf_i+0x23a>
 8006f8e:	68e0      	ldr	r0, [r4, #12]
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	4298      	cmp	r0, r3
 8006f94:	bfb8      	it	lt
 8006f96:	4618      	movlt	r0, r3
 8006f98:	e7a4      	b.n	8006ee4 <_printf_i+0x168>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4632      	mov	r2, r6
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	47d0      	blx	sl
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d09b      	beq.n	8006ee0 <_printf_i+0x164>
 8006fa8:	3501      	adds	r5, #1
 8006faa:	68e3      	ldr	r3, [r4, #12]
 8006fac:	9903      	ldr	r1, [sp, #12]
 8006fae:	1a5b      	subs	r3, r3, r1
 8006fb0:	42ab      	cmp	r3, r5
 8006fb2:	dcf2      	bgt.n	8006f9a <_printf_i+0x21e>
 8006fb4:	e7eb      	b.n	8006f8e <_printf_i+0x212>
 8006fb6:	2500      	movs	r5, #0
 8006fb8:	f104 0619 	add.w	r6, r4, #25
 8006fbc:	e7f5      	b.n	8006faa <_printf_i+0x22e>
 8006fbe:	bf00      	nop
 8006fc0:	0800b1e3 	.word	0x0800b1e3
 8006fc4:	0800b1f4 	.word	0x0800b1f4

08006fc8 <_scanf_float>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	b087      	sub	sp, #28
 8006fce:	4617      	mov	r7, r2
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	688b      	ldr	r3, [r1, #8]
 8006fd4:	1e5a      	subs	r2, r3, #1
 8006fd6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006fda:	bf83      	ittte	hi
 8006fdc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006fe0:	195b      	addhi	r3, r3, r5
 8006fe2:	9302      	strhi	r3, [sp, #8]
 8006fe4:	2300      	movls	r3, #0
 8006fe6:	bf86      	itte	hi
 8006fe8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006fec:	608b      	strhi	r3, [r1, #8]
 8006fee:	9302      	strls	r3, [sp, #8]
 8006ff0:	680b      	ldr	r3, [r1, #0]
 8006ff2:	468b      	mov	fp, r1
 8006ff4:	2500      	movs	r5, #0
 8006ff6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ffa:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ffe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007002:	4680      	mov	r8, r0
 8007004:	460c      	mov	r4, r1
 8007006:	465e      	mov	r6, fp
 8007008:	46aa      	mov	sl, r5
 800700a:	46a9      	mov	r9, r5
 800700c:	9501      	str	r5, [sp, #4]
 800700e:	68a2      	ldr	r2, [r4, #8]
 8007010:	b152      	cbz	r2, 8007028 <_scanf_float+0x60>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b4e      	cmp	r3, #78	; 0x4e
 8007018:	d864      	bhi.n	80070e4 <_scanf_float+0x11c>
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d83c      	bhi.n	8007098 <_scanf_float+0xd0>
 800701e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007022:	b2c8      	uxtb	r0, r1
 8007024:	280e      	cmp	r0, #14
 8007026:	d93a      	bls.n	800709e <_scanf_float+0xd6>
 8007028:	f1b9 0f00 	cmp.w	r9, #0
 800702c:	d003      	beq.n	8007036 <_scanf_float+0x6e>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800703a:	f1ba 0f01 	cmp.w	sl, #1
 800703e:	f200 8113 	bhi.w	8007268 <_scanf_float+0x2a0>
 8007042:	455e      	cmp	r6, fp
 8007044:	f200 8105 	bhi.w	8007252 <_scanf_float+0x28a>
 8007048:	2501      	movs	r5, #1
 800704a:	4628      	mov	r0, r5
 800704c:	b007      	add	sp, #28
 800704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007052:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007056:	2a0d      	cmp	r2, #13
 8007058:	d8e6      	bhi.n	8007028 <_scanf_float+0x60>
 800705a:	a101      	add	r1, pc, #4	; (adr r1, 8007060 <_scanf_float+0x98>)
 800705c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007060:	0800719f 	.word	0x0800719f
 8007064:	08007029 	.word	0x08007029
 8007068:	08007029 	.word	0x08007029
 800706c:	08007029 	.word	0x08007029
 8007070:	080071ff 	.word	0x080071ff
 8007074:	080071d7 	.word	0x080071d7
 8007078:	08007029 	.word	0x08007029
 800707c:	08007029 	.word	0x08007029
 8007080:	080071ad 	.word	0x080071ad
 8007084:	08007029 	.word	0x08007029
 8007088:	08007029 	.word	0x08007029
 800708c:	08007029 	.word	0x08007029
 8007090:	08007029 	.word	0x08007029
 8007094:	08007165 	.word	0x08007165
 8007098:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800709c:	e7db      	b.n	8007056 <_scanf_float+0x8e>
 800709e:	290e      	cmp	r1, #14
 80070a0:	d8c2      	bhi.n	8007028 <_scanf_float+0x60>
 80070a2:	a001      	add	r0, pc, #4	; (adr r0, 80070a8 <_scanf_float+0xe0>)
 80070a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070a8:	08007157 	.word	0x08007157
 80070ac:	08007029 	.word	0x08007029
 80070b0:	08007157 	.word	0x08007157
 80070b4:	080071eb 	.word	0x080071eb
 80070b8:	08007029 	.word	0x08007029
 80070bc:	08007105 	.word	0x08007105
 80070c0:	08007141 	.word	0x08007141
 80070c4:	08007141 	.word	0x08007141
 80070c8:	08007141 	.word	0x08007141
 80070cc:	08007141 	.word	0x08007141
 80070d0:	08007141 	.word	0x08007141
 80070d4:	08007141 	.word	0x08007141
 80070d8:	08007141 	.word	0x08007141
 80070dc:	08007141 	.word	0x08007141
 80070e0:	08007141 	.word	0x08007141
 80070e4:	2b6e      	cmp	r3, #110	; 0x6e
 80070e6:	d809      	bhi.n	80070fc <_scanf_float+0x134>
 80070e8:	2b60      	cmp	r3, #96	; 0x60
 80070ea:	d8b2      	bhi.n	8007052 <_scanf_float+0x8a>
 80070ec:	2b54      	cmp	r3, #84	; 0x54
 80070ee:	d077      	beq.n	80071e0 <_scanf_float+0x218>
 80070f0:	2b59      	cmp	r3, #89	; 0x59
 80070f2:	d199      	bne.n	8007028 <_scanf_float+0x60>
 80070f4:	2d07      	cmp	r5, #7
 80070f6:	d197      	bne.n	8007028 <_scanf_float+0x60>
 80070f8:	2508      	movs	r5, #8
 80070fa:	e029      	b.n	8007150 <_scanf_float+0x188>
 80070fc:	2b74      	cmp	r3, #116	; 0x74
 80070fe:	d06f      	beq.n	80071e0 <_scanf_float+0x218>
 8007100:	2b79      	cmp	r3, #121	; 0x79
 8007102:	e7f6      	b.n	80070f2 <_scanf_float+0x12a>
 8007104:	6821      	ldr	r1, [r4, #0]
 8007106:	05c8      	lsls	r0, r1, #23
 8007108:	d51a      	bpl.n	8007140 <_scanf_float+0x178>
 800710a:	9b02      	ldr	r3, [sp, #8]
 800710c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007110:	6021      	str	r1, [r4, #0]
 8007112:	f109 0901 	add.w	r9, r9, #1
 8007116:	b11b      	cbz	r3, 8007120 <_scanf_float+0x158>
 8007118:	3b01      	subs	r3, #1
 800711a:	3201      	adds	r2, #1
 800711c:	9302      	str	r3, [sp, #8]
 800711e:	60a2      	str	r2, [r4, #8]
 8007120:	68a3      	ldr	r3, [r4, #8]
 8007122:	3b01      	subs	r3, #1
 8007124:	60a3      	str	r3, [r4, #8]
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	3301      	adds	r3, #1
 800712a:	6123      	str	r3, [r4, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3b01      	subs	r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	f340 8084 	ble.w	8007240 <_scanf_float+0x278>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	3301      	adds	r3, #1
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	e766      	b.n	800700e <_scanf_float+0x46>
 8007140:	eb1a 0f05 	cmn.w	sl, r5
 8007144:	f47f af70 	bne.w	8007028 <_scanf_float+0x60>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800714e:	6022      	str	r2, [r4, #0]
 8007150:	f806 3b01 	strb.w	r3, [r6], #1
 8007154:	e7e4      	b.n	8007120 <_scanf_float+0x158>
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	0610      	lsls	r0, r2, #24
 800715a:	f57f af65 	bpl.w	8007028 <_scanf_float+0x60>
 800715e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007162:	e7f4      	b.n	800714e <_scanf_float+0x186>
 8007164:	f1ba 0f00 	cmp.w	sl, #0
 8007168:	d10e      	bne.n	8007188 <_scanf_float+0x1c0>
 800716a:	f1b9 0f00 	cmp.w	r9, #0
 800716e:	d10e      	bne.n	800718e <_scanf_float+0x1c6>
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007176:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800717a:	d108      	bne.n	800718e <_scanf_float+0x1c6>
 800717c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007180:	6022      	str	r2, [r4, #0]
 8007182:	f04f 0a01 	mov.w	sl, #1
 8007186:	e7e3      	b.n	8007150 <_scanf_float+0x188>
 8007188:	f1ba 0f02 	cmp.w	sl, #2
 800718c:	d055      	beq.n	800723a <_scanf_float+0x272>
 800718e:	2d01      	cmp	r5, #1
 8007190:	d002      	beq.n	8007198 <_scanf_float+0x1d0>
 8007192:	2d04      	cmp	r5, #4
 8007194:	f47f af48 	bne.w	8007028 <_scanf_float+0x60>
 8007198:	3501      	adds	r5, #1
 800719a:	b2ed      	uxtb	r5, r5
 800719c:	e7d8      	b.n	8007150 <_scanf_float+0x188>
 800719e:	f1ba 0f01 	cmp.w	sl, #1
 80071a2:	f47f af41 	bne.w	8007028 <_scanf_float+0x60>
 80071a6:	f04f 0a02 	mov.w	sl, #2
 80071aa:	e7d1      	b.n	8007150 <_scanf_float+0x188>
 80071ac:	b97d      	cbnz	r5, 80071ce <_scanf_float+0x206>
 80071ae:	f1b9 0f00 	cmp.w	r9, #0
 80071b2:	f47f af3c 	bne.w	800702e <_scanf_float+0x66>
 80071b6:	6822      	ldr	r2, [r4, #0]
 80071b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071c0:	f47f af39 	bne.w	8007036 <_scanf_float+0x6e>
 80071c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071c8:	6022      	str	r2, [r4, #0]
 80071ca:	2501      	movs	r5, #1
 80071cc:	e7c0      	b.n	8007150 <_scanf_float+0x188>
 80071ce:	2d03      	cmp	r5, #3
 80071d0:	d0e2      	beq.n	8007198 <_scanf_float+0x1d0>
 80071d2:	2d05      	cmp	r5, #5
 80071d4:	e7de      	b.n	8007194 <_scanf_float+0x1cc>
 80071d6:	2d02      	cmp	r5, #2
 80071d8:	f47f af26 	bne.w	8007028 <_scanf_float+0x60>
 80071dc:	2503      	movs	r5, #3
 80071de:	e7b7      	b.n	8007150 <_scanf_float+0x188>
 80071e0:	2d06      	cmp	r5, #6
 80071e2:	f47f af21 	bne.w	8007028 <_scanf_float+0x60>
 80071e6:	2507      	movs	r5, #7
 80071e8:	e7b2      	b.n	8007150 <_scanf_float+0x188>
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	0591      	lsls	r1, r2, #22
 80071ee:	f57f af1b 	bpl.w	8007028 <_scanf_float+0x60>
 80071f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80071fc:	e7a8      	b.n	8007150 <_scanf_float+0x188>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007204:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007208:	d006      	beq.n	8007218 <_scanf_float+0x250>
 800720a:	0550      	lsls	r0, r2, #21
 800720c:	f57f af0c 	bpl.w	8007028 <_scanf_float+0x60>
 8007210:	f1b9 0f00 	cmp.w	r9, #0
 8007214:	f43f af0f 	beq.w	8007036 <_scanf_float+0x6e>
 8007218:	0591      	lsls	r1, r2, #22
 800721a:	bf58      	it	pl
 800721c:	9901      	ldrpl	r1, [sp, #4]
 800721e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007222:	bf58      	it	pl
 8007224:	eba9 0101 	subpl.w	r1, r9, r1
 8007228:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800722c:	bf58      	it	pl
 800722e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007232:	6022      	str	r2, [r4, #0]
 8007234:	f04f 0900 	mov.w	r9, #0
 8007238:	e78a      	b.n	8007150 <_scanf_float+0x188>
 800723a:	f04f 0a03 	mov.w	sl, #3
 800723e:	e787      	b.n	8007150 <_scanf_float+0x188>
 8007240:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007244:	4639      	mov	r1, r7
 8007246:	4640      	mov	r0, r8
 8007248:	4798      	blx	r3
 800724a:	2800      	cmp	r0, #0
 800724c:	f43f aedf 	beq.w	800700e <_scanf_float+0x46>
 8007250:	e6ea      	b.n	8007028 <_scanf_float+0x60>
 8007252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800725a:	463a      	mov	r2, r7
 800725c:	4640      	mov	r0, r8
 800725e:	4798      	blx	r3
 8007260:	6923      	ldr	r3, [r4, #16]
 8007262:	3b01      	subs	r3, #1
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	e6ec      	b.n	8007042 <_scanf_float+0x7a>
 8007268:	1e6b      	subs	r3, r5, #1
 800726a:	2b06      	cmp	r3, #6
 800726c:	d825      	bhi.n	80072ba <_scanf_float+0x2f2>
 800726e:	2d02      	cmp	r5, #2
 8007270:	d836      	bhi.n	80072e0 <_scanf_float+0x318>
 8007272:	455e      	cmp	r6, fp
 8007274:	f67f aee8 	bls.w	8007048 <_scanf_float+0x80>
 8007278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800727c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007280:	463a      	mov	r2, r7
 8007282:	4640      	mov	r0, r8
 8007284:	4798      	blx	r3
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	3b01      	subs	r3, #1
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	e7f1      	b.n	8007272 <_scanf_float+0x2aa>
 800728e:	9802      	ldr	r0, [sp, #8]
 8007290:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007294:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007298:	9002      	str	r0, [sp, #8]
 800729a:	463a      	mov	r2, r7
 800729c:	4640      	mov	r0, r8
 800729e:	4798      	blx	r3
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072aa:	fa5f fa8a 	uxtb.w	sl, sl
 80072ae:	f1ba 0f02 	cmp.w	sl, #2
 80072b2:	d1ec      	bne.n	800728e <_scanf_float+0x2c6>
 80072b4:	3d03      	subs	r5, #3
 80072b6:	b2ed      	uxtb	r5, r5
 80072b8:	1b76      	subs	r6, r6, r5
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	05da      	lsls	r2, r3, #23
 80072be:	d52f      	bpl.n	8007320 <_scanf_float+0x358>
 80072c0:	055b      	lsls	r3, r3, #21
 80072c2:	d510      	bpl.n	80072e6 <_scanf_float+0x31e>
 80072c4:	455e      	cmp	r6, fp
 80072c6:	f67f aebf 	bls.w	8007048 <_scanf_float+0x80>
 80072ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072d2:	463a      	mov	r2, r7
 80072d4:	4640      	mov	r0, r8
 80072d6:	4798      	blx	r3
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	3b01      	subs	r3, #1
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	e7f1      	b.n	80072c4 <_scanf_float+0x2fc>
 80072e0:	46aa      	mov	sl, r5
 80072e2:	9602      	str	r6, [sp, #8]
 80072e4:	e7df      	b.n	80072a6 <_scanf_float+0x2de>
 80072e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	2965      	cmp	r1, #101	; 0x65
 80072ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80072f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80072f6:	6123      	str	r3, [r4, #16]
 80072f8:	d00c      	beq.n	8007314 <_scanf_float+0x34c>
 80072fa:	2945      	cmp	r1, #69	; 0x45
 80072fc:	d00a      	beq.n	8007314 <_scanf_float+0x34c>
 80072fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007302:	463a      	mov	r2, r7
 8007304:	4640      	mov	r0, r8
 8007306:	4798      	blx	r3
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800730e:	3b01      	subs	r3, #1
 8007310:	1eb5      	subs	r5, r6, #2
 8007312:	6123      	str	r3, [r4, #16]
 8007314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007318:	463a      	mov	r2, r7
 800731a:	4640      	mov	r0, r8
 800731c:	4798      	blx	r3
 800731e:	462e      	mov	r6, r5
 8007320:	6825      	ldr	r5, [r4, #0]
 8007322:	f015 0510 	ands.w	r5, r5, #16
 8007326:	d159      	bne.n	80073dc <_scanf_float+0x414>
 8007328:	7035      	strb	r5, [r6, #0]
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007334:	d11b      	bne.n	800736e <_scanf_float+0x3a6>
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	454b      	cmp	r3, r9
 800733a:	eba3 0209 	sub.w	r2, r3, r9
 800733e:	d123      	bne.n	8007388 <_scanf_float+0x3c0>
 8007340:	2200      	movs	r2, #0
 8007342:	4659      	mov	r1, fp
 8007344:	4640      	mov	r0, r8
 8007346:	f000 ff25 	bl	8008194 <_strtod_r>
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	f012 0f02 	tst.w	r2, #2
 8007352:	ec57 6b10 	vmov	r6, r7, d0
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	d021      	beq.n	800739e <_scanf_float+0x3d6>
 800735a:	9903      	ldr	r1, [sp, #12]
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	600a      	str	r2, [r1, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	e9c3 6700 	strd	r6, r7, [r3]
 8007366:	68e3      	ldr	r3, [r4, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60e3      	str	r3, [r4, #12]
 800736c:	e66d      	b.n	800704a <_scanf_float+0x82>
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0e5      	beq.n	8007340 <_scanf_float+0x378>
 8007374:	9905      	ldr	r1, [sp, #20]
 8007376:	230a      	movs	r3, #10
 8007378:	462a      	mov	r2, r5
 800737a:	3101      	adds	r1, #1
 800737c:	4640      	mov	r0, r8
 800737e:	f000 ff91 	bl	80082a4 <_strtol_r>
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	9e05      	ldr	r6, [sp, #20]
 8007386:	1ac2      	subs	r2, r0, r3
 8007388:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800738c:	429e      	cmp	r6, r3
 800738e:	bf28      	it	cs
 8007390:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007394:	4912      	ldr	r1, [pc, #72]	; (80073e0 <_scanf_float+0x418>)
 8007396:	4630      	mov	r0, r6
 8007398:	f000 f8ba 	bl	8007510 <siprintf>
 800739c:	e7d0      	b.n	8007340 <_scanf_float+0x378>
 800739e:	9903      	ldr	r1, [sp, #12]
 80073a0:	f012 0f04 	tst.w	r2, #4
 80073a4:	f103 0204 	add.w	r2, r3, #4
 80073a8:	600a      	str	r2, [r1, #0]
 80073aa:	d1d9      	bne.n	8007360 <_scanf_float+0x398>
 80073ac:	f8d3 8000 	ldr.w	r8, [r3]
 80073b0:	ee10 2a10 	vmov	r2, s0
 80073b4:	ee10 0a10 	vmov	r0, s0
 80073b8:	463b      	mov	r3, r7
 80073ba:	4639      	mov	r1, r7
 80073bc:	f7f9 fbc6 	bl	8000b4c <__aeabi_dcmpun>
 80073c0:	b128      	cbz	r0, 80073ce <_scanf_float+0x406>
 80073c2:	4808      	ldr	r0, [pc, #32]	; (80073e4 <_scanf_float+0x41c>)
 80073c4:	f000 f89e 	bl	8007504 <nanf>
 80073c8:	ed88 0a00 	vstr	s0, [r8]
 80073cc:	e7cb      	b.n	8007366 <_scanf_float+0x39e>
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 fc19 	bl	8000c08 <__aeabi_d2f>
 80073d6:	f8c8 0000 	str.w	r0, [r8]
 80073da:	e7c4      	b.n	8007366 <_scanf_float+0x39e>
 80073dc:	2500      	movs	r5, #0
 80073de:	e634      	b.n	800704a <_scanf_float+0x82>
 80073e0:	0800b205 	.word	0x0800b205
 80073e4:	0800b667 	.word	0x0800b667

080073e8 <iprintf>:
 80073e8:	b40f      	push	{r0, r1, r2, r3}
 80073ea:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <iprintf+0x2c>)
 80073ec:	b513      	push	{r0, r1, r4, lr}
 80073ee:	681c      	ldr	r4, [r3, #0]
 80073f0:	b124      	cbz	r4, 80073fc <iprintf+0x14>
 80073f2:	69a3      	ldr	r3, [r4, #24]
 80073f4:	b913      	cbnz	r3, 80073fc <iprintf+0x14>
 80073f6:	4620      	mov	r0, r4
 80073f8:	f001 ffbe 	bl	8009378 <__sinit>
 80073fc:	ab05      	add	r3, sp, #20
 80073fe:	9a04      	ldr	r2, [sp, #16]
 8007400:	68a1      	ldr	r1, [r4, #8]
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	4620      	mov	r0, r4
 8007406:	f7ff f845 	bl	8006494 <_vfiprintf_r>
 800740a:	b002      	add	sp, #8
 800740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007410:	b004      	add	sp, #16
 8007412:	4770      	bx	lr
 8007414:	2000000c 	.word	0x2000000c

08007418 <_puts_r>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	460e      	mov	r6, r1
 800741c:	4605      	mov	r5, r0
 800741e:	b118      	cbz	r0, 8007428 <_puts_r+0x10>
 8007420:	6983      	ldr	r3, [r0, #24]
 8007422:	b90b      	cbnz	r3, 8007428 <_puts_r+0x10>
 8007424:	f001 ffa8 	bl	8009378 <__sinit>
 8007428:	69ab      	ldr	r3, [r5, #24]
 800742a:	68ac      	ldr	r4, [r5, #8]
 800742c:	b913      	cbnz	r3, 8007434 <_puts_r+0x1c>
 800742e:	4628      	mov	r0, r5
 8007430:	f001 ffa2 	bl	8009378 <__sinit>
 8007434:	4b2c      	ldr	r3, [pc, #176]	; (80074e8 <_puts_r+0xd0>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d120      	bne.n	800747c <_puts_r+0x64>
 800743a:	686c      	ldr	r4, [r5, #4]
 800743c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800743e:	07db      	lsls	r3, r3, #31
 8007440:	d405      	bmi.n	800744e <_puts_r+0x36>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	0598      	lsls	r0, r3, #22
 8007446:	d402      	bmi.n	800744e <_puts_r+0x36>
 8007448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800744a:	f7fe fff0 	bl	800642e <__retarget_lock_acquire_recursive>
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	0719      	lsls	r1, r3, #28
 8007452:	d51d      	bpl.n	8007490 <_puts_r+0x78>
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	b1db      	cbz	r3, 8007490 <_puts_r+0x78>
 8007458:	3e01      	subs	r6, #1
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007460:	3b01      	subs	r3, #1
 8007462:	60a3      	str	r3, [r4, #8]
 8007464:	bb39      	cbnz	r1, 80074b6 <_puts_r+0x9e>
 8007466:	2b00      	cmp	r3, #0
 8007468:	da38      	bge.n	80074dc <_puts_r+0xc4>
 800746a:	4622      	mov	r2, r4
 800746c:	210a      	movs	r1, #10
 800746e:	4628      	mov	r0, r5
 8007470:	f000 ff1a 	bl	80082a8 <__swbuf_r>
 8007474:	3001      	adds	r0, #1
 8007476:	d011      	beq.n	800749c <_puts_r+0x84>
 8007478:	250a      	movs	r5, #10
 800747a:	e011      	b.n	80074a0 <_puts_r+0x88>
 800747c:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <_puts_r+0xd4>)
 800747e:	429c      	cmp	r4, r3
 8007480:	d101      	bne.n	8007486 <_puts_r+0x6e>
 8007482:	68ac      	ldr	r4, [r5, #8]
 8007484:	e7da      	b.n	800743c <_puts_r+0x24>
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <_puts_r+0xd8>)
 8007488:	429c      	cmp	r4, r3
 800748a:	bf08      	it	eq
 800748c:	68ec      	ldreq	r4, [r5, #12]
 800748e:	e7d5      	b.n	800743c <_puts_r+0x24>
 8007490:	4621      	mov	r1, r4
 8007492:	4628      	mov	r0, r5
 8007494:	f000 ff6c 	bl	8008370 <__swsetup_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	d0dd      	beq.n	8007458 <_puts_r+0x40>
 800749c:	f04f 35ff 	mov.w	r5, #4294967295
 80074a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074a2:	07da      	lsls	r2, r3, #31
 80074a4:	d405      	bmi.n	80074b2 <_puts_r+0x9a>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	059b      	lsls	r3, r3, #22
 80074aa:	d402      	bmi.n	80074b2 <_puts_r+0x9a>
 80074ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ae:	f7fe ffbf 	bl	8006430 <__retarget_lock_release_recursive>
 80074b2:	4628      	mov	r0, r5
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da04      	bge.n	80074c4 <_puts_r+0xac>
 80074ba:	69a2      	ldr	r2, [r4, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	dc06      	bgt.n	80074ce <_puts_r+0xb6>
 80074c0:	290a      	cmp	r1, #10
 80074c2:	d004      	beq.n	80074ce <_puts_r+0xb6>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	6022      	str	r2, [r4, #0]
 80074ca:	7019      	strb	r1, [r3, #0]
 80074cc:	e7c5      	b.n	800745a <_puts_r+0x42>
 80074ce:	4622      	mov	r2, r4
 80074d0:	4628      	mov	r0, r5
 80074d2:	f000 fee9 	bl	80082a8 <__swbuf_r>
 80074d6:	3001      	adds	r0, #1
 80074d8:	d1bf      	bne.n	800745a <_puts_r+0x42>
 80074da:	e7df      	b.n	800749c <_puts_r+0x84>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	250a      	movs	r5, #10
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	701d      	strb	r5, [r3, #0]
 80074e6:	e7db      	b.n	80074a0 <_puts_r+0x88>
 80074e8:	0800b414 	.word	0x0800b414
 80074ec:	0800b434 	.word	0x0800b434
 80074f0:	0800b3f4 	.word	0x0800b3f4

080074f4 <puts>:
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <puts+0xc>)
 80074f6:	4601      	mov	r1, r0
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	f7ff bf8d 	b.w	8007418 <_puts_r>
 80074fe:	bf00      	nop
 8007500:	2000000c 	.word	0x2000000c

08007504 <nanf>:
 8007504:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800750c <nanf+0x8>
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	7fc00000 	.word	0x7fc00000

08007510 <siprintf>:
 8007510:	b40e      	push	{r1, r2, r3}
 8007512:	b500      	push	{lr}
 8007514:	b09c      	sub	sp, #112	; 0x70
 8007516:	ab1d      	add	r3, sp, #116	; 0x74
 8007518:	9002      	str	r0, [sp, #8]
 800751a:	9006      	str	r0, [sp, #24]
 800751c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007520:	4809      	ldr	r0, [pc, #36]	; (8007548 <siprintf+0x38>)
 8007522:	9107      	str	r1, [sp, #28]
 8007524:	9104      	str	r1, [sp, #16]
 8007526:	4909      	ldr	r1, [pc, #36]	; (800754c <siprintf+0x3c>)
 8007528:	f853 2b04 	ldr.w	r2, [r3], #4
 800752c:	9105      	str	r1, [sp, #20]
 800752e:	6800      	ldr	r0, [r0, #0]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	a902      	add	r1, sp, #8
 8007534:	f003 fa1a 	bl	800a96c <_svfiprintf_r>
 8007538:	9b02      	ldr	r3, [sp, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
 800753e:	b01c      	add	sp, #112	; 0x70
 8007540:	f85d eb04 	ldr.w	lr, [sp], #4
 8007544:	b003      	add	sp, #12
 8007546:	4770      	bx	lr
 8007548:	2000000c 	.word	0x2000000c
 800754c:	ffff0208 	.word	0xffff0208

08007550 <sulp>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	4604      	mov	r4, r0
 8007554:	460d      	mov	r5, r1
 8007556:	ec45 4b10 	vmov	d0, r4, r5
 800755a:	4616      	mov	r6, r2
 800755c:	f002 ff36 	bl	800a3cc <__ulp>
 8007560:	ec51 0b10 	vmov	r0, r1, d0
 8007564:	b17e      	cbz	r6, 8007586 <sulp+0x36>
 8007566:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800756a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800756e:	2b00      	cmp	r3, #0
 8007570:	dd09      	ble.n	8007586 <sulp+0x36>
 8007572:	051b      	lsls	r3, r3, #20
 8007574:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007578:	2400      	movs	r4, #0
 800757a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800757e:	4622      	mov	r2, r4
 8007580:	462b      	mov	r3, r5
 8007582:	f7f9 f849 	bl	8000618 <__aeabi_dmul>
 8007586:	bd70      	pop	{r4, r5, r6, pc}

08007588 <_strtod_l>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	ed2d 8b02 	vpush	{d8}
 8007590:	b09d      	sub	sp, #116	; 0x74
 8007592:	461f      	mov	r7, r3
 8007594:	2300      	movs	r3, #0
 8007596:	9318      	str	r3, [sp, #96]	; 0x60
 8007598:	4ba2      	ldr	r3, [pc, #648]	; (8007824 <_strtod_l+0x29c>)
 800759a:	9213      	str	r2, [sp, #76]	; 0x4c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	9305      	str	r3, [sp, #20]
 80075a0:	4604      	mov	r4, r0
 80075a2:	4618      	mov	r0, r3
 80075a4:	4688      	mov	r8, r1
 80075a6:	f7f8 fe23 	bl	80001f0 <strlen>
 80075aa:	f04f 0a00 	mov.w	sl, #0
 80075ae:	4605      	mov	r5, r0
 80075b0:	f04f 0b00 	mov.w	fp, #0
 80075b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80075b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ba:	781a      	ldrb	r2, [r3, #0]
 80075bc:	2a2b      	cmp	r2, #43	; 0x2b
 80075be:	d04e      	beq.n	800765e <_strtod_l+0xd6>
 80075c0:	d83b      	bhi.n	800763a <_strtod_l+0xb2>
 80075c2:	2a0d      	cmp	r2, #13
 80075c4:	d834      	bhi.n	8007630 <_strtod_l+0xa8>
 80075c6:	2a08      	cmp	r2, #8
 80075c8:	d834      	bhi.n	8007634 <_strtod_l+0xac>
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	d03e      	beq.n	800764c <_strtod_l+0xc4>
 80075ce:	2300      	movs	r3, #0
 80075d0:	930a      	str	r3, [sp, #40]	; 0x28
 80075d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80075d4:	7833      	ldrb	r3, [r6, #0]
 80075d6:	2b30      	cmp	r3, #48	; 0x30
 80075d8:	f040 80b0 	bne.w	800773c <_strtod_l+0x1b4>
 80075dc:	7873      	ldrb	r3, [r6, #1]
 80075de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075e2:	2b58      	cmp	r3, #88	; 0x58
 80075e4:	d168      	bne.n	80076b8 <_strtod_l+0x130>
 80075e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	ab18      	add	r3, sp, #96	; 0x60
 80075ec:	9702      	str	r7, [sp, #8]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	4a8d      	ldr	r2, [pc, #564]	; (8007828 <_strtod_l+0x2a0>)
 80075f2:	ab19      	add	r3, sp, #100	; 0x64
 80075f4:	a917      	add	r1, sp, #92	; 0x5c
 80075f6:	4620      	mov	r0, r4
 80075f8:	f001 ffc2 	bl	8009580 <__gethex>
 80075fc:	f010 0707 	ands.w	r7, r0, #7
 8007600:	4605      	mov	r5, r0
 8007602:	d005      	beq.n	8007610 <_strtod_l+0x88>
 8007604:	2f06      	cmp	r7, #6
 8007606:	d12c      	bne.n	8007662 <_strtod_l+0xda>
 8007608:	3601      	adds	r6, #1
 800760a:	2300      	movs	r3, #0
 800760c:	9617      	str	r6, [sp, #92]	; 0x5c
 800760e:	930a      	str	r3, [sp, #40]	; 0x28
 8007610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007612:	2b00      	cmp	r3, #0
 8007614:	f040 8590 	bne.w	8008138 <_strtod_l+0xbb0>
 8007618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761a:	b1eb      	cbz	r3, 8007658 <_strtod_l+0xd0>
 800761c:	4652      	mov	r2, sl
 800761e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007622:	ec43 2b10 	vmov	d0, r2, r3
 8007626:	b01d      	add	sp, #116	; 0x74
 8007628:	ecbd 8b02 	vpop	{d8}
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007630:	2a20      	cmp	r2, #32
 8007632:	d1cc      	bne.n	80075ce <_strtod_l+0x46>
 8007634:	3301      	adds	r3, #1
 8007636:	9317      	str	r3, [sp, #92]	; 0x5c
 8007638:	e7be      	b.n	80075b8 <_strtod_l+0x30>
 800763a:	2a2d      	cmp	r2, #45	; 0x2d
 800763c:	d1c7      	bne.n	80075ce <_strtod_l+0x46>
 800763e:	2201      	movs	r2, #1
 8007640:	920a      	str	r2, [sp, #40]	; 0x28
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	9217      	str	r2, [sp, #92]	; 0x5c
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1c2      	bne.n	80075d2 <_strtod_l+0x4a>
 800764c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800764e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007652:	2b00      	cmp	r3, #0
 8007654:	f040 856e 	bne.w	8008134 <_strtod_l+0xbac>
 8007658:	4652      	mov	r2, sl
 800765a:	465b      	mov	r3, fp
 800765c:	e7e1      	b.n	8007622 <_strtod_l+0x9a>
 800765e:	2200      	movs	r2, #0
 8007660:	e7ee      	b.n	8007640 <_strtod_l+0xb8>
 8007662:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007664:	b13a      	cbz	r2, 8007676 <_strtod_l+0xee>
 8007666:	2135      	movs	r1, #53	; 0x35
 8007668:	a81a      	add	r0, sp, #104	; 0x68
 800766a:	f002 ffba 	bl	800a5e2 <__copybits>
 800766e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007670:	4620      	mov	r0, r4
 8007672:	f002 fb79 	bl	8009d68 <_Bfree>
 8007676:	3f01      	subs	r7, #1
 8007678:	2f04      	cmp	r7, #4
 800767a:	d806      	bhi.n	800768a <_strtod_l+0x102>
 800767c:	e8df f007 	tbb	[pc, r7]
 8007680:	1714030a 	.word	0x1714030a
 8007684:	0a          	.byte	0x0a
 8007685:	00          	.byte	0x00
 8007686:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800768a:	0728      	lsls	r0, r5, #28
 800768c:	d5c0      	bpl.n	8007610 <_strtod_l+0x88>
 800768e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007692:	e7bd      	b.n	8007610 <_strtod_l+0x88>
 8007694:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007698:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800769a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800769e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80076a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80076a6:	e7f0      	b.n	800768a <_strtod_l+0x102>
 80076a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800782c <_strtod_l+0x2a4>
 80076ac:	e7ed      	b.n	800768a <_strtod_l+0x102>
 80076ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80076b2:	f04f 3aff 	mov.w	sl, #4294967295
 80076b6:	e7e8      	b.n	800768a <_strtod_l+0x102>
 80076b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b30      	cmp	r3, #48	; 0x30
 80076c2:	d0f9      	beq.n	80076b8 <_strtod_l+0x130>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0a3      	beq.n	8007610 <_strtod_l+0x88>
 80076c8:	2301      	movs	r3, #1
 80076ca:	f04f 0900 	mov.w	r9, #0
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076d2:	9308      	str	r3, [sp, #32]
 80076d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80076d8:	464f      	mov	r7, r9
 80076da:	220a      	movs	r2, #10
 80076dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80076de:	7806      	ldrb	r6, [r0, #0]
 80076e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80076e4:	b2d9      	uxtb	r1, r3
 80076e6:	2909      	cmp	r1, #9
 80076e8:	d92a      	bls.n	8007740 <_strtod_l+0x1b8>
 80076ea:	9905      	ldr	r1, [sp, #20]
 80076ec:	462a      	mov	r2, r5
 80076ee:	f003 fa9a 	bl	800ac26 <strncmp>
 80076f2:	b398      	cbz	r0, 800775c <_strtod_l+0x1d4>
 80076f4:	2000      	movs	r0, #0
 80076f6:	4632      	mov	r2, r6
 80076f8:	463d      	mov	r5, r7
 80076fa:	9005      	str	r0, [sp, #20]
 80076fc:	4603      	mov	r3, r0
 80076fe:	2a65      	cmp	r2, #101	; 0x65
 8007700:	d001      	beq.n	8007706 <_strtod_l+0x17e>
 8007702:	2a45      	cmp	r2, #69	; 0x45
 8007704:	d118      	bne.n	8007738 <_strtod_l+0x1b0>
 8007706:	b91d      	cbnz	r5, 8007710 <_strtod_l+0x188>
 8007708:	9a04      	ldr	r2, [sp, #16]
 800770a:	4302      	orrs	r2, r0
 800770c:	d09e      	beq.n	800764c <_strtod_l+0xc4>
 800770e:	2500      	movs	r5, #0
 8007710:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007714:	f108 0201 	add.w	r2, r8, #1
 8007718:	9217      	str	r2, [sp, #92]	; 0x5c
 800771a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800771e:	2a2b      	cmp	r2, #43	; 0x2b
 8007720:	d075      	beq.n	800780e <_strtod_l+0x286>
 8007722:	2a2d      	cmp	r2, #45	; 0x2d
 8007724:	d07b      	beq.n	800781e <_strtod_l+0x296>
 8007726:	f04f 0c00 	mov.w	ip, #0
 800772a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800772e:	2909      	cmp	r1, #9
 8007730:	f240 8082 	bls.w	8007838 <_strtod_l+0x2b0>
 8007734:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007738:	2600      	movs	r6, #0
 800773a:	e09d      	b.n	8007878 <_strtod_l+0x2f0>
 800773c:	2300      	movs	r3, #0
 800773e:	e7c4      	b.n	80076ca <_strtod_l+0x142>
 8007740:	2f08      	cmp	r7, #8
 8007742:	bfd8      	it	le
 8007744:	9907      	ldrle	r1, [sp, #28]
 8007746:	f100 0001 	add.w	r0, r0, #1
 800774a:	bfda      	itte	le
 800774c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007750:	9307      	strle	r3, [sp, #28]
 8007752:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007756:	3701      	adds	r7, #1
 8007758:	9017      	str	r0, [sp, #92]	; 0x5c
 800775a:	e7bf      	b.n	80076dc <_strtod_l+0x154>
 800775c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800775e:	195a      	adds	r2, r3, r5
 8007760:	9217      	str	r2, [sp, #92]	; 0x5c
 8007762:	5d5a      	ldrb	r2, [r3, r5]
 8007764:	2f00      	cmp	r7, #0
 8007766:	d037      	beq.n	80077d8 <_strtod_l+0x250>
 8007768:	9005      	str	r0, [sp, #20]
 800776a:	463d      	mov	r5, r7
 800776c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007770:	2b09      	cmp	r3, #9
 8007772:	d912      	bls.n	800779a <_strtod_l+0x212>
 8007774:	2301      	movs	r3, #1
 8007776:	e7c2      	b.n	80076fe <_strtod_l+0x176>
 8007778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	9217      	str	r2, [sp, #92]	; 0x5c
 800777e:	785a      	ldrb	r2, [r3, #1]
 8007780:	3001      	adds	r0, #1
 8007782:	2a30      	cmp	r2, #48	; 0x30
 8007784:	d0f8      	beq.n	8007778 <_strtod_l+0x1f0>
 8007786:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800778a:	2b08      	cmp	r3, #8
 800778c:	f200 84d9 	bhi.w	8008142 <_strtod_l+0xbba>
 8007790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007792:	9005      	str	r0, [sp, #20]
 8007794:	2000      	movs	r0, #0
 8007796:	9308      	str	r3, [sp, #32]
 8007798:	4605      	mov	r5, r0
 800779a:	3a30      	subs	r2, #48	; 0x30
 800779c:	f100 0301 	add.w	r3, r0, #1
 80077a0:	d014      	beq.n	80077cc <_strtod_l+0x244>
 80077a2:	9905      	ldr	r1, [sp, #20]
 80077a4:	4419      	add	r1, r3
 80077a6:	9105      	str	r1, [sp, #20]
 80077a8:	462b      	mov	r3, r5
 80077aa:	eb00 0e05 	add.w	lr, r0, r5
 80077ae:	210a      	movs	r1, #10
 80077b0:	4573      	cmp	r3, lr
 80077b2:	d113      	bne.n	80077dc <_strtod_l+0x254>
 80077b4:	182b      	adds	r3, r5, r0
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	f105 0501 	add.w	r5, r5, #1
 80077bc:	4405      	add	r5, r0
 80077be:	dc1c      	bgt.n	80077fa <_strtod_l+0x272>
 80077c0:	9907      	ldr	r1, [sp, #28]
 80077c2:	230a      	movs	r3, #10
 80077c4:	fb03 2301 	mla	r3, r3, r1, r2
 80077c8:	9307      	str	r3, [sp, #28]
 80077ca:	2300      	movs	r3, #0
 80077cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077ce:	1c51      	adds	r1, r2, #1
 80077d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80077d2:	7852      	ldrb	r2, [r2, #1]
 80077d4:	4618      	mov	r0, r3
 80077d6:	e7c9      	b.n	800776c <_strtod_l+0x1e4>
 80077d8:	4638      	mov	r0, r7
 80077da:	e7d2      	b.n	8007782 <_strtod_l+0x1fa>
 80077dc:	2b08      	cmp	r3, #8
 80077de:	dc04      	bgt.n	80077ea <_strtod_l+0x262>
 80077e0:	9e07      	ldr	r6, [sp, #28]
 80077e2:	434e      	muls	r6, r1
 80077e4:	9607      	str	r6, [sp, #28]
 80077e6:	3301      	adds	r3, #1
 80077e8:	e7e2      	b.n	80077b0 <_strtod_l+0x228>
 80077ea:	f103 0c01 	add.w	ip, r3, #1
 80077ee:	f1bc 0f10 	cmp.w	ip, #16
 80077f2:	bfd8      	it	le
 80077f4:	fb01 f909 	mulle.w	r9, r1, r9
 80077f8:	e7f5      	b.n	80077e6 <_strtod_l+0x25e>
 80077fa:	2d10      	cmp	r5, #16
 80077fc:	bfdc      	itt	le
 80077fe:	230a      	movle	r3, #10
 8007800:	fb03 2909 	mlale	r9, r3, r9, r2
 8007804:	e7e1      	b.n	80077ca <_strtod_l+0x242>
 8007806:	2300      	movs	r3, #0
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	2301      	movs	r3, #1
 800780c:	e77c      	b.n	8007708 <_strtod_l+0x180>
 800780e:	f04f 0c00 	mov.w	ip, #0
 8007812:	f108 0202 	add.w	r2, r8, #2
 8007816:	9217      	str	r2, [sp, #92]	; 0x5c
 8007818:	f898 2002 	ldrb.w	r2, [r8, #2]
 800781c:	e785      	b.n	800772a <_strtod_l+0x1a2>
 800781e:	f04f 0c01 	mov.w	ip, #1
 8007822:	e7f6      	b.n	8007812 <_strtod_l+0x28a>
 8007824:	0800b4bc 	.word	0x0800b4bc
 8007828:	0800b20c 	.word	0x0800b20c
 800782c:	7ff00000 	.word	0x7ff00000
 8007830:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007832:	1c51      	adds	r1, r2, #1
 8007834:	9117      	str	r1, [sp, #92]	; 0x5c
 8007836:	7852      	ldrb	r2, [r2, #1]
 8007838:	2a30      	cmp	r2, #48	; 0x30
 800783a:	d0f9      	beq.n	8007830 <_strtod_l+0x2a8>
 800783c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007840:	2908      	cmp	r1, #8
 8007842:	f63f af79 	bhi.w	8007738 <_strtod_l+0x1b0>
 8007846:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800784a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800784c:	9206      	str	r2, [sp, #24]
 800784e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007850:	1c51      	adds	r1, r2, #1
 8007852:	9117      	str	r1, [sp, #92]	; 0x5c
 8007854:	7852      	ldrb	r2, [r2, #1]
 8007856:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800785a:	2e09      	cmp	r6, #9
 800785c:	d937      	bls.n	80078ce <_strtod_l+0x346>
 800785e:	9e06      	ldr	r6, [sp, #24]
 8007860:	1b89      	subs	r1, r1, r6
 8007862:	2908      	cmp	r1, #8
 8007864:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007868:	dc02      	bgt.n	8007870 <_strtod_l+0x2e8>
 800786a:	4576      	cmp	r6, lr
 800786c:	bfa8      	it	ge
 800786e:	4676      	movge	r6, lr
 8007870:	f1bc 0f00 	cmp.w	ip, #0
 8007874:	d000      	beq.n	8007878 <_strtod_l+0x2f0>
 8007876:	4276      	negs	r6, r6
 8007878:	2d00      	cmp	r5, #0
 800787a:	d14d      	bne.n	8007918 <_strtod_l+0x390>
 800787c:	9904      	ldr	r1, [sp, #16]
 800787e:	4301      	orrs	r1, r0
 8007880:	f47f aec6 	bne.w	8007610 <_strtod_l+0x88>
 8007884:	2b00      	cmp	r3, #0
 8007886:	f47f aee1 	bne.w	800764c <_strtod_l+0xc4>
 800788a:	2a69      	cmp	r2, #105	; 0x69
 800788c:	d027      	beq.n	80078de <_strtod_l+0x356>
 800788e:	dc24      	bgt.n	80078da <_strtod_l+0x352>
 8007890:	2a49      	cmp	r2, #73	; 0x49
 8007892:	d024      	beq.n	80078de <_strtod_l+0x356>
 8007894:	2a4e      	cmp	r2, #78	; 0x4e
 8007896:	f47f aed9 	bne.w	800764c <_strtod_l+0xc4>
 800789a:	499f      	ldr	r1, [pc, #636]	; (8007b18 <_strtod_l+0x590>)
 800789c:	a817      	add	r0, sp, #92	; 0x5c
 800789e:	f002 f8c7 	bl	8009a30 <__match>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f43f aed2 	beq.w	800764c <_strtod_l+0xc4>
 80078a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b28      	cmp	r3, #40	; 0x28
 80078ae:	d12d      	bne.n	800790c <_strtod_l+0x384>
 80078b0:	499a      	ldr	r1, [pc, #616]	; (8007b1c <_strtod_l+0x594>)
 80078b2:	aa1a      	add	r2, sp, #104	; 0x68
 80078b4:	a817      	add	r0, sp, #92	; 0x5c
 80078b6:	f002 f8cf 	bl	8009a58 <__hexnan>
 80078ba:	2805      	cmp	r0, #5
 80078bc:	d126      	bne.n	800790c <_strtod_l+0x384>
 80078be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80078c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80078c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80078cc:	e6a0      	b.n	8007610 <_strtod_l+0x88>
 80078ce:	210a      	movs	r1, #10
 80078d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80078d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80078d8:	e7b9      	b.n	800784e <_strtod_l+0x2c6>
 80078da:	2a6e      	cmp	r2, #110	; 0x6e
 80078dc:	e7db      	b.n	8007896 <_strtod_l+0x30e>
 80078de:	4990      	ldr	r1, [pc, #576]	; (8007b20 <_strtod_l+0x598>)
 80078e0:	a817      	add	r0, sp, #92	; 0x5c
 80078e2:	f002 f8a5 	bl	8009a30 <__match>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f43f aeb0 	beq.w	800764c <_strtod_l+0xc4>
 80078ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ee:	498d      	ldr	r1, [pc, #564]	; (8007b24 <_strtod_l+0x59c>)
 80078f0:	3b01      	subs	r3, #1
 80078f2:	a817      	add	r0, sp, #92	; 0x5c
 80078f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80078f6:	f002 f89b 	bl	8009a30 <__match>
 80078fa:	b910      	cbnz	r0, 8007902 <_strtod_l+0x37a>
 80078fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078fe:	3301      	adds	r3, #1
 8007900:	9317      	str	r3, [sp, #92]	; 0x5c
 8007902:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007b34 <_strtod_l+0x5ac>
 8007906:	f04f 0a00 	mov.w	sl, #0
 800790a:	e681      	b.n	8007610 <_strtod_l+0x88>
 800790c:	4886      	ldr	r0, [pc, #536]	; (8007b28 <_strtod_l+0x5a0>)
 800790e:	f003 f92f 	bl	800ab70 <nan>
 8007912:	ec5b ab10 	vmov	sl, fp, d0
 8007916:	e67b      	b.n	8007610 <_strtod_l+0x88>
 8007918:	9b05      	ldr	r3, [sp, #20]
 800791a:	9807      	ldr	r0, [sp, #28]
 800791c:	1af3      	subs	r3, r6, r3
 800791e:	2f00      	cmp	r7, #0
 8007920:	bf08      	it	eq
 8007922:	462f      	moveq	r7, r5
 8007924:	2d10      	cmp	r5, #16
 8007926:	9306      	str	r3, [sp, #24]
 8007928:	46a8      	mov	r8, r5
 800792a:	bfa8      	it	ge
 800792c:	f04f 0810 	movge.w	r8, #16
 8007930:	f7f8 fdf8 	bl	8000524 <__aeabi_ui2d>
 8007934:	2d09      	cmp	r5, #9
 8007936:	4682      	mov	sl, r0
 8007938:	468b      	mov	fp, r1
 800793a:	dd13      	ble.n	8007964 <_strtod_l+0x3dc>
 800793c:	4b7b      	ldr	r3, [pc, #492]	; (8007b2c <_strtod_l+0x5a4>)
 800793e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007942:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007946:	f7f8 fe67 	bl	8000618 <__aeabi_dmul>
 800794a:	4682      	mov	sl, r0
 800794c:	4648      	mov	r0, r9
 800794e:	468b      	mov	fp, r1
 8007950:	f7f8 fde8 	bl	8000524 <__aeabi_ui2d>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4650      	mov	r0, sl
 800795a:	4659      	mov	r1, fp
 800795c:	f7f8 fca6 	bl	80002ac <__adddf3>
 8007960:	4682      	mov	sl, r0
 8007962:	468b      	mov	fp, r1
 8007964:	2d0f      	cmp	r5, #15
 8007966:	dc38      	bgt.n	80079da <_strtod_l+0x452>
 8007968:	9b06      	ldr	r3, [sp, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f43f ae50 	beq.w	8007610 <_strtod_l+0x88>
 8007970:	dd24      	ble.n	80079bc <_strtod_l+0x434>
 8007972:	2b16      	cmp	r3, #22
 8007974:	dc0b      	bgt.n	800798e <_strtod_l+0x406>
 8007976:	496d      	ldr	r1, [pc, #436]	; (8007b2c <_strtod_l+0x5a4>)
 8007978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800797c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007980:	4652      	mov	r2, sl
 8007982:	465b      	mov	r3, fp
 8007984:	f7f8 fe48 	bl	8000618 <__aeabi_dmul>
 8007988:	4682      	mov	sl, r0
 800798a:	468b      	mov	fp, r1
 800798c:	e640      	b.n	8007610 <_strtod_l+0x88>
 800798e:	9a06      	ldr	r2, [sp, #24]
 8007990:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007994:	4293      	cmp	r3, r2
 8007996:	db20      	blt.n	80079da <_strtod_l+0x452>
 8007998:	4c64      	ldr	r4, [pc, #400]	; (8007b2c <_strtod_l+0x5a4>)
 800799a:	f1c5 050f 	rsb	r5, r5, #15
 800799e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80079a2:	4652      	mov	r2, sl
 80079a4:	465b      	mov	r3, fp
 80079a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079aa:	f7f8 fe35 	bl	8000618 <__aeabi_dmul>
 80079ae:	9b06      	ldr	r3, [sp, #24]
 80079b0:	1b5d      	subs	r5, r3, r5
 80079b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80079b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80079ba:	e7e3      	b.n	8007984 <_strtod_l+0x3fc>
 80079bc:	9b06      	ldr	r3, [sp, #24]
 80079be:	3316      	adds	r3, #22
 80079c0:	db0b      	blt.n	80079da <_strtod_l+0x452>
 80079c2:	9b05      	ldr	r3, [sp, #20]
 80079c4:	1b9e      	subs	r6, r3, r6
 80079c6:	4b59      	ldr	r3, [pc, #356]	; (8007b2c <_strtod_l+0x5a4>)
 80079c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80079cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079d0:	4650      	mov	r0, sl
 80079d2:	4659      	mov	r1, fp
 80079d4:	f7f8 ff4a 	bl	800086c <__aeabi_ddiv>
 80079d8:	e7d6      	b.n	8007988 <_strtod_l+0x400>
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	eba5 0808 	sub.w	r8, r5, r8
 80079e0:	4498      	add	r8, r3
 80079e2:	f1b8 0f00 	cmp.w	r8, #0
 80079e6:	dd74      	ble.n	8007ad2 <_strtod_l+0x54a>
 80079e8:	f018 030f 	ands.w	r3, r8, #15
 80079ec:	d00a      	beq.n	8007a04 <_strtod_l+0x47c>
 80079ee:	494f      	ldr	r1, [pc, #316]	; (8007b2c <_strtod_l+0x5a4>)
 80079f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079f4:	4652      	mov	r2, sl
 80079f6:	465b      	mov	r3, fp
 80079f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079fc:	f7f8 fe0c 	bl	8000618 <__aeabi_dmul>
 8007a00:	4682      	mov	sl, r0
 8007a02:	468b      	mov	fp, r1
 8007a04:	f038 080f 	bics.w	r8, r8, #15
 8007a08:	d04f      	beq.n	8007aaa <_strtod_l+0x522>
 8007a0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007a0e:	dd22      	ble.n	8007a56 <_strtod_l+0x4ce>
 8007a10:	2500      	movs	r5, #0
 8007a12:	462e      	mov	r6, r5
 8007a14:	9507      	str	r5, [sp, #28]
 8007a16:	9505      	str	r5, [sp, #20]
 8007a18:	2322      	movs	r3, #34	; 0x22
 8007a1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007b34 <_strtod_l+0x5ac>
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	f04f 0a00 	mov.w	sl, #0
 8007a24:	9b07      	ldr	r3, [sp, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f43f adf2 	beq.w	8007610 <_strtod_l+0x88>
 8007a2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f002 f99a 	bl	8009d68 <_Bfree>
 8007a34:	9905      	ldr	r1, [sp, #20]
 8007a36:	4620      	mov	r0, r4
 8007a38:	f002 f996 	bl	8009d68 <_Bfree>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f002 f992 	bl	8009d68 <_Bfree>
 8007a44:	9907      	ldr	r1, [sp, #28]
 8007a46:	4620      	mov	r0, r4
 8007a48:	f002 f98e 	bl	8009d68 <_Bfree>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f002 f98a 	bl	8009d68 <_Bfree>
 8007a54:	e5dc      	b.n	8007610 <_strtod_l+0x88>
 8007a56:	4b36      	ldr	r3, [pc, #216]	; (8007b30 <_strtod_l+0x5a8>)
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007a60:	4650      	mov	r0, sl
 8007a62:	4659      	mov	r1, fp
 8007a64:	4699      	mov	r9, r3
 8007a66:	f1b8 0f01 	cmp.w	r8, #1
 8007a6a:	dc21      	bgt.n	8007ab0 <_strtod_l+0x528>
 8007a6c:	b10b      	cbz	r3, 8007a72 <_strtod_l+0x4ea>
 8007a6e:	4682      	mov	sl, r0
 8007a70:	468b      	mov	fp, r1
 8007a72:	4b2f      	ldr	r3, [pc, #188]	; (8007b30 <_strtod_l+0x5a8>)
 8007a74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007a78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	465b      	mov	r3, fp
 8007a80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007a84:	f7f8 fdc8 	bl	8000618 <__aeabi_dmul>
 8007a88:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <_strtod_l+0x5ac>)
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	400b      	ands	r3, r1
 8007a8e:	492a      	ldr	r1, [pc, #168]	; (8007b38 <_strtod_l+0x5b0>)
 8007a90:	428b      	cmp	r3, r1
 8007a92:	4682      	mov	sl, r0
 8007a94:	d8bc      	bhi.n	8007a10 <_strtod_l+0x488>
 8007a96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a9a:	428b      	cmp	r3, r1
 8007a9c:	bf86      	itte	hi
 8007a9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007b3c <_strtod_l+0x5b4>
 8007aa2:	f04f 3aff 	movhi.w	sl, #4294967295
 8007aa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	e084      	b.n	8007bba <_strtod_l+0x632>
 8007ab0:	f018 0f01 	tst.w	r8, #1
 8007ab4:	d005      	beq.n	8007ac2 <_strtod_l+0x53a>
 8007ab6:	9b04      	ldr	r3, [sp, #16]
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f8 fdac 	bl	8000618 <__aeabi_dmul>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	9a04      	ldr	r2, [sp, #16]
 8007ac4:	3208      	adds	r2, #8
 8007ac6:	f109 0901 	add.w	r9, r9, #1
 8007aca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ace:	9204      	str	r2, [sp, #16]
 8007ad0:	e7c9      	b.n	8007a66 <_strtod_l+0x4de>
 8007ad2:	d0ea      	beq.n	8007aaa <_strtod_l+0x522>
 8007ad4:	f1c8 0800 	rsb	r8, r8, #0
 8007ad8:	f018 020f 	ands.w	r2, r8, #15
 8007adc:	d00a      	beq.n	8007af4 <_strtod_l+0x56c>
 8007ade:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <_strtod_l+0x5a4>)
 8007ae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	4659      	mov	r1, fp
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f7f8 febe 	bl	800086c <__aeabi_ddiv>
 8007af0:	4682      	mov	sl, r0
 8007af2:	468b      	mov	fp, r1
 8007af4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007af8:	d0d7      	beq.n	8007aaa <_strtod_l+0x522>
 8007afa:	f1b8 0f1f 	cmp.w	r8, #31
 8007afe:	dd1f      	ble.n	8007b40 <_strtod_l+0x5b8>
 8007b00:	2500      	movs	r5, #0
 8007b02:	462e      	mov	r6, r5
 8007b04:	9507      	str	r5, [sp, #28]
 8007b06:	9505      	str	r5, [sp, #20]
 8007b08:	2322      	movs	r3, #34	; 0x22
 8007b0a:	f04f 0a00 	mov.w	sl, #0
 8007b0e:	f04f 0b00 	mov.w	fp, #0
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	e786      	b.n	8007a24 <_strtod_l+0x49c>
 8007b16:	bf00      	nop
 8007b18:	0800b1de 	.word	0x0800b1de
 8007b1c:	0800b220 	.word	0x0800b220
 8007b20:	0800b1d6 	.word	0x0800b1d6
 8007b24:	0800b364 	.word	0x0800b364
 8007b28:	0800b667 	.word	0x0800b667
 8007b2c:	0800b558 	.word	0x0800b558
 8007b30:	0800b530 	.word	0x0800b530
 8007b34:	7ff00000 	.word	0x7ff00000
 8007b38:	7ca00000 	.word	0x7ca00000
 8007b3c:	7fefffff 	.word	0x7fefffff
 8007b40:	f018 0310 	ands.w	r3, r8, #16
 8007b44:	bf18      	it	ne
 8007b46:	236a      	movne	r3, #106	; 0x6a
 8007b48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ef8 <_strtod_l+0x970>
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	4650      	mov	r0, sl
 8007b50:	4659      	mov	r1, fp
 8007b52:	2300      	movs	r3, #0
 8007b54:	f018 0f01 	tst.w	r8, #1
 8007b58:	d004      	beq.n	8007b64 <_strtod_l+0x5dc>
 8007b5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b5e:	f7f8 fd5b 	bl	8000618 <__aeabi_dmul>
 8007b62:	2301      	movs	r3, #1
 8007b64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007b68:	f109 0908 	add.w	r9, r9, #8
 8007b6c:	d1f2      	bne.n	8007b54 <_strtod_l+0x5cc>
 8007b6e:	b10b      	cbz	r3, 8007b74 <_strtod_l+0x5ec>
 8007b70:	4682      	mov	sl, r0
 8007b72:	468b      	mov	fp, r1
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	b1c3      	cbz	r3, 8007baa <_strtod_l+0x622>
 8007b78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	4659      	mov	r1, fp
 8007b84:	dd11      	ble.n	8007baa <_strtod_l+0x622>
 8007b86:	2b1f      	cmp	r3, #31
 8007b88:	f340 8124 	ble.w	8007dd4 <_strtod_l+0x84c>
 8007b8c:	2b34      	cmp	r3, #52	; 0x34
 8007b8e:	bfde      	ittt	le
 8007b90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007b94:	f04f 33ff 	movle.w	r3, #4294967295
 8007b98:	fa03 f202 	lslle.w	r2, r3, r2
 8007b9c:	f04f 0a00 	mov.w	sl, #0
 8007ba0:	bfcc      	ite	gt
 8007ba2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007ba6:	ea02 0b01 	andle.w	fp, r2, r1
 8007baa:	2200      	movs	r2, #0
 8007bac:	2300      	movs	r3, #0
 8007bae:	4650      	mov	r0, sl
 8007bb0:	4659      	mov	r1, fp
 8007bb2:	f7f8 ff99 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d1a2      	bne.n	8007b00 <_strtod_l+0x578>
 8007bba:	9b07      	ldr	r3, [sp, #28]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	9908      	ldr	r1, [sp, #32]
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	463a      	mov	r2, r7
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f002 f937 	bl	8009e38 <__s2b>
 8007bca:	9007      	str	r0, [sp, #28]
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f43f af1f 	beq.w	8007a10 <_strtod_l+0x488>
 8007bd2:	9b05      	ldr	r3, [sp, #20]
 8007bd4:	1b9e      	subs	r6, r3, r6
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bfb4      	ite	lt
 8007bdc:	4633      	movlt	r3, r6
 8007bde:	2300      	movge	r3, #0
 8007be0:	930c      	str	r3, [sp, #48]	; 0x30
 8007be2:	9b06      	ldr	r3, [sp, #24]
 8007be4:	2500      	movs	r5, #0
 8007be6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007bea:	9312      	str	r3, [sp, #72]	; 0x48
 8007bec:	462e      	mov	r6, r5
 8007bee:	9b07      	ldr	r3, [sp, #28]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	6859      	ldr	r1, [r3, #4]
 8007bf4:	f002 f878 	bl	8009ce8 <_Balloc>
 8007bf8:	9005      	str	r0, [sp, #20]
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f43f af0c 	beq.w	8007a18 <_strtod_l+0x490>
 8007c00:	9b07      	ldr	r3, [sp, #28]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	3202      	adds	r2, #2
 8007c06:	f103 010c 	add.w	r1, r3, #12
 8007c0a:	0092      	lsls	r2, r2, #2
 8007c0c:	300c      	adds	r0, #12
 8007c0e:	f002 f843 	bl	8009c98 <memcpy>
 8007c12:	ec4b ab10 	vmov	d0, sl, fp
 8007c16:	aa1a      	add	r2, sp, #104	; 0x68
 8007c18:	a919      	add	r1, sp, #100	; 0x64
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f002 fc52 	bl	800a4c4 <__d2b>
 8007c20:	ec4b ab18 	vmov	d8, sl, fp
 8007c24:	9018      	str	r0, [sp, #96]	; 0x60
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f aef6 	beq.w	8007a18 <_strtod_l+0x490>
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f002 f99c 	bl	8009f6c <__i2b>
 8007c34:	4606      	mov	r6, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f43f aeee 	beq.w	8007a18 <_strtod_l+0x490>
 8007c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c3e:	9904      	ldr	r1, [sp, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bfab      	itete	ge
 8007c44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007c46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007c48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007c4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007c4e:	bfac      	ite	ge
 8007c50:	eb03 0902 	addge.w	r9, r3, r2
 8007c54:	1ad7      	sublt	r7, r2, r3
 8007c56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007c58:	eba3 0801 	sub.w	r8, r3, r1
 8007c5c:	4490      	add	r8, r2
 8007c5e:	4ba1      	ldr	r3, [pc, #644]	; (8007ee4 <_strtod_l+0x95c>)
 8007c60:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c64:	4598      	cmp	r8, r3
 8007c66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c6a:	f280 80c7 	bge.w	8007dfc <_strtod_l+0x874>
 8007c6e:	eba3 0308 	sub.w	r3, r3, r8
 8007c72:	2b1f      	cmp	r3, #31
 8007c74:	eba2 0203 	sub.w	r2, r2, r3
 8007c78:	f04f 0101 	mov.w	r1, #1
 8007c7c:	f300 80b1 	bgt.w	8007de2 <_strtod_l+0x85a>
 8007c80:	fa01 f303 	lsl.w	r3, r1, r3
 8007c84:	930d      	str	r3, [sp, #52]	; 0x34
 8007c86:	2300      	movs	r3, #0
 8007c88:	9308      	str	r3, [sp, #32]
 8007c8a:	eb09 0802 	add.w	r8, r9, r2
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	45c1      	cmp	r9, r8
 8007c92:	4417      	add	r7, r2
 8007c94:	441f      	add	r7, r3
 8007c96:	464b      	mov	r3, r9
 8007c98:	bfa8      	it	ge
 8007c9a:	4643      	movge	r3, r8
 8007c9c:	42bb      	cmp	r3, r7
 8007c9e:	bfa8      	it	ge
 8007ca0:	463b      	movge	r3, r7
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bfc2      	ittt	gt
 8007ca6:	eba8 0803 	subgt.w	r8, r8, r3
 8007caa:	1aff      	subgt	r7, r7, r3
 8007cac:	eba9 0903 	subgt.w	r9, r9, r3
 8007cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dd17      	ble.n	8007ce6 <_strtod_l+0x75e>
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f002 fa16 	bl	800a0ec <__pow5mult>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f43f aea8 	beq.w	8007a18 <_strtod_l+0x490>
 8007cc8:	4601      	mov	r1, r0
 8007cca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f002 f963 	bl	8009f98 <__multiply>
 8007cd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f43f ae9f 	beq.w	8007a18 <_strtod_l+0x490>
 8007cda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f002 f843 	bl	8009d68 <_Bfree>
 8007ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce4:	9318      	str	r3, [sp, #96]	; 0x60
 8007ce6:	f1b8 0f00 	cmp.w	r8, #0
 8007cea:	f300 808c 	bgt.w	8007e06 <_strtod_l+0x87e>
 8007cee:	9b06      	ldr	r3, [sp, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dd08      	ble.n	8007d06 <_strtod_l+0x77e>
 8007cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cf6:	9905      	ldr	r1, [sp, #20]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f002 f9f7 	bl	800a0ec <__pow5mult>
 8007cfe:	9005      	str	r0, [sp, #20]
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f43f ae89 	beq.w	8007a18 <_strtod_l+0x490>
 8007d06:	2f00      	cmp	r7, #0
 8007d08:	dd08      	ble.n	8007d1c <_strtod_l+0x794>
 8007d0a:	9905      	ldr	r1, [sp, #20]
 8007d0c:	463a      	mov	r2, r7
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f002 fa46 	bl	800a1a0 <__lshift>
 8007d14:	9005      	str	r0, [sp, #20]
 8007d16:	2800      	cmp	r0, #0
 8007d18:	f43f ae7e 	beq.w	8007a18 <_strtod_l+0x490>
 8007d1c:	f1b9 0f00 	cmp.w	r9, #0
 8007d20:	dd08      	ble.n	8007d34 <_strtod_l+0x7ac>
 8007d22:	4631      	mov	r1, r6
 8007d24:	464a      	mov	r2, r9
 8007d26:	4620      	mov	r0, r4
 8007d28:	f002 fa3a 	bl	800a1a0 <__lshift>
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f43f ae72 	beq.w	8007a18 <_strtod_l+0x490>
 8007d34:	9a05      	ldr	r2, [sp, #20]
 8007d36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f002 fabd 	bl	800a2b8 <__mdiff>
 8007d3e:	4605      	mov	r5, r0
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f43f ae69 	beq.w	8007a18 <_strtod_l+0x490>
 8007d46:	68c3      	ldr	r3, [r0, #12]
 8007d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60c3      	str	r3, [r0, #12]
 8007d4e:	4631      	mov	r1, r6
 8007d50:	f002 fa96 	bl	800a280 <__mcmp>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	da60      	bge.n	8007e1a <_strtod_l+0x892>
 8007d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5a:	ea53 030a 	orrs.w	r3, r3, sl
 8007d5e:	f040 8082 	bne.w	8007e66 <_strtod_l+0x8de>
 8007d62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d17d      	bne.n	8007e66 <_strtod_l+0x8de>
 8007d6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d6e:	0d1b      	lsrs	r3, r3, #20
 8007d70:	051b      	lsls	r3, r3, #20
 8007d72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007d76:	d976      	bls.n	8007e66 <_strtod_l+0x8de>
 8007d78:	696b      	ldr	r3, [r5, #20]
 8007d7a:	b913      	cbnz	r3, 8007d82 <_strtod_l+0x7fa>
 8007d7c:	692b      	ldr	r3, [r5, #16]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	dd71      	ble.n	8007e66 <_strtod_l+0x8de>
 8007d82:	4629      	mov	r1, r5
 8007d84:	2201      	movs	r2, #1
 8007d86:	4620      	mov	r0, r4
 8007d88:	f002 fa0a 	bl	800a1a0 <__lshift>
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4605      	mov	r5, r0
 8007d90:	f002 fa76 	bl	800a280 <__mcmp>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	dd66      	ble.n	8007e66 <_strtod_l+0x8de>
 8007d98:	9904      	ldr	r1, [sp, #16]
 8007d9a:	4a53      	ldr	r2, [pc, #332]	; (8007ee8 <_strtod_l+0x960>)
 8007d9c:	465b      	mov	r3, fp
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	f000 8081 	beq.w	8007ea6 <_strtod_l+0x91e>
 8007da4:	ea02 010b 	and.w	r1, r2, fp
 8007da8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007dac:	dc7b      	bgt.n	8007ea6 <_strtod_l+0x91e>
 8007dae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007db2:	f77f aea9 	ble.w	8007b08 <_strtod_l+0x580>
 8007db6:	4b4d      	ldr	r3, [pc, #308]	; (8007eec <_strtod_l+0x964>)
 8007db8:	4650      	mov	r0, sl
 8007dba:	4659      	mov	r1, fp
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f7f8 fc2b 	bl	8000618 <__aeabi_dmul>
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4303      	orrs	r3, r0
 8007dc6:	bf08      	it	eq
 8007dc8:	2322      	moveq	r3, #34	; 0x22
 8007dca:	4682      	mov	sl, r0
 8007dcc:	468b      	mov	fp, r1
 8007dce:	bf08      	it	eq
 8007dd0:	6023      	streq	r3, [r4, #0]
 8007dd2:	e62b      	b.n	8007a2c <_strtod_l+0x4a4>
 8007dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	ea03 0a0a 	and.w	sl, r3, sl
 8007de0:	e6e3      	b.n	8007baa <_strtod_l+0x622>
 8007de2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007de6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007dea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007dee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007df2:	fa01 f308 	lsl.w	r3, r1, r8
 8007df6:	9308      	str	r3, [sp, #32]
 8007df8:	910d      	str	r1, [sp, #52]	; 0x34
 8007dfa:	e746      	b.n	8007c8a <_strtod_l+0x702>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9308      	str	r3, [sp, #32]
 8007e00:	2301      	movs	r3, #1
 8007e02:	930d      	str	r3, [sp, #52]	; 0x34
 8007e04:	e741      	b.n	8007c8a <_strtod_l+0x702>
 8007e06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e08:	4642      	mov	r2, r8
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f002 f9c8 	bl	800a1a0 <__lshift>
 8007e10:	9018      	str	r0, [sp, #96]	; 0x60
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f47f af6b 	bne.w	8007cee <_strtod_l+0x766>
 8007e18:	e5fe      	b.n	8007a18 <_strtod_l+0x490>
 8007e1a:	465f      	mov	r7, fp
 8007e1c:	d16e      	bne.n	8007efc <_strtod_l+0x974>
 8007e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e24:	b342      	cbz	r2, 8007e78 <_strtod_l+0x8f0>
 8007e26:	4a32      	ldr	r2, [pc, #200]	; (8007ef0 <_strtod_l+0x968>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d128      	bne.n	8007e7e <_strtod_l+0x8f6>
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	4651      	mov	r1, sl
 8007e30:	b1eb      	cbz	r3, 8007e6e <_strtod_l+0x8e6>
 8007e32:	4b2d      	ldr	r3, [pc, #180]	; (8007ee8 <_strtod_l+0x960>)
 8007e34:	403b      	ands	r3, r7
 8007e36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	d819      	bhi.n	8007e74 <_strtod_l+0x8ec>
 8007e40:	0d1b      	lsrs	r3, r3, #20
 8007e42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	4299      	cmp	r1, r3
 8007e4c:	d117      	bne.n	8007e7e <_strtod_l+0x8f6>
 8007e4e:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <_strtod_l+0x96c>)
 8007e50:	429f      	cmp	r7, r3
 8007e52:	d102      	bne.n	8007e5a <_strtod_l+0x8d2>
 8007e54:	3101      	adds	r1, #1
 8007e56:	f43f addf 	beq.w	8007a18 <_strtod_l+0x490>
 8007e5a:	4b23      	ldr	r3, [pc, #140]	; (8007ee8 <_strtod_l+0x960>)
 8007e5c:	403b      	ands	r3, r7
 8007e5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007e62:	f04f 0a00 	mov.w	sl, #0
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1a4      	bne.n	8007db6 <_strtod_l+0x82e>
 8007e6c:	e5de      	b.n	8007a2c <_strtod_l+0x4a4>
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	e7ea      	b.n	8007e4a <_strtod_l+0x8c2>
 8007e74:	4613      	mov	r3, r2
 8007e76:	e7e8      	b.n	8007e4a <_strtod_l+0x8c2>
 8007e78:	ea53 030a 	orrs.w	r3, r3, sl
 8007e7c:	d08c      	beq.n	8007d98 <_strtod_l+0x810>
 8007e7e:	9b08      	ldr	r3, [sp, #32]
 8007e80:	b1db      	cbz	r3, 8007eba <_strtod_l+0x932>
 8007e82:	423b      	tst	r3, r7
 8007e84:	d0ef      	beq.n	8007e66 <_strtod_l+0x8de>
 8007e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e88:	9a04      	ldr	r2, [sp, #16]
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	b1c3      	cbz	r3, 8007ec2 <_strtod_l+0x93a>
 8007e90:	f7ff fb5e 	bl	8007550 <sulp>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	ec51 0b18 	vmov	r0, r1, d8
 8007e9c:	f7f8 fa06 	bl	80002ac <__adddf3>
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	e7df      	b.n	8007e66 <_strtod_l+0x8de>
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007eac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007eb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007eb4:	f04f 3aff 	mov.w	sl, #4294967295
 8007eb8:	e7d5      	b.n	8007e66 <_strtod_l+0x8de>
 8007eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ebc:	ea13 0f0a 	tst.w	r3, sl
 8007ec0:	e7e0      	b.n	8007e84 <_strtod_l+0x8fc>
 8007ec2:	f7ff fb45 	bl	8007550 <sulp>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	460b      	mov	r3, r1
 8007eca:	ec51 0b18 	vmov	r0, r1, d8
 8007ece:	f7f8 f9eb 	bl	80002a8 <__aeabi_dsub>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4682      	mov	sl, r0
 8007ed8:	468b      	mov	fp, r1
 8007eda:	f7f8 fe05 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d0c1      	beq.n	8007e66 <_strtod_l+0x8de>
 8007ee2:	e611      	b.n	8007b08 <_strtod_l+0x580>
 8007ee4:	fffffc02 	.word	0xfffffc02
 8007ee8:	7ff00000 	.word	0x7ff00000
 8007eec:	39500000 	.word	0x39500000
 8007ef0:	000fffff 	.word	0x000fffff
 8007ef4:	7fefffff 	.word	0x7fefffff
 8007ef8:	0800b238 	.word	0x0800b238
 8007efc:	4631      	mov	r1, r6
 8007efe:	4628      	mov	r0, r5
 8007f00:	f002 fb3c 	bl	800a57c <__ratio>
 8007f04:	ec59 8b10 	vmov	r8, r9, d0
 8007f08:	ee10 0a10 	vmov	r0, s0
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fdfc 	bl	8000b10 <__aeabi_dcmple>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d07a      	beq.n	8008012 <_strtod_l+0xa8a>
 8007f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d04a      	beq.n	8007fb8 <_strtod_l+0xa30>
 8007f22:	4b95      	ldr	r3, [pc, #596]	; (8008178 <_strtod_l+0xbf0>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008178 <_strtod_l+0xbf0>
 8007f2e:	f04f 0800 	mov.w	r8, #0
 8007f32:	4b92      	ldr	r3, [pc, #584]	; (800817c <_strtod_l+0xbf4>)
 8007f34:	403b      	ands	r3, r7
 8007f36:	930d      	str	r3, [sp, #52]	; 0x34
 8007f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f3a:	4b91      	ldr	r3, [pc, #580]	; (8008180 <_strtod_l+0xbf8>)
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	f040 80b0 	bne.w	80080a2 <_strtod_l+0xb1a>
 8007f42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f46:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007f4a:	ec4b ab10 	vmov	d0, sl, fp
 8007f4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f52:	f002 fa3b 	bl	800a3cc <__ulp>
 8007f56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f5a:	ec53 2b10 	vmov	r2, r3, d0
 8007f5e:	f7f8 fb5b 	bl	8000618 <__aeabi_dmul>
 8007f62:	4652      	mov	r2, sl
 8007f64:	465b      	mov	r3, fp
 8007f66:	f7f8 f9a1 	bl	80002ac <__adddf3>
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4983      	ldr	r1, [pc, #524]	; (800817c <_strtod_l+0xbf4>)
 8007f6e:	4a85      	ldr	r2, [pc, #532]	; (8008184 <_strtod_l+0xbfc>)
 8007f70:	4019      	ands	r1, r3
 8007f72:	4291      	cmp	r1, r2
 8007f74:	4682      	mov	sl, r0
 8007f76:	d960      	bls.n	800803a <_strtod_l+0xab2>
 8007f78:	ee18 3a90 	vmov	r3, s17
 8007f7c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d104      	bne.n	8007f8e <_strtod_l+0xa06>
 8007f84:	ee18 3a10 	vmov	r3, s16
 8007f88:	3301      	adds	r3, #1
 8007f8a:	f43f ad45 	beq.w	8007a18 <_strtod_l+0x490>
 8007f8e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008190 <_strtod_l+0xc08>
 8007f92:	f04f 3aff 	mov.w	sl, #4294967295
 8007f96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f001 fee5 	bl	8009d68 <_Bfree>
 8007f9e:	9905      	ldr	r1, [sp, #20]
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f001 fee1 	bl	8009d68 <_Bfree>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 fedd 	bl	8009d68 <_Bfree>
 8007fae:	4629      	mov	r1, r5
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f001 fed9 	bl	8009d68 <_Bfree>
 8007fb6:	e61a      	b.n	8007bee <_strtod_l+0x666>
 8007fb8:	f1ba 0f00 	cmp.w	sl, #0
 8007fbc:	d11b      	bne.n	8007ff6 <_strtod_l+0xa6e>
 8007fbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fc2:	b9f3      	cbnz	r3, 8008002 <_strtod_l+0xa7a>
 8007fc4:	4b6c      	ldr	r3, [pc, #432]	; (8008178 <_strtod_l+0xbf0>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	4640      	mov	r0, r8
 8007fca:	4649      	mov	r1, r9
 8007fcc:	f7f8 fd96 	bl	8000afc <__aeabi_dcmplt>
 8007fd0:	b9d0      	cbnz	r0, 8008008 <_strtod_l+0xa80>
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	4b6c      	ldr	r3, [pc, #432]	; (8008188 <_strtod_l+0xc00>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7f8 fb1d 	bl	8000618 <__aeabi_dmul>
 8007fde:	4680      	mov	r8, r0
 8007fe0:	4689      	mov	r9, r1
 8007fe2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007fe6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007fea:	9315      	str	r3, [sp, #84]	; 0x54
 8007fec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ff0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ff4:	e79d      	b.n	8007f32 <_strtod_l+0x9aa>
 8007ff6:	f1ba 0f01 	cmp.w	sl, #1
 8007ffa:	d102      	bne.n	8008002 <_strtod_l+0xa7a>
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	f43f ad83 	beq.w	8007b08 <_strtod_l+0x580>
 8008002:	4b62      	ldr	r3, [pc, #392]	; (800818c <_strtod_l+0xc04>)
 8008004:	2200      	movs	r2, #0
 8008006:	e78e      	b.n	8007f26 <_strtod_l+0x99e>
 8008008:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008188 <_strtod_l+0xc00>
 800800c:	f04f 0800 	mov.w	r8, #0
 8008010:	e7e7      	b.n	8007fe2 <_strtod_l+0xa5a>
 8008012:	4b5d      	ldr	r3, [pc, #372]	; (8008188 <_strtod_l+0xc00>)
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	2200      	movs	r2, #0
 800801a:	f7f8 fafd 	bl	8000618 <__aeabi_dmul>
 800801e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008020:	4680      	mov	r8, r0
 8008022:	4689      	mov	r9, r1
 8008024:	b933      	cbnz	r3, 8008034 <_strtod_l+0xaac>
 8008026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800802a:	900e      	str	r0, [sp, #56]	; 0x38
 800802c:	930f      	str	r3, [sp, #60]	; 0x3c
 800802e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008032:	e7dd      	b.n	8007ff0 <_strtod_l+0xa68>
 8008034:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008038:	e7f9      	b.n	800802e <_strtod_l+0xaa6>
 800803a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800803e:	9b04      	ldr	r3, [sp, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1a8      	bne.n	8007f96 <_strtod_l+0xa0e>
 8008044:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800804a:	0d1b      	lsrs	r3, r3, #20
 800804c:	051b      	lsls	r3, r3, #20
 800804e:	429a      	cmp	r2, r3
 8008050:	d1a1      	bne.n	8007f96 <_strtod_l+0xa0e>
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 fe3f 	bl	8000cd8 <__aeabi_d2lz>
 800805a:	f7f8 faaf 	bl	80005bc <__aeabi_l2d>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 f91f 	bl	80002a8 <__aeabi_dsub>
 800806a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800806c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008070:	ea43 030a 	orr.w	r3, r3, sl
 8008074:	4313      	orrs	r3, r2
 8008076:	4680      	mov	r8, r0
 8008078:	4689      	mov	r9, r1
 800807a:	d055      	beq.n	8008128 <_strtod_l+0xba0>
 800807c:	a336      	add	r3, pc, #216	; (adr r3, 8008158 <_strtod_l+0xbd0>)
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	f7f8 fd3b 	bl	8000afc <__aeabi_dcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	f47f acd0 	bne.w	8007a2c <_strtod_l+0x4a4>
 800808c:	a334      	add	r3, pc, #208	; (adr r3, 8008160 <_strtod_l+0xbd8>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	4640      	mov	r0, r8
 8008094:	4649      	mov	r1, r9
 8008096:	f7f8 fd4f 	bl	8000b38 <__aeabi_dcmpgt>
 800809a:	2800      	cmp	r0, #0
 800809c:	f43f af7b 	beq.w	8007f96 <_strtod_l+0xa0e>
 80080a0:	e4c4      	b.n	8007a2c <_strtod_l+0x4a4>
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	b333      	cbz	r3, 80080f4 <_strtod_l+0xb6c>
 80080a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80080ac:	d822      	bhi.n	80080f4 <_strtod_l+0xb6c>
 80080ae:	a32e      	add	r3, pc, #184	; (adr r3, 8008168 <_strtod_l+0xbe0>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 fd2a 	bl	8000b10 <__aeabi_dcmple>
 80080bc:	b1a0      	cbz	r0, 80080e8 <_strtod_l+0xb60>
 80080be:	4649      	mov	r1, r9
 80080c0:	4640      	mov	r0, r8
 80080c2:	f7f8 fd81 	bl	8000bc8 <__aeabi_d2uiz>
 80080c6:	2801      	cmp	r0, #1
 80080c8:	bf38      	it	cc
 80080ca:	2001      	movcc	r0, #1
 80080cc:	f7f8 fa2a 	bl	8000524 <__aeabi_ui2d>
 80080d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d2:	4680      	mov	r8, r0
 80080d4:	4689      	mov	r9, r1
 80080d6:	bb23      	cbnz	r3, 8008122 <_strtod_l+0xb9a>
 80080d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080dc:	9010      	str	r0, [sp, #64]	; 0x40
 80080de:	9311      	str	r3, [sp, #68]	; 0x44
 80080e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80080e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80080f0:	1a9b      	subs	r3, r3, r2
 80080f2:	9309      	str	r3, [sp, #36]	; 0x24
 80080f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080f8:	eeb0 0a48 	vmov.f32	s0, s16
 80080fc:	eef0 0a68 	vmov.f32	s1, s17
 8008100:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008104:	f002 f962 	bl	800a3cc <__ulp>
 8008108:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800810c:	ec53 2b10 	vmov	r2, r3, d0
 8008110:	f7f8 fa82 	bl	8000618 <__aeabi_dmul>
 8008114:	ec53 2b18 	vmov	r2, r3, d8
 8008118:	f7f8 f8c8 	bl	80002ac <__adddf3>
 800811c:	4682      	mov	sl, r0
 800811e:	468b      	mov	fp, r1
 8008120:	e78d      	b.n	800803e <_strtod_l+0xab6>
 8008122:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008126:	e7db      	b.n	80080e0 <_strtod_l+0xb58>
 8008128:	a311      	add	r3, pc, #68	; (adr r3, 8008170 <_strtod_l+0xbe8>)
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f7f8 fce5 	bl	8000afc <__aeabi_dcmplt>
 8008132:	e7b2      	b.n	800809a <_strtod_l+0xb12>
 8008134:	2300      	movs	r3, #0
 8008136:	930a      	str	r3, [sp, #40]	; 0x28
 8008138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800813a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	f7ff ba6b 	b.w	8007618 <_strtod_l+0x90>
 8008142:	2a65      	cmp	r2, #101	; 0x65
 8008144:	f43f ab5f 	beq.w	8007806 <_strtod_l+0x27e>
 8008148:	2a45      	cmp	r2, #69	; 0x45
 800814a:	f43f ab5c 	beq.w	8007806 <_strtod_l+0x27e>
 800814e:	2301      	movs	r3, #1
 8008150:	f7ff bb94 	b.w	800787c <_strtod_l+0x2f4>
 8008154:	f3af 8000 	nop.w
 8008158:	94a03595 	.word	0x94a03595
 800815c:	3fdfffff 	.word	0x3fdfffff
 8008160:	35afe535 	.word	0x35afe535
 8008164:	3fe00000 	.word	0x3fe00000
 8008168:	ffc00000 	.word	0xffc00000
 800816c:	41dfffff 	.word	0x41dfffff
 8008170:	94a03595 	.word	0x94a03595
 8008174:	3fcfffff 	.word	0x3fcfffff
 8008178:	3ff00000 	.word	0x3ff00000
 800817c:	7ff00000 	.word	0x7ff00000
 8008180:	7fe00000 	.word	0x7fe00000
 8008184:	7c9fffff 	.word	0x7c9fffff
 8008188:	3fe00000 	.word	0x3fe00000
 800818c:	bff00000 	.word	0xbff00000
 8008190:	7fefffff 	.word	0x7fefffff

08008194 <_strtod_r>:
 8008194:	4b01      	ldr	r3, [pc, #4]	; (800819c <_strtod_r+0x8>)
 8008196:	f7ff b9f7 	b.w	8007588 <_strtod_l>
 800819a:	bf00      	nop
 800819c:	20000074 	.word	0x20000074

080081a0 <_strtol_l.constprop.0>:
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a6:	d001      	beq.n	80081ac <_strtol_l.constprop.0+0xc>
 80081a8:	2b24      	cmp	r3, #36	; 0x24
 80081aa:	d906      	bls.n	80081ba <_strtol_l.constprop.0+0x1a>
 80081ac:	f7fe f902 	bl	80063b4 <__errno>
 80081b0:	2316      	movs	r3, #22
 80081b2:	6003      	str	r3, [r0, #0]
 80081b4:	2000      	movs	r0, #0
 80081b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80082a0 <_strtol_l.constprop.0+0x100>
 80081be:	460d      	mov	r5, r1
 80081c0:	462e      	mov	r6, r5
 80081c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80081ca:	f017 0708 	ands.w	r7, r7, #8
 80081ce:	d1f7      	bne.n	80081c0 <_strtol_l.constprop.0+0x20>
 80081d0:	2c2d      	cmp	r4, #45	; 0x2d
 80081d2:	d132      	bne.n	800823a <_strtol_l.constprop.0+0x9a>
 80081d4:	782c      	ldrb	r4, [r5, #0]
 80081d6:	2701      	movs	r7, #1
 80081d8:	1cb5      	adds	r5, r6, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d05b      	beq.n	8008296 <_strtol_l.constprop.0+0xf6>
 80081de:	2b10      	cmp	r3, #16
 80081e0:	d109      	bne.n	80081f6 <_strtol_l.constprop.0+0x56>
 80081e2:	2c30      	cmp	r4, #48	; 0x30
 80081e4:	d107      	bne.n	80081f6 <_strtol_l.constprop.0+0x56>
 80081e6:	782c      	ldrb	r4, [r5, #0]
 80081e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80081ec:	2c58      	cmp	r4, #88	; 0x58
 80081ee:	d14d      	bne.n	800828c <_strtol_l.constprop.0+0xec>
 80081f0:	786c      	ldrb	r4, [r5, #1]
 80081f2:	2310      	movs	r3, #16
 80081f4:	3502      	adds	r5, #2
 80081f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80081fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80081fe:	f04f 0c00 	mov.w	ip, #0
 8008202:	fbb8 f9f3 	udiv	r9, r8, r3
 8008206:	4666      	mov	r6, ip
 8008208:	fb03 8a19 	mls	sl, r3, r9, r8
 800820c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008210:	f1be 0f09 	cmp.w	lr, #9
 8008214:	d816      	bhi.n	8008244 <_strtol_l.constprop.0+0xa4>
 8008216:	4674      	mov	r4, lr
 8008218:	42a3      	cmp	r3, r4
 800821a:	dd24      	ble.n	8008266 <_strtol_l.constprop.0+0xc6>
 800821c:	f1bc 0f00 	cmp.w	ip, #0
 8008220:	db1e      	blt.n	8008260 <_strtol_l.constprop.0+0xc0>
 8008222:	45b1      	cmp	r9, r6
 8008224:	d31c      	bcc.n	8008260 <_strtol_l.constprop.0+0xc0>
 8008226:	d101      	bne.n	800822c <_strtol_l.constprop.0+0x8c>
 8008228:	45a2      	cmp	sl, r4
 800822a:	db19      	blt.n	8008260 <_strtol_l.constprop.0+0xc0>
 800822c:	fb06 4603 	mla	r6, r6, r3, r4
 8008230:	f04f 0c01 	mov.w	ip, #1
 8008234:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008238:	e7e8      	b.n	800820c <_strtol_l.constprop.0+0x6c>
 800823a:	2c2b      	cmp	r4, #43	; 0x2b
 800823c:	bf04      	itt	eq
 800823e:	782c      	ldrbeq	r4, [r5, #0]
 8008240:	1cb5      	addeq	r5, r6, #2
 8008242:	e7ca      	b.n	80081da <_strtol_l.constprop.0+0x3a>
 8008244:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008248:	f1be 0f19 	cmp.w	lr, #25
 800824c:	d801      	bhi.n	8008252 <_strtol_l.constprop.0+0xb2>
 800824e:	3c37      	subs	r4, #55	; 0x37
 8008250:	e7e2      	b.n	8008218 <_strtol_l.constprop.0+0x78>
 8008252:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008256:	f1be 0f19 	cmp.w	lr, #25
 800825a:	d804      	bhi.n	8008266 <_strtol_l.constprop.0+0xc6>
 800825c:	3c57      	subs	r4, #87	; 0x57
 800825e:	e7db      	b.n	8008218 <_strtol_l.constprop.0+0x78>
 8008260:	f04f 3cff 	mov.w	ip, #4294967295
 8008264:	e7e6      	b.n	8008234 <_strtol_l.constprop.0+0x94>
 8008266:	f1bc 0f00 	cmp.w	ip, #0
 800826a:	da05      	bge.n	8008278 <_strtol_l.constprop.0+0xd8>
 800826c:	2322      	movs	r3, #34	; 0x22
 800826e:	6003      	str	r3, [r0, #0]
 8008270:	4646      	mov	r6, r8
 8008272:	b942      	cbnz	r2, 8008286 <_strtol_l.constprop.0+0xe6>
 8008274:	4630      	mov	r0, r6
 8008276:	e79e      	b.n	80081b6 <_strtol_l.constprop.0+0x16>
 8008278:	b107      	cbz	r7, 800827c <_strtol_l.constprop.0+0xdc>
 800827a:	4276      	negs	r6, r6
 800827c:	2a00      	cmp	r2, #0
 800827e:	d0f9      	beq.n	8008274 <_strtol_l.constprop.0+0xd4>
 8008280:	f1bc 0f00 	cmp.w	ip, #0
 8008284:	d000      	beq.n	8008288 <_strtol_l.constprop.0+0xe8>
 8008286:	1e69      	subs	r1, r5, #1
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	e7f3      	b.n	8008274 <_strtol_l.constprop.0+0xd4>
 800828c:	2430      	movs	r4, #48	; 0x30
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1b1      	bne.n	80081f6 <_strtol_l.constprop.0+0x56>
 8008292:	2308      	movs	r3, #8
 8008294:	e7af      	b.n	80081f6 <_strtol_l.constprop.0+0x56>
 8008296:	2c30      	cmp	r4, #48	; 0x30
 8008298:	d0a5      	beq.n	80081e6 <_strtol_l.constprop.0+0x46>
 800829a:	230a      	movs	r3, #10
 800829c:	e7ab      	b.n	80081f6 <_strtol_l.constprop.0+0x56>
 800829e:	bf00      	nop
 80082a0:	0800b261 	.word	0x0800b261

080082a4 <_strtol_r>:
 80082a4:	f7ff bf7c 	b.w	80081a0 <_strtol_l.constprop.0>

080082a8 <__swbuf_r>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	460e      	mov	r6, r1
 80082ac:	4614      	mov	r4, r2
 80082ae:	4605      	mov	r5, r0
 80082b0:	b118      	cbz	r0, 80082ba <__swbuf_r+0x12>
 80082b2:	6983      	ldr	r3, [r0, #24]
 80082b4:	b90b      	cbnz	r3, 80082ba <__swbuf_r+0x12>
 80082b6:	f001 f85f 	bl	8009378 <__sinit>
 80082ba:	4b21      	ldr	r3, [pc, #132]	; (8008340 <__swbuf_r+0x98>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	d12b      	bne.n	8008318 <__swbuf_r+0x70>
 80082c0:	686c      	ldr	r4, [r5, #4]
 80082c2:	69a3      	ldr	r3, [r4, #24]
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	071a      	lsls	r2, r3, #28
 80082ca:	d52f      	bpl.n	800832c <__swbuf_r+0x84>
 80082cc:	6923      	ldr	r3, [r4, #16]
 80082ce:	b36b      	cbz	r3, 800832c <__swbuf_r+0x84>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	6820      	ldr	r0, [r4, #0]
 80082d4:	1ac0      	subs	r0, r0, r3
 80082d6:	6963      	ldr	r3, [r4, #20]
 80082d8:	b2f6      	uxtb	r6, r6
 80082da:	4283      	cmp	r3, r0
 80082dc:	4637      	mov	r7, r6
 80082de:	dc04      	bgt.n	80082ea <__swbuf_r+0x42>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 ffb4 	bl	8009250 <_fflush_r>
 80082e8:	bb30      	cbnz	r0, 8008338 <__swbuf_r+0x90>
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	60a3      	str	r3, [r4, #8]
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	701e      	strb	r6, [r3, #0]
 80082f8:	6963      	ldr	r3, [r4, #20]
 80082fa:	3001      	adds	r0, #1
 80082fc:	4283      	cmp	r3, r0
 80082fe:	d004      	beq.n	800830a <__swbuf_r+0x62>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	07db      	lsls	r3, r3, #31
 8008304:	d506      	bpl.n	8008314 <__swbuf_r+0x6c>
 8008306:	2e0a      	cmp	r6, #10
 8008308:	d104      	bne.n	8008314 <__swbuf_r+0x6c>
 800830a:	4621      	mov	r1, r4
 800830c:	4628      	mov	r0, r5
 800830e:	f000 ff9f 	bl	8009250 <_fflush_r>
 8008312:	b988      	cbnz	r0, 8008338 <__swbuf_r+0x90>
 8008314:	4638      	mov	r0, r7
 8008316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008318:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <__swbuf_r+0x9c>)
 800831a:	429c      	cmp	r4, r3
 800831c:	d101      	bne.n	8008322 <__swbuf_r+0x7a>
 800831e:	68ac      	ldr	r4, [r5, #8]
 8008320:	e7cf      	b.n	80082c2 <__swbuf_r+0x1a>
 8008322:	4b09      	ldr	r3, [pc, #36]	; (8008348 <__swbuf_r+0xa0>)
 8008324:	429c      	cmp	r4, r3
 8008326:	bf08      	it	eq
 8008328:	68ec      	ldreq	r4, [r5, #12]
 800832a:	e7ca      	b.n	80082c2 <__swbuf_r+0x1a>
 800832c:	4621      	mov	r1, r4
 800832e:	4628      	mov	r0, r5
 8008330:	f000 f81e 	bl	8008370 <__swsetup_r>
 8008334:	2800      	cmp	r0, #0
 8008336:	d0cb      	beq.n	80082d0 <__swbuf_r+0x28>
 8008338:	f04f 37ff 	mov.w	r7, #4294967295
 800833c:	e7ea      	b.n	8008314 <__swbuf_r+0x6c>
 800833e:	bf00      	nop
 8008340:	0800b414 	.word	0x0800b414
 8008344:	0800b434 	.word	0x0800b434
 8008348:	0800b3f4 	.word	0x0800b3f4

0800834c <_write_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d07      	ldr	r5, [pc, #28]	; (800836c <_write_r+0x20>)
 8008350:	4604      	mov	r4, r0
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	2200      	movs	r2, #0
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	f7fd ff42 	bl	80061e4 <_write>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_write_r+0x1e>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_write_r+0x1e>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	200006c8 	.word	0x200006c8

08008370 <__swsetup_r>:
 8008370:	4b32      	ldr	r3, [pc, #200]	; (800843c <__swsetup_r+0xcc>)
 8008372:	b570      	push	{r4, r5, r6, lr}
 8008374:	681d      	ldr	r5, [r3, #0]
 8008376:	4606      	mov	r6, r0
 8008378:	460c      	mov	r4, r1
 800837a:	b125      	cbz	r5, 8008386 <__swsetup_r+0x16>
 800837c:	69ab      	ldr	r3, [r5, #24]
 800837e:	b913      	cbnz	r3, 8008386 <__swsetup_r+0x16>
 8008380:	4628      	mov	r0, r5
 8008382:	f000 fff9 	bl	8009378 <__sinit>
 8008386:	4b2e      	ldr	r3, [pc, #184]	; (8008440 <__swsetup_r+0xd0>)
 8008388:	429c      	cmp	r4, r3
 800838a:	d10f      	bne.n	80083ac <__swsetup_r+0x3c>
 800838c:	686c      	ldr	r4, [r5, #4]
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008394:	0719      	lsls	r1, r3, #28
 8008396:	d42c      	bmi.n	80083f2 <__swsetup_r+0x82>
 8008398:	06dd      	lsls	r5, r3, #27
 800839a:	d411      	bmi.n	80083c0 <__swsetup_r+0x50>
 800839c:	2309      	movs	r3, #9
 800839e:	6033      	str	r3, [r6, #0]
 80083a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	e03e      	b.n	800842a <__swsetup_r+0xba>
 80083ac:	4b25      	ldr	r3, [pc, #148]	; (8008444 <__swsetup_r+0xd4>)
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d101      	bne.n	80083b6 <__swsetup_r+0x46>
 80083b2:	68ac      	ldr	r4, [r5, #8]
 80083b4:	e7eb      	b.n	800838e <__swsetup_r+0x1e>
 80083b6:	4b24      	ldr	r3, [pc, #144]	; (8008448 <__swsetup_r+0xd8>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	bf08      	it	eq
 80083bc:	68ec      	ldreq	r4, [r5, #12]
 80083be:	e7e6      	b.n	800838e <__swsetup_r+0x1e>
 80083c0:	0758      	lsls	r0, r3, #29
 80083c2:	d512      	bpl.n	80083ea <__swsetup_r+0x7a>
 80083c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c6:	b141      	cbz	r1, 80083da <__swsetup_r+0x6a>
 80083c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083cc:	4299      	cmp	r1, r3
 80083ce:	d002      	beq.n	80083d6 <__swsetup_r+0x66>
 80083d0:	4630      	mov	r0, r6
 80083d2:	f002 f961 	bl	800a698 <_free_r>
 80083d6:	2300      	movs	r3, #0
 80083d8:	6363      	str	r3, [r4, #52]	; 0x34
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	2300      	movs	r3, #0
 80083e4:	6063      	str	r3, [r4, #4]
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f043 0308 	orr.w	r3, r3, #8
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	b94b      	cbnz	r3, 800840a <__swsetup_r+0x9a>
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008400:	d003      	beq.n	800840a <__swsetup_r+0x9a>
 8008402:	4621      	mov	r1, r4
 8008404:	4630      	mov	r0, r6
 8008406:	f001 fbed 	bl	8009be4 <__smakebuf_r>
 800840a:	89a0      	ldrh	r0, [r4, #12]
 800840c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008410:	f010 0301 	ands.w	r3, r0, #1
 8008414:	d00a      	beq.n	800842c <__swsetup_r+0xbc>
 8008416:	2300      	movs	r3, #0
 8008418:	60a3      	str	r3, [r4, #8]
 800841a:	6963      	ldr	r3, [r4, #20]
 800841c:	425b      	negs	r3, r3
 800841e:	61a3      	str	r3, [r4, #24]
 8008420:	6923      	ldr	r3, [r4, #16]
 8008422:	b943      	cbnz	r3, 8008436 <__swsetup_r+0xc6>
 8008424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008428:	d1ba      	bne.n	80083a0 <__swsetup_r+0x30>
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	0781      	lsls	r1, r0, #30
 800842e:	bf58      	it	pl
 8008430:	6963      	ldrpl	r3, [r4, #20]
 8008432:	60a3      	str	r3, [r4, #8]
 8008434:	e7f4      	b.n	8008420 <__swsetup_r+0xb0>
 8008436:	2000      	movs	r0, #0
 8008438:	e7f7      	b.n	800842a <__swsetup_r+0xba>
 800843a:	bf00      	nop
 800843c:	2000000c 	.word	0x2000000c
 8008440:	0800b414 	.word	0x0800b414
 8008444:	0800b434 	.word	0x0800b434
 8008448:	0800b3f4 	.word	0x0800b3f4

0800844c <quorem>:
 800844c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	6903      	ldr	r3, [r0, #16]
 8008452:	690c      	ldr	r4, [r1, #16]
 8008454:	42a3      	cmp	r3, r4
 8008456:	4607      	mov	r7, r0
 8008458:	f2c0 8081 	blt.w	800855e <quorem+0x112>
 800845c:	3c01      	subs	r4, #1
 800845e:	f101 0814 	add.w	r8, r1, #20
 8008462:	f100 0514 	add.w	r5, r0, #20
 8008466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008474:	3301      	adds	r3, #1
 8008476:	429a      	cmp	r2, r3
 8008478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800847c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008480:	fbb2 f6f3 	udiv	r6, r2, r3
 8008484:	d331      	bcc.n	80084ea <quorem+0x9e>
 8008486:	f04f 0e00 	mov.w	lr, #0
 800848a:	4640      	mov	r0, r8
 800848c:	46ac      	mov	ip, r5
 800848e:	46f2      	mov	sl, lr
 8008490:	f850 2b04 	ldr.w	r2, [r0], #4
 8008494:	b293      	uxth	r3, r2
 8008496:	fb06 e303 	mla	r3, r6, r3, lr
 800849a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800849e:	b29b      	uxth	r3, r3
 80084a0:	ebaa 0303 	sub.w	r3, sl, r3
 80084a4:	f8dc a000 	ldr.w	sl, [ip]
 80084a8:	0c12      	lsrs	r2, r2, #16
 80084aa:	fa13 f38a 	uxtah	r3, r3, sl
 80084ae:	fb06 e202 	mla	r2, r6, r2, lr
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084ba:	b292      	uxth	r2, r2
 80084bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80084c8:	4581      	cmp	r9, r0
 80084ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084ce:	f84c 3b04 	str.w	r3, [ip], #4
 80084d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084d6:	d2db      	bcs.n	8008490 <quorem+0x44>
 80084d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80084dc:	b92b      	cbnz	r3, 80084ea <quorem+0x9e>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	3b04      	subs	r3, #4
 80084e2:	429d      	cmp	r5, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	d32e      	bcc.n	8008546 <quorem+0xfa>
 80084e8:	613c      	str	r4, [r7, #16]
 80084ea:	4638      	mov	r0, r7
 80084ec:	f001 fec8 	bl	800a280 <__mcmp>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	db24      	blt.n	800853e <quorem+0xf2>
 80084f4:	3601      	adds	r6, #1
 80084f6:	4628      	mov	r0, r5
 80084f8:	f04f 0c00 	mov.w	ip, #0
 80084fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008500:	f8d0 e000 	ldr.w	lr, [r0]
 8008504:	b293      	uxth	r3, r2
 8008506:	ebac 0303 	sub.w	r3, ip, r3
 800850a:	0c12      	lsrs	r2, r2, #16
 800850c:	fa13 f38e 	uxtah	r3, r3, lr
 8008510:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008518:	b29b      	uxth	r3, r3
 800851a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800851e:	45c1      	cmp	r9, r8
 8008520:	f840 3b04 	str.w	r3, [r0], #4
 8008524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008528:	d2e8      	bcs.n	80084fc <quorem+0xb0>
 800852a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800852e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008532:	b922      	cbnz	r2, 800853e <quorem+0xf2>
 8008534:	3b04      	subs	r3, #4
 8008536:	429d      	cmp	r5, r3
 8008538:	461a      	mov	r2, r3
 800853a:	d30a      	bcc.n	8008552 <quorem+0x106>
 800853c:	613c      	str	r4, [r7, #16]
 800853e:	4630      	mov	r0, r6
 8008540:	b003      	add	sp, #12
 8008542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	3b04      	subs	r3, #4
 800854a:	2a00      	cmp	r2, #0
 800854c:	d1cc      	bne.n	80084e8 <quorem+0x9c>
 800854e:	3c01      	subs	r4, #1
 8008550:	e7c7      	b.n	80084e2 <quorem+0x96>
 8008552:	6812      	ldr	r2, [r2, #0]
 8008554:	3b04      	subs	r3, #4
 8008556:	2a00      	cmp	r2, #0
 8008558:	d1f0      	bne.n	800853c <quorem+0xf0>
 800855a:	3c01      	subs	r4, #1
 800855c:	e7eb      	b.n	8008536 <quorem+0xea>
 800855e:	2000      	movs	r0, #0
 8008560:	e7ee      	b.n	8008540 <quorem+0xf4>
 8008562:	0000      	movs	r0, r0
 8008564:	0000      	movs	r0, r0
	...

08008568 <_dtoa_r>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	ed2d 8b04 	vpush	{d8-d9}
 8008570:	ec57 6b10 	vmov	r6, r7, d0
 8008574:	b093      	sub	sp, #76	; 0x4c
 8008576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800857c:	9106      	str	r1, [sp, #24]
 800857e:	ee10 aa10 	vmov	sl, s0
 8008582:	4604      	mov	r4, r0
 8008584:	9209      	str	r2, [sp, #36]	; 0x24
 8008586:	930c      	str	r3, [sp, #48]	; 0x30
 8008588:	46bb      	mov	fp, r7
 800858a:	b975      	cbnz	r5, 80085aa <_dtoa_r+0x42>
 800858c:	2010      	movs	r0, #16
 800858e:	f001 fb69 	bl	8009c64 <malloc>
 8008592:	4602      	mov	r2, r0
 8008594:	6260      	str	r0, [r4, #36]	; 0x24
 8008596:	b920      	cbnz	r0, 80085a2 <_dtoa_r+0x3a>
 8008598:	4ba7      	ldr	r3, [pc, #668]	; (8008838 <_dtoa_r+0x2d0>)
 800859a:	21ea      	movs	r1, #234	; 0xea
 800859c:	48a7      	ldr	r0, [pc, #668]	; (800883c <_dtoa_r+0x2d4>)
 800859e:	f002 fb63 	bl	800ac68 <__assert_func>
 80085a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085a6:	6005      	str	r5, [r0, #0]
 80085a8:	60c5      	str	r5, [r0, #12]
 80085aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	b151      	cbz	r1, 80085c6 <_dtoa_r+0x5e>
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	604a      	str	r2, [r1, #4]
 80085b4:	2301      	movs	r3, #1
 80085b6:	4093      	lsls	r3, r2
 80085b8:	608b      	str	r3, [r1, #8]
 80085ba:	4620      	mov	r0, r4
 80085bc:	f001 fbd4 	bl	8009d68 <_Bfree>
 80085c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	1e3b      	subs	r3, r7, #0
 80085c8:	bfaa      	itet	ge
 80085ca:	2300      	movge	r3, #0
 80085cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80085d0:	f8c8 3000 	strge.w	r3, [r8]
 80085d4:	4b9a      	ldr	r3, [pc, #616]	; (8008840 <_dtoa_r+0x2d8>)
 80085d6:	bfbc      	itt	lt
 80085d8:	2201      	movlt	r2, #1
 80085da:	f8c8 2000 	strlt.w	r2, [r8]
 80085de:	ea33 030b 	bics.w	r3, r3, fp
 80085e2:	d11b      	bne.n	800861c <_dtoa_r+0xb4>
 80085e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085f0:	4333      	orrs	r3, r6
 80085f2:	f000 8592 	beq.w	800911a <_dtoa_r+0xbb2>
 80085f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f8:	b963      	cbnz	r3, 8008614 <_dtoa_r+0xac>
 80085fa:	4b92      	ldr	r3, [pc, #584]	; (8008844 <_dtoa_r+0x2dc>)
 80085fc:	e022      	b.n	8008644 <_dtoa_r+0xdc>
 80085fe:	4b92      	ldr	r3, [pc, #584]	; (8008848 <_dtoa_r+0x2e0>)
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	3308      	adds	r3, #8
 8008604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	9801      	ldr	r0, [sp, #4]
 800860a:	b013      	add	sp, #76	; 0x4c
 800860c:	ecbd 8b04 	vpop	{d8-d9}
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	4b8b      	ldr	r3, [pc, #556]	; (8008844 <_dtoa_r+0x2dc>)
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	3303      	adds	r3, #3
 800861a:	e7f3      	b.n	8008604 <_dtoa_r+0x9c>
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	4650      	mov	r0, sl
 8008622:	4659      	mov	r1, fp
 8008624:	f7f8 fa60 	bl	8000ae8 <__aeabi_dcmpeq>
 8008628:	ec4b ab19 	vmov	d9, sl, fp
 800862c:	4680      	mov	r8, r0
 800862e:	b158      	cbz	r0, 8008648 <_dtoa_r+0xe0>
 8008630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008632:	2301      	movs	r3, #1
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 856b 	beq.w	8009114 <_dtoa_r+0xbac>
 800863e:	4883      	ldr	r0, [pc, #524]	; (800884c <_dtoa_r+0x2e4>)
 8008640:	6018      	str	r0, [r3, #0]
 8008642:	1e43      	subs	r3, r0, #1
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	e7df      	b.n	8008608 <_dtoa_r+0xa0>
 8008648:	ec4b ab10 	vmov	d0, sl, fp
 800864c:	aa10      	add	r2, sp, #64	; 0x40
 800864e:	a911      	add	r1, sp, #68	; 0x44
 8008650:	4620      	mov	r0, r4
 8008652:	f001 ff37 	bl	800a4c4 <__d2b>
 8008656:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800865a:	ee08 0a10 	vmov	s16, r0
 800865e:	2d00      	cmp	r5, #0
 8008660:	f000 8084 	beq.w	800876c <_dtoa_r+0x204>
 8008664:	ee19 3a90 	vmov	r3, s19
 8008668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800866c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008670:	4656      	mov	r6, sl
 8008672:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008676:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800867a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800867e:	4b74      	ldr	r3, [pc, #464]	; (8008850 <_dtoa_r+0x2e8>)
 8008680:	2200      	movs	r2, #0
 8008682:	4630      	mov	r0, r6
 8008684:	4639      	mov	r1, r7
 8008686:	f7f7 fe0f 	bl	80002a8 <__aeabi_dsub>
 800868a:	a365      	add	r3, pc, #404	; (adr r3, 8008820 <_dtoa_r+0x2b8>)
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	f7f7 ffc2 	bl	8000618 <__aeabi_dmul>
 8008694:	a364      	add	r3, pc, #400	; (adr r3, 8008828 <_dtoa_r+0x2c0>)
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f7f7 fe07 	bl	80002ac <__adddf3>
 800869e:	4606      	mov	r6, r0
 80086a0:	4628      	mov	r0, r5
 80086a2:	460f      	mov	r7, r1
 80086a4:	f7f7 ff4e 	bl	8000544 <__aeabi_i2d>
 80086a8:	a361      	add	r3, pc, #388	; (adr r3, 8008830 <_dtoa_r+0x2c8>)
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f7 ffb3 	bl	8000618 <__aeabi_dmul>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4630      	mov	r0, r6
 80086b8:	4639      	mov	r1, r7
 80086ba:	f7f7 fdf7 	bl	80002ac <__adddf3>
 80086be:	4606      	mov	r6, r0
 80086c0:	460f      	mov	r7, r1
 80086c2:	f7f8 fa59 	bl	8000b78 <__aeabi_d2iz>
 80086c6:	2200      	movs	r2, #0
 80086c8:	9000      	str	r0, [sp, #0]
 80086ca:	2300      	movs	r3, #0
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f8 fa14 	bl	8000afc <__aeabi_dcmplt>
 80086d4:	b150      	cbz	r0, 80086ec <_dtoa_r+0x184>
 80086d6:	9800      	ldr	r0, [sp, #0]
 80086d8:	f7f7 ff34 	bl	8000544 <__aeabi_i2d>
 80086dc:	4632      	mov	r2, r6
 80086de:	463b      	mov	r3, r7
 80086e0:	f7f8 fa02 	bl	8000ae8 <__aeabi_dcmpeq>
 80086e4:	b910      	cbnz	r0, 80086ec <_dtoa_r+0x184>
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	9b00      	ldr	r3, [sp, #0]
 80086ee:	2b16      	cmp	r3, #22
 80086f0:	d85a      	bhi.n	80087a8 <_dtoa_r+0x240>
 80086f2:	9a00      	ldr	r2, [sp, #0]
 80086f4:	4b57      	ldr	r3, [pc, #348]	; (8008854 <_dtoa_r+0x2ec>)
 80086f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	ec51 0b19 	vmov	r0, r1, d9
 8008702:	f7f8 f9fb 	bl	8000afc <__aeabi_dcmplt>
 8008706:	2800      	cmp	r0, #0
 8008708:	d050      	beq.n	80087ac <_dtoa_r+0x244>
 800870a:	9b00      	ldr	r3, [sp, #0]
 800870c:	3b01      	subs	r3, #1
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	2300      	movs	r3, #0
 8008712:	930b      	str	r3, [sp, #44]	; 0x2c
 8008714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008716:	1b5d      	subs	r5, r3, r5
 8008718:	1e6b      	subs	r3, r5, #1
 800871a:	9305      	str	r3, [sp, #20]
 800871c:	bf45      	ittet	mi
 800871e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008722:	9304      	strmi	r3, [sp, #16]
 8008724:	2300      	movpl	r3, #0
 8008726:	2300      	movmi	r3, #0
 8008728:	bf4c      	ite	mi
 800872a:	9305      	strmi	r3, [sp, #20]
 800872c:	9304      	strpl	r3, [sp, #16]
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	db3d      	blt.n	80087b0 <_dtoa_r+0x248>
 8008734:	9b05      	ldr	r3, [sp, #20]
 8008736:	9a00      	ldr	r2, [sp, #0]
 8008738:	920a      	str	r2, [sp, #40]	; 0x28
 800873a:	4413      	add	r3, r2
 800873c:	9305      	str	r3, [sp, #20]
 800873e:	2300      	movs	r3, #0
 8008740:	9307      	str	r3, [sp, #28]
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	2b09      	cmp	r3, #9
 8008746:	f200 8089 	bhi.w	800885c <_dtoa_r+0x2f4>
 800874a:	2b05      	cmp	r3, #5
 800874c:	bfc4      	itt	gt
 800874e:	3b04      	subgt	r3, #4
 8008750:	9306      	strgt	r3, [sp, #24]
 8008752:	9b06      	ldr	r3, [sp, #24]
 8008754:	f1a3 0302 	sub.w	r3, r3, #2
 8008758:	bfcc      	ite	gt
 800875a:	2500      	movgt	r5, #0
 800875c:	2501      	movle	r5, #1
 800875e:	2b03      	cmp	r3, #3
 8008760:	f200 8087 	bhi.w	8008872 <_dtoa_r+0x30a>
 8008764:	e8df f003 	tbb	[pc, r3]
 8008768:	59383a2d 	.word	0x59383a2d
 800876c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008770:	441d      	add	r5, r3
 8008772:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008776:	2b20      	cmp	r3, #32
 8008778:	bfc1      	itttt	gt
 800877a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800877e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008782:	fa0b f303 	lslgt.w	r3, fp, r3
 8008786:	fa26 f000 	lsrgt.w	r0, r6, r0
 800878a:	bfda      	itte	le
 800878c:	f1c3 0320 	rsble	r3, r3, #32
 8008790:	fa06 f003 	lslle.w	r0, r6, r3
 8008794:	4318      	orrgt	r0, r3
 8008796:	f7f7 fec5 	bl	8000524 <__aeabi_ui2d>
 800879a:	2301      	movs	r3, #1
 800879c:	4606      	mov	r6, r0
 800879e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80087a2:	3d01      	subs	r5, #1
 80087a4:	930e      	str	r3, [sp, #56]	; 0x38
 80087a6:	e76a      	b.n	800867e <_dtoa_r+0x116>
 80087a8:	2301      	movs	r3, #1
 80087aa:	e7b2      	b.n	8008712 <_dtoa_r+0x1aa>
 80087ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80087ae:	e7b1      	b.n	8008714 <_dtoa_r+0x1ac>
 80087b0:	9b04      	ldr	r3, [sp, #16]
 80087b2:	9a00      	ldr	r2, [sp, #0]
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	4253      	negs	r3, r2
 80087ba:	9307      	str	r3, [sp, #28]
 80087bc:	2300      	movs	r3, #0
 80087be:	930a      	str	r3, [sp, #40]	; 0x28
 80087c0:	e7bf      	b.n	8008742 <_dtoa_r+0x1da>
 80087c2:	2300      	movs	r3, #0
 80087c4:	9308      	str	r3, [sp, #32]
 80087c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dc55      	bgt.n	8008878 <_dtoa_r+0x310>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087d2:	461a      	mov	r2, r3
 80087d4:	9209      	str	r2, [sp, #36]	; 0x24
 80087d6:	e00c      	b.n	80087f2 <_dtoa_r+0x28a>
 80087d8:	2301      	movs	r3, #1
 80087da:	e7f3      	b.n	80087c4 <_dtoa_r+0x25c>
 80087dc:	2300      	movs	r3, #0
 80087de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087e0:	9308      	str	r3, [sp, #32]
 80087e2:	9b00      	ldr	r3, [sp, #0]
 80087e4:	4413      	add	r3, r2
 80087e6:	9302      	str	r3, [sp, #8]
 80087e8:	3301      	adds	r3, #1
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	bfb8      	it	lt
 80087f0:	2301      	movlt	r3, #1
 80087f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087f4:	2200      	movs	r2, #0
 80087f6:	6042      	str	r2, [r0, #4]
 80087f8:	2204      	movs	r2, #4
 80087fa:	f102 0614 	add.w	r6, r2, #20
 80087fe:	429e      	cmp	r6, r3
 8008800:	6841      	ldr	r1, [r0, #4]
 8008802:	d93d      	bls.n	8008880 <_dtoa_r+0x318>
 8008804:	4620      	mov	r0, r4
 8008806:	f001 fa6f 	bl	8009ce8 <_Balloc>
 800880a:	9001      	str	r0, [sp, #4]
 800880c:	2800      	cmp	r0, #0
 800880e:	d13b      	bne.n	8008888 <_dtoa_r+0x320>
 8008810:	4b11      	ldr	r3, [pc, #68]	; (8008858 <_dtoa_r+0x2f0>)
 8008812:	4602      	mov	r2, r0
 8008814:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008818:	e6c0      	b.n	800859c <_dtoa_r+0x34>
 800881a:	2301      	movs	r3, #1
 800881c:	e7df      	b.n	80087de <_dtoa_r+0x276>
 800881e:	bf00      	nop
 8008820:	636f4361 	.word	0x636f4361
 8008824:	3fd287a7 	.word	0x3fd287a7
 8008828:	8b60c8b3 	.word	0x8b60c8b3
 800882c:	3fc68a28 	.word	0x3fc68a28
 8008830:	509f79fb 	.word	0x509f79fb
 8008834:	3fd34413 	.word	0x3fd34413
 8008838:	0800b36e 	.word	0x0800b36e
 800883c:	0800b385 	.word	0x0800b385
 8008840:	7ff00000 	.word	0x7ff00000
 8008844:	0800b36a 	.word	0x0800b36a
 8008848:	0800b361 	.word	0x0800b361
 800884c:	0800b1e2 	.word	0x0800b1e2
 8008850:	3ff80000 	.word	0x3ff80000
 8008854:	0800b558 	.word	0x0800b558
 8008858:	0800b3e0 	.word	0x0800b3e0
 800885c:	2501      	movs	r5, #1
 800885e:	2300      	movs	r3, #0
 8008860:	9306      	str	r3, [sp, #24]
 8008862:	9508      	str	r5, [sp, #32]
 8008864:	f04f 33ff 	mov.w	r3, #4294967295
 8008868:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800886c:	2200      	movs	r2, #0
 800886e:	2312      	movs	r3, #18
 8008870:	e7b0      	b.n	80087d4 <_dtoa_r+0x26c>
 8008872:	2301      	movs	r3, #1
 8008874:	9308      	str	r3, [sp, #32]
 8008876:	e7f5      	b.n	8008864 <_dtoa_r+0x2fc>
 8008878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800887e:	e7b8      	b.n	80087f2 <_dtoa_r+0x28a>
 8008880:	3101      	adds	r1, #1
 8008882:	6041      	str	r1, [r0, #4]
 8008884:	0052      	lsls	r2, r2, #1
 8008886:	e7b8      	b.n	80087fa <_dtoa_r+0x292>
 8008888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800888a:	9a01      	ldr	r2, [sp, #4]
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	9b03      	ldr	r3, [sp, #12]
 8008890:	2b0e      	cmp	r3, #14
 8008892:	f200 809d 	bhi.w	80089d0 <_dtoa_r+0x468>
 8008896:	2d00      	cmp	r5, #0
 8008898:	f000 809a 	beq.w	80089d0 <_dtoa_r+0x468>
 800889c:	9b00      	ldr	r3, [sp, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd32      	ble.n	8008908 <_dtoa_r+0x3a0>
 80088a2:	4ab7      	ldr	r2, [pc, #732]	; (8008b80 <_dtoa_r+0x618>)
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80088ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088b0:	9b00      	ldr	r3, [sp, #0]
 80088b2:	05d8      	lsls	r0, r3, #23
 80088b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80088b8:	d516      	bpl.n	80088e8 <_dtoa_r+0x380>
 80088ba:	4bb2      	ldr	r3, [pc, #712]	; (8008b84 <_dtoa_r+0x61c>)
 80088bc:	ec51 0b19 	vmov	r0, r1, d9
 80088c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088c4:	f7f7 ffd2 	bl	800086c <__aeabi_ddiv>
 80088c8:	f007 070f 	and.w	r7, r7, #15
 80088cc:	4682      	mov	sl, r0
 80088ce:	468b      	mov	fp, r1
 80088d0:	2503      	movs	r5, #3
 80088d2:	4eac      	ldr	r6, [pc, #688]	; (8008b84 <_dtoa_r+0x61c>)
 80088d4:	b957      	cbnz	r7, 80088ec <_dtoa_r+0x384>
 80088d6:	4642      	mov	r2, r8
 80088d8:	464b      	mov	r3, r9
 80088da:	4650      	mov	r0, sl
 80088dc:	4659      	mov	r1, fp
 80088de:	f7f7 ffc5 	bl	800086c <__aeabi_ddiv>
 80088e2:	4682      	mov	sl, r0
 80088e4:	468b      	mov	fp, r1
 80088e6:	e028      	b.n	800893a <_dtoa_r+0x3d2>
 80088e8:	2502      	movs	r5, #2
 80088ea:	e7f2      	b.n	80088d2 <_dtoa_r+0x36a>
 80088ec:	07f9      	lsls	r1, r7, #31
 80088ee:	d508      	bpl.n	8008902 <_dtoa_r+0x39a>
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088f8:	f7f7 fe8e 	bl	8000618 <__aeabi_dmul>
 80088fc:	3501      	adds	r5, #1
 80088fe:	4680      	mov	r8, r0
 8008900:	4689      	mov	r9, r1
 8008902:	107f      	asrs	r7, r7, #1
 8008904:	3608      	adds	r6, #8
 8008906:	e7e5      	b.n	80088d4 <_dtoa_r+0x36c>
 8008908:	f000 809b 	beq.w	8008a42 <_dtoa_r+0x4da>
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	4f9d      	ldr	r7, [pc, #628]	; (8008b84 <_dtoa_r+0x61c>)
 8008910:	425e      	negs	r6, r3
 8008912:	4b9b      	ldr	r3, [pc, #620]	; (8008b80 <_dtoa_r+0x618>)
 8008914:	f006 020f 	and.w	r2, r6, #15
 8008918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	ec51 0b19 	vmov	r0, r1, d9
 8008924:	f7f7 fe78 	bl	8000618 <__aeabi_dmul>
 8008928:	1136      	asrs	r6, r6, #4
 800892a:	4682      	mov	sl, r0
 800892c:	468b      	mov	fp, r1
 800892e:	2300      	movs	r3, #0
 8008930:	2502      	movs	r5, #2
 8008932:	2e00      	cmp	r6, #0
 8008934:	d17a      	bne.n	8008a2c <_dtoa_r+0x4c4>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1d3      	bne.n	80088e2 <_dtoa_r+0x37a>
 800893a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 8082 	beq.w	8008a46 <_dtoa_r+0x4de>
 8008942:	4b91      	ldr	r3, [pc, #580]	; (8008b88 <_dtoa_r+0x620>)
 8008944:	2200      	movs	r2, #0
 8008946:	4650      	mov	r0, sl
 8008948:	4659      	mov	r1, fp
 800894a:	f7f8 f8d7 	bl	8000afc <__aeabi_dcmplt>
 800894e:	2800      	cmp	r0, #0
 8008950:	d079      	beq.n	8008a46 <_dtoa_r+0x4de>
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d076      	beq.n	8008a46 <_dtoa_r+0x4de>
 8008958:	9b02      	ldr	r3, [sp, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	dd36      	ble.n	80089cc <_dtoa_r+0x464>
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	4650      	mov	r0, sl
 8008962:	4659      	mov	r1, fp
 8008964:	1e5f      	subs	r7, r3, #1
 8008966:	2200      	movs	r2, #0
 8008968:	4b88      	ldr	r3, [pc, #544]	; (8008b8c <_dtoa_r+0x624>)
 800896a:	f7f7 fe55 	bl	8000618 <__aeabi_dmul>
 800896e:	9e02      	ldr	r6, [sp, #8]
 8008970:	4682      	mov	sl, r0
 8008972:	468b      	mov	fp, r1
 8008974:	3501      	adds	r5, #1
 8008976:	4628      	mov	r0, r5
 8008978:	f7f7 fde4 	bl	8000544 <__aeabi_i2d>
 800897c:	4652      	mov	r2, sl
 800897e:	465b      	mov	r3, fp
 8008980:	f7f7 fe4a 	bl	8000618 <__aeabi_dmul>
 8008984:	4b82      	ldr	r3, [pc, #520]	; (8008b90 <_dtoa_r+0x628>)
 8008986:	2200      	movs	r2, #0
 8008988:	f7f7 fc90 	bl	80002ac <__adddf3>
 800898c:	46d0      	mov	r8, sl
 800898e:	46d9      	mov	r9, fp
 8008990:	4682      	mov	sl, r0
 8008992:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008996:	2e00      	cmp	r6, #0
 8008998:	d158      	bne.n	8008a4c <_dtoa_r+0x4e4>
 800899a:	4b7e      	ldr	r3, [pc, #504]	; (8008b94 <_dtoa_r+0x62c>)
 800899c:	2200      	movs	r2, #0
 800899e:	4640      	mov	r0, r8
 80089a0:	4649      	mov	r1, r9
 80089a2:	f7f7 fc81 	bl	80002a8 <__aeabi_dsub>
 80089a6:	4652      	mov	r2, sl
 80089a8:	465b      	mov	r3, fp
 80089aa:	4680      	mov	r8, r0
 80089ac:	4689      	mov	r9, r1
 80089ae:	f7f8 f8c3 	bl	8000b38 <__aeabi_dcmpgt>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	f040 8295 	bne.w	8008ee2 <_dtoa_r+0x97a>
 80089b8:	4652      	mov	r2, sl
 80089ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089be:	4640      	mov	r0, r8
 80089c0:	4649      	mov	r1, r9
 80089c2:	f7f8 f89b 	bl	8000afc <__aeabi_dcmplt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f040 8289 	bne.w	8008ede <_dtoa_r+0x976>
 80089cc:	ec5b ab19 	vmov	sl, fp, d9
 80089d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f2c0 8148 	blt.w	8008c68 <_dtoa_r+0x700>
 80089d8:	9a00      	ldr	r2, [sp, #0]
 80089da:	2a0e      	cmp	r2, #14
 80089dc:	f300 8144 	bgt.w	8008c68 <_dtoa_r+0x700>
 80089e0:	4b67      	ldr	r3, [pc, #412]	; (8008b80 <_dtoa_r+0x618>)
 80089e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f280 80d5 	bge.w	8008b9c <_dtoa_r+0x634>
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f300 80d1 	bgt.w	8008b9c <_dtoa_r+0x634>
 80089fa:	f040 826f 	bne.w	8008edc <_dtoa_r+0x974>
 80089fe:	4b65      	ldr	r3, [pc, #404]	; (8008b94 <_dtoa_r+0x62c>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	4640      	mov	r0, r8
 8008a04:	4649      	mov	r1, r9
 8008a06:	f7f7 fe07 	bl	8000618 <__aeabi_dmul>
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	f7f8 f889 	bl	8000b24 <__aeabi_dcmpge>
 8008a12:	9e03      	ldr	r6, [sp, #12]
 8008a14:	4637      	mov	r7, r6
 8008a16:	2800      	cmp	r0, #0
 8008a18:	f040 8245 	bne.w	8008ea6 <_dtoa_r+0x93e>
 8008a1c:	9d01      	ldr	r5, [sp, #4]
 8008a1e:	2331      	movs	r3, #49	; 0x31
 8008a20:	f805 3b01 	strb.w	r3, [r5], #1
 8008a24:	9b00      	ldr	r3, [sp, #0]
 8008a26:	3301      	adds	r3, #1
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	e240      	b.n	8008eae <_dtoa_r+0x946>
 8008a2c:	07f2      	lsls	r2, r6, #31
 8008a2e:	d505      	bpl.n	8008a3c <_dtoa_r+0x4d4>
 8008a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a34:	f7f7 fdf0 	bl	8000618 <__aeabi_dmul>
 8008a38:	3501      	adds	r5, #1
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	1076      	asrs	r6, r6, #1
 8008a3e:	3708      	adds	r7, #8
 8008a40:	e777      	b.n	8008932 <_dtoa_r+0x3ca>
 8008a42:	2502      	movs	r5, #2
 8008a44:	e779      	b.n	800893a <_dtoa_r+0x3d2>
 8008a46:	9f00      	ldr	r7, [sp, #0]
 8008a48:	9e03      	ldr	r6, [sp, #12]
 8008a4a:	e794      	b.n	8008976 <_dtoa_r+0x40e>
 8008a4c:	9901      	ldr	r1, [sp, #4]
 8008a4e:	4b4c      	ldr	r3, [pc, #304]	; (8008b80 <_dtoa_r+0x618>)
 8008a50:	4431      	add	r1, r6
 8008a52:	910d      	str	r1, [sp, #52]	; 0x34
 8008a54:	9908      	ldr	r1, [sp, #32]
 8008a56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a5e:	2900      	cmp	r1, #0
 8008a60:	d043      	beq.n	8008aea <_dtoa_r+0x582>
 8008a62:	494d      	ldr	r1, [pc, #308]	; (8008b98 <_dtoa_r+0x630>)
 8008a64:	2000      	movs	r0, #0
 8008a66:	f7f7 ff01 	bl	800086c <__aeabi_ddiv>
 8008a6a:	4652      	mov	r2, sl
 8008a6c:	465b      	mov	r3, fp
 8008a6e:	f7f7 fc1b 	bl	80002a8 <__aeabi_dsub>
 8008a72:	9d01      	ldr	r5, [sp, #4]
 8008a74:	4682      	mov	sl, r0
 8008a76:	468b      	mov	fp, r1
 8008a78:	4649      	mov	r1, r9
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	f7f8 f87c 	bl	8000b78 <__aeabi_d2iz>
 8008a80:	4606      	mov	r6, r0
 8008a82:	f7f7 fd5f 	bl	8000544 <__aeabi_i2d>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f7 fc0b 	bl	80002a8 <__aeabi_dsub>
 8008a92:	3630      	adds	r6, #48	; 0x30
 8008a94:	f805 6b01 	strb.w	r6, [r5], #1
 8008a98:	4652      	mov	r2, sl
 8008a9a:	465b      	mov	r3, fp
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	4689      	mov	r9, r1
 8008aa0:	f7f8 f82c 	bl	8000afc <__aeabi_dcmplt>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d163      	bne.n	8008b70 <_dtoa_r+0x608>
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	464b      	mov	r3, r9
 8008aac:	4936      	ldr	r1, [pc, #216]	; (8008b88 <_dtoa_r+0x620>)
 8008aae:	2000      	movs	r0, #0
 8008ab0:	f7f7 fbfa 	bl	80002a8 <__aeabi_dsub>
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	465b      	mov	r3, fp
 8008ab8:	f7f8 f820 	bl	8000afc <__aeabi_dcmplt>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f040 80b5 	bne.w	8008c2c <_dtoa_r+0x6c4>
 8008ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac4:	429d      	cmp	r5, r3
 8008ac6:	d081      	beq.n	80089cc <_dtoa_r+0x464>
 8008ac8:	4b30      	ldr	r3, [pc, #192]	; (8008b8c <_dtoa_r+0x624>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f7f7 fda2 	bl	8000618 <__aeabi_dmul>
 8008ad4:	4b2d      	ldr	r3, [pc, #180]	; (8008b8c <_dtoa_r+0x624>)
 8008ad6:	4682      	mov	sl, r0
 8008ad8:	468b      	mov	fp, r1
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f7f7 fd9a 	bl	8000618 <__aeabi_dmul>
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4689      	mov	r9, r1
 8008ae8:	e7c6      	b.n	8008a78 <_dtoa_r+0x510>
 8008aea:	4650      	mov	r0, sl
 8008aec:	4659      	mov	r1, fp
 8008aee:	f7f7 fd93 	bl	8000618 <__aeabi_dmul>
 8008af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008af4:	9d01      	ldr	r5, [sp, #4]
 8008af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008af8:	4682      	mov	sl, r0
 8008afa:	468b      	mov	fp, r1
 8008afc:	4649      	mov	r1, r9
 8008afe:	4640      	mov	r0, r8
 8008b00:	f7f8 f83a 	bl	8000b78 <__aeabi_d2iz>
 8008b04:	4606      	mov	r6, r0
 8008b06:	f7f7 fd1d 	bl	8000544 <__aeabi_i2d>
 8008b0a:	3630      	adds	r6, #48	; 0x30
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4640      	mov	r0, r8
 8008b12:	4649      	mov	r1, r9
 8008b14:	f7f7 fbc8 	bl	80002a8 <__aeabi_dsub>
 8008b18:	f805 6b01 	strb.w	r6, [r5], #1
 8008b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b1e:	429d      	cmp	r5, r3
 8008b20:	4680      	mov	r8, r0
 8008b22:	4689      	mov	r9, r1
 8008b24:	f04f 0200 	mov.w	r2, #0
 8008b28:	d124      	bne.n	8008b74 <_dtoa_r+0x60c>
 8008b2a:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <_dtoa_r+0x630>)
 8008b2c:	4650      	mov	r0, sl
 8008b2e:	4659      	mov	r1, fp
 8008b30:	f7f7 fbbc 	bl	80002ac <__adddf3>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f7f7 fffc 	bl	8000b38 <__aeabi_dcmpgt>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d173      	bne.n	8008c2c <_dtoa_r+0x6c4>
 8008b44:	4652      	mov	r2, sl
 8008b46:	465b      	mov	r3, fp
 8008b48:	4913      	ldr	r1, [pc, #76]	; (8008b98 <_dtoa_r+0x630>)
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	f7f7 fbac 	bl	80002a8 <__aeabi_dsub>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4640      	mov	r0, r8
 8008b56:	4649      	mov	r1, r9
 8008b58:	f7f7 ffd0 	bl	8000afc <__aeabi_dcmplt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f43f af35 	beq.w	80089cc <_dtoa_r+0x464>
 8008b62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b64:	1e6b      	subs	r3, r5, #1
 8008b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b6c:	2b30      	cmp	r3, #48	; 0x30
 8008b6e:	d0f8      	beq.n	8008b62 <_dtoa_r+0x5fa>
 8008b70:	9700      	str	r7, [sp, #0]
 8008b72:	e049      	b.n	8008c08 <_dtoa_r+0x6a0>
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <_dtoa_r+0x624>)
 8008b76:	f7f7 fd4f 	bl	8000618 <__aeabi_dmul>
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	4689      	mov	r9, r1
 8008b7e:	e7bd      	b.n	8008afc <_dtoa_r+0x594>
 8008b80:	0800b558 	.word	0x0800b558
 8008b84:	0800b530 	.word	0x0800b530
 8008b88:	3ff00000 	.word	0x3ff00000
 8008b8c:	40240000 	.word	0x40240000
 8008b90:	401c0000 	.word	0x401c0000
 8008b94:	40140000 	.word	0x40140000
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	9d01      	ldr	r5, [sp, #4]
 8008b9e:	4656      	mov	r6, sl
 8008ba0:	465f      	mov	r7, fp
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	4639      	mov	r1, r7
 8008baa:	f7f7 fe5f 	bl	800086c <__aeabi_ddiv>
 8008bae:	f7f7 ffe3 	bl	8000b78 <__aeabi_d2iz>
 8008bb2:	4682      	mov	sl, r0
 8008bb4:	f7f7 fcc6 	bl	8000544 <__aeabi_i2d>
 8008bb8:	4642      	mov	r2, r8
 8008bba:	464b      	mov	r3, r9
 8008bbc:	f7f7 fd2c 	bl	8000618 <__aeabi_dmul>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008bcc:	f7f7 fb6c 	bl	80002a8 <__aeabi_dsub>
 8008bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8008bd4:	9e01      	ldr	r6, [sp, #4]
 8008bd6:	9f03      	ldr	r7, [sp, #12]
 8008bd8:	1bae      	subs	r6, r5, r6
 8008bda:	42b7      	cmp	r7, r6
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	d135      	bne.n	8008c4e <_dtoa_r+0x6e6>
 8008be2:	f7f7 fb63 	bl	80002ac <__adddf3>
 8008be6:	4642      	mov	r2, r8
 8008be8:	464b      	mov	r3, r9
 8008bea:	4606      	mov	r6, r0
 8008bec:	460f      	mov	r7, r1
 8008bee:	f7f7 ffa3 	bl	8000b38 <__aeabi_dcmpgt>
 8008bf2:	b9d0      	cbnz	r0, 8008c2a <_dtoa_r+0x6c2>
 8008bf4:	4642      	mov	r2, r8
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	f7f7 ff74 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c00:	b110      	cbz	r0, 8008c08 <_dtoa_r+0x6a0>
 8008c02:	f01a 0f01 	tst.w	sl, #1
 8008c06:	d110      	bne.n	8008c2a <_dtoa_r+0x6c2>
 8008c08:	4620      	mov	r0, r4
 8008c0a:	ee18 1a10 	vmov	r1, s16
 8008c0e:	f001 f8ab 	bl	8009d68 <_Bfree>
 8008c12:	2300      	movs	r3, #0
 8008c14:	9800      	ldr	r0, [sp, #0]
 8008c16:	702b      	strb	r3, [r5, #0]
 8008c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	6018      	str	r0, [r3, #0]
 8008c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f43f acf1 	beq.w	8008608 <_dtoa_r+0xa0>
 8008c26:	601d      	str	r5, [r3, #0]
 8008c28:	e4ee      	b.n	8008608 <_dtoa_r+0xa0>
 8008c2a:	9f00      	ldr	r7, [sp, #0]
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	461d      	mov	r5, r3
 8008c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c34:	2a39      	cmp	r2, #57	; 0x39
 8008c36:	d106      	bne.n	8008c46 <_dtoa_r+0x6de>
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d1f7      	bne.n	8008c2e <_dtoa_r+0x6c6>
 8008c3e:	9901      	ldr	r1, [sp, #4]
 8008c40:	2230      	movs	r2, #48	; 0x30
 8008c42:	3701      	adds	r7, #1
 8008c44:	700a      	strb	r2, [r1, #0]
 8008c46:	781a      	ldrb	r2, [r3, #0]
 8008c48:	3201      	adds	r2, #1
 8008c4a:	701a      	strb	r2, [r3, #0]
 8008c4c:	e790      	b.n	8008b70 <_dtoa_r+0x608>
 8008c4e:	4ba6      	ldr	r3, [pc, #664]	; (8008ee8 <_dtoa_r+0x980>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	f7f7 fce1 	bl	8000618 <__aeabi_dmul>
 8008c56:	2200      	movs	r2, #0
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460f      	mov	r7, r1
 8008c5e:	f7f7 ff43 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d09d      	beq.n	8008ba2 <_dtoa_r+0x63a>
 8008c66:	e7cf      	b.n	8008c08 <_dtoa_r+0x6a0>
 8008c68:	9a08      	ldr	r2, [sp, #32]
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	f000 80d7 	beq.w	8008e1e <_dtoa_r+0x8b6>
 8008c70:	9a06      	ldr	r2, [sp, #24]
 8008c72:	2a01      	cmp	r2, #1
 8008c74:	f300 80ba 	bgt.w	8008dec <_dtoa_r+0x884>
 8008c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	f000 80b2 	beq.w	8008de4 <_dtoa_r+0x87c>
 8008c80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c84:	9e07      	ldr	r6, [sp, #28]
 8008c86:	9d04      	ldr	r5, [sp, #16]
 8008c88:	9a04      	ldr	r2, [sp, #16]
 8008c8a:	441a      	add	r2, r3
 8008c8c:	9204      	str	r2, [sp, #16]
 8008c8e:	9a05      	ldr	r2, [sp, #20]
 8008c90:	2101      	movs	r1, #1
 8008c92:	441a      	add	r2, r3
 8008c94:	4620      	mov	r0, r4
 8008c96:	9205      	str	r2, [sp, #20]
 8008c98:	f001 f968 	bl	8009f6c <__i2b>
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	2d00      	cmp	r5, #0
 8008ca0:	dd0c      	ble.n	8008cbc <_dtoa_r+0x754>
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd09      	ble.n	8008cbc <_dtoa_r+0x754>
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	9a04      	ldr	r2, [sp, #16]
 8008cac:	bfa8      	it	ge
 8008cae:	462b      	movge	r3, r5
 8008cb0:	1ad2      	subs	r2, r2, r3
 8008cb2:	9204      	str	r2, [sp, #16]
 8008cb4:	9a05      	ldr	r2, [sp, #20]
 8008cb6:	1aed      	subs	r5, r5, r3
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	b31b      	cbz	r3, 8008d08 <_dtoa_r+0x7a0>
 8008cc0:	9b08      	ldr	r3, [sp, #32]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 80af 	beq.w	8008e26 <_dtoa_r+0x8be>
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	dd13      	ble.n	8008cf4 <_dtoa_r+0x78c>
 8008ccc:	4639      	mov	r1, r7
 8008cce:	4632      	mov	r2, r6
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f001 fa0b 	bl	800a0ec <__pow5mult>
 8008cd6:	ee18 2a10 	vmov	r2, s16
 8008cda:	4601      	mov	r1, r0
 8008cdc:	4607      	mov	r7, r0
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f001 f95a 	bl	8009f98 <__multiply>
 8008ce4:	ee18 1a10 	vmov	r1, s16
 8008ce8:	4680      	mov	r8, r0
 8008cea:	4620      	mov	r0, r4
 8008cec:	f001 f83c 	bl	8009d68 <_Bfree>
 8008cf0:	ee08 8a10 	vmov	s16, r8
 8008cf4:	9b07      	ldr	r3, [sp, #28]
 8008cf6:	1b9a      	subs	r2, r3, r6
 8008cf8:	d006      	beq.n	8008d08 <_dtoa_r+0x7a0>
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f001 f9f4 	bl	800a0ec <__pow5mult>
 8008d04:	ee08 0a10 	vmov	s16, r0
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f001 f92e 	bl	8009f6c <__i2b>
 8008d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	4606      	mov	r6, r0
 8008d16:	f340 8088 	ble.w	8008e2a <_dtoa_r+0x8c2>
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f001 f9e4 	bl	800a0ec <__pow5mult>
 8008d24:	9b06      	ldr	r3, [sp, #24]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	4606      	mov	r6, r0
 8008d2a:	f340 8081 	ble.w	8008e30 <_dtoa_r+0x8c8>
 8008d2e:	f04f 0800 	mov.w	r8, #0
 8008d32:	6933      	ldr	r3, [r6, #16]
 8008d34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d38:	6918      	ldr	r0, [r3, #16]
 8008d3a:	f001 f8c7 	bl	8009ecc <__hi0bits>
 8008d3e:	f1c0 0020 	rsb	r0, r0, #32
 8008d42:	9b05      	ldr	r3, [sp, #20]
 8008d44:	4418      	add	r0, r3
 8008d46:	f010 001f 	ands.w	r0, r0, #31
 8008d4a:	f000 8092 	beq.w	8008e72 <_dtoa_r+0x90a>
 8008d4e:	f1c0 0320 	rsb	r3, r0, #32
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	f340 808a 	ble.w	8008e6c <_dtoa_r+0x904>
 8008d58:	f1c0 001c 	rsb	r0, r0, #28
 8008d5c:	9b04      	ldr	r3, [sp, #16]
 8008d5e:	4403      	add	r3, r0
 8008d60:	9304      	str	r3, [sp, #16]
 8008d62:	9b05      	ldr	r3, [sp, #20]
 8008d64:	4403      	add	r3, r0
 8008d66:	4405      	add	r5, r0
 8008d68:	9305      	str	r3, [sp, #20]
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	dd07      	ble.n	8008d80 <_dtoa_r+0x818>
 8008d70:	ee18 1a10 	vmov	r1, s16
 8008d74:	461a      	mov	r2, r3
 8008d76:	4620      	mov	r0, r4
 8008d78:	f001 fa12 	bl	800a1a0 <__lshift>
 8008d7c:	ee08 0a10 	vmov	s16, r0
 8008d80:	9b05      	ldr	r3, [sp, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dd05      	ble.n	8008d92 <_dtoa_r+0x82a>
 8008d86:	4631      	mov	r1, r6
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f001 fa08 	bl	800a1a0 <__lshift>
 8008d90:	4606      	mov	r6, r0
 8008d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d06e      	beq.n	8008e76 <_dtoa_r+0x90e>
 8008d98:	ee18 0a10 	vmov	r0, s16
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	f001 fa6f 	bl	800a280 <__mcmp>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	da67      	bge.n	8008e76 <_dtoa_r+0x90e>
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	ee18 1a10 	vmov	r1, s16
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	220a      	movs	r2, #10
 8008db2:	2300      	movs	r3, #0
 8008db4:	4620      	mov	r0, r4
 8008db6:	f000 fff9 	bl	8009dac <__multadd>
 8008dba:	9b08      	ldr	r3, [sp, #32]
 8008dbc:	ee08 0a10 	vmov	s16, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 81b1 	beq.w	8009128 <_dtoa_r+0xbc0>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	4639      	mov	r1, r7
 8008dca:	220a      	movs	r2, #10
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 ffed 	bl	8009dac <__multadd>
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	f300 808e 	bgt.w	8008ef8 <_dtoa_r+0x990>
 8008ddc:	9b06      	ldr	r3, [sp, #24]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	dc51      	bgt.n	8008e86 <_dtoa_r+0x91e>
 8008de2:	e089      	b.n	8008ef8 <_dtoa_r+0x990>
 8008de4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008de6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dea:	e74b      	b.n	8008c84 <_dtoa_r+0x71c>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1e5e      	subs	r6, r3, #1
 8008df0:	9b07      	ldr	r3, [sp, #28]
 8008df2:	42b3      	cmp	r3, r6
 8008df4:	bfbf      	itttt	lt
 8008df6:	9b07      	ldrlt	r3, [sp, #28]
 8008df8:	9607      	strlt	r6, [sp, #28]
 8008dfa:	1af2      	sublt	r2, r6, r3
 8008dfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dfe:	bfb6      	itet	lt
 8008e00:	189b      	addlt	r3, r3, r2
 8008e02:	1b9e      	subge	r6, r3, r6
 8008e04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	bfb8      	it	lt
 8008e0a:	2600      	movlt	r6, #0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfb7      	itett	lt
 8008e10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008e14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e18:	1a9d      	sublt	r5, r3, r2
 8008e1a:	2300      	movlt	r3, #0
 8008e1c:	e734      	b.n	8008c88 <_dtoa_r+0x720>
 8008e1e:	9e07      	ldr	r6, [sp, #28]
 8008e20:	9d04      	ldr	r5, [sp, #16]
 8008e22:	9f08      	ldr	r7, [sp, #32]
 8008e24:	e73b      	b.n	8008c9e <_dtoa_r+0x736>
 8008e26:	9a07      	ldr	r2, [sp, #28]
 8008e28:	e767      	b.n	8008cfa <_dtoa_r+0x792>
 8008e2a:	9b06      	ldr	r3, [sp, #24]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	dc18      	bgt.n	8008e62 <_dtoa_r+0x8fa>
 8008e30:	f1ba 0f00 	cmp.w	sl, #0
 8008e34:	d115      	bne.n	8008e62 <_dtoa_r+0x8fa>
 8008e36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e3a:	b993      	cbnz	r3, 8008e62 <_dtoa_r+0x8fa>
 8008e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e40:	0d1b      	lsrs	r3, r3, #20
 8008e42:	051b      	lsls	r3, r3, #20
 8008e44:	b183      	cbz	r3, 8008e68 <_dtoa_r+0x900>
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	9b05      	ldr	r3, [sp, #20]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	9305      	str	r3, [sp, #20]
 8008e52:	f04f 0801 	mov.w	r8, #1
 8008e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f47f af6a 	bne.w	8008d32 <_dtoa_r+0x7ca>
 8008e5e:	2001      	movs	r0, #1
 8008e60:	e76f      	b.n	8008d42 <_dtoa_r+0x7da>
 8008e62:	f04f 0800 	mov.w	r8, #0
 8008e66:	e7f6      	b.n	8008e56 <_dtoa_r+0x8ee>
 8008e68:	4698      	mov	r8, r3
 8008e6a:	e7f4      	b.n	8008e56 <_dtoa_r+0x8ee>
 8008e6c:	f43f af7d 	beq.w	8008d6a <_dtoa_r+0x802>
 8008e70:	4618      	mov	r0, r3
 8008e72:	301c      	adds	r0, #28
 8008e74:	e772      	b.n	8008d5c <_dtoa_r+0x7f4>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dc37      	bgt.n	8008eec <_dtoa_r+0x984>
 8008e7c:	9b06      	ldr	r3, [sp, #24]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	dd34      	ble.n	8008eec <_dtoa_r+0x984>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	9302      	str	r3, [sp, #8]
 8008e86:	9b02      	ldr	r3, [sp, #8]
 8008e88:	b96b      	cbnz	r3, 8008ea6 <_dtoa_r+0x93e>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 ff8c 	bl	8009dac <__multadd>
 8008e94:	4601      	mov	r1, r0
 8008e96:	4606      	mov	r6, r0
 8008e98:	ee18 0a10 	vmov	r0, s16
 8008e9c:	f001 f9f0 	bl	800a280 <__mcmp>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f73f adbb 	bgt.w	8008a1c <_dtoa_r+0x4b4>
 8008ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea8:	9d01      	ldr	r5, [sp, #4]
 8008eaa:	43db      	mvns	r3, r3
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	f04f 0800 	mov.w	r8, #0
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 ff57 	bl	8009d68 <_Bfree>
 8008eba:	2f00      	cmp	r7, #0
 8008ebc:	f43f aea4 	beq.w	8008c08 <_dtoa_r+0x6a0>
 8008ec0:	f1b8 0f00 	cmp.w	r8, #0
 8008ec4:	d005      	beq.n	8008ed2 <_dtoa_r+0x96a>
 8008ec6:	45b8      	cmp	r8, r7
 8008ec8:	d003      	beq.n	8008ed2 <_dtoa_r+0x96a>
 8008eca:	4641      	mov	r1, r8
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f000 ff4b 	bl	8009d68 <_Bfree>
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 ff47 	bl	8009d68 <_Bfree>
 8008eda:	e695      	b.n	8008c08 <_dtoa_r+0x6a0>
 8008edc:	2600      	movs	r6, #0
 8008ede:	4637      	mov	r7, r6
 8008ee0:	e7e1      	b.n	8008ea6 <_dtoa_r+0x93e>
 8008ee2:	9700      	str	r7, [sp, #0]
 8008ee4:	4637      	mov	r7, r6
 8008ee6:	e599      	b.n	8008a1c <_dtoa_r+0x4b4>
 8008ee8:	40240000 	.word	0x40240000
 8008eec:	9b08      	ldr	r3, [sp, #32]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80ca 	beq.w	8009088 <_dtoa_r+0xb20>
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	9302      	str	r3, [sp, #8]
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	dd05      	ble.n	8008f08 <_dtoa_r+0x9a0>
 8008efc:	4639      	mov	r1, r7
 8008efe:	462a      	mov	r2, r5
 8008f00:	4620      	mov	r0, r4
 8008f02:	f001 f94d 	bl	800a1a0 <__lshift>
 8008f06:	4607      	mov	r7, r0
 8008f08:	f1b8 0f00 	cmp.w	r8, #0
 8008f0c:	d05b      	beq.n	8008fc6 <_dtoa_r+0xa5e>
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fee9 	bl	8009ce8 <_Balloc>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b928      	cbnz	r0, 8008f26 <_dtoa_r+0x9be>
 8008f1a:	4b87      	ldr	r3, [pc, #540]	; (8009138 <_dtoa_r+0xbd0>)
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f22:	f7ff bb3b 	b.w	800859c <_dtoa_r+0x34>
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	3202      	adds	r2, #2
 8008f2a:	0092      	lsls	r2, r2, #2
 8008f2c:	f107 010c 	add.w	r1, r7, #12
 8008f30:	300c      	adds	r0, #12
 8008f32:	f000 feb1 	bl	8009c98 <memcpy>
 8008f36:	2201      	movs	r2, #1
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f001 f930 	bl	800a1a0 <__lshift>
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	f103 0901 	add.w	r9, r3, #1
 8008f46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	9305      	str	r3, [sp, #20]
 8008f4e:	f00a 0301 	and.w	r3, sl, #1
 8008f52:	46b8      	mov	r8, r7
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	4607      	mov	r7, r0
 8008f58:	4631      	mov	r1, r6
 8008f5a:	ee18 0a10 	vmov	r0, s16
 8008f5e:	f7ff fa75 	bl	800844c <quorem>
 8008f62:	4641      	mov	r1, r8
 8008f64:	9002      	str	r0, [sp, #8]
 8008f66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f6a:	ee18 0a10 	vmov	r0, s16
 8008f6e:	f001 f987 	bl	800a280 <__mcmp>
 8008f72:	463a      	mov	r2, r7
 8008f74:	9003      	str	r0, [sp, #12]
 8008f76:	4631      	mov	r1, r6
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f001 f99d 	bl	800a2b8 <__mdiff>
 8008f7e:	68c2      	ldr	r2, [r0, #12]
 8008f80:	f109 3bff 	add.w	fp, r9, #4294967295
 8008f84:	4605      	mov	r5, r0
 8008f86:	bb02      	cbnz	r2, 8008fca <_dtoa_r+0xa62>
 8008f88:	4601      	mov	r1, r0
 8008f8a:	ee18 0a10 	vmov	r0, s16
 8008f8e:	f001 f977 	bl	800a280 <__mcmp>
 8008f92:	4602      	mov	r2, r0
 8008f94:	4629      	mov	r1, r5
 8008f96:	4620      	mov	r0, r4
 8008f98:	9207      	str	r2, [sp, #28]
 8008f9a:	f000 fee5 	bl	8009d68 <_Bfree>
 8008f9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008fa2:	ea43 0102 	orr.w	r1, r3, r2
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	464d      	mov	r5, r9
 8008fac:	d10f      	bne.n	8008fce <_dtoa_r+0xa66>
 8008fae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008fb2:	d02a      	beq.n	800900a <_dtoa_r+0xaa2>
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dd02      	ble.n	8008fc0 <_dtoa_r+0xa58>
 8008fba:	9b02      	ldr	r3, [sp, #8]
 8008fbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008fc0:	f88b a000 	strb.w	sl, [fp]
 8008fc4:	e775      	b.n	8008eb2 <_dtoa_r+0x94a>
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	e7ba      	b.n	8008f40 <_dtoa_r+0x9d8>
 8008fca:	2201      	movs	r2, #1
 8008fcc:	e7e2      	b.n	8008f94 <_dtoa_r+0xa2c>
 8008fce:	9b03      	ldr	r3, [sp, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	db04      	blt.n	8008fde <_dtoa_r+0xa76>
 8008fd4:	9906      	ldr	r1, [sp, #24]
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	9904      	ldr	r1, [sp, #16]
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	d122      	bne.n	8009024 <_dtoa_r+0xabc>
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	ddee      	ble.n	8008fc0 <_dtoa_r+0xa58>
 8008fe2:	ee18 1a10 	vmov	r1, s16
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f001 f8d9 	bl	800a1a0 <__lshift>
 8008fee:	4631      	mov	r1, r6
 8008ff0:	ee08 0a10 	vmov	s16, r0
 8008ff4:	f001 f944 	bl	800a280 <__mcmp>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	dc03      	bgt.n	8009004 <_dtoa_r+0xa9c>
 8008ffc:	d1e0      	bne.n	8008fc0 <_dtoa_r+0xa58>
 8008ffe:	f01a 0f01 	tst.w	sl, #1
 8009002:	d0dd      	beq.n	8008fc0 <_dtoa_r+0xa58>
 8009004:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009008:	d1d7      	bne.n	8008fba <_dtoa_r+0xa52>
 800900a:	2339      	movs	r3, #57	; 0x39
 800900c:	f88b 3000 	strb.w	r3, [fp]
 8009010:	462b      	mov	r3, r5
 8009012:	461d      	mov	r5, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800901a:	2a39      	cmp	r2, #57	; 0x39
 800901c:	d071      	beq.n	8009102 <_dtoa_r+0xb9a>
 800901e:	3201      	adds	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	e746      	b.n	8008eb2 <_dtoa_r+0x94a>
 8009024:	2a00      	cmp	r2, #0
 8009026:	dd07      	ble.n	8009038 <_dtoa_r+0xad0>
 8009028:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800902c:	d0ed      	beq.n	800900a <_dtoa_r+0xaa2>
 800902e:	f10a 0301 	add.w	r3, sl, #1
 8009032:	f88b 3000 	strb.w	r3, [fp]
 8009036:	e73c      	b.n	8008eb2 <_dtoa_r+0x94a>
 8009038:	9b05      	ldr	r3, [sp, #20]
 800903a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800903e:	4599      	cmp	r9, r3
 8009040:	d047      	beq.n	80090d2 <_dtoa_r+0xb6a>
 8009042:	ee18 1a10 	vmov	r1, s16
 8009046:	2300      	movs	r3, #0
 8009048:	220a      	movs	r2, #10
 800904a:	4620      	mov	r0, r4
 800904c:	f000 feae 	bl	8009dac <__multadd>
 8009050:	45b8      	cmp	r8, r7
 8009052:	ee08 0a10 	vmov	s16, r0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	f04f 020a 	mov.w	r2, #10
 800905e:	4641      	mov	r1, r8
 8009060:	4620      	mov	r0, r4
 8009062:	d106      	bne.n	8009072 <_dtoa_r+0xb0a>
 8009064:	f000 fea2 	bl	8009dac <__multadd>
 8009068:	4680      	mov	r8, r0
 800906a:	4607      	mov	r7, r0
 800906c:	f109 0901 	add.w	r9, r9, #1
 8009070:	e772      	b.n	8008f58 <_dtoa_r+0x9f0>
 8009072:	f000 fe9b 	bl	8009dac <__multadd>
 8009076:	4639      	mov	r1, r7
 8009078:	4680      	mov	r8, r0
 800907a:	2300      	movs	r3, #0
 800907c:	220a      	movs	r2, #10
 800907e:	4620      	mov	r0, r4
 8009080:	f000 fe94 	bl	8009dac <__multadd>
 8009084:	4607      	mov	r7, r0
 8009086:	e7f1      	b.n	800906c <_dtoa_r+0xb04>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	9302      	str	r3, [sp, #8]
 800908c:	9d01      	ldr	r5, [sp, #4]
 800908e:	ee18 0a10 	vmov	r0, s16
 8009092:	4631      	mov	r1, r6
 8009094:	f7ff f9da 	bl	800844c <quorem>
 8009098:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	f805 ab01 	strb.w	sl, [r5], #1
 80090a2:	1aea      	subs	r2, r5, r3
 80090a4:	9b02      	ldr	r3, [sp, #8]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	dd09      	ble.n	80090be <_dtoa_r+0xb56>
 80090aa:	ee18 1a10 	vmov	r1, s16
 80090ae:	2300      	movs	r3, #0
 80090b0:	220a      	movs	r2, #10
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 fe7a 	bl	8009dac <__multadd>
 80090b8:	ee08 0a10 	vmov	s16, r0
 80090bc:	e7e7      	b.n	800908e <_dtoa_r+0xb26>
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bfc8      	it	gt
 80090c4:	461d      	movgt	r5, r3
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	bfd8      	it	le
 80090ca:	2501      	movle	r5, #1
 80090cc:	441d      	add	r5, r3
 80090ce:	f04f 0800 	mov.w	r8, #0
 80090d2:	ee18 1a10 	vmov	r1, s16
 80090d6:	2201      	movs	r2, #1
 80090d8:	4620      	mov	r0, r4
 80090da:	f001 f861 	bl	800a1a0 <__lshift>
 80090de:	4631      	mov	r1, r6
 80090e0:	ee08 0a10 	vmov	s16, r0
 80090e4:	f001 f8cc 	bl	800a280 <__mcmp>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	dc91      	bgt.n	8009010 <_dtoa_r+0xaa8>
 80090ec:	d102      	bne.n	80090f4 <_dtoa_r+0xb8c>
 80090ee:	f01a 0f01 	tst.w	sl, #1
 80090f2:	d18d      	bne.n	8009010 <_dtoa_r+0xaa8>
 80090f4:	462b      	mov	r3, r5
 80090f6:	461d      	mov	r5, r3
 80090f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090fc:	2a30      	cmp	r2, #48	; 0x30
 80090fe:	d0fa      	beq.n	80090f6 <_dtoa_r+0xb8e>
 8009100:	e6d7      	b.n	8008eb2 <_dtoa_r+0x94a>
 8009102:	9a01      	ldr	r2, [sp, #4]
 8009104:	429a      	cmp	r2, r3
 8009106:	d184      	bne.n	8009012 <_dtoa_r+0xaaa>
 8009108:	9b00      	ldr	r3, [sp, #0]
 800910a:	3301      	adds	r3, #1
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	2331      	movs	r3, #49	; 0x31
 8009110:	7013      	strb	r3, [r2, #0]
 8009112:	e6ce      	b.n	8008eb2 <_dtoa_r+0x94a>
 8009114:	4b09      	ldr	r3, [pc, #36]	; (800913c <_dtoa_r+0xbd4>)
 8009116:	f7ff ba95 	b.w	8008644 <_dtoa_r+0xdc>
 800911a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800911c:	2b00      	cmp	r3, #0
 800911e:	f47f aa6e 	bne.w	80085fe <_dtoa_r+0x96>
 8009122:	4b07      	ldr	r3, [pc, #28]	; (8009140 <_dtoa_r+0xbd8>)
 8009124:	f7ff ba8e 	b.w	8008644 <_dtoa_r+0xdc>
 8009128:	9b02      	ldr	r3, [sp, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dcae      	bgt.n	800908c <_dtoa_r+0xb24>
 800912e:	9b06      	ldr	r3, [sp, #24]
 8009130:	2b02      	cmp	r3, #2
 8009132:	f73f aea8 	bgt.w	8008e86 <_dtoa_r+0x91e>
 8009136:	e7a9      	b.n	800908c <_dtoa_r+0xb24>
 8009138:	0800b3e0 	.word	0x0800b3e0
 800913c:	0800b1e1 	.word	0x0800b1e1
 8009140:	0800b361 	.word	0x0800b361

08009144 <__sflush_r>:
 8009144:	898a      	ldrh	r2, [r1, #12]
 8009146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914a:	4605      	mov	r5, r0
 800914c:	0710      	lsls	r0, r2, #28
 800914e:	460c      	mov	r4, r1
 8009150:	d458      	bmi.n	8009204 <__sflush_r+0xc0>
 8009152:	684b      	ldr	r3, [r1, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	dc05      	bgt.n	8009164 <__sflush_r+0x20>
 8009158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	dc02      	bgt.n	8009164 <__sflush_r+0x20>
 800915e:	2000      	movs	r0, #0
 8009160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009166:	2e00      	cmp	r6, #0
 8009168:	d0f9      	beq.n	800915e <__sflush_r+0x1a>
 800916a:	2300      	movs	r3, #0
 800916c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009170:	682f      	ldr	r7, [r5, #0]
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	d032      	beq.n	80091dc <__sflush_r+0x98>
 8009176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	075a      	lsls	r2, r3, #29
 800917c:	d505      	bpl.n	800918a <__sflush_r+0x46>
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	1ac0      	subs	r0, r0, r3
 8009182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009184:	b10b      	cbz	r3, 800918a <__sflush_r+0x46>
 8009186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009188:	1ac0      	subs	r0, r0, r3
 800918a:	2300      	movs	r3, #0
 800918c:	4602      	mov	r2, r0
 800918e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009190:	6a21      	ldr	r1, [r4, #32]
 8009192:	4628      	mov	r0, r5
 8009194:	47b0      	blx	r6
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	d106      	bne.n	80091aa <__sflush_r+0x66>
 800919c:	6829      	ldr	r1, [r5, #0]
 800919e:	291d      	cmp	r1, #29
 80091a0:	d82c      	bhi.n	80091fc <__sflush_r+0xb8>
 80091a2:	4a2a      	ldr	r2, [pc, #168]	; (800924c <__sflush_r+0x108>)
 80091a4:	40ca      	lsrs	r2, r1
 80091a6:	07d6      	lsls	r6, r2, #31
 80091a8:	d528      	bpl.n	80091fc <__sflush_r+0xb8>
 80091aa:	2200      	movs	r2, #0
 80091ac:	6062      	str	r2, [r4, #4]
 80091ae:	04d9      	lsls	r1, r3, #19
 80091b0:	6922      	ldr	r2, [r4, #16]
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	d504      	bpl.n	80091c0 <__sflush_r+0x7c>
 80091b6:	1c42      	adds	r2, r0, #1
 80091b8:	d101      	bne.n	80091be <__sflush_r+0x7a>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	b903      	cbnz	r3, 80091c0 <__sflush_r+0x7c>
 80091be:	6560      	str	r0, [r4, #84]	; 0x54
 80091c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c2:	602f      	str	r7, [r5, #0]
 80091c4:	2900      	cmp	r1, #0
 80091c6:	d0ca      	beq.n	800915e <__sflush_r+0x1a>
 80091c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <__sflush_r+0x92>
 80091d0:	4628      	mov	r0, r5
 80091d2:	f001 fa61 	bl	800a698 <_free_r>
 80091d6:	2000      	movs	r0, #0
 80091d8:	6360      	str	r0, [r4, #52]	; 0x34
 80091da:	e7c1      	b.n	8009160 <__sflush_r+0x1c>
 80091dc:	6a21      	ldr	r1, [r4, #32]
 80091de:	2301      	movs	r3, #1
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b0      	blx	r6
 80091e4:	1c41      	adds	r1, r0, #1
 80091e6:	d1c7      	bne.n	8009178 <__sflush_r+0x34>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0c4      	beq.n	8009178 <__sflush_r+0x34>
 80091ee:	2b1d      	cmp	r3, #29
 80091f0:	d001      	beq.n	80091f6 <__sflush_r+0xb2>
 80091f2:	2b16      	cmp	r3, #22
 80091f4:	d101      	bne.n	80091fa <__sflush_r+0xb6>
 80091f6:	602f      	str	r7, [r5, #0]
 80091f8:	e7b1      	b.n	800915e <__sflush_r+0x1a>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	e7ad      	b.n	8009160 <__sflush_r+0x1c>
 8009204:	690f      	ldr	r7, [r1, #16]
 8009206:	2f00      	cmp	r7, #0
 8009208:	d0a9      	beq.n	800915e <__sflush_r+0x1a>
 800920a:	0793      	lsls	r3, r2, #30
 800920c:	680e      	ldr	r6, [r1, #0]
 800920e:	bf08      	it	eq
 8009210:	694b      	ldreq	r3, [r1, #20]
 8009212:	600f      	str	r7, [r1, #0]
 8009214:	bf18      	it	ne
 8009216:	2300      	movne	r3, #0
 8009218:	eba6 0807 	sub.w	r8, r6, r7
 800921c:	608b      	str	r3, [r1, #8]
 800921e:	f1b8 0f00 	cmp.w	r8, #0
 8009222:	dd9c      	ble.n	800915e <__sflush_r+0x1a>
 8009224:	6a21      	ldr	r1, [r4, #32]
 8009226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009228:	4643      	mov	r3, r8
 800922a:	463a      	mov	r2, r7
 800922c:	4628      	mov	r0, r5
 800922e:	47b0      	blx	r6
 8009230:	2800      	cmp	r0, #0
 8009232:	dc06      	bgt.n	8009242 <__sflush_r+0xfe>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	e78e      	b.n	8009160 <__sflush_r+0x1c>
 8009242:	4407      	add	r7, r0
 8009244:	eba8 0800 	sub.w	r8, r8, r0
 8009248:	e7e9      	b.n	800921e <__sflush_r+0xda>
 800924a:	bf00      	nop
 800924c:	20400001 	.word	0x20400001

08009250 <_fflush_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b913      	cbnz	r3, 8009260 <_fflush_r+0x10>
 800925a:	2500      	movs	r5, #0
 800925c:	4628      	mov	r0, r5
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	b118      	cbz	r0, 800926a <_fflush_r+0x1a>
 8009262:	6983      	ldr	r3, [r0, #24]
 8009264:	b90b      	cbnz	r3, 800926a <_fflush_r+0x1a>
 8009266:	f000 f887 	bl	8009378 <__sinit>
 800926a:	4b14      	ldr	r3, [pc, #80]	; (80092bc <_fflush_r+0x6c>)
 800926c:	429c      	cmp	r4, r3
 800926e:	d11b      	bne.n	80092a8 <_fflush_r+0x58>
 8009270:	686c      	ldr	r4, [r5, #4]
 8009272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0ef      	beq.n	800925a <_fflush_r+0xa>
 800927a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800927c:	07d0      	lsls	r0, r2, #31
 800927e:	d404      	bmi.n	800928a <_fflush_r+0x3a>
 8009280:	0599      	lsls	r1, r3, #22
 8009282:	d402      	bmi.n	800928a <_fflush_r+0x3a>
 8009284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009286:	f7fd f8d2 	bl	800642e <__retarget_lock_acquire_recursive>
 800928a:	4628      	mov	r0, r5
 800928c:	4621      	mov	r1, r4
 800928e:	f7ff ff59 	bl	8009144 <__sflush_r>
 8009292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009294:	07da      	lsls	r2, r3, #31
 8009296:	4605      	mov	r5, r0
 8009298:	d4e0      	bmi.n	800925c <_fflush_r+0xc>
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	059b      	lsls	r3, r3, #22
 800929e:	d4dd      	bmi.n	800925c <_fflush_r+0xc>
 80092a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092a2:	f7fd f8c5 	bl	8006430 <__retarget_lock_release_recursive>
 80092a6:	e7d9      	b.n	800925c <_fflush_r+0xc>
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <_fflush_r+0x70>)
 80092aa:	429c      	cmp	r4, r3
 80092ac:	d101      	bne.n	80092b2 <_fflush_r+0x62>
 80092ae:	68ac      	ldr	r4, [r5, #8]
 80092b0:	e7df      	b.n	8009272 <_fflush_r+0x22>
 80092b2:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <_fflush_r+0x74>)
 80092b4:	429c      	cmp	r4, r3
 80092b6:	bf08      	it	eq
 80092b8:	68ec      	ldreq	r4, [r5, #12]
 80092ba:	e7da      	b.n	8009272 <_fflush_r+0x22>
 80092bc:	0800b414 	.word	0x0800b414
 80092c0:	0800b434 	.word	0x0800b434
 80092c4:	0800b3f4 	.word	0x0800b3f4

080092c8 <std>:
 80092c8:	2300      	movs	r3, #0
 80092ca:	b510      	push	{r4, lr}
 80092cc:	4604      	mov	r4, r0
 80092ce:	e9c0 3300 	strd	r3, r3, [r0]
 80092d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d6:	6083      	str	r3, [r0, #8]
 80092d8:	8181      	strh	r1, [r0, #12]
 80092da:	6643      	str	r3, [r0, #100]	; 0x64
 80092dc:	81c2      	strh	r2, [r0, #14]
 80092de:	6183      	str	r3, [r0, #24]
 80092e0:	4619      	mov	r1, r3
 80092e2:	2208      	movs	r2, #8
 80092e4:	305c      	adds	r0, #92	; 0x5c
 80092e6:	f7fd f8a4 	bl	8006432 <memset>
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x38>)
 80092ec:	6263      	str	r3, [r4, #36]	; 0x24
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x3c>)
 80092f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std+0x40>)
 80092f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std+0x44>)
 80092f8:	6224      	str	r4, [r4, #32]
 80092fa:	6323      	str	r3, [r4, #48]	; 0x30
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	bf00      	nop
 8009300:	0800aba1 	.word	0x0800aba1
 8009304:	0800abc3 	.word	0x0800abc3
 8009308:	0800abfb 	.word	0x0800abfb
 800930c:	0800ac1f 	.word	0x0800ac1f

08009310 <_cleanup_r>:
 8009310:	4901      	ldr	r1, [pc, #4]	; (8009318 <_cleanup_r+0x8>)
 8009312:	f000 b8af 	b.w	8009474 <_fwalk_reent>
 8009316:	bf00      	nop
 8009318:	08009251 	.word	0x08009251

0800931c <__sfmoreglue>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	2268      	movs	r2, #104	; 0x68
 8009320:	1e4d      	subs	r5, r1, #1
 8009322:	4355      	muls	r5, r2
 8009324:	460e      	mov	r6, r1
 8009326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800932a:	f001 fa21 	bl	800a770 <_malloc_r>
 800932e:	4604      	mov	r4, r0
 8009330:	b140      	cbz	r0, 8009344 <__sfmoreglue+0x28>
 8009332:	2100      	movs	r1, #0
 8009334:	e9c0 1600 	strd	r1, r6, [r0]
 8009338:	300c      	adds	r0, #12
 800933a:	60a0      	str	r0, [r4, #8]
 800933c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009340:	f7fd f877 	bl	8006432 <memset>
 8009344:	4620      	mov	r0, r4
 8009346:	bd70      	pop	{r4, r5, r6, pc}

08009348 <__sfp_lock_acquire>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sfp_lock_acquire+0x8>)
 800934a:	f7fd b870 	b.w	800642e <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	200006bd 	.word	0x200006bd

08009354 <__sfp_lock_release>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__sfp_lock_release+0x8>)
 8009356:	f7fd b86b 	b.w	8006430 <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	200006bd 	.word	0x200006bd

08009360 <__sinit_lock_acquire>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__sinit_lock_acquire+0x8>)
 8009362:	f7fd b864 	b.w	800642e <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	200006be 	.word	0x200006be

0800936c <__sinit_lock_release>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sinit_lock_release+0x8>)
 800936e:	f7fd b85f 	b.w	8006430 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	200006be 	.word	0x200006be

08009378 <__sinit>:
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
 800937c:	f7ff fff0 	bl	8009360 <__sinit_lock_acquire>
 8009380:	69a3      	ldr	r3, [r4, #24]
 8009382:	b11b      	cbz	r3, 800938c <__sinit+0x14>
 8009384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009388:	f7ff bff0 	b.w	800936c <__sinit_lock_release>
 800938c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009390:	6523      	str	r3, [r4, #80]	; 0x50
 8009392:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <__sinit+0x68>)
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <__sinit+0x6c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	62a2      	str	r2, [r4, #40]	; 0x28
 800939a:	42a3      	cmp	r3, r4
 800939c:	bf04      	itt	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	61a3      	streq	r3, [r4, #24]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f820 	bl	80093e8 <__sfp>
 80093a8:	6060      	str	r0, [r4, #4]
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f81c 	bl	80093e8 <__sfp>
 80093b0:	60a0      	str	r0, [r4, #8]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 f818 	bl	80093e8 <__sfp>
 80093b8:	2200      	movs	r2, #0
 80093ba:	60e0      	str	r0, [r4, #12]
 80093bc:	2104      	movs	r1, #4
 80093be:	6860      	ldr	r0, [r4, #4]
 80093c0:	f7ff ff82 	bl	80092c8 <std>
 80093c4:	68a0      	ldr	r0, [r4, #8]
 80093c6:	2201      	movs	r2, #1
 80093c8:	2109      	movs	r1, #9
 80093ca:	f7ff ff7d 	bl	80092c8 <std>
 80093ce:	68e0      	ldr	r0, [r4, #12]
 80093d0:	2202      	movs	r2, #2
 80093d2:	2112      	movs	r1, #18
 80093d4:	f7ff ff78 	bl	80092c8 <std>
 80093d8:	2301      	movs	r3, #1
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	e7d2      	b.n	8009384 <__sinit+0xc>
 80093de:	bf00      	nop
 80093e0:	0800b1bc 	.word	0x0800b1bc
 80093e4:	08009311 	.word	0x08009311

080093e8 <__sfp>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4607      	mov	r7, r0
 80093ec:	f7ff ffac 	bl	8009348 <__sfp_lock_acquire>
 80093f0:	4b1e      	ldr	r3, [pc, #120]	; (800946c <__sfp+0x84>)
 80093f2:	681e      	ldr	r6, [r3, #0]
 80093f4:	69b3      	ldr	r3, [r6, #24]
 80093f6:	b913      	cbnz	r3, 80093fe <__sfp+0x16>
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ffbd 	bl	8009378 <__sinit>
 80093fe:	3648      	adds	r6, #72	; 0x48
 8009400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	d503      	bpl.n	8009410 <__sfp+0x28>
 8009408:	6833      	ldr	r3, [r6, #0]
 800940a:	b30b      	cbz	r3, 8009450 <__sfp+0x68>
 800940c:	6836      	ldr	r6, [r6, #0]
 800940e:	e7f7      	b.n	8009400 <__sfp+0x18>
 8009410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009414:	b9d5      	cbnz	r5, 800944c <__sfp+0x64>
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <__sfp+0x88>)
 8009418:	60e3      	str	r3, [r4, #12]
 800941a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800941e:	6665      	str	r5, [r4, #100]	; 0x64
 8009420:	f7fd f804 	bl	800642c <__retarget_lock_init_recursive>
 8009424:	f7ff ff96 	bl	8009354 <__sfp_lock_release>
 8009428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800942c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	61a5      	str	r5, [r4, #24]
 8009434:	2208      	movs	r2, #8
 8009436:	4629      	mov	r1, r5
 8009438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800943c:	f7fc fff9 	bl	8006432 <memset>
 8009440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009448:	4620      	mov	r0, r4
 800944a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800944c:	3468      	adds	r4, #104	; 0x68
 800944e:	e7d9      	b.n	8009404 <__sfp+0x1c>
 8009450:	2104      	movs	r1, #4
 8009452:	4638      	mov	r0, r7
 8009454:	f7ff ff62 	bl	800931c <__sfmoreglue>
 8009458:	4604      	mov	r4, r0
 800945a:	6030      	str	r0, [r6, #0]
 800945c:	2800      	cmp	r0, #0
 800945e:	d1d5      	bne.n	800940c <__sfp+0x24>
 8009460:	f7ff ff78 	bl	8009354 <__sfp_lock_release>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	e7ee      	b.n	8009448 <__sfp+0x60>
 800946a:	bf00      	nop
 800946c:	0800b1bc 	.word	0x0800b1bc
 8009470:	ffff0001 	.word	0xffff0001

08009474 <_fwalk_reent>:
 8009474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009478:	4606      	mov	r6, r0
 800947a:	4688      	mov	r8, r1
 800947c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009480:	2700      	movs	r7, #0
 8009482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009486:	f1b9 0901 	subs.w	r9, r9, #1
 800948a:	d505      	bpl.n	8009498 <_fwalk_reent+0x24>
 800948c:	6824      	ldr	r4, [r4, #0]
 800948e:	2c00      	cmp	r4, #0
 8009490:	d1f7      	bne.n	8009482 <_fwalk_reent+0xe>
 8009492:	4638      	mov	r0, r7
 8009494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009498:	89ab      	ldrh	r3, [r5, #12]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d907      	bls.n	80094ae <_fwalk_reent+0x3a>
 800949e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094a2:	3301      	adds	r3, #1
 80094a4:	d003      	beq.n	80094ae <_fwalk_reent+0x3a>
 80094a6:	4629      	mov	r1, r5
 80094a8:	4630      	mov	r0, r6
 80094aa:	47c0      	blx	r8
 80094ac:	4307      	orrs	r7, r0
 80094ae:	3568      	adds	r5, #104	; 0x68
 80094b0:	e7e9      	b.n	8009486 <_fwalk_reent+0x12>

080094b2 <rshift>:
 80094b2:	6903      	ldr	r3, [r0, #16]
 80094b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80094b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094c0:	f100 0414 	add.w	r4, r0, #20
 80094c4:	dd45      	ble.n	8009552 <rshift+0xa0>
 80094c6:	f011 011f 	ands.w	r1, r1, #31
 80094ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094d2:	d10c      	bne.n	80094ee <rshift+0x3c>
 80094d4:	f100 0710 	add.w	r7, r0, #16
 80094d8:	4629      	mov	r1, r5
 80094da:	42b1      	cmp	r1, r6
 80094dc:	d334      	bcc.n	8009548 <rshift+0x96>
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	1eea      	subs	r2, r5, #3
 80094e4:	4296      	cmp	r6, r2
 80094e6:	bf38      	it	cc
 80094e8:	2300      	movcc	r3, #0
 80094ea:	4423      	add	r3, r4
 80094ec:	e015      	b.n	800951a <rshift+0x68>
 80094ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094f2:	f1c1 0820 	rsb	r8, r1, #32
 80094f6:	40cf      	lsrs	r7, r1
 80094f8:	f105 0e04 	add.w	lr, r5, #4
 80094fc:	46a1      	mov	r9, r4
 80094fe:	4576      	cmp	r6, lr
 8009500:	46f4      	mov	ip, lr
 8009502:	d815      	bhi.n	8009530 <rshift+0x7e>
 8009504:	1a9a      	subs	r2, r3, r2
 8009506:	0092      	lsls	r2, r2, #2
 8009508:	3a04      	subs	r2, #4
 800950a:	3501      	adds	r5, #1
 800950c:	42ae      	cmp	r6, r5
 800950e:	bf38      	it	cc
 8009510:	2200      	movcc	r2, #0
 8009512:	18a3      	adds	r3, r4, r2
 8009514:	50a7      	str	r7, [r4, r2]
 8009516:	b107      	cbz	r7, 800951a <rshift+0x68>
 8009518:	3304      	adds	r3, #4
 800951a:	1b1a      	subs	r2, r3, r4
 800951c:	42a3      	cmp	r3, r4
 800951e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009522:	bf08      	it	eq
 8009524:	2300      	moveq	r3, #0
 8009526:	6102      	str	r2, [r0, #16]
 8009528:	bf08      	it	eq
 800952a:	6143      	streq	r3, [r0, #20]
 800952c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009530:	f8dc c000 	ldr.w	ip, [ip]
 8009534:	fa0c fc08 	lsl.w	ip, ip, r8
 8009538:	ea4c 0707 	orr.w	r7, ip, r7
 800953c:	f849 7b04 	str.w	r7, [r9], #4
 8009540:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009544:	40cf      	lsrs	r7, r1
 8009546:	e7da      	b.n	80094fe <rshift+0x4c>
 8009548:	f851 cb04 	ldr.w	ip, [r1], #4
 800954c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009550:	e7c3      	b.n	80094da <rshift+0x28>
 8009552:	4623      	mov	r3, r4
 8009554:	e7e1      	b.n	800951a <rshift+0x68>

08009556 <__hexdig_fun>:
 8009556:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800955a:	2b09      	cmp	r3, #9
 800955c:	d802      	bhi.n	8009564 <__hexdig_fun+0xe>
 800955e:	3820      	subs	r0, #32
 8009560:	b2c0      	uxtb	r0, r0
 8009562:	4770      	bx	lr
 8009564:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009568:	2b05      	cmp	r3, #5
 800956a:	d801      	bhi.n	8009570 <__hexdig_fun+0x1a>
 800956c:	3847      	subs	r0, #71	; 0x47
 800956e:	e7f7      	b.n	8009560 <__hexdig_fun+0xa>
 8009570:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009574:	2b05      	cmp	r3, #5
 8009576:	d801      	bhi.n	800957c <__hexdig_fun+0x26>
 8009578:	3827      	subs	r0, #39	; 0x27
 800957a:	e7f1      	b.n	8009560 <__hexdig_fun+0xa>
 800957c:	2000      	movs	r0, #0
 800957e:	4770      	bx	lr

08009580 <__gethex>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	ed2d 8b02 	vpush	{d8}
 8009588:	b089      	sub	sp, #36	; 0x24
 800958a:	ee08 0a10 	vmov	s16, r0
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	4bb4      	ldr	r3, [pc, #720]	; (8009864 <__gethex+0x2e4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	4618      	mov	r0, r3
 8009598:	468b      	mov	fp, r1
 800959a:	4690      	mov	r8, r2
 800959c:	f7f6 fe28 	bl	80001f0 <strlen>
 80095a0:	9b01      	ldr	r3, [sp, #4]
 80095a2:	f8db 2000 	ldr.w	r2, [fp]
 80095a6:	4403      	add	r3, r0
 80095a8:	4682      	mov	sl, r0
 80095aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80095ae:	9305      	str	r3, [sp, #20]
 80095b0:	1c93      	adds	r3, r2, #2
 80095b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80095b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80095ba:	32fe      	adds	r2, #254	; 0xfe
 80095bc:	18d1      	adds	r1, r2, r3
 80095be:	461f      	mov	r7, r3
 80095c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095c4:	9100      	str	r1, [sp, #0]
 80095c6:	2830      	cmp	r0, #48	; 0x30
 80095c8:	d0f8      	beq.n	80095bc <__gethex+0x3c>
 80095ca:	f7ff ffc4 	bl	8009556 <__hexdig_fun>
 80095ce:	4604      	mov	r4, r0
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d13a      	bne.n	800964a <__gethex+0xca>
 80095d4:	9901      	ldr	r1, [sp, #4]
 80095d6:	4652      	mov	r2, sl
 80095d8:	4638      	mov	r0, r7
 80095da:	f001 fb24 	bl	800ac26 <strncmp>
 80095de:	4605      	mov	r5, r0
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d168      	bne.n	80096b6 <__gethex+0x136>
 80095e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80095e8:	eb07 060a 	add.w	r6, r7, sl
 80095ec:	f7ff ffb3 	bl	8009556 <__hexdig_fun>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d062      	beq.n	80096ba <__gethex+0x13a>
 80095f4:	4633      	mov	r3, r6
 80095f6:	7818      	ldrb	r0, [r3, #0]
 80095f8:	2830      	cmp	r0, #48	; 0x30
 80095fa:	461f      	mov	r7, r3
 80095fc:	f103 0301 	add.w	r3, r3, #1
 8009600:	d0f9      	beq.n	80095f6 <__gethex+0x76>
 8009602:	f7ff ffa8 	bl	8009556 <__hexdig_fun>
 8009606:	2301      	movs	r3, #1
 8009608:	fab0 f480 	clz	r4, r0
 800960c:	0964      	lsrs	r4, r4, #5
 800960e:	4635      	mov	r5, r6
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	463a      	mov	r2, r7
 8009614:	4616      	mov	r6, r2
 8009616:	3201      	adds	r2, #1
 8009618:	7830      	ldrb	r0, [r6, #0]
 800961a:	f7ff ff9c 	bl	8009556 <__hexdig_fun>
 800961e:	2800      	cmp	r0, #0
 8009620:	d1f8      	bne.n	8009614 <__gethex+0x94>
 8009622:	9901      	ldr	r1, [sp, #4]
 8009624:	4652      	mov	r2, sl
 8009626:	4630      	mov	r0, r6
 8009628:	f001 fafd 	bl	800ac26 <strncmp>
 800962c:	b980      	cbnz	r0, 8009650 <__gethex+0xd0>
 800962e:	b94d      	cbnz	r5, 8009644 <__gethex+0xc4>
 8009630:	eb06 050a 	add.w	r5, r6, sl
 8009634:	462a      	mov	r2, r5
 8009636:	4616      	mov	r6, r2
 8009638:	3201      	adds	r2, #1
 800963a:	7830      	ldrb	r0, [r6, #0]
 800963c:	f7ff ff8b 	bl	8009556 <__hexdig_fun>
 8009640:	2800      	cmp	r0, #0
 8009642:	d1f8      	bne.n	8009636 <__gethex+0xb6>
 8009644:	1bad      	subs	r5, r5, r6
 8009646:	00ad      	lsls	r5, r5, #2
 8009648:	e004      	b.n	8009654 <__gethex+0xd4>
 800964a:	2400      	movs	r4, #0
 800964c:	4625      	mov	r5, r4
 800964e:	e7e0      	b.n	8009612 <__gethex+0x92>
 8009650:	2d00      	cmp	r5, #0
 8009652:	d1f7      	bne.n	8009644 <__gethex+0xc4>
 8009654:	7833      	ldrb	r3, [r6, #0]
 8009656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800965a:	2b50      	cmp	r3, #80	; 0x50
 800965c:	d13b      	bne.n	80096d6 <__gethex+0x156>
 800965e:	7873      	ldrb	r3, [r6, #1]
 8009660:	2b2b      	cmp	r3, #43	; 0x2b
 8009662:	d02c      	beq.n	80096be <__gethex+0x13e>
 8009664:	2b2d      	cmp	r3, #45	; 0x2d
 8009666:	d02e      	beq.n	80096c6 <__gethex+0x146>
 8009668:	1c71      	adds	r1, r6, #1
 800966a:	f04f 0900 	mov.w	r9, #0
 800966e:	7808      	ldrb	r0, [r1, #0]
 8009670:	f7ff ff71 	bl	8009556 <__hexdig_fun>
 8009674:	1e43      	subs	r3, r0, #1
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b18      	cmp	r3, #24
 800967a:	d82c      	bhi.n	80096d6 <__gethex+0x156>
 800967c:	f1a0 0210 	sub.w	r2, r0, #16
 8009680:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009684:	f7ff ff67 	bl	8009556 <__hexdig_fun>
 8009688:	1e43      	subs	r3, r0, #1
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b18      	cmp	r3, #24
 800968e:	d91d      	bls.n	80096cc <__gethex+0x14c>
 8009690:	f1b9 0f00 	cmp.w	r9, #0
 8009694:	d000      	beq.n	8009698 <__gethex+0x118>
 8009696:	4252      	negs	r2, r2
 8009698:	4415      	add	r5, r2
 800969a:	f8cb 1000 	str.w	r1, [fp]
 800969e:	b1e4      	cbz	r4, 80096da <__gethex+0x15a>
 80096a0:	9b00      	ldr	r3, [sp, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bf14      	ite	ne
 80096a6:	2700      	movne	r7, #0
 80096a8:	2706      	moveq	r7, #6
 80096aa:	4638      	mov	r0, r7
 80096ac:	b009      	add	sp, #36	; 0x24
 80096ae:	ecbd 8b02 	vpop	{d8}
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	463e      	mov	r6, r7
 80096b8:	4625      	mov	r5, r4
 80096ba:	2401      	movs	r4, #1
 80096bc:	e7ca      	b.n	8009654 <__gethex+0xd4>
 80096be:	f04f 0900 	mov.w	r9, #0
 80096c2:	1cb1      	adds	r1, r6, #2
 80096c4:	e7d3      	b.n	800966e <__gethex+0xee>
 80096c6:	f04f 0901 	mov.w	r9, #1
 80096ca:	e7fa      	b.n	80096c2 <__gethex+0x142>
 80096cc:	230a      	movs	r3, #10
 80096ce:	fb03 0202 	mla	r2, r3, r2, r0
 80096d2:	3a10      	subs	r2, #16
 80096d4:	e7d4      	b.n	8009680 <__gethex+0x100>
 80096d6:	4631      	mov	r1, r6
 80096d8:	e7df      	b.n	800969a <__gethex+0x11a>
 80096da:	1bf3      	subs	r3, r6, r7
 80096dc:	3b01      	subs	r3, #1
 80096de:	4621      	mov	r1, r4
 80096e0:	2b07      	cmp	r3, #7
 80096e2:	dc0b      	bgt.n	80096fc <__gethex+0x17c>
 80096e4:	ee18 0a10 	vmov	r0, s16
 80096e8:	f000 fafe 	bl	8009ce8 <_Balloc>
 80096ec:	4604      	mov	r4, r0
 80096ee:	b940      	cbnz	r0, 8009702 <__gethex+0x182>
 80096f0:	4b5d      	ldr	r3, [pc, #372]	; (8009868 <__gethex+0x2e8>)
 80096f2:	4602      	mov	r2, r0
 80096f4:	21de      	movs	r1, #222	; 0xde
 80096f6:	485d      	ldr	r0, [pc, #372]	; (800986c <__gethex+0x2ec>)
 80096f8:	f001 fab6 	bl	800ac68 <__assert_func>
 80096fc:	3101      	adds	r1, #1
 80096fe:	105b      	asrs	r3, r3, #1
 8009700:	e7ee      	b.n	80096e0 <__gethex+0x160>
 8009702:	f100 0914 	add.w	r9, r0, #20
 8009706:	f04f 0b00 	mov.w	fp, #0
 800970a:	f1ca 0301 	rsb	r3, sl, #1
 800970e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009712:	f8cd b000 	str.w	fp, [sp]
 8009716:	9306      	str	r3, [sp, #24]
 8009718:	42b7      	cmp	r7, r6
 800971a:	d340      	bcc.n	800979e <__gethex+0x21e>
 800971c:	9802      	ldr	r0, [sp, #8]
 800971e:	9b00      	ldr	r3, [sp, #0]
 8009720:	f840 3b04 	str.w	r3, [r0], #4
 8009724:	eba0 0009 	sub.w	r0, r0, r9
 8009728:	1080      	asrs	r0, r0, #2
 800972a:	0146      	lsls	r6, r0, #5
 800972c:	6120      	str	r0, [r4, #16]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fbcc 	bl	8009ecc <__hi0bits>
 8009734:	1a30      	subs	r0, r6, r0
 8009736:	f8d8 6000 	ldr.w	r6, [r8]
 800973a:	42b0      	cmp	r0, r6
 800973c:	dd63      	ble.n	8009806 <__gethex+0x286>
 800973e:	1b87      	subs	r7, r0, r6
 8009740:	4639      	mov	r1, r7
 8009742:	4620      	mov	r0, r4
 8009744:	f000 ff70 	bl	800a628 <__any_on>
 8009748:	4682      	mov	sl, r0
 800974a:	b1a8      	cbz	r0, 8009778 <__gethex+0x1f8>
 800974c:	1e7b      	subs	r3, r7, #1
 800974e:	1159      	asrs	r1, r3, #5
 8009750:	f003 021f 	and.w	r2, r3, #31
 8009754:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009758:	f04f 0a01 	mov.w	sl, #1
 800975c:	fa0a f202 	lsl.w	r2, sl, r2
 8009760:	420a      	tst	r2, r1
 8009762:	d009      	beq.n	8009778 <__gethex+0x1f8>
 8009764:	4553      	cmp	r3, sl
 8009766:	dd05      	ble.n	8009774 <__gethex+0x1f4>
 8009768:	1eb9      	subs	r1, r7, #2
 800976a:	4620      	mov	r0, r4
 800976c:	f000 ff5c 	bl	800a628 <__any_on>
 8009770:	2800      	cmp	r0, #0
 8009772:	d145      	bne.n	8009800 <__gethex+0x280>
 8009774:	f04f 0a02 	mov.w	sl, #2
 8009778:	4639      	mov	r1, r7
 800977a:	4620      	mov	r0, r4
 800977c:	f7ff fe99 	bl	80094b2 <rshift>
 8009780:	443d      	add	r5, r7
 8009782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009786:	42ab      	cmp	r3, r5
 8009788:	da4c      	bge.n	8009824 <__gethex+0x2a4>
 800978a:	ee18 0a10 	vmov	r0, s16
 800978e:	4621      	mov	r1, r4
 8009790:	f000 faea 	bl	8009d68 <_Bfree>
 8009794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009796:	2300      	movs	r3, #0
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	27a3      	movs	r7, #163	; 0xa3
 800979c:	e785      	b.n	80096aa <__gethex+0x12a>
 800979e:	1e73      	subs	r3, r6, #1
 80097a0:	9a05      	ldr	r2, [sp, #20]
 80097a2:	9303      	str	r3, [sp, #12]
 80097a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d019      	beq.n	80097e0 <__gethex+0x260>
 80097ac:	f1bb 0f20 	cmp.w	fp, #32
 80097b0:	d107      	bne.n	80097c2 <__gethex+0x242>
 80097b2:	9b02      	ldr	r3, [sp, #8]
 80097b4:	9a00      	ldr	r2, [sp, #0]
 80097b6:	f843 2b04 	str.w	r2, [r3], #4
 80097ba:	9302      	str	r3, [sp, #8]
 80097bc:	2300      	movs	r3, #0
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	469b      	mov	fp, r3
 80097c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80097c6:	f7ff fec6 	bl	8009556 <__hexdig_fun>
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	f000 000f 	and.w	r0, r0, #15
 80097d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80097d4:	4303      	orrs	r3, r0
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	f10b 0b04 	add.w	fp, fp, #4
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	e00d      	b.n	80097fc <__gethex+0x27c>
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	9a06      	ldr	r2, [sp, #24]
 80097e4:	4413      	add	r3, r2
 80097e6:	42bb      	cmp	r3, r7
 80097e8:	d3e0      	bcc.n	80097ac <__gethex+0x22c>
 80097ea:	4618      	mov	r0, r3
 80097ec:	9901      	ldr	r1, [sp, #4]
 80097ee:	9307      	str	r3, [sp, #28]
 80097f0:	4652      	mov	r2, sl
 80097f2:	f001 fa18 	bl	800ac26 <strncmp>
 80097f6:	9b07      	ldr	r3, [sp, #28]
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d1d7      	bne.n	80097ac <__gethex+0x22c>
 80097fc:	461e      	mov	r6, r3
 80097fe:	e78b      	b.n	8009718 <__gethex+0x198>
 8009800:	f04f 0a03 	mov.w	sl, #3
 8009804:	e7b8      	b.n	8009778 <__gethex+0x1f8>
 8009806:	da0a      	bge.n	800981e <__gethex+0x29e>
 8009808:	1a37      	subs	r7, r6, r0
 800980a:	4621      	mov	r1, r4
 800980c:	ee18 0a10 	vmov	r0, s16
 8009810:	463a      	mov	r2, r7
 8009812:	f000 fcc5 	bl	800a1a0 <__lshift>
 8009816:	1bed      	subs	r5, r5, r7
 8009818:	4604      	mov	r4, r0
 800981a:	f100 0914 	add.w	r9, r0, #20
 800981e:	f04f 0a00 	mov.w	sl, #0
 8009822:	e7ae      	b.n	8009782 <__gethex+0x202>
 8009824:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009828:	42a8      	cmp	r0, r5
 800982a:	dd72      	ble.n	8009912 <__gethex+0x392>
 800982c:	1b45      	subs	r5, r0, r5
 800982e:	42ae      	cmp	r6, r5
 8009830:	dc36      	bgt.n	80098a0 <__gethex+0x320>
 8009832:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d02a      	beq.n	8009890 <__gethex+0x310>
 800983a:	2b03      	cmp	r3, #3
 800983c:	d02c      	beq.n	8009898 <__gethex+0x318>
 800983e:	2b01      	cmp	r3, #1
 8009840:	d11c      	bne.n	800987c <__gethex+0x2fc>
 8009842:	42ae      	cmp	r6, r5
 8009844:	d11a      	bne.n	800987c <__gethex+0x2fc>
 8009846:	2e01      	cmp	r6, #1
 8009848:	d112      	bne.n	8009870 <__gethex+0x2f0>
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	2301      	movs	r3, #1
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	f8c9 3000 	str.w	r3, [r9]
 800985a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800985c:	2762      	movs	r7, #98	; 0x62
 800985e:	601c      	str	r4, [r3, #0]
 8009860:	e723      	b.n	80096aa <__gethex+0x12a>
 8009862:	bf00      	nop
 8009864:	0800b4bc 	.word	0x0800b4bc
 8009868:	0800b3e0 	.word	0x0800b3e0
 800986c:	0800b454 	.word	0x0800b454
 8009870:	1e71      	subs	r1, r6, #1
 8009872:	4620      	mov	r0, r4
 8009874:	f000 fed8 	bl	800a628 <__any_on>
 8009878:	2800      	cmp	r0, #0
 800987a:	d1e6      	bne.n	800984a <__gethex+0x2ca>
 800987c:	ee18 0a10 	vmov	r0, s16
 8009880:	4621      	mov	r1, r4
 8009882:	f000 fa71 	bl	8009d68 <_Bfree>
 8009886:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009888:	2300      	movs	r3, #0
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	2750      	movs	r7, #80	; 0x50
 800988e:	e70c      	b.n	80096aa <__gethex+0x12a>
 8009890:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f2      	bne.n	800987c <__gethex+0x2fc>
 8009896:	e7d8      	b.n	800984a <__gethex+0x2ca>
 8009898:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1d5      	bne.n	800984a <__gethex+0x2ca>
 800989e:	e7ed      	b.n	800987c <__gethex+0x2fc>
 80098a0:	1e6f      	subs	r7, r5, #1
 80098a2:	f1ba 0f00 	cmp.w	sl, #0
 80098a6:	d131      	bne.n	800990c <__gethex+0x38c>
 80098a8:	b127      	cbz	r7, 80098b4 <__gethex+0x334>
 80098aa:	4639      	mov	r1, r7
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 febb 	bl	800a628 <__any_on>
 80098b2:	4682      	mov	sl, r0
 80098b4:	117b      	asrs	r3, r7, #5
 80098b6:	2101      	movs	r1, #1
 80098b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80098bc:	f007 071f 	and.w	r7, r7, #31
 80098c0:	fa01 f707 	lsl.w	r7, r1, r7
 80098c4:	421f      	tst	r7, r3
 80098c6:	4629      	mov	r1, r5
 80098c8:	4620      	mov	r0, r4
 80098ca:	bf18      	it	ne
 80098cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80098d0:	1b76      	subs	r6, r6, r5
 80098d2:	f7ff fdee 	bl	80094b2 <rshift>
 80098d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098da:	2702      	movs	r7, #2
 80098dc:	f1ba 0f00 	cmp.w	sl, #0
 80098e0:	d048      	beq.n	8009974 <__gethex+0x3f4>
 80098e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d015      	beq.n	8009916 <__gethex+0x396>
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d017      	beq.n	800991e <__gethex+0x39e>
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d109      	bne.n	8009906 <__gethex+0x386>
 80098f2:	f01a 0f02 	tst.w	sl, #2
 80098f6:	d006      	beq.n	8009906 <__gethex+0x386>
 80098f8:	f8d9 0000 	ldr.w	r0, [r9]
 80098fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009900:	f01a 0f01 	tst.w	sl, #1
 8009904:	d10e      	bne.n	8009924 <__gethex+0x3a4>
 8009906:	f047 0710 	orr.w	r7, r7, #16
 800990a:	e033      	b.n	8009974 <__gethex+0x3f4>
 800990c:	f04f 0a01 	mov.w	sl, #1
 8009910:	e7d0      	b.n	80098b4 <__gethex+0x334>
 8009912:	2701      	movs	r7, #1
 8009914:	e7e2      	b.n	80098dc <__gethex+0x35c>
 8009916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009918:	f1c3 0301 	rsb	r3, r3, #1
 800991c:	9315      	str	r3, [sp, #84]	; 0x54
 800991e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0f0      	beq.n	8009906 <__gethex+0x386>
 8009924:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009928:	f104 0314 	add.w	r3, r4, #20
 800992c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009930:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009934:	f04f 0c00 	mov.w	ip, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f853 2b04 	ldr.w	r2, [r3], #4
 800993e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009942:	d01c      	beq.n	800997e <__gethex+0x3fe>
 8009944:	3201      	adds	r2, #1
 8009946:	6002      	str	r2, [r0, #0]
 8009948:	2f02      	cmp	r7, #2
 800994a:	f104 0314 	add.w	r3, r4, #20
 800994e:	d13f      	bne.n	80099d0 <__gethex+0x450>
 8009950:	f8d8 2000 	ldr.w	r2, [r8]
 8009954:	3a01      	subs	r2, #1
 8009956:	42b2      	cmp	r2, r6
 8009958:	d10a      	bne.n	8009970 <__gethex+0x3f0>
 800995a:	1171      	asrs	r1, r6, #5
 800995c:	2201      	movs	r2, #1
 800995e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009962:	f006 061f 	and.w	r6, r6, #31
 8009966:	fa02 f606 	lsl.w	r6, r2, r6
 800996a:	421e      	tst	r6, r3
 800996c:	bf18      	it	ne
 800996e:	4617      	movne	r7, r2
 8009970:	f047 0720 	orr.w	r7, r7, #32
 8009974:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009976:	601c      	str	r4, [r3, #0]
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	601d      	str	r5, [r3, #0]
 800997c:	e695      	b.n	80096aa <__gethex+0x12a>
 800997e:	4299      	cmp	r1, r3
 8009980:	f843 cc04 	str.w	ip, [r3, #-4]
 8009984:	d8d8      	bhi.n	8009938 <__gethex+0x3b8>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	459b      	cmp	fp, r3
 800998a:	db19      	blt.n	80099c0 <__gethex+0x440>
 800998c:	6861      	ldr	r1, [r4, #4]
 800998e:	ee18 0a10 	vmov	r0, s16
 8009992:	3101      	adds	r1, #1
 8009994:	f000 f9a8 	bl	8009ce8 <_Balloc>
 8009998:	4681      	mov	r9, r0
 800999a:	b918      	cbnz	r0, 80099a4 <__gethex+0x424>
 800999c:	4b1a      	ldr	r3, [pc, #104]	; (8009a08 <__gethex+0x488>)
 800999e:	4602      	mov	r2, r0
 80099a0:	2184      	movs	r1, #132	; 0x84
 80099a2:	e6a8      	b.n	80096f6 <__gethex+0x176>
 80099a4:	6922      	ldr	r2, [r4, #16]
 80099a6:	3202      	adds	r2, #2
 80099a8:	f104 010c 	add.w	r1, r4, #12
 80099ac:	0092      	lsls	r2, r2, #2
 80099ae:	300c      	adds	r0, #12
 80099b0:	f000 f972 	bl	8009c98 <memcpy>
 80099b4:	4621      	mov	r1, r4
 80099b6:	ee18 0a10 	vmov	r0, s16
 80099ba:	f000 f9d5 	bl	8009d68 <_Bfree>
 80099be:	464c      	mov	r4, r9
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099c8:	6122      	str	r2, [r4, #16]
 80099ca:	2201      	movs	r2, #1
 80099cc:	615a      	str	r2, [r3, #20]
 80099ce:	e7bb      	b.n	8009948 <__gethex+0x3c8>
 80099d0:	6922      	ldr	r2, [r4, #16]
 80099d2:	455a      	cmp	r2, fp
 80099d4:	dd0b      	ble.n	80099ee <__gethex+0x46e>
 80099d6:	2101      	movs	r1, #1
 80099d8:	4620      	mov	r0, r4
 80099da:	f7ff fd6a 	bl	80094b2 <rshift>
 80099de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099e2:	3501      	adds	r5, #1
 80099e4:	42ab      	cmp	r3, r5
 80099e6:	f6ff aed0 	blt.w	800978a <__gethex+0x20a>
 80099ea:	2701      	movs	r7, #1
 80099ec:	e7c0      	b.n	8009970 <__gethex+0x3f0>
 80099ee:	f016 061f 	ands.w	r6, r6, #31
 80099f2:	d0fa      	beq.n	80099ea <__gethex+0x46a>
 80099f4:	4453      	add	r3, sl
 80099f6:	f1c6 0620 	rsb	r6, r6, #32
 80099fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80099fe:	f000 fa65 	bl	8009ecc <__hi0bits>
 8009a02:	42b0      	cmp	r0, r6
 8009a04:	dbe7      	blt.n	80099d6 <__gethex+0x456>
 8009a06:	e7f0      	b.n	80099ea <__gethex+0x46a>
 8009a08:	0800b3e0 	.word	0x0800b3e0

08009a0c <L_shift>:
 8009a0c:	f1c2 0208 	rsb	r2, r2, #8
 8009a10:	0092      	lsls	r2, r2, #2
 8009a12:	b570      	push	{r4, r5, r6, lr}
 8009a14:	f1c2 0620 	rsb	r6, r2, #32
 8009a18:	6843      	ldr	r3, [r0, #4]
 8009a1a:	6804      	ldr	r4, [r0, #0]
 8009a1c:	fa03 f506 	lsl.w	r5, r3, r6
 8009a20:	432c      	orrs	r4, r5
 8009a22:	40d3      	lsrs	r3, r2
 8009a24:	6004      	str	r4, [r0, #0]
 8009a26:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a2a:	4288      	cmp	r0, r1
 8009a2c:	d3f4      	bcc.n	8009a18 <L_shift+0xc>
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}

08009a30 <__match>:
 8009a30:	b530      	push	{r4, r5, lr}
 8009a32:	6803      	ldr	r3, [r0, #0]
 8009a34:	3301      	adds	r3, #1
 8009a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a3a:	b914      	cbnz	r4, 8009a42 <__match+0x12>
 8009a3c:	6003      	str	r3, [r0, #0]
 8009a3e:	2001      	movs	r0, #1
 8009a40:	bd30      	pop	{r4, r5, pc}
 8009a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a4a:	2d19      	cmp	r5, #25
 8009a4c:	bf98      	it	ls
 8009a4e:	3220      	addls	r2, #32
 8009a50:	42a2      	cmp	r2, r4
 8009a52:	d0f0      	beq.n	8009a36 <__match+0x6>
 8009a54:	2000      	movs	r0, #0
 8009a56:	e7f3      	b.n	8009a40 <__match+0x10>

08009a58 <__hexnan>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	680b      	ldr	r3, [r1, #0]
 8009a5e:	115e      	asrs	r6, r3, #5
 8009a60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a64:	f013 031f 	ands.w	r3, r3, #31
 8009a68:	b087      	sub	sp, #28
 8009a6a:	bf18      	it	ne
 8009a6c:	3604      	addne	r6, #4
 8009a6e:	2500      	movs	r5, #0
 8009a70:	1f37      	subs	r7, r6, #4
 8009a72:	4690      	mov	r8, r2
 8009a74:	6802      	ldr	r2, [r0, #0]
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	4682      	mov	sl, r0
 8009a7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a7e:	46b9      	mov	r9, r7
 8009a80:	463c      	mov	r4, r7
 8009a82:	9502      	str	r5, [sp, #8]
 8009a84:	46ab      	mov	fp, r5
 8009a86:	7851      	ldrb	r1, [r2, #1]
 8009a88:	1c53      	adds	r3, r2, #1
 8009a8a:	9303      	str	r3, [sp, #12]
 8009a8c:	b341      	cbz	r1, 8009ae0 <__hexnan+0x88>
 8009a8e:	4608      	mov	r0, r1
 8009a90:	9205      	str	r2, [sp, #20]
 8009a92:	9104      	str	r1, [sp, #16]
 8009a94:	f7ff fd5f 	bl	8009556 <__hexdig_fun>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d14f      	bne.n	8009b3c <__hexnan+0xe4>
 8009a9c:	9904      	ldr	r1, [sp, #16]
 8009a9e:	9a05      	ldr	r2, [sp, #20]
 8009aa0:	2920      	cmp	r1, #32
 8009aa2:	d818      	bhi.n	8009ad6 <__hexnan+0x7e>
 8009aa4:	9b02      	ldr	r3, [sp, #8]
 8009aa6:	459b      	cmp	fp, r3
 8009aa8:	dd13      	ble.n	8009ad2 <__hexnan+0x7a>
 8009aaa:	454c      	cmp	r4, r9
 8009aac:	d206      	bcs.n	8009abc <__hexnan+0x64>
 8009aae:	2d07      	cmp	r5, #7
 8009ab0:	dc04      	bgt.n	8009abc <__hexnan+0x64>
 8009ab2:	462a      	mov	r2, r5
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f7ff ffa8 	bl	8009a0c <L_shift>
 8009abc:	4544      	cmp	r4, r8
 8009abe:	d950      	bls.n	8009b62 <__hexnan+0x10a>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f1a4 0904 	sub.w	r9, r4, #4
 8009ac6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aca:	f8cd b008 	str.w	fp, [sp, #8]
 8009ace:	464c      	mov	r4, r9
 8009ad0:	461d      	mov	r5, r3
 8009ad2:	9a03      	ldr	r2, [sp, #12]
 8009ad4:	e7d7      	b.n	8009a86 <__hexnan+0x2e>
 8009ad6:	2929      	cmp	r1, #41	; 0x29
 8009ad8:	d156      	bne.n	8009b88 <__hexnan+0x130>
 8009ada:	3202      	adds	r2, #2
 8009adc:	f8ca 2000 	str.w	r2, [sl]
 8009ae0:	f1bb 0f00 	cmp.w	fp, #0
 8009ae4:	d050      	beq.n	8009b88 <__hexnan+0x130>
 8009ae6:	454c      	cmp	r4, r9
 8009ae8:	d206      	bcs.n	8009af8 <__hexnan+0xa0>
 8009aea:	2d07      	cmp	r5, #7
 8009aec:	dc04      	bgt.n	8009af8 <__hexnan+0xa0>
 8009aee:	462a      	mov	r2, r5
 8009af0:	4649      	mov	r1, r9
 8009af2:	4620      	mov	r0, r4
 8009af4:	f7ff ff8a 	bl	8009a0c <L_shift>
 8009af8:	4544      	cmp	r4, r8
 8009afa:	d934      	bls.n	8009b66 <__hexnan+0x10e>
 8009afc:	f1a8 0204 	sub.w	r2, r8, #4
 8009b00:	4623      	mov	r3, r4
 8009b02:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b06:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b0a:	429f      	cmp	r7, r3
 8009b0c:	d2f9      	bcs.n	8009b02 <__hexnan+0xaa>
 8009b0e:	1b3b      	subs	r3, r7, r4
 8009b10:	f023 0303 	bic.w	r3, r3, #3
 8009b14:	3304      	adds	r3, #4
 8009b16:	3401      	adds	r4, #1
 8009b18:	3e03      	subs	r6, #3
 8009b1a:	42b4      	cmp	r4, r6
 8009b1c:	bf88      	it	hi
 8009b1e:	2304      	movhi	r3, #4
 8009b20:	4443      	add	r3, r8
 8009b22:	2200      	movs	r2, #0
 8009b24:	f843 2b04 	str.w	r2, [r3], #4
 8009b28:	429f      	cmp	r7, r3
 8009b2a:	d2fb      	bcs.n	8009b24 <__hexnan+0xcc>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	b91b      	cbnz	r3, 8009b38 <__hexnan+0xe0>
 8009b30:	4547      	cmp	r7, r8
 8009b32:	d127      	bne.n	8009b84 <__hexnan+0x12c>
 8009b34:	2301      	movs	r3, #1
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	2005      	movs	r0, #5
 8009b3a:	e026      	b.n	8009b8a <__hexnan+0x132>
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	2d08      	cmp	r5, #8
 8009b40:	f10b 0b01 	add.w	fp, fp, #1
 8009b44:	dd06      	ble.n	8009b54 <__hexnan+0xfc>
 8009b46:	4544      	cmp	r4, r8
 8009b48:	d9c3      	bls.n	8009ad2 <__hexnan+0x7a>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b50:	2501      	movs	r5, #1
 8009b52:	3c04      	subs	r4, #4
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	f000 000f 	and.w	r0, r0, #15
 8009b5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009b5e:	6022      	str	r2, [r4, #0]
 8009b60:	e7b7      	b.n	8009ad2 <__hexnan+0x7a>
 8009b62:	2508      	movs	r5, #8
 8009b64:	e7b5      	b.n	8009ad2 <__hexnan+0x7a>
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0df      	beq.n	8009b2c <__hexnan+0xd4>
 8009b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b70:	f1c3 0320 	rsb	r3, r3, #32
 8009b74:	fa22 f303 	lsr.w	r3, r2, r3
 8009b78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b7c:	401a      	ands	r2, r3
 8009b7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b82:	e7d3      	b.n	8009b2c <__hexnan+0xd4>
 8009b84:	3f04      	subs	r7, #4
 8009b86:	e7d1      	b.n	8009b2c <__hexnan+0xd4>
 8009b88:	2004      	movs	r0, #4
 8009b8a:	b007      	add	sp, #28
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b90 <_localeconv_r>:
 8009b90:	4800      	ldr	r0, [pc, #0]	; (8009b94 <_localeconv_r+0x4>)
 8009b92:	4770      	bx	lr
 8009b94:	20000164 	.word	0x20000164

08009b98 <__swhatbuf_r>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	460e      	mov	r6, r1
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	b096      	sub	sp, #88	; 0x58
 8009ba4:	4614      	mov	r4, r2
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	da08      	bge.n	8009bbc <__swhatbuf_r+0x24>
 8009baa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	602a      	str	r2, [r5, #0]
 8009bb2:	061a      	lsls	r2, r3, #24
 8009bb4:	d410      	bmi.n	8009bd8 <__swhatbuf_r+0x40>
 8009bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bba:	e00e      	b.n	8009bda <__swhatbuf_r+0x42>
 8009bbc:	466a      	mov	r2, sp
 8009bbe:	f001 f881 	bl	800acc4 <_fstat_r>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	dbf1      	blt.n	8009baa <__swhatbuf_r+0x12>
 8009bc6:	9a01      	ldr	r2, [sp, #4]
 8009bc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bd0:	425a      	negs	r2, r3
 8009bd2:	415a      	adcs	r2, r3
 8009bd4:	602a      	str	r2, [r5, #0]
 8009bd6:	e7ee      	b.n	8009bb6 <__swhatbuf_r+0x1e>
 8009bd8:	2340      	movs	r3, #64	; 0x40
 8009bda:	2000      	movs	r0, #0
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	b016      	add	sp, #88	; 0x58
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009be4 <__smakebuf_r>:
 8009be4:	898b      	ldrh	r3, [r1, #12]
 8009be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009be8:	079d      	lsls	r5, r3, #30
 8009bea:	4606      	mov	r6, r0
 8009bec:	460c      	mov	r4, r1
 8009bee:	d507      	bpl.n	8009c00 <__smakebuf_r+0x1c>
 8009bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	6123      	str	r3, [r4, #16]
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	6163      	str	r3, [r4, #20]
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	ab01      	add	r3, sp, #4
 8009c02:	466a      	mov	r2, sp
 8009c04:	f7ff ffc8 	bl	8009b98 <__swhatbuf_r>
 8009c08:	9900      	ldr	r1, [sp, #0]
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f000 fdaf 	bl	800a770 <_malloc_r>
 8009c12:	b948      	cbnz	r0, 8009c28 <__smakebuf_r+0x44>
 8009c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c18:	059a      	lsls	r2, r3, #22
 8009c1a:	d4ef      	bmi.n	8009bfc <__smakebuf_r+0x18>
 8009c1c:	f023 0303 	bic.w	r3, r3, #3
 8009c20:	f043 0302 	orr.w	r3, r3, #2
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	e7e3      	b.n	8009bf0 <__smakebuf_r+0xc>
 8009c28:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <__smakebuf_r+0x7c>)
 8009c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	6020      	str	r0, [r4, #0]
 8009c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	6163      	str	r3, [r4, #20]
 8009c3a:	9b01      	ldr	r3, [sp, #4]
 8009c3c:	6120      	str	r0, [r4, #16]
 8009c3e:	b15b      	cbz	r3, 8009c58 <__smakebuf_r+0x74>
 8009c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c44:	4630      	mov	r0, r6
 8009c46:	f001 f84f 	bl	800ace8 <_isatty_r>
 8009c4a:	b128      	cbz	r0, 8009c58 <__smakebuf_r+0x74>
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f023 0303 	bic.w	r3, r3, #3
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	89a0      	ldrh	r0, [r4, #12]
 8009c5a:	4305      	orrs	r5, r0
 8009c5c:	81a5      	strh	r5, [r4, #12]
 8009c5e:	e7cd      	b.n	8009bfc <__smakebuf_r+0x18>
 8009c60:	08009311 	.word	0x08009311

08009c64 <malloc>:
 8009c64:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <malloc+0xc>)
 8009c66:	4601      	mov	r1, r0
 8009c68:	6818      	ldr	r0, [r3, #0]
 8009c6a:	f000 bd81 	b.w	800a770 <_malloc_r>
 8009c6e:	bf00      	nop
 8009c70:	2000000c 	.word	0x2000000c

08009c74 <__ascii_mbtowc>:
 8009c74:	b082      	sub	sp, #8
 8009c76:	b901      	cbnz	r1, 8009c7a <__ascii_mbtowc+0x6>
 8009c78:	a901      	add	r1, sp, #4
 8009c7a:	b142      	cbz	r2, 8009c8e <__ascii_mbtowc+0x1a>
 8009c7c:	b14b      	cbz	r3, 8009c92 <__ascii_mbtowc+0x1e>
 8009c7e:	7813      	ldrb	r3, [r2, #0]
 8009c80:	600b      	str	r3, [r1, #0]
 8009c82:	7812      	ldrb	r2, [r2, #0]
 8009c84:	1e10      	subs	r0, r2, #0
 8009c86:	bf18      	it	ne
 8009c88:	2001      	movne	r0, #1
 8009c8a:	b002      	add	sp, #8
 8009c8c:	4770      	bx	lr
 8009c8e:	4610      	mov	r0, r2
 8009c90:	e7fb      	b.n	8009c8a <__ascii_mbtowc+0x16>
 8009c92:	f06f 0001 	mvn.w	r0, #1
 8009c96:	e7f8      	b.n	8009c8a <__ascii_mbtowc+0x16>

08009c98 <memcpy>:
 8009c98:	440a      	add	r2, r1
 8009c9a:	4291      	cmp	r1, r2
 8009c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ca0:	d100      	bne.n	8009ca4 <memcpy+0xc>
 8009ca2:	4770      	bx	lr
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cae:	4291      	cmp	r1, r2
 8009cb0:	d1f9      	bne.n	8009ca6 <memcpy+0xe>
 8009cb2:	bd10      	pop	{r4, pc}

08009cb4 <memmove>:
 8009cb4:	4288      	cmp	r0, r1
 8009cb6:	b510      	push	{r4, lr}
 8009cb8:	eb01 0402 	add.w	r4, r1, r2
 8009cbc:	d902      	bls.n	8009cc4 <memmove+0x10>
 8009cbe:	4284      	cmp	r4, r0
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	d807      	bhi.n	8009cd4 <memmove+0x20>
 8009cc4:	1e43      	subs	r3, r0, #1
 8009cc6:	42a1      	cmp	r1, r4
 8009cc8:	d008      	beq.n	8009cdc <memmove+0x28>
 8009cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cd2:	e7f8      	b.n	8009cc6 <memmove+0x12>
 8009cd4:	4402      	add	r2, r0
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	428a      	cmp	r2, r1
 8009cda:	d100      	bne.n	8009cde <memmove+0x2a>
 8009cdc:	bd10      	pop	{r4, pc}
 8009cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ce6:	e7f7      	b.n	8009cd8 <memmove+0x24>

08009ce8 <_Balloc>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cec:	4604      	mov	r4, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	b976      	cbnz	r6, 8009d10 <_Balloc+0x28>
 8009cf2:	2010      	movs	r0, #16
 8009cf4:	f7ff ffb6 	bl	8009c64 <malloc>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	6260      	str	r0, [r4, #36]	; 0x24
 8009cfc:	b920      	cbnz	r0, 8009d08 <_Balloc+0x20>
 8009cfe:	4b18      	ldr	r3, [pc, #96]	; (8009d60 <_Balloc+0x78>)
 8009d00:	4818      	ldr	r0, [pc, #96]	; (8009d64 <_Balloc+0x7c>)
 8009d02:	2166      	movs	r1, #102	; 0x66
 8009d04:	f000 ffb0 	bl	800ac68 <__assert_func>
 8009d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d0c:	6006      	str	r6, [r0, #0]
 8009d0e:	60c6      	str	r6, [r0, #12]
 8009d10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d12:	68f3      	ldr	r3, [r6, #12]
 8009d14:	b183      	cbz	r3, 8009d38 <_Balloc+0x50>
 8009d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d1e:	b9b8      	cbnz	r0, 8009d50 <_Balloc+0x68>
 8009d20:	2101      	movs	r1, #1
 8009d22:	fa01 f605 	lsl.w	r6, r1, r5
 8009d26:	1d72      	adds	r2, r6, #5
 8009d28:	0092      	lsls	r2, r2, #2
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fc9d 	bl	800a66a <_calloc_r>
 8009d30:	b160      	cbz	r0, 8009d4c <_Balloc+0x64>
 8009d32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d36:	e00e      	b.n	8009d56 <_Balloc+0x6e>
 8009d38:	2221      	movs	r2, #33	; 0x21
 8009d3a:	2104      	movs	r1, #4
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 fc94 	bl	800a66a <_calloc_r>
 8009d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d44:	60f0      	str	r0, [r6, #12]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e4      	bne.n	8009d16 <_Balloc+0x2e>
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	6802      	ldr	r2, [r0, #0]
 8009d52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d56:	2300      	movs	r3, #0
 8009d58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d5c:	e7f7      	b.n	8009d4e <_Balloc+0x66>
 8009d5e:	bf00      	nop
 8009d60:	0800b36e 	.word	0x0800b36e
 8009d64:	0800b4d0 	.word	0x0800b4d0

08009d68 <_Bfree>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	460c      	mov	r4, r1
 8009d70:	b976      	cbnz	r6, 8009d90 <_Bfree+0x28>
 8009d72:	2010      	movs	r0, #16
 8009d74:	f7ff ff76 	bl	8009c64 <malloc>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	6268      	str	r0, [r5, #36]	; 0x24
 8009d7c:	b920      	cbnz	r0, 8009d88 <_Bfree+0x20>
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <_Bfree+0x3c>)
 8009d80:	4809      	ldr	r0, [pc, #36]	; (8009da8 <_Bfree+0x40>)
 8009d82:	218a      	movs	r1, #138	; 0x8a
 8009d84:	f000 ff70 	bl	800ac68 <__assert_func>
 8009d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d8c:	6006      	str	r6, [r0, #0]
 8009d8e:	60c6      	str	r6, [r0, #12]
 8009d90:	b13c      	cbz	r4, 8009da2 <_Bfree+0x3a>
 8009d92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d94:	6862      	ldr	r2, [r4, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d9c:	6021      	str	r1, [r4, #0]
 8009d9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	0800b36e 	.word	0x0800b36e
 8009da8:	0800b4d0 	.word	0x0800b4d0

08009dac <__multadd>:
 8009dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db0:	690d      	ldr	r5, [r1, #16]
 8009db2:	4607      	mov	r7, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	461e      	mov	r6, r3
 8009db8:	f101 0c14 	add.w	ip, r1, #20
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	f8dc 3000 	ldr.w	r3, [ip]
 8009dc2:	b299      	uxth	r1, r3
 8009dc4:	fb02 6101 	mla	r1, r2, r1, r6
 8009dc8:	0c1e      	lsrs	r6, r3, #16
 8009dca:	0c0b      	lsrs	r3, r1, #16
 8009dcc:	fb02 3306 	mla	r3, r2, r6, r3
 8009dd0:	b289      	uxth	r1, r1
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dd8:	4285      	cmp	r5, r0
 8009dda:	f84c 1b04 	str.w	r1, [ip], #4
 8009dde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009de2:	dcec      	bgt.n	8009dbe <__multadd+0x12>
 8009de4:	b30e      	cbz	r6, 8009e2a <__multadd+0x7e>
 8009de6:	68a3      	ldr	r3, [r4, #8]
 8009de8:	42ab      	cmp	r3, r5
 8009dea:	dc19      	bgt.n	8009e20 <__multadd+0x74>
 8009dec:	6861      	ldr	r1, [r4, #4]
 8009dee:	4638      	mov	r0, r7
 8009df0:	3101      	adds	r1, #1
 8009df2:	f7ff ff79 	bl	8009ce8 <_Balloc>
 8009df6:	4680      	mov	r8, r0
 8009df8:	b928      	cbnz	r0, 8009e06 <__multadd+0x5a>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4b0c      	ldr	r3, [pc, #48]	; (8009e30 <__multadd+0x84>)
 8009dfe:	480d      	ldr	r0, [pc, #52]	; (8009e34 <__multadd+0x88>)
 8009e00:	21b5      	movs	r1, #181	; 0xb5
 8009e02:	f000 ff31 	bl	800ac68 <__assert_func>
 8009e06:	6922      	ldr	r2, [r4, #16]
 8009e08:	3202      	adds	r2, #2
 8009e0a:	f104 010c 	add.w	r1, r4, #12
 8009e0e:	0092      	lsls	r2, r2, #2
 8009e10:	300c      	adds	r0, #12
 8009e12:	f7ff ff41 	bl	8009c98 <memcpy>
 8009e16:	4621      	mov	r1, r4
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff ffa5 	bl	8009d68 <_Bfree>
 8009e1e:	4644      	mov	r4, r8
 8009e20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e24:	3501      	adds	r5, #1
 8009e26:	615e      	str	r6, [r3, #20]
 8009e28:	6125      	str	r5, [r4, #16]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e30:	0800b3e0 	.word	0x0800b3e0
 8009e34:	0800b4d0 	.word	0x0800b4d0

08009e38 <__s2b>:
 8009e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	4615      	mov	r5, r2
 8009e40:	461f      	mov	r7, r3
 8009e42:	2209      	movs	r2, #9
 8009e44:	3308      	adds	r3, #8
 8009e46:	4606      	mov	r6, r0
 8009e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	2201      	movs	r2, #1
 8009e50:	429a      	cmp	r2, r3
 8009e52:	db09      	blt.n	8009e68 <__s2b+0x30>
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff ff47 	bl	8009ce8 <_Balloc>
 8009e5a:	b940      	cbnz	r0, 8009e6e <__s2b+0x36>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	4b19      	ldr	r3, [pc, #100]	; (8009ec4 <__s2b+0x8c>)
 8009e60:	4819      	ldr	r0, [pc, #100]	; (8009ec8 <__s2b+0x90>)
 8009e62:	21ce      	movs	r1, #206	; 0xce
 8009e64:	f000 ff00 	bl	800ac68 <__assert_func>
 8009e68:	0052      	lsls	r2, r2, #1
 8009e6a:	3101      	adds	r1, #1
 8009e6c:	e7f0      	b.n	8009e50 <__s2b+0x18>
 8009e6e:	9b08      	ldr	r3, [sp, #32]
 8009e70:	6143      	str	r3, [r0, #20]
 8009e72:	2d09      	cmp	r5, #9
 8009e74:	f04f 0301 	mov.w	r3, #1
 8009e78:	6103      	str	r3, [r0, #16]
 8009e7a:	dd16      	ble.n	8009eaa <__s2b+0x72>
 8009e7c:	f104 0909 	add.w	r9, r4, #9
 8009e80:	46c8      	mov	r8, r9
 8009e82:	442c      	add	r4, r5
 8009e84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e88:	4601      	mov	r1, r0
 8009e8a:	3b30      	subs	r3, #48	; 0x30
 8009e8c:	220a      	movs	r2, #10
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7ff ff8c 	bl	8009dac <__multadd>
 8009e94:	45a0      	cmp	r8, r4
 8009e96:	d1f5      	bne.n	8009e84 <__s2b+0x4c>
 8009e98:	f1a5 0408 	sub.w	r4, r5, #8
 8009e9c:	444c      	add	r4, r9
 8009e9e:	1b2d      	subs	r5, r5, r4
 8009ea0:	1963      	adds	r3, r4, r5
 8009ea2:	42bb      	cmp	r3, r7
 8009ea4:	db04      	blt.n	8009eb0 <__s2b+0x78>
 8009ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eaa:	340a      	adds	r4, #10
 8009eac:	2509      	movs	r5, #9
 8009eae:	e7f6      	b.n	8009e9e <__s2b+0x66>
 8009eb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009eb4:	4601      	mov	r1, r0
 8009eb6:	3b30      	subs	r3, #48	; 0x30
 8009eb8:	220a      	movs	r2, #10
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff76 	bl	8009dac <__multadd>
 8009ec0:	e7ee      	b.n	8009ea0 <__s2b+0x68>
 8009ec2:	bf00      	nop
 8009ec4:	0800b3e0 	.word	0x0800b3e0
 8009ec8:	0800b4d0 	.word	0x0800b4d0

08009ecc <__hi0bits>:
 8009ecc:	0c03      	lsrs	r3, r0, #16
 8009ece:	041b      	lsls	r3, r3, #16
 8009ed0:	b9d3      	cbnz	r3, 8009f08 <__hi0bits+0x3c>
 8009ed2:	0400      	lsls	r0, r0, #16
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009eda:	bf04      	itt	eq
 8009edc:	0200      	lsleq	r0, r0, #8
 8009ede:	3308      	addeq	r3, #8
 8009ee0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ee4:	bf04      	itt	eq
 8009ee6:	0100      	lsleq	r0, r0, #4
 8009ee8:	3304      	addeq	r3, #4
 8009eea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009eee:	bf04      	itt	eq
 8009ef0:	0080      	lsleq	r0, r0, #2
 8009ef2:	3302      	addeq	r3, #2
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	db05      	blt.n	8009f04 <__hi0bits+0x38>
 8009ef8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009efc:	f103 0301 	add.w	r3, r3, #1
 8009f00:	bf08      	it	eq
 8009f02:	2320      	moveq	r3, #32
 8009f04:	4618      	mov	r0, r3
 8009f06:	4770      	bx	lr
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e7e4      	b.n	8009ed6 <__hi0bits+0xa>

08009f0c <__lo0bits>:
 8009f0c:	6803      	ldr	r3, [r0, #0]
 8009f0e:	f013 0207 	ands.w	r2, r3, #7
 8009f12:	4601      	mov	r1, r0
 8009f14:	d00b      	beq.n	8009f2e <__lo0bits+0x22>
 8009f16:	07da      	lsls	r2, r3, #31
 8009f18:	d423      	bmi.n	8009f62 <__lo0bits+0x56>
 8009f1a:	0798      	lsls	r0, r3, #30
 8009f1c:	bf49      	itett	mi
 8009f1e:	085b      	lsrmi	r3, r3, #1
 8009f20:	089b      	lsrpl	r3, r3, #2
 8009f22:	2001      	movmi	r0, #1
 8009f24:	600b      	strmi	r3, [r1, #0]
 8009f26:	bf5c      	itt	pl
 8009f28:	600b      	strpl	r3, [r1, #0]
 8009f2a:	2002      	movpl	r0, #2
 8009f2c:	4770      	bx	lr
 8009f2e:	b298      	uxth	r0, r3
 8009f30:	b9a8      	cbnz	r0, 8009f5e <__lo0bits+0x52>
 8009f32:	0c1b      	lsrs	r3, r3, #16
 8009f34:	2010      	movs	r0, #16
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	b90a      	cbnz	r2, 8009f3e <__lo0bits+0x32>
 8009f3a:	3008      	adds	r0, #8
 8009f3c:	0a1b      	lsrs	r3, r3, #8
 8009f3e:	071a      	lsls	r2, r3, #28
 8009f40:	bf04      	itt	eq
 8009f42:	091b      	lsreq	r3, r3, #4
 8009f44:	3004      	addeq	r0, #4
 8009f46:	079a      	lsls	r2, r3, #30
 8009f48:	bf04      	itt	eq
 8009f4a:	089b      	lsreq	r3, r3, #2
 8009f4c:	3002      	addeq	r0, #2
 8009f4e:	07da      	lsls	r2, r3, #31
 8009f50:	d403      	bmi.n	8009f5a <__lo0bits+0x4e>
 8009f52:	085b      	lsrs	r3, r3, #1
 8009f54:	f100 0001 	add.w	r0, r0, #1
 8009f58:	d005      	beq.n	8009f66 <__lo0bits+0x5a>
 8009f5a:	600b      	str	r3, [r1, #0]
 8009f5c:	4770      	bx	lr
 8009f5e:	4610      	mov	r0, r2
 8009f60:	e7e9      	b.n	8009f36 <__lo0bits+0x2a>
 8009f62:	2000      	movs	r0, #0
 8009f64:	4770      	bx	lr
 8009f66:	2020      	movs	r0, #32
 8009f68:	4770      	bx	lr
	...

08009f6c <__i2b>:
 8009f6c:	b510      	push	{r4, lr}
 8009f6e:	460c      	mov	r4, r1
 8009f70:	2101      	movs	r1, #1
 8009f72:	f7ff feb9 	bl	8009ce8 <_Balloc>
 8009f76:	4602      	mov	r2, r0
 8009f78:	b928      	cbnz	r0, 8009f86 <__i2b+0x1a>
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <__i2b+0x24>)
 8009f7c:	4805      	ldr	r0, [pc, #20]	; (8009f94 <__i2b+0x28>)
 8009f7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f82:	f000 fe71 	bl	800ac68 <__assert_func>
 8009f86:	2301      	movs	r3, #1
 8009f88:	6144      	str	r4, [r0, #20]
 8009f8a:	6103      	str	r3, [r0, #16]
 8009f8c:	bd10      	pop	{r4, pc}
 8009f8e:	bf00      	nop
 8009f90:	0800b3e0 	.word	0x0800b3e0
 8009f94:	0800b4d0 	.word	0x0800b4d0

08009f98 <__multiply>:
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	4691      	mov	r9, r2
 8009f9e:	690a      	ldr	r2, [r1, #16]
 8009fa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	bfb8      	it	lt
 8009fa8:	460b      	movlt	r3, r1
 8009faa:	460c      	mov	r4, r1
 8009fac:	bfbc      	itt	lt
 8009fae:	464c      	movlt	r4, r9
 8009fb0:	4699      	movlt	r9, r3
 8009fb2:	6927      	ldr	r7, [r4, #16]
 8009fb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fb8:	68a3      	ldr	r3, [r4, #8]
 8009fba:	6861      	ldr	r1, [r4, #4]
 8009fbc:	eb07 060a 	add.w	r6, r7, sl
 8009fc0:	42b3      	cmp	r3, r6
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	bfb8      	it	lt
 8009fc6:	3101      	addlt	r1, #1
 8009fc8:	f7ff fe8e 	bl	8009ce8 <_Balloc>
 8009fcc:	b930      	cbnz	r0, 8009fdc <__multiply+0x44>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	4b44      	ldr	r3, [pc, #272]	; (800a0e4 <__multiply+0x14c>)
 8009fd2:	4845      	ldr	r0, [pc, #276]	; (800a0e8 <__multiply+0x150>)
 8009fd4:	f240 115d 	movw	r1, #349	; 0x15d
 8009fd8:	f000 fe46 	bl	800ac68 <__assert_func>
 8009fdc:	f100 0514 	add.w	r5, r0, #20
 8009fe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	4543      	cmp	r3, r8
 8009fea:	d321      	bcc.n	800a030 <__multiply+0x98>
 8009fec:	f104 0314 	add.w	r3, r4, #20
 8009ff0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ff4:	f109 0314 	add.w	r3, r9, #20
 8009ff8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ffc:	9202      	str	r2, [sp, #8]
 8009ffe:	1b3a      	subs	r2, r7, r4
 800a000:	3a15      	subs	r2, #21
 800a002:	f022 0203 	bic.w	r2, r2, #3
 800a006:	3204      	adds	r2, #4
 800a008:	f104 0115 	add.w	r1, r4, #21
 800a00c:	428f      	cmp	r7, r1
 800a00e:	bf38      	it	cc
 800a010:	2204      	movcc	r2, #4
 800a012:	9201      	str	r2, [sp, #4]
 800a014:	9a02      	ldr	r2, [sp, #8]
 800a016:	9303      	str	r3, [sp, #12]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d80c      	bhi.n	800a036 <__multiply+0x9e>
 800a01c:	2e00      	cmp	r6, #0
 800a01e:	dd03      	ble.n	800a028 <__multiply+0x90>
 800a020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a024:	2b00      	cmp	r3, #0
 800a026:	d05a      	beq.n	800a0de <__multiply+0x146>
 800a028:	6106      	str	r6, [r0, #16]
 800a02a:	b005      	add	sp, #20
 800a02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a030:	f843 2b04 	str.w	r2, [r3], #4
 800a034:	e7d8      	b.n	8009fe8 <__multiply+0x50>
 800a036:	f8b3 a000 	ldrh.w	sl, [r3]
 800a03a:	f1ba 0f00 	cmp.w	sl, #0
 800a03e:	d024      	beq.n	800a08a <__multiply+0xf2>
 800a040:	f104 0e14 	add.w	lr, r4, #20
 800a044:	46a9      	mov	r9, r5
 800a046:	f04f 0c00 	mov.w	ip, #0
 800a04a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a04e:	f8d9 1000 	ldr.w	r1, [r9]
 800a052:	fa1f fb82 	uxth.w	fp, r2
 800a056:	b289      	uxth	r1, r1
 800a058:	fb0a 110b 	mla	r1, sl, fp, r1
 800a05c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a060:	f8d9 2000 	ldr.w	r2, [r9]
 800a064:	4461      	add	r1, ip
 800a066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a06a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a06e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a072:	b289      	uxth	r1, r1
 800a074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a078:	4577      	cmp	r7, lr
 800a07a:	f849 1b04 	str.w	r1, [r9], #4
 800a07e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a082:	d8e2      	bhi.n	800a04a <__multiply+0xb2>
 800a084:	9a01      	ldr	r2, [sp, #4]
 800a086:	f845 c002 	str.w	ip, [r5, r2]
 800a08a:	9a03      	ldr	r2, [sp, #12]
 800a08c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a090:	3304      	adds	r3, #4
 800a092:	f1b9 0f00 	cmp.w	r9, #0
 800a096:	d020      	beq.n	800a0da <__multiply+0x142>
 800a098:	6829      	ldr	r1, [r5, #0]
 800a09a:	f104 0c14 	add.w	ip, r4, #20
 800a09e:	46ae      	mov	lr, r5
 800a0a0:	f04f 0a00 	mov.w	sl, #0
 800a0a4:	f8bc b000 	ldrh.w	fp, [ip]
 800a0a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0ac:	fb09 220b 	mla	r2, r9, fp, r2
 800a0b0:	4492      	add	sl, r2
 800a0b2:	b289      	uxth	r1, r1
 800a0b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0b8:	f84e 1b04 	str.w	r1, [lr], #4
 800a0bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0c0:	f8be 1000 	ldrh.w	r1, [lr]
 800a0c4:	0c12      	lsrs	r2, r2, #16
 800a0c6:	fb09 1102 	mla	r1, r9, r2, r1
 800a0ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0ce:	4567      	cmp	r7, ip
 800a0d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0d4:	d8e6      	bhi.n	800a0a4 <__multiply+0x10c>
 800a0d6:	9a01      	ldr	r2, [sp, #4]
 800a0d8:	50a9      	str	r1, [r5, r2]
 800a0da:	3504      	adds	r5, #4
 800a0dc:	e79a      	b.n	800a014 <__multiply+0x7c>
 800a0de:	3e01      	subs	r6, #1
 800a0e0:	e79c      	b.n	800a01c <__multiply+0x84>
 800a0e2:	bf00      	nop
 800a0e4:	0800b3e0 	.word	0x0800b3e0
 800a0e8:	0800b4d0 	.word	0x0800b4d0

0800a0ec <__pow5mult>:
 800a0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f0:	4615      	mov	r5, r2
 800a0f2:	f012 0203 	ands.w	r2, r2, #3
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	d007      	beq.n	800a10c <__pow5mult+0x20>
 800a0fc:	4c25      	ldr	r4, [pc, #148]	; (800a194 <__pow5mult+0xa8>)
 800a0fe:	3a01      	subs	r2, #1
 800a100:	2300      	movs	r3, #0
 800a102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a106:	f7ff fe51 	bl	8009dac <__multadd>
 800a10a:	4607      	mov	r7, r0
 800a10c:	10ad      	asrs	r5, r5, #2
 800a10e:	d03d      	beq.n	800a18c <__pow5mult+0xa0>
 800a110:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a112:	b97c      	cbnz	r4, 800a134 <__pow5mult+0x48>
 800a114:	2010      	movs	r0, #16
 800a116:	f7ff fda5 	bl	8009c64 <malloc>
 800a11a:	4602      	mov	r2, r0
 800a11c:	6270      	str	r0, [r6, #36]	; 0x24
 800a11e:	b928      	cbnz	r0, 800a12c <__pow5mult+0x40>
 800a120:	4b1d      	ldr	r3, [pc, #116]	; (800a198 <__pow5mult+0xac>)
 800a122:	481e      	ldr	r0, [pc, #120]	; (800a19c <__pow5mult+0xb0>)
 800a124:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a128:	f000 fd9e 	bl	800ac68 <__assert_func>
 800a12c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a130:	6004      	str	r4, [r0, #0]
 800a132:	60c4      	str	r4, [r0, #12]
 800a134:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a13c:	b94c      	cbnz	r4, 800a152 <__pow5mult+0x66>
 800a13e:	f240 2171 	movw	r1, #625	; 0x271
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff ff12 	bl	8009f6c <__i2b>
 800a148:	2300      	movs	r3, #0
 800a14a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a14e:	4604      	mov	r4, r0
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	f04f 0900 	mov.w	r9, #0
 800a156:	07eb      	lsls	r3, r5, #31
 800a158:	d50a      	bpl.n	800a170 <__pow5mult+0x84>
 800a15a:	4639      	mov	r1, r7
 800a15c:	4622      	mov	r2, r4
 800a15e:	4630      	mov	r0, r6
 800a160:	f7ff ff1a 	bl	8009f98 <__multiply>
 800a164:	4639      	mov	r1, r7
 800a166:	4680      	mov	r8, r0
 800a168:	4630      	mov	r0, r6
 800a16a:	f7ff fdfd 	bl	8009d68 <_Bfree>
 800a16e:	4647      	mov	r7, r8
 800a170:	106d      	asrs	r5, r5, #1
 800a172:	d00b      	beq.n	800a18c <__pow5mult+0xa0>
 800a174:	6820      	ldr	r0, [r4, #0]
 800a176:	b938      	cbnz	r0, 800a188 <__pow5mult+0x9c>
 800a178:	4622      	mov	r2, r4
 800a17a:	4621      	mov	r1, r4
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7ff ff0b 	bl	8009f98 <__multiply>
 800a182:	6020      	str	r0, [r4, #0]
 800a184:	f8c0 9000 	str.w	r9, [r0]
 800a188:	4604      	mov	r4, r0
 800a18a:	e7e4      	b.n	800a156 <__pow5mult+0x6a>
 800a18c:	4638      	mov	r0, r7
 800a18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a192:	bf00      	nop
 800a194:	0800b620 	.word	0x0800b620
 800a198:	0800b36e 	.word	0x0800b36e
 800a19c:	0800b4d0 	.word	0x0800b4d0

0800a1a0 <__lshift>:
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	6849      	ldr	r1, [r1, #4]
 800a1a8:	6923      	ldr	r3, [r4, #16]
 800a1aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ae:	68a3      	ldr	r3, [r4, #8]
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	4691      	mov	r9, r2
 800a1b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1b8:	f108 0601 	add.w	r6, r8, #1
 800a1bc:	42b3      	cmp	r3, r6
 800a1be:	db0b      	blt.n	800a1d8 <__lshift+0x38>
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff fd91 	bl	8009ce8 <_Balloc>
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	b948      	cbnz	r0, 800a1de <__lshift+0x3e>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	4b2a      	ldr	r3, [pc, #168]	; (800a278 <__lshift+0xd8>)
 800a1ce:	482b      	ldr	r0, [pc, #172]	; (800a27c <__lshift+0xdc>)
 800a1d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1d4:	f000 fd48 	bl	800ac68 <__assert_func>
 800a1d8:	3101      	adds	r1, #1
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	e7ee      	b.n	800a1bc <__lshift+0x1c>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f100 0114 	add.w	r1, r0, #20
 800a1e4:	f100 0210 	add.w	r2, r0, #16
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	4553      	cmp	r3, sl
 800a1ec:	db37      	blt.n	800a25e <__lshift+0xbe>
 800a1ee:	6920      	ldr	r0, [r4, #16]
 800a1f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1f4:	f104 0314 	add.w	r3, r4, #20
 800a1f8:	f019 091f 	ands.w	r9, r9, #31
 800a1fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a200:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a204:	d02f      	beq.n	800a266 <__lshift+0xc6>
 800a206:	f1c9 0e20 	rsb	lr, r9, #32
 800a20a:	468a      	mov	sl, r1
 800a20c:	f04f 0c00 	mov.w	ip, #0
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	fa02 f209 	lsl.w	r2, r2, r9
 800a216:	ea42 020c 	orr.w	r2, r2, ip
 800a21a:	f84a 2b04 	str.w	r2, [sl], #4
 800a21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a222:	4298      	cmp	r0, r3
 800a224:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a228:	d8f2      	bhi.n	800a210 <__lshift+0x70>
 800a22a:	1b03      	subs	r3, r0, r4
 800a22c:	3b15      	subs	r3, #21
 800a22e:	f023 0303 	bic.w	r3, r3, #3
 800a232:	3304      	adds	r3, #4
 800a234:	f104 0215 	add.w	r2, r4, #21
 800a238:	4290      	cmp	r0, r2
 800a23a:	bf38      	it	cc
 800a23c:	2304      	movcc	r3, #4
 800a23e:	f841 c003 	str.w	ip, [r1, r3]
 800a242:	f1bc 0f00 	cmp.w	ip, #0
 800a246:	d001      	beq.n	800a24c <__lshift+0xac>
 800a248:	f108 0602 	add.w	r6, r8, #2
 800a24c:	3e01      	subs	r6, #1
 800a24e:	4638      	mov	r0, r7
 800a250:	612e      	str	r6, [r5, #16]
 800a252:	4621      	mov	r1, r4
 800a254:	f7ff fd88 	bl	8009d68 <_Bfree>
 800a258:	4628      	mov	r0, r5
 800a25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a262:	3301      	adds	r3, #1
 800a264:	e7c1      	b.n	800a1ea <__lshift+0x4a>
 800a266:	3904      	subs	r1, #4
 800a268:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a270:	4298      	cmp	r0, r3
 800a272:	d8f9      	bhi.n	800a268 <__lshift+0xc8>
 800a274:	e7ea      	b.n	800a24c <__lshift+0xac>
 800a276:	bf00      	nop
 800a278:	0800b3e0 	.word	0x0800b3e0
 800a27c:	0800b4d0 	.word	0x0800b4d0

0800a280 <__mcmp>:
 800a280:	b530      	push	{r4, r5, lr}
 800a282:	6902      	ldr	r2, [r0, #16]
 800a284:	690c      	ldr	r4, [r1, #16]
 800a286:	1b12      	subs	r2, r2, r4
 800a288:	d10e      	bne.n	800a2a8 <__mcmp+0x28>
 800a28a:	f100 0314 	add.w	r3, r0, #20
 800a28e:	3114      	adds	r1, #20
 800a290:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a294:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a298:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a29c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2a0:	42a5      	cmp	r5, r4
 800a2a2:	d003      	beq.n	800a2ac <__mcmp+0x2c>
 800a2a4:	d305      	bcc.n	800a2b2 <__mcmp+0x32>
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	bd30      	pop	{r4, r5, pc}
 800a2ac:	4283      	cmp	r3, r0
 800a2ae:	d3f3      	bcc.n	800a298 <__mcmp+0x18>
 800a2b0:	e7fa      	b.n	800a2a8 <__mcmp+0x28>
 800a2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b6:	e7f7      	b.n	800a2a8 <__mcmp+0x28>

0800a2b8 <__mdiff>:
 800a2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	460c      	mov	r4, r1
 800a2be:	4606      	mov	r6, r0
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	4690      	mov	r8, r2
 800a2c6:	f7ff ffdb 	bl	800a280 <__mcmp>
 800a2ca:	1e05      	subs	r5, r0, #0
 800a2cc:	d110      	bne.n	800a2f0 <__mdiff+0x38>
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7ff fd09 	bl	8009ce8 <_Balloc>
 800a2d6:	b930      	cbnz	r0, 800a2e6 <__mdiff+0x2e>
 800a2d8:	4b3a      	ldr	r3, [pc, #232]	; (800a3c4 <__mdiff+0x10c>)
 800a2da:	4602      	mov	r2, r0
 800a2dc:	f240 2132 	movw	r1, #562	; 0x232
 800a2e0:	4839      	ldr	r0, [pc, #228]	; (800a3c8 <__mdiff+0x110>)
 800a2e2:	f000 fcc1 	bl	800ac68 <__assert_func>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	bfa4      	itt	ge
 800a2f2:	4643      	movge	r3, r8
 800a2f4:	46a0      	movge	r8, r4
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2fc:	bfa6      	itte	ge
 800a2fe:	461c      	movge	r4, r3
 800a300:	2500      	movge	r5, #0
 800a302:	2501      	movlt	r5, #1
 800a304:	f7ff fcf0 	bl	8009ce8 <_Balloc>
 800a308:	b920      	cbnz	r0, 800a314 <__mdiff+0x5c>
 800a30a:	4b2e      	ldr	r3, [pc, #184]	; (800a3c4 <__mdiff+0x10c>)
 800a30c:	4602      	mov	r2, r0
 800a30e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a312:	e7e5      	b.n	800a2e0 <__mdiff+0x28>
 800a314:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a318:	6926      	ldr	r6, [r4, #16]
 800a31a:	60c5      	str	r5, [r0, #12]
 800a31c:	f104 0914 	add.w	r9, r4, #20
 800a320:	f108 0514 	add.w	r5, r8, #20
 800a324:	f100 0e14 	add.w	lr, r0, #20
 800a328:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a32c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a330:	f108 0210 	add.w	r2, r8, #16
 800a334:	46f2      	mov	sl, lr
 800a336:	2100      	movs	r1, #0
 800a338:	f859 3b04 	ldr.w	r3, [r9], #4
 800a33c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a340:	fa1f f883 	uxth.w	r8, r3
 800a344:	fa11 f18b 	uxtah	r1, r1, fp
 800a348:	0c1b      	lsrs	r3, r3, #16
 800a34a:	eba1 0808 	sub.w	r8, r1, r8
 800a34e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a352:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a356:	fa1f f888 	uxth.w	r8, r8
 800a35a:	1419      	asrs	r1, r3, #16
 800a35c:	454e      	cmp	r6, r9
 800a35e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a362:	f84a 3b04 	str.w	r3, [sl], #4
 800a366:	d8e7      	bhi.n	800a338 <__mdiff+0x80>
 800a368:	1b33      	subs	r3, r6, r4
 800a36a:	3b15      	subs	r3, #21
 800a36c:	f023 0303 	bic.w	r3, r3, #3
 800a370:	3304      	adds	r3, #4
 800a372:	3415      	adds	r4, #21
 800a374:	42a6      	cmp	r6, r4
 800a376:	bf38      	it	cc
 800a378:	2304      	movcc	r3, #4
 800a37a:	441d      	add	r5, r3
 800a37c:	4473      	add	r3, lr
 800a37e:	469e      	mov	lr, r3
 800a380:	462e      	mov	r6, r5
 800a382:	4566      	cmp	r6, ip
 800a384:	d30e      	bcc.n	800a3a4 <__mdiff+0xec>
 800a386:	f10c 0203 	add.w	r2, ip, #3
 800a38a:	1b52      	subs	r2, r2, r5
 800a38c:	f022 0203 	bic.w	r2, r2, #3
 800a390:	3d03      	subs	r5, #3
 800a392:	45ac      	cmp	ip, r5
 800a394:	bf38      	it	cc
 800a396:	2200      	movcc	r2, #0
 800a398:	441a      	add	r2, r3
 800a39a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a39e:	b17b      	cbz	r3, 800a3c0 <__mdiff+0x108>
 800a3a0:	6107      	str	r7, [r0, #16]
 800a3a2:	e7a3      	b.n	800a2ec <__mdiff+0x34>
 800a3a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3a8:	fa11 f288 	uxtah	r2, r1, r8
 800a3ac:	1414      	asrs	r4, r2, #16
 800a3ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3b8:	f84e 2b04 	str.w	r2, [lr], #4
 800a3bc:	1421      	asrs	r1, r4, #16
 800a3be:	e7e0      	b.n	800a382 <__mdiff+0xca>
 800a3c0:	3f01      	subs	r7, #1
 800a3c2:	e7ea      	b.n	800a39a <__mdiff+0xe2>
 800a3c4:	0800b3e0 	.word	0x0800b3e0
 800a3c8:	0800b4d0 	.word	0x0800b4d0

0800a3cc <__ulp>:
 800a3cc:	b082      	sub	sp, #8
 800a3ce:	ed8d 0b00 	vstr	d0, [sp]
 800a3d2:	9b01      	ldr	r3, [sp, #4]
 800a3d4:	4912      	ldr	r1, [pc, #72]	; (800a420 <__ulp+0x54>)
 800a3d6:	4019      	ands	r1, r3
 800a3d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	dd05      	ble.n	800a3ec <__ulp+0x20>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	ec43 2b10 	vmov	d0, r2, r3
 800a3e8:	b002      	add	sp, #8
 800a3ea:	4770      	bx	lr
 800a3ec:	4249      	negs	r1, r1
 800a3ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a3f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	f04f 0300 	mov.w	r3, #0
 800a3fe:	da04      	bge.n	800a40a <__ulp+0x3e>
 800a400:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a404:	fa41 f300 	asr.w	r3, r1, r0
 800a408:	e7ec      	b.n	800a3e4 <__ulp+0x18>
 800a40a:	f1a0 0114 	sub.w	r1, r0, #20
 800a40e:	291e      	cmp	r1, #30
 800a410:	bfda      	itte	le
 800a412:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a416:	fa20 f101 	lsrle.w	r1, r0, r1
 800a41a:	2101      	movgt	r1, #1
 800a41c:	460a      	mov	r2, r1
 800a41e:	e7e1      	b.n	800a3e4 <__ulp+0x18>
 800a420:	7ff00000 	.word	0x7ff00000

0800a424 <__b2d>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	6905      	ldr	r5, [r0, #16]
 800a428:	f100 0714 	add.w	r7, r0, #20
 800a42c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a430:	1f2e      	subs	r6, r5, #4
 800a432:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a436:	4620      	mov	r0, r4
 800a438:	f7ff fd48 	bl	8009ecc <__hi0bits>
 800a43c:	f1c0 0320 	rsb	r3, r0, #32
 800a440:	280a      	cmp	r0, #10
 800a442:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a4c0 <__b2d+0x9c>
 800a446:	600b      	str	r3, [r1, #0]
 800a448:	dc14      	bgt.n	800a474 <__b2d+0x50>
 800a44a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a44e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a452:	42b7      	cmp	r7, r6
 800a454:	ea41 030c 	orr.w	r3, r1, ip
 800a458:	bf34      	ite	cc
 800a45a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a45e:	2100      	movcs	r1, #0
 800a460:	3015      	adds	r0, #21
 800a462:	fa04 f000 	lsl.w	r0, r4, r0
 800a466:	fa21 f10e 	lsr.w	r1, r1, lr
 800a46a:	ea40 0201 	orr.w	r2, r0, r1
 800a46e:	ec43 2b10 	vmov	d0, r2, r3
 800a472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a474:	42b7      	cmp	r7, r6
 800a476:	bf3a      	itte	cc
 800a478:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a47c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a480:	2100      	movcs	r1, #0
 800a482:	380b      	subs	r0, #11
 800a484:	d017      	beq.n	800a4b6 <__b2d+0x92>
 800a486:	f1c0 0c20 	rsb	ip, r0, #32
 800a48a:	fa04 f500 	lsl.w	r5, r4, r0
 800a48e:	42be      	cmp	r6, r7
 800a490:	fa21 f40c 	lsr.w	r4, r1, ip
 800a494:	ea45 0504 	orr.w	r5, r5, r4
 800a498:	bf8c      	ite	hi
 800a49a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a49e:	2400      	movls	r4, #0
 800a4a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a4a4:	fa01 f000 	lsl.w	r0, r1, r0
 800a4a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a4ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a4b0:	ea40 0204 	orr.w	r2, r0, r4
 800a4b4:	e7db      	b.n	800a46e <__b2d+0x4a>
 800a4b6:	ea44 030c 	orr.w	r3, r4, ip
 800a4ba:	460a      	mov	r2, r1
 800a4bc:	e7d7      	b.n	800a46e <__b2d+0x4a>
 800a4be:	bf00      	nop
 800a4c0:	3ff00000 	.word	0x3ff00000

0800a4c4 <__d2b>:
 800a4c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	4689      	mov	r9, r1
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	ec57 6b10 	vmov	r6, r7, d0
 800a4d0:	4690      	mov	r8, r2
 800a4d2:	f7ff fc09 	bl	8009ce8 <_Balloc>
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	b930      	cbnz	r0, 800a4e8 <__d2b+0x24>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	4b25      	ldr	r3, [pc, #148]	; (800a574 <__d2b+0xb0>)
 800a4de:	4826      	ldr	r0, [pc, #152]	; (800a578 <__d2b+0xb4>)
 800a4e0:	f240 310a 	movw	r1, #778	; 0x30a
 800a4e4:	f000 fbc0 	bl	800ac68 <__assert_func>
 800a4e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a4ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4f0:	bb35      	cbnz	r5, 800a540 <__d2b+0x7c>
 800a4f2:	2e00      	cmp	r6, #0
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	d028      	beq.n	800a54a <__d2b+0x86>
 800a4f8:	4668      	mov	r0, sp
 800a4fa:	9600      	str	r6, [sp, #0]
 800a4fc:	f7ff fd06 	bl	8009f0c <__lo0bits>
 800a500:	9900      	ldr	r1, [sp, #0]
 800a502:	b300      	cbz	r0, 800a546 <__d2b+0x82>
 800a504:	9a01      	ldr	r2, [sp, #4]
 800a506:	f1c0 0320 	rsb	r3, r0, #32
 800a50a:	fa02 f303 	lsl.w	r3, r2, r3
 800a50e:	430b      	orrs	r3, r1
 800a510:	40c2      	lsrs	r2, r0
 800a512:	6163      	str	r3, [r4, #20]
 800a514:	9201      	str	r2, [sp, #4]
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	61a3      	str	r3, [r4, #24]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	bf14      	ite	ne
 800a51e:	2202      	movne	r2, #2
 800a520:	2201      	moveq	r2, #1
 800a522:	6122      	str	r2, [r4, #16]
 800a524:	b1d5      	cbz	r5, 800a55c <__d2b+0x98>
 800a526:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a52a:	4405      	add	r5, r0
 800a52c:	f8c9 5000 	str.w	r5, [r9]
 800a530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a534:	f8c8 0000 	str.w	r0, [r8]
 800a538:	4620      	mov	r0, r4
 800a53a:	b003      	add	sp, #12
 800a53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a544:	e7d5      	b.n	800a4f2 <__d2b+0x2e>
 800a546:	6161      	str	r1, [r4, #20]
 800a548:	e7e5      	b.n	800a516 <__d2b+0x52>
 800a54a:	a801      	add	r0, sp, #4
 800a54c:	f7ff fcde 	bl	8009f0c <__lo0bits>
 800a550:	9b01      	ldr	r3, [sp, #4]
 800a552:	6163      	str	r3, [r4, #20]
 800a554:	2201      	movs	r2, #1
 800a556:	6122      	str	r2, [r4, #16]
 800a558:	3020      	adds	r0, #32
 800a55a:	e7e3      	b.n	800a524 <__d2b+0x60>
 800a55c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a560:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a564:	f8c9 0000 	str.w	r0, [r9]
 800a568:	6918      	ldr	r0, [r3, #16]
 800a56a:	f7ff fcaf 	bl	8009ecc <__hi0bits>
 800a56e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a572:	e7df      	b.n	800a534 <__d2b+0x70>
 800a574:	0800b3e0 	.word	0x0800b3e0
 800a578:	0800b4d0 	.word	0x0800b4d0

0800a57c <__ratio>:
 800a57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	4688      	mov	r8, r1
 800a582:	4669      	mov	r1, sp
 800a584:	4681      	mov	r9, r0
 800a586:	f7ff ff4d 	bl	800a424 <__b2d>
 800a58a:	a901      	add	r1, sp, #4
 800a58c:	4640      	mov	r0, r8
 800a58e:	ec55 4b10 	vmov	r4, r5, d0
 800a592:	f7ff ff47 	bl	800a424 <__b2d>
 800a596:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a59a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a59e:	eba3 0c02 	sub.w	ip, r3, r2
 800a5a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a5ac:	ec51 0b10 	vmov	r0, r1, d0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bfd6      	itet	le
 800a5b4:	460a      	movle	r2, r1
 800a5b6:	462a      	movgt	r2, r5
 800a5b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5bc:	468b      	mov	fp, r1
 800a5be:	462f      	mov	r7, r5
 800a5c0:	bfd4      	ite	le
 800a5c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a5c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	ee10 2a10 	vmov	r2, s0
 800a5d0:	465b      	mov	r3, fp
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f6 f94a 	bl	800086c <__aeabi_ddiv>
 800a5d8:	ec41 0b10 	vmov	d0, r0, r1
 800a5dc:	b003      	add	sp, #12
 800a5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5e2 <__copybits>:
 800a5e2:	3901      	subs	r1, #1
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	1149      	asrs	r1, r1, #5
 800a5e8:	6914      	ldr	r4, [r2, #16]
 800a5ea:	3101      	adds	r1, #1
 800a5ec:	f102 0314 	add.w	r3, r2, #20
 800a5f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5f8:	1f05      	subs	r5, r0, #4
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	d30c      	bcc.n	800a618 <__copybits+0x36>
 800a5fe:	1aa3      	subs	r3, r4, r2
 800a600:	3b11      	subs	r3, #17
 800a602:	f023 0303 	bic.w	r3, r3, #3
 800a606:	3211      	adds	r2, #17
 800a608:	42a2      	cmp	r2, r4
 800a60a:	bf88      	it	hi
 800a60c:	2300      	movhi	r3, #0
 800a60e:	4418      	add	r0, r3
 800a610:	2300      	movs	r3, #0
 800a612:	4288      	cmp	r0, r1
 800a614:	d305      	bcc.n	800a622 <__copybits+0x40>
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	f853 6b04 	ldr.w	r6, [r3], #4
 800a61c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a620:	e7eb      	b.n	800a5fa <__copybits+0x18>
 800a622:	f840 3b04 	str.w	r3, [r0], #4
 800a626:	e7f4      	b.n	800a612 <__copybits+0x30>

0800a628 <__any_on>:
 800a628:	f100 0214 	add.w	r2, r0, #20
 800a62c:	6900      	ldr	r0, [r0, #16]
 800a62e:	114b      	asrs	r3, r1, #5
 800a630:	4298      	cmp	r0, r3
 800a632:	b510      	push	{r4, lr}
 800a634:	db11      	blt.n	800a65a <__any_on+0x32>
 800a636:	dd0a      	ble.n	800a64e <__any_on+0x26>
 800a638:	f011 011f 	ands.w	r1, r1, #31
 800a63c:	d007      	beq.n	800a64e <__any_on+0x26>
 800a63e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a642:	fa24 f001 	lsr.w	r0, r4, r1
 800a646:	fa00 f101 	lsl.w	r1, r0, r1
 800a64a:	428c      	cmp	r4, r1
 800a64c:	d10b      	bne.n	800a666 <__any_on+0x3e>
 800a64e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a652:	4293      	cmp	r3, r2
 800a654:	d803      	bhi.n	800a65e <__any_on+0x36>
 800a656:	2000      	movs	r0, #0
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	4603      	mov	r3, r0
 800a65c:	e7f7      	b.n	800a64e <__any_on+0x26>
 800a65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a662:	2900      	cmp	r1, #0
 800a664:	d0f5      	beq.n	800a652 <__any_on+0x2a>
 800a666:	2001      	movs	r0, #1
 800a668:	e7f6      	b.n	800a658 <__any_on+0x30>

0800a66a <_calloc_r>:
 800a66a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a66c:	fba1 2402 	umull	r2, r4, r1, r2
 800a670:	b94c      	cbnz	r4, 800a686 <_calloc_r+0x1c>
 800a672:	4611      	mov	r1, r2
 800a674:	9201      	str	r2, [sp, #4]
 800a676:	f000 f87b 	bl	800a770 <_malloc_r>
 800a67a:	9a01      	ldr	r2, [sp, #4]
 800a67c:	4605      	mov	r5, r0
 800a67e:	b930      	cbnz	r0, 800a68e <_calloc_r+0x24>
 800a680:	4628      	mov	r0, r5
 800a682:	b003      	add	sp, #12
 800a684:	bd30      	pop	{r4, r5, pc}
 800a686:	220c      	movs	r2, #12
 800a688:	6002      	str	r2, [r0, #0]
 800a68a:	2500      	movs	r5, #0
 800a68c:	e7f8      	b.n	800a680 <_calloc_r+0x16>
 800a68e:	4621      	mov	r1, r4
 800a690:	f7fb fecf 	bl	8006432 <memset>
 800a694:	e7f4      	b.n	800a680 <_calloc_r+0x16>
	...

0800a698 <_free_r>:
 800a698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a69a:	2900      	cmp	r1, #0
 800a69c:	d044      	beq.n	800a728 <_free_r+0x90>
 800a69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6a2:	9001      	str	r0, [sp, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a6aa:	bfb8      	it	lt
 800a6ac:	18e4      	addlt	r4, r4, r3
 800a6ae:	f000 fb3d 	bl	800ad2c <__malloc_lock>
 800a6b2:	4a1e      	ldr	r2, [pc, #120]	; (800a72c <_free_r+0x94>)
 800a6b4:	9801      	ldr	r0, [sp, #4]
 800a6b6:	6813      	ldr	r3, [r2, #0]
 800a6b8:	b933      	cbnz	r3, 800a6c8 <_free_r+0x30>
 800a6ba:	6063      	str	r3, [r4, #4]
 800a6bc:	6014      	str	r4, [r2, #0]
 800a6be:	b003      	add	sp, #12
 800a6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6c4:	f000 bb38 	b.w	800ad38 <__malloc_unlock>
 800a6c8:	42a3      	cmp	r3, r4
 800a6ca:	d908      	bls.n	800a6de <_free_r+0x46>
 800a6cc:	6825      	ldr	r5, [r4, #0]
 800a6ce:	1961      	adds	r1, r4, r5
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	bf01      	itttt	eq
 800a6d4:	6819      	ldreq	r1, [r3, #0]
 800a6d6:	685b      	ldreq	r3, [r3, #4]
 800a6d8:	1949      	addeq	r1, r1, r5
 800a6da:	6021      	streq	r1, [r4, #0]
 800a6dc:	e7ed      	b.n	800a6ba <_free_r+0x22>
 800a6de:	461a      	mov	r2, r3
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	b10b      	cbz	r3, 800a6e8 <_free_r+0x50>
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	d9fa      	bls.n	800a6de <_free_r+0x46>
 800a6e8:	6811      	ldr	r1, [r2, #0]
 800a6ea:	1855      	adds	r5, r2, r1
 800a6ec:	42a5      	cmp	r5, r4
 800a6ee:	d10b      	bne.n	800a708 <_free_r+0x70>
 800a6f0:	6824      	ldr	r4, [r4, #0]
 800a6f2:	4421      	add	r1, r4
 800a6f4:	1854      	adds	r4, r2, r1
 800a6f6:	42a3      	cmp	r3, r4
 800a6f8:	6011      	str	r1, [r2, #0]
 800a6fa:	d1e0      	bne.n	800a6be <_free_r+0x26>
 800a6fc:	681c      	ldr	r4, [r3, #0]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	6053      	str	r3, [r2, #4]
 800a702:	4421      	add	r1, r4
 800a704:	6011      	str	r1, [r2, #0]
 800a706:	e7da      	b.n	800a6be <_free_r+0x26>
 800a708:	d902      	bls.n	800a710 <_free_r+0x78>
 800a70a:	230c      	movs	r3, #12
 800a70c:	6003      	str	r3, [r0, #0]
 800a70e:	e7d6      	b.n	800a6be <_free_r+0x26>
 800a710:	6825      	ldr	r5, [r4, #0]
 800a712:	1961      	adds	r1, r4, r5
 800a714:	428b      	cmp	r3, r1
 800a716:	bf04      	itt	eq
 800a718:	6819      	ldreq	r1, [r3, #0]
 800a71a:	685b      	ldreq	r3, [r3, #4]
 800a71c:	6063      	str	r3, [r4, #4]
 800a71e:	bf04      	itt	eq
 800a720:	1949      	addeq	r1, r1, r5
 800a722:	6021      	streq	r1, [r4, #0]
 800a724:	6054      	str	r4, [r2, #4]
 800a726:	e7ca      	b.n	800a6be <_free_r+0x26>
 800a728:	b003      	add	sp, #12
 800a72a:	bd30      	pop	{r4, r5, pc}
 800a72c:	200006c0 	.word	0x200006c0

0800a730 <sbrk_aligned>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	4e0e      	ldr	r6, [pc, #56]	; (800a76c <sbrk_aligned+0x3c>)
 800a734:	460c      	mov	r4, r1
 800a736:	6831      	ldr	r1, [r6, #0]
 800a738:	4605      	mov	r5, r0
 800a73a:	b911      	cbnz	r1, 800a742 <sbrk_aligned+0x12>
 800a73c:	f000 fa20 	bl	800ab80 <_sbrk_r>
 800a740:	6030      	str	r0, [r6, #0]
 800a742:	4621      	mov	r1, r4
 800a744:	4628      	mov	r0, r5
 800a746:	f000 fa1b 	bl	800ab80 <_sbrk_r>
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d00a      	beq.n	800a764 <sbrk_aligned+0x34>
 800a74e:	1cc4      	adds	r4, r0, #3
 800a750:	f024 0403 	bic.w	r4, r4, #3
 800a754:	42a0      	cmp	r0, r4
 800a756:	d007      	beq.n	800a768 <sbrk_aligned+0x38>
 800a758:	1a21      	subs	r1, r4, r0
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 fa10 	bl	800ab80 <_sbrk_r>
 800a760:	3001      	adds	r0, #1
 800a762:	d101      	bne.n	800a768 <sbrk_aligned+0x38>
 800a764:	f04f 34ff 	mov.w	r4, #4294967295
 800a768:	4620      	mov	r0, r4
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	200006c4 	.word	0x200006c4

0800a770 <_malloc_r>:
 800a770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a774:	1ccd      	adds	r5, r1, #3
 800a776:	f025 0503 	bic.w	r5, r5, #3
 800a77a:	3508      	adds	r5, #8
 800a77c:	2d0c      	cmp	r5, #12
 800a77e:	bf38      	it	cc
 800a780:	250c      	movcc	r5, #12
 800a782:	2d00      	cmp	r5, #0
 800a784:	4607      	mov	r7, r0
 800a786:	db01      	blt.n	800a78c <_malloc_r+0x1c>
 800a788:	42a9      	cmp	r1, r5
 800a78a:	d905      	bls.n	800a798 <_malloc_r+0x28>
 800a78c:	230c      	movs	r3, #12
 800a78e:	603b      	str	r3, [r7, #0]
 800a790:	2600      	movs	r6, #0
 800a792:	4630      	mov	r0, r6
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a798:	4e2e      	ldr	r6, [pc, #184]	; (800a854 <_malloc_r+0xe4>)
 800a79a:	f000 fac7 	bl	800ad2c <__malloc_lock>
 800a79e:	6833      	ldr	r3, [r6, #0]
 800a7a0:	461c      	mov	r4, r3
 800a7a2:	bb34      	cbnz	r4, 800a7f2 <_malloc_r+0x82>
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f7ff ffc2 	bl	800a730 <sbrk_aligned>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	d14d      	bne.n	800a84e <_malloc_r+0xde>
 800a7b2:	6834      	ldr	r4, [r6, #0]
 800a7b4:	4626      	mov	r6, r4
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	d140      	bne.n	800a83c <_malloc_r+0xcc>
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4638      	mov	r0, r7
 800a7c0:	eb04 0803 	add.w	r8, r4, r3
 800a7c4:	f000 f9dc 	bl	800ab80 <_sbrk_r>
 800a7c8:	4580      	cmp	r8, r0
 800a7ca:	d13a      	bne.n	800a842 <_malloc_r+0xd2>
 800a7cc:	6821      	ldr	r1, [r4, #0]
 800a7ce:	3503      	adds	r5, #3
 800a7d0:	1a6d      	subs	r5, r5, r1
 800a7d2:	f025 0503 	bic.w	r5, r5, #3
 800a7d6:	3508      	adds	r5, #8
 800a7d8:	2d0c      	cmp	r5, #12
 800a7da:	bf38      	it	cc
 800a7dc:	250c      	movcc	r5, #12
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff ffa5 	bl	800a730 <sbrk_aligned>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d02b      	beq.n	800a842 <_malloc_r+0xd2>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	442b      	add	r3, r5
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	e00e      	b.n	800a810 <_malloc_r+0xa0>
 800a7f2:	6822      	ldr	r2, [r4, #0]
 800a7f4:	1b52      	subs	r2, r2, r5
 800a7f6:	d41e      	bmi.n	800a836 <_malloc_r+0xc6>
 800a7f8:	2a0b      	cmp	r2, #11
 800a7fa:	d916      	bls.n	800a82a <_malloc_r+0xba>
 800a7fc:	1961      	adds	r1, r4, r5
 800a7fe:	42a3      	cmp	r3, r4
 800a800:	6025      	str	r5, [r4, #0]
 800a802:	bf18      	it	ne
 800a804:	6059      	strne	r1, [r3, #4]
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	bf08      	it	eq
 800a80a:	6031      	streq	r1, [r6, #0]
 800a80c:	5162      	str	r2, [r4, r5]
 800a80e:	604b      	str	r3, [r1, #4]
 800a810:	4638      	mov	r0, r7
 800a812:	f104 060b 	add.w	r6, r4, #11
 800a816:	f000 fa8f 	bl	800ad38 <__malloc_unlock>
 800a81a:	f026 0607 	bic.w	r6, r6, #7
 800a81e:	1d23      	adds	r3, r4, #4
 800a820:	1af2      	subs	r2, r6, r3
 800a822:	d0b6      	beq.n	800a792 <_malloc_r+0x22>
 800a824:	1b9b      	subs	r3, r3, r6
 800a826:	50a3      	str	r3, [r4, r2]
 800a828:	e7b3      	b.n	800a792 <_malloc_r+0x22>
 800a82a:	6862      	ldr	r2, [r4, #4]
 800a82c:	42a3      	cmp	r3, r4
 800a82e:	bf0c      	ite	eq
 800a830:	6032      	streq	r2, [r6, #0]
 800a832:	605a      	strne	r2, [r3, #4]
 800a834:	e7ec      	b.n	800a810 <_malloc_r+0xa0>
 800a836:	4623      	mov	r3, r4
 800a838:	6864      	ldr	r4, [r4, #4]
 800a83a:	e7b2      	b.n	800a7a2 <_malloc_r+0x32>
 800a83c:	4634      	mov	r4, r6
 800a83e:	6876      	ldr	r6, [r6, #4]
 800a840:	e7b9      	b.n	800a7b6 <_malloc_r+0x46>
 800a842:	230c      	movs	r3, #12
 800a844:	603b      	str	r3, [r7, #0]
 800a846:	4638      	mov	r0, r7
 800a848:	f000 fa76 	bl	800ad38 <__malloc_unlock>
 800a84c:	e7a1      	b.n	800a792 <_malloc_r+0x22>
 800a84e:	6025      	str	r5, [r4, #0]
 800a850:	e7de      	b.n	800a810 <_malloc_r+0xa0>
 800a852:	bf00      	nop
 800a854:	200006c0 	.word	0x200006c0

0800a858 <_realloc_r>:
 800a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85c:	4680      	mov	r8, r0
 800a85e:	4614      	mov	r4, r2
 800a860:	460e      	mov	r6, r1
 800a862:	b921      	cbnz	r1, 800a86e <_realloc_r+0x16>
 800a864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	4611      	mov	r1, r2
 800a86a:	f7ff bf81 	b.w	800a770 <_malloc_r>
 800a86e:	b92a      	cbnz	r2, 800a87c <_realloc_r+0x24>
 800a870:	f7ff ff12 	bl	800a698 <_free_r>
 800a874:	4625      	mov	r5, r4
 800a876:	4628      	mov	r0, r5
 800a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87c:	f000 fa62 	bl	800ad44 <_malloc_usable_size_r>
 800a880:	4284      	cmp	r4, r0
 800a882:	4607      	mov	r7, r0
 800a884:	d802      	bhi.n	800a88c <_realloc_r+0x34>
 800a886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a88a:	d812      	bhi.n	800a8b2 <_realloc_r+0x5a>
 800a88c:	4621      	mov	r1, r4
 800a88e:	4640      	mov	r0, r8
 800a890:	f7ff ff6e 	bl	800a770 <_malloc_r>
 800a894:	4605      	mov	r5, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d0ed      	beq.n	800a876 <_realloc_r+0x1e>
 800a89a:	42bc      	cmp	r4, r7
 800a89c:	4622      	mov	r2, r4
 800a89e:	4631      	mov	r1, r6
 800a8a0:	bf28      	it	cs
 800a8a2:	463a      	movcs	r2, r7
 800a8a4:	f7ff f9f8 	bl	8009c98 <memcpy>
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	f7ff fef4 	bl	800a698 <_free_r>
 800a8b0:	e7e1      	b.n	800a876 <_realloc_r+0x1e>
 800a8b2:	4635      	mov	r5, r6
 800a8b4:	e7df      	b.n	800a876 <_realloc_r+0x1e>

0800a8b6 <__ssputs_r>:
 800a8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ba:	688e      	ldr	r6, [r1, #8]
 800a8bc:	429e      	cmp	r6, r3
 800a8be:	4682      	mov	sl, r0
 800a8c0:	460c      	mov	r4, r1
 800a8c2:	4690      	mov	r8, r2
 800a8c4:	461f      	mov	r7, r3
 800a8c6:	d838      	bhi.n	800a93a <__ssputs_r+0x84>
 800a8c8:	898a      	ldrh	r2, [r1, #12]
 800a8ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8ce:	d032      	beq.n	800a936 <__ssputs_r+0x80>
 800a8d0:	6825      	ldr	r5, [r4, #0]
 800a8d2:	6909      	ldr	r1, [r1, #16]
 800a8d4:	eba5 0901 	sub.w	r9, r5, r1
 800a8d8:	6965      	ldr	r5, [r4, #20]
 800a8da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	444b      	add	r3, r9
 800a8e6:	106d      	asrs	r5, r5, #1
 800a8e8:	429d      	cmp	r5, r3
 800a8ea:	bf38      	it	cc
 800a8ec:	461d      	movcc	r5, r3
 800a8ee:	0553      	lsls	r3, r2, #21
 800a8f0:	d531      	bpl.n	800a956 <__ssputs_r+0xa0>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7ff ff3c 	bl	800a770 <_malloc_r>
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	b950      	cbnz	r0, 800a912 <__ssputs_r+0x5c>
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	f8ca 3000 	str.w	r3, [sl]
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a908:	81a3      	strh	r3, [r4, #12]
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a912:	6921      	ldr	r1, [r4, #16]
 800a914:	464a      	mov	r2, r9
 800a916:	f7ff f9bf 	bl	8009c98 <memcpy>
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	6126      	str	r6, [r4, #16]
 800a928:	6165      	str	r5, [r4, #20]
 800a92a:	444e      	add	r6, r9
 800a92c:	eba5 0509 	sub.w	r5, r5, r9
 800a930:	6026      	str	r6, [r4, #0]
 800a932:	60a5      	str	r5, [r4, #8]
 800a934:	463e      	mov	r6, r7
 800a936:	42be      	cmp	r6, r7
 800a938:	d900      	bls.n	800a93c <__ssputs_r+0x86>
 800a93a:	463e      	mov	r6, r7
 800a93c:	6820      	ldr	r0, [r4, #0]
 800a93e:	4632      	mov	r2, r6
 800a940:	4641      	mov	r1, r8
 800a942:	f7ff f9b7 	bl	8009cb4 <memmove>
 800a946:	68a3      	ldr	r3, [r4, #8]
 800a948:	1b9b      	subs	r3, r3, r6
 800a94a:	60a3      	str	r3, [r4, #8]
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	4433      	add	r3, r6
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	2000      	movs	r0, #0
 800a954:	e7db      	b.n	800a90e <__ssputs_r+0x58>
 800a956:	462a      	mov	r2, r5
 800a958:	f7ff ff7e 	bl	800a858 <_realloc_r>
 800a95c:	4606      	mov	r6, r0
 800a95e:	2800      	cmp	r0, #0
 800a960:	d1e1      	bne.n	800a926 <__ssputs_r+0x70>
 800a962:	6921      	ldr	r1, [r4, #16]
 800a964:	4650      	mov	r0, sl
 800a966:	f7ff fe97 	bl	800a698 <_free_r>
 800a96a:	e7c7      	b.n	800a8fc <__ssputs_r+0x46>

0800a96c <_svfiprintf_r>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	4698      	mov	r8, r3
 800a972:	898b      	ldrh	r3, [r1, #12]
 800a974:	061b      	lsls	r3, r3, #24
 800a976:	b09d      	sub	sp, #116	; 0x74
 800a978:	4607      	mov	r7, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	4614      	mov	r4, r2
 800a97e:	d50e      	bpl.n	800a99e <_svfiprintf_r+0x32>
 800a980:	690b      	ldr	r3, [r1, #16]
 800a982:	b963      	cbnz	r3, 800a99e <_svfiprintf_r+0x32>
 800a984:	2140      	movs	r1, #64	; 0x40
 800a986:	f7ff fef3 	bl	800a770 <_malloc_r>
 800a98a:	6028      	str	r0, [r5, #0]
 800a98c:	6128      	str	r0, [r5, #16]
 800a98e:	b920      	cbnz	r0, 800a99a <_svfiprintf_r+0x2e>
 800a990:	230c      	movs	r3, #12
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	e0d1      	b.n	800ab3e <_svfiprintf_r+0x1d2>
 800a99a:	2340      	movs	r3, #64	; 0x40
 800a99c:	616b      	str	r3, [r5, #20]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a2:	2320      	movs	r3, #32
 800a9a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ac:	2330      	movs	r3, #48	; 0x30
 800a9ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab58 <_svfiprintf_r+0x1ec>
 800a9b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9b6:	f04f 0901 	mov.w	r9, #1
 800a9ba:	4623      	mov	r3, r4
 800a9bc:	469a      	mov	sl, r3
 800a9be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c2:	b10a      	cbz	r2, 800a9c8 <_svfiprintf_r+0x5c>
 800a9c4:	2a25      	cmp	r2, #37	; 0x25
 800a9c6:	d1f9      	bne.n	800a9bc <_svfiprintf_r+0x50>
 800a9c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9cc:	d00b      	beq.n	800a9e6 <_svfiprintf_r+0x7a>
 800a9ce:	465b      	mov	r3, fp
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	f7ff ff6e 	bl	800a8b6 <__ssputs_r>
 800a9da:	3001      	adds	r0, #1
 800a9dc:	f000 80aa 	beq.w	800ab34 <_svfiprintf_r+0x1c8>
 800a9e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e2:	445a      	add	r2, fp
 800a9e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 80a2 	beq.w	800ab34 <_svfiprintf_r+0x1c8>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fa:	f10a 0a01 	add.w	sl, sl, #1
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	9307      	str	r3, [sp, #28]
 800aa02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa06:	931a      	str	r3, [sp, #104]	; 0x68
 800aa08:	4654      	mov	r4, sl
 800aa0a:	2205      	movs	r2, #5
 800aa0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa10:	4851      	ldr	r0, [pc, #324]	; (800ab58 <_svfiprintf_r+0x1ec>)
 800aa12:	f7f5 fbf5 	bl	8000200 <memchr>
 800aa16:	9a04      	ldr	r2, [sp, #16]
 800aa18:	b9d8      	cbnz	r0, 800aa52 <_svfiprintf_r+0xe6>
 800aa1a:	06d0      	lsls	r0, r2, #27
 800aa1c:	bf44      	itt	mi
 800aa1e:	2320      	movmi	r3, #32
 800aa20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa24:	0711      	lsls	r1, r2, #28
 800aa26:	bf44      	itt	mi
 800aa28:	232b      	movmi	r3, #43	; 0x2b
 800aa2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa2e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa32:	2b2a      	cmp	r3, #42	; 0x2a
 800aa34:	d015      	beq.n	800aa62 <_svfiprintf_r+0xf6>
 800aa36:	9a07      	ldr	r2, [sp, #28]
 800aa38:	4654      	mov	r4, sl
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	f04f 0c0a 	mov.w	ip, #10
 800aa40:	4621      	mov	r1, r4
 800aa42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa46:	3b30      	subs	r3, #48	; 0x30
 800aa48:	2b09      	cmp	r3, #9
 800aa4a:	d94e      	bls.n	800aaea <_svfiprintf_r+0x17e>
 800aa4c:	b1b0      	cbz	r0, 800aa7c <_svfiprintf_r+0x110>
 800aa4e:	9207      	str	r2, [sp, #28]
 800aa50:	e014      	b.n	800aa7c <_svfiprintf_r+0x110>
 800aa52:	eba0 0308 	sub.w	r3, r0, r8
 800aa56:	fa09 f303 	lsl.w	r3, r9, r3
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	9304      	str	r3, [sp, #16]
 800aa5e:	46a2      	mov	sl, r4
 800aa60:	e7d2      	b.n	800aa08 <_svfiprintf_r+0x9c>
 800aa62:	9b03      	ldr	r3, [sp, #12]
 800aa64:	1d19      	adds	r1, r3, #4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	9103      	str	r1, [sp, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	bfbb      	ittet	lt
 800aa6e:	425b      	neglt	r3, r3
 800aa70:	f042 0202 	orrlt.w	r2, r2, #2
 800aa74:	9307      	strge	r3, [sp, #28]
 800aa76:	9307      	strlt	r3, [sp, #28]
 800aa78:	bfb8      	it	lt
 800aa7a:	9204      	strlt	r2, [sp, #16]
 800aa7c:	7823      	ldrb	r3, [r4, #0]
 800aa7e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa80:	d10c      	bne.n	800aa9c <_svfiprintf_r+0x130>
 800aa82:	7863      	ldrb	r3, [r4, #1]
 800aa84:	2b2a      	cmp	r3, #42	; 0x2a
 800aa86:	d135      	bne.n	800aaf4 <_svfiprintf_r+0x188>
 800aa88:	9b03      	ldr	r3, [sp, #12]
 800aa8a:	1d1a      	adds	r2, r3, #4
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	9203      	str	r2, [sp, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	bfb8      	it	lt
 800aa94:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa98:	3402      	adds	r4, #2
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab68 <_svfiprintf_r+0x1fc>
 800aaa0:	7821      	ldrb	r1, [r4, #0]
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	4650      	mov	r0, sl
 800aaa6:	f7f5 fbab 	bl	8000200 <memchr>
 800aaaa:	b140      	cbz	r0, 800aabe <_svfiprintf_r+0x152>
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	eba0 000a 	sub.w	r0, r0, sl
 800aab2:	fa03 f000 	lsl.w	r0, r3, r0
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	4303      	orrs	r3, r0
 800aaba:	3401      	adds	r4, #1
 800aabc:	9304      	str	r3, [sp, #16]
 800aabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac2:	4826      	ldr	r0, [pc, #152]	; (800ab5c <_svfiprintf_r+0x1f0>)
 800aac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aac8:	2206      	movs	r2, #6
 800aaca:	f7f5 fb99 	bl	8000200 <memchr>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d038      	beq.n	800ab44 <_svfiprintf_r+0x1d8>
 800aad2:	4b23      	ldr	r3, [pc, #140]	; (800ab60 <_svfiprintf_r+0x1f4>)
 800aad4:	bb1b      	cbnz	r3, 800ab1e <_svfiprintf_r+0x1b2>
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	3307      	adds	r3, #7
 800aada:	f023 0307 	bic.w	r3, r3, #7
 800aade:	3308      	adds	r3, #8
 800aae0:	9303      	str	r3, [sp, #12]
 800aae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae4:	4433      	add	r3, r6
 800aae6:	9309      	str	r3, [sp, #36]	; 0x24
 800aae8:	e767      	b.n	800a9ba <_svfiprintf_r+0x4e>
 800aaea:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaee:	460c      	mov	r4, r1
 800aaf0:	2001      	movs	r0, #1
 800aaf2:	e7a5      	b.n	800aa40 <_svfiprintf_r+0xd4>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	3401      	adds	r4, #1
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	4619      	mov	r1, r3
 800aafc:	f04f 0c0a 	mov.w	ip, #10
 800ab00:	4620      	mov	r0, r4
 800ab02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab06:	3a30      	subs	r2, #48	; 0x30
 800ab08:	2a09      	cmp	r2, #9
 800ab0a:	d903      	bls.n	800ab14 <_svfiprintf_r+0x1a8>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d0c5      	beq.n	800aa9c <_svfiprintf_r+0x130>
 800ab10:	9105      	str	r1, [sp, #20]
 800ab12:	e7c3      	b.n	800aa9c <_svfiprintf_r+0x130>
 800ab14:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab18:	4604      	mov	r4, r0
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e7f0      	b.n	800ab00 <_svfiprintf_r+0x194>
 800ab1e:	ab03      	add	r3, sp, #12
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	462a      	mov	r2, r5
 800ab24:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <_svfiprintf_r+0x1f8>)
 800ab26:	a904      	add	r1, sp, #16
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7fb fe83 	bl	8006834 <_printf_float>
 800ab2e:	1c42      	adds	r2, r0, #1
 800ab30:	4606      	mov	r6, r0
 800ab32:	d1d6      	bne.n	800aae2 <_svfiprintf_r+0x176>
 800ab34:	89ab      	ldrh	r3, [r5, #12]
 800ab36:	065b      	lsls	r3, r3, #25
 800ab38:	f53f af2c 	bmi.w	800a994 <_svfiprintf_r+0x28>
 800ab3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab3e:	b01d      	add	sp, #116	; 0x74
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	ab03      	add	r3, sp, #12
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	462a      	mov	r2, r5
 800ab4a:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <_svfiprintf_r+0x1f8>)
 800ab4c:	a904      	add	r1, sp, #16
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f7fc f914 	bl	8006d7c <_printf_i>
 800ab54:	e7eb      	b.n	800ab2e <_svfiprintf_r+0x1c2>
 800ab56:	bf00      	nop
 800ab58:	0800b1c0 	.word	0x0800b1c0
 800ab5c:	0800b1ca 	.word	0x0800b1ca
 800ab60:	08006835 	.word	0x08006835
 800ab64:	0800a8b7 	.word	0x0800a8b7
 800ab68:	0800b1c6 	.word	0x0800b1c6
 800ab6c:	00000000 	.word	0x00000000

0800ab70 <nan>:
 800ab70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab78 <nan+0x8>
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	00000000 	.word	0x00000000
 800ab7c:	7ff80000 	.word	0x7ff80000

0800ab80 <_sbrk_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d06      	ldr	r5, [pc, #24]	; (800ab9c <_sbrk_r+0x1c>)
 800ab84:	2300      	movs	r3, #0
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	602b      	str	r3, [r5, #0]
 800ab8c:	f7fb fb88 	bl	80062a0 <_sbrk>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_sbrk_r+0x1a>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_sbrk_r+0x1a>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	200006c8 	.word	0x200006c8

0800aba0 <__sread>:
 800aba0:	b510      	push	{r4, lr}
 800aba2:	460c      	mov	r4, r1
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	f000 f8d4 	bl	800ad54 <_read_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	bfab      	itete	ge
 800abb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abb2:	89a3      	ldrhlt	r3, [r4, #12]
 800abb4:	181b      	addge	r3, r3, r0
 800abb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abba:	bfac      	ite	ge
 800abbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800abbe:	81a3      	strhlt	r3, [r4, #12]
 800abc0:	bd10      	pop	{r4, pc}

0800abc2 <__swrite>:
 800abc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc6:	461f      	mov	r7, r3
 800abc8:	898b      	ldrh	r3, [r1, #12]
 800abca:	05db      	lsls	r3, r3, #23
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	4616      	mov	r6, r2
 800abd2:	d505      	bpl.n	800abe0 <__swrite+0x1e>
 800abd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd8:	2302      	movs	r3, #2
 800abda:	2200      	movs	r2, #0
 800abdc:	f000 f894 	bl	800ad08 <_lseek_r>
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	4632      	mov	r2, r6
 800abee:	463b      	mov	r3, r7
 800abf0:	4628      	mov	r0, r5
 800abf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abf6:	f7fd bba9 	b.w	800834c <_write_r>

0800abfa <__sseek>:
 800abfa:	b510      	push	{r4, lr}
 800abfc:	460c      	mov	r4, r1
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f000 f881 	bl	800ad08 <_lseek_r>
 800ac06:	1c43      	adds	r3, r0, #1
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	bf15      	itete	ne
 800ac0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac16:	81a3      	strheq	r3, [r4, #12]
 800ac18:	bf18      	it	ne
 800ac1a:	81a3      	strhne	r3, [r4, #12]
 800ac1c:	bd10      	pop	{r4, pc}

0800ac1e <__sclose>:
 800ac1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac22:	f000 b83f 	b.w	800aca4 <_close_r>

0800ac26 <strncmp>:
 800ac26:	b510      	push	{r4, lr}
 800ac28:	b17a      	cbz	r2, 800ac4a <strncmp+0x24>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	3901      	subs	r1, #1
 800ac2e:	1884      	adds	r4, r0, r2
 800ac30:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac38:	4290      	cmp	r0, r2
 800ac3a:	d101      	bne.n	800ac40 <strncmp+0x1a>
 800ac3c:	42a3      	cmp	r3, r4
 800ac3e:	d101      	bne.n	800ac44 <strncmp+0x1e>
 800ac40:	1a80      	subs	r0, r0, r2
 800ac42:	bd10      	pop	{r4, pc}
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d1f3      	bne.n	800ac30 <strncmp+0xa>
 800ac48:	e7fa      	b.n	800ac40 <strncmp+0x1a>
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	e7f9      	b.n	800ac42 <strncmp+0x1c>

0800ac4e <__ascii_wctomb>:
 800ac4e:	b149      	cbz	r1, 800ac64 <__ascii_wctomb+0x16>
 800ac50:	2aff      	cmp	r2, #255	; 0xff
 800ac52:	bf85      	ittet	hi
 800ac54:	238a      	movhi	r3, #138	; 0x8a
 800ac56:	6003      	strhi	r3, [r0, #0]
 800ac58:	700a      	strbls	r2, [r1, #0]
 800ac5a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac5e:	bf98      	it	ls
 800ac60:	2001      	movls	r0, #1
 800ac62:	4770      	bx	lr
 800ac64:	4608      	mov	r0, r1
 800ac66:	4770      	bx	lr

0800ac68 <__assert_func>:
 800ac68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac6a:	4614      	mov	r4, r2
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <__assert_func+0x2c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4605      	mov	r5, r0
 800ac74:	68d8      	ldr	r0, [r3, #12]
 800ac76:	b14c      	cbz	r4, 800ac8c <__assert_func+0x24>
 800ac78:	4b07      	ldr	r3, [pc, #28]	; (800ac98 <__assert_func+0x30>)
 800ac7a:	9100      	str	r1, [sp, #0]
 800ac7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac80:	4906      	ldr	r1, [pc, #24]	; (800ac9c <__assert_func+0x34>)
 800ac82:	462b      	mov	r3, r5
 800ac84:	f7fb fb9c 	bl	80063c0 <fiprintf>
 800ac88:	f000 f876 	bl	800ad78 <abort>
 800ac8c:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <__assert_func+0x38>)
 800ac8e:	461c      	mov	r4, r3
 800ac90:	e7f3      	b.n	800ac7a <__assert_func+0x12>
 800ac92:	bf00      	nop
 800ac94:	2000000c 	.word	0x2000000c
 800ac98:	0800b62c 	.word	0x0800b62c
 800ac9c:	0800b639 	.word	0x0800b639
 800aca0:	0800b667 	.word	0x0800b667

0800aca4 <_close_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4d06      	ldr	r5, [pc, #24]	; (800acc0 <_close_r+0x1c>)
 800aca8:	2300      	movs	r3, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	4608      	mov	r0, r1
 800acae:	602b      	str	r3, [r5, #0]
 800acb0:	f7fb fac2 	bl	8006238 <_close>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d102      	bne.n	800acbe <_close_r+0x1a>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	b103      	cbz	r3, 800acbe <_close_r+0x1a>
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	200006c8 	.word	0x200006c8

0800acc4 <_fstat_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4d07      	ldr	r5, [pc, #28]	; (800ace4 <_fstat_r+0x20>)
 800acc8:	2300      	movs	r3, #0
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	602b      	str	r3, [r5, #0]
 800acd2:	f7fb fabd 	bl	8006250 <_fstat>
 800acd6:	1c43      	adds	r3, r0, #1
 800acd8:	d102      	bne.n	800ace0 <_fstat_r+0x1c>
 800acda:	682b      	ldr	r3, [r5, #0]
 800acdc:	b103      	cbz	r3, 800ace0 <_fstat_r+0x1c>
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	bd38      	pop	{r3, r4, r5, pc}
 800ace2:	bf00      	nop
 800ace4:	200006c8 	.word	0x200006c8

0800ace8 <_isatty_r>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4d06      	ldr	r5, [pc, #24]	; (800ad04 <_isatty_r+0x1c>)
 800acec:	2300      	movs	r3, #0
 800acee:	4604      	mov	r4, r0
 800acf0:	4608      	mov	r0, r1
 800acf2:	602b      	str	r3, [r5, #0]
 800acf4:	f7fb fabc 	bl	8006270 <_isatty>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_isatty_r+0x1a>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_isatty_r+0x1a>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	200006c8 	.word	0x200006c8

0800ad08 <_lseek_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d07      	ldr	r5, [pc, #28]	; (800ad28 <_lseek_r+0x20>)
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	4608      	mov	r0, r1
 800ad10:	4611      	mov	r1, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	602a      	str	r2, [r5, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	f7fb fab5 	bl	8006286 <_lseek>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_lseek_r+0x1e>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_lseek_r+0x1e>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	200006c8 	.word	0x200006c8

0800ad2c <__malloc_lock>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__malloc_lock+0x8>)
 800ad2e:	f7fb bb7e 	b.w	800642e <__retarget_lock_acquire_recursive>
 800ad32:	bf00      	nop
 800ad34:	200006bc 	.word	0x200006bc

0800ad38 <__malloc_unlock>:
 800ad38:	4801      	ldr	r0, [pc, #4]	; (800ad40 <__malloc_unlock+0x8>)
 800ad3a:	f7fb bb79 	b.w	8006430 <__retarget_lock_release_recursive>
 800ad3e:	bf00      	nop
 800ad40:	200006bc 	.word	0x200006bc

0800ad44 <_malloc_usable_size_r>:
 800ad44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad48:	1f18      	subs	r0, r3, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bfbc      	itt	lt
 800ad4e:	580b      	ldrlt	r3, [r1, r0]
 800ad50:	18c0      	addlt	r0, r0, r3
 800ad52:	4770      	bx	lr

0800ad54 <_read_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d07      	ldr	r5, [pc, #28]	; (800ad74 <_read_r+0x20>)
 800ad58:	4604      	mov	r4, r0
 800ad5a:	4608      	mov	r0, r1
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	2200      	movs	r2, #0
 800ad60:	602a      	str	r2, [r5, #0]
 800ad62:	461a      	mov	r2, r3
 800ad64:	f7fb fa20 	bl	80061a8 <_read>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_read_r+0x1e>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_read_r+0x1e>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	200006c8 	.word	0x200006c8

0800ad78 <abort>:
 800ad78:	b508      	push	{r3, lr}
 800ad7a:	2006      	movs	r0, #6
 800ad7c:	f000 f82c 	bl	800add8 <raise>
 800ad80:	2001      	movs	r0, #1
 800ad82:	f7fb fa07 	bl	8006194 <_exit>

0800ad86 <_raise_r>:
 800ad86:	291f      	cmp	r1, #31
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	d904      	bls.n	800ad9a <_raise_r+0x14>
 800ad90:	2316      	movs	r3, #22
 800ad92:	6003      	str	r3, [r0, #0]
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	bd38      	pop	{r3, r4, r5, pc}
 800ad9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad9c:	b112      	cbz	r2, 800ada4 <_raise_r+0x1e>
 800ad9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ada2:	b94b      	cbnz	r3, 800adb8 <_raise_r+0x32>
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 f831 	bl	800ae0c <_getpid_r>
 800adaa:	462a      	mov	r2, r5
 800adac:	4601      	mov	r1, r0
 800adae:	4620      	mov	r0, r4
 800adb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adb4:	f000 b818 	b.w	800ade8 <_kill_r>
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d00a      	beq.n	800add2 <_raise_r+0x4c>
 800adbc:	1c59      	adds	r1, r3, #1
 800adbe:	d103      	bne.n	800adc8 <_raise_r+0x42>
 800adc0:	2316      	movs	r3, #22
 800adc2:	6003      	str	r3, [r0, #0]
 800adc4:	2001      	movs	r0, #1
 800adc6:	e7e7      	b.n	800ad98 <_raise_r+0x12>
 800adc8:	2400      	movs	r4, #0
 800adca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adce:	4628      	mov	r0, r5
 800add0:	4798      	blx	r3
 800add2:	2000      	movs	r0, #0
 800add4:	e7e0      	b.n	800ad98 <_raise_r+0x12>
	...

0800add8 <raise>:
 800add8:	4b02      	ldr	r3, [pc, #8]	; (800ade4 <raise+0xc>)
 800adda:	4601      	mov	r1, r0
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	f7ff bfd2 	b.w	800ad86 <_raise_r>
 800ade2:	bf00      	nop
 800ade4:	2000000c 	.word	0x2000000c

0800ade8 <_kill_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d07      	ldr	r5, [pc, #28]	; (800ae08 <_kill_r+0x20>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	4611      	mov	r1, r2
 800adf4:	602b      	str	r3, [r5, #0]
 800adf6:	f7fb f9bd 	bl	8006174 <_kill>
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	d102      	bne.n	800ae04 <_kill_r+0x1c>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	b103      	cbz	r3, 800ae04 <_kill_r+0x1c>
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	bd38      	pop	{r3, r4, r5, pc}
 800ae06:	bf00      	nop
 800ae08:	200006c8 	.word	0x200006c8

0800ae0c <_getpid_r>:
 800ae0c:	f7fb b9aa 	b.w	8006164 <_getpid>

0800ae10 <_init>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr

0800ae1c <_fini>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr
